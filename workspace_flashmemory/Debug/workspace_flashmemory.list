
workspace_flashmemory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bc0  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002d70  08002d70  00012d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d88  08002d88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d88  08002d88  00012d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d90  08002d90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d90  08002d90  00012d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d94  08002d94  00012d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000c8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000d4  200000d4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a75e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ffb  00000000  00000000  0002a79a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a0  00000000  00000000  0002c798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008b8  00000000  00000000  0002d138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002325f  00000000  00000000  0002d9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c848  00000000  00000000  00050c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4373  00000000  00000000  0005d497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013180a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000253c  00000000  00000000  0013185c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002d58 	.word	0x08002d58

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08002d58 	.word	0x08002d58

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <MX_GPIO_Init+0x68>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a16      	ldr	r2, [pc, #88]	; (800055c <MX_GPIO_Init+0x68>)
 8000504:	f043 0304 	orr.w	r3, r3, #4
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <MX_GPIO_Init+0x68>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0304 	and.w	r3, r3, #4
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <MX_GPIO_Init+0x68>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a0f      	ldr	r2, [pc, #60]	; (800055c <MX_GPIO_Init+0x68>)
 8000520:	f043 0308 	orr.w	r3, r3, #8
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b0d      	ldr	r3, [pc, #52]	; (800055c <MX_GPIO_Init+0x68>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0308 	and.w	r3, r3, #8
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <MX_GPIO_Init+0x68>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a08      	ldr	r2, [pc, #32]	; (800055c <MX_GPIO_Init+0x68>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <MX_GPIO_Init+0x68>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

}
 800054e:	bf00      	nop
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40023800 	.word	0x40023800

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f000 fb9e 	bl	8000ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f866 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f7ff ffc2 	bl	80004f4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000570:	f000 fa48 	bl	8000a04 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000574:	f000 fafa 	bl	8000b6c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8000578:	f000 fd40 	bl	8000ffc <HAL_FLASH_Unlock>

  /* Erase the user Flash area
    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

  /* Get the 1st sector to erase */
  FirstSector = GetSector(FLASH_USER_START_ADDR);
 800057c:	4826      	ldr	r0, [pc, #152]	; (8000618 <main+0xb8>)
 800057e:	f000 f8cd 	bl	800071c <GetSector>
 8000582:	4603      	mov	r3, r0
 8000584:	4a25      	ldr	r2, [pc, #148]	; (800061c <main+0xbc>)
 8000586:	6013      	str	r3, [r2, #0]
  /* Get the number of sector to erase from 1st sector*/
  NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 8000588:	4825      	ldr	r0, [pc, #148]	; (8000620 <main+0xc0>)
 800058a:	f000 f9ff 	bl	800098c <GetSectorSize>
 800058e:	4602      	mov	r2, r0
 8000590:	4b24      	ldr	r3, [pc, #144]	; (8000624 <main+0xc4>)
 8000592:	4413      	add	r3, r2
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f8c1 	bl	800071c <GetSector>
 800059a:	4602      	mov	r2, r0
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <main+0xbc>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	3301      	adds	r3, #1
 80005a4:	4a20      	ldr	r2, [pc, #128]	; (8000628 <main+0xc8>)
 80005a6:	6013      	str	r3, [r2, #0]
  /* Fill EraseInit structure*/
  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80005a8:	4b20      	ldr	r3, [pc, #128]	; (800062c <main+0xcc>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80005ae:	4b1f      	ldr	r3, [pc, #124]	; (800062c <main+0xcc>)
 80005b0:	2202      	movs	r2, #2
 80005b2:	611a      	str	r2, [r3, #16]
  EraseInitStruct.Sector        = FirstSector;
 80005b4:	4b19      	ldr	r3, [pc, #100]	; (800061c <main+0xbc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a1c      	ldr	r2, [pc, #112]	; (800062c <main+0xcc>)
 80005ba:	6093      	str	r3, [r2, #8]
  EraseInitStruct.NbSectors     = NbOfSectors;
 80005bc:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <main+0xc8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a1a      	ldr	r2, [pc, #104]	; (800062c <main+0xcc>)
 80005c2:	60d3      	str	r3, [r2, #12]

  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
     you have to make sure that these data are rewritten before they are accessed during code
     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
     DCRST and ICRST bits in the FLASH_CR register. */
  if(HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80005c4:	491a      	ldr	r1, [pc, #104]	; (8000630 <main+0xd0>)
 80005c6:	4819      	ldr	r0, [pc, #100]	; (800062c <main+0xcc>)
 80005c8:	f000 fe8a 	bl	80012e0 <HAL_FLASHEx_Erase>
  }

  /* Program the user Flash area word by word
    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

  Address = FLASH_USER_START_ADDR;
 80005cc:	4b19      	ldr	r3, [pc, #100]	; (8000634 <main+0xd4>)
 80005ce:	4a12      	ldr	r2, [pc, #72]	; (8000618 <main+0xb8>)
 80005d0:	601a      	str	r2, [r3, #0]

  while(Address < FLASH_USER_END_ADDR)
 80005d2:	e00f      	b.n	80005f4 <main+0x94>
  {
    if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, DATA_32) == HAL_OK)
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <main+0xd4>)
 80005d6:	6819      	ldr	r1, [r3, #0]
 80005d8:	a30d      	add	r3, pc, #52	; (adr r3, 8000610 <main+0xb0>)
 80005da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005de:	2002      	movs	r0, #2
 80005e0:	f000 fcb8 	bl	8000f54 <HAL_FLASH_Program>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d104      	bne.n	80005f4 <main+0x94>
    {
      Address = Address + 4;
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <main+0xd4>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	3304      	adds	r3, #4
 80005f0:	4a10      	ldr	r2, [pc, #64]	; (8000634 <main+0xd4>)
 80005f2:	6013      	str	r3, [r2, #0]
  while(Address < FLASH_USER_END_ADDR)
 80005f4:	480a      	ldr	r0, [pc, #40]	; (8000620 <main+0xc0>)
 80005f6:	f000 f9c9 	bl	800098c <GetSectorSize>
 80005fa:	4602      	mov	r2, r0
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <main+0xc4>)
 80005fe:	4413      	add	r3, r2
 8000600:	4a0c      	ldr	r2, [pc, #48]	; (8000634 <main+0xd4>)
 8000602:	6812      	ldr	r2, [r2, #0]
 8000604:	4293      	cmp	r3, r2
 8000606:	d8e5      	bhi.n	80005d4 <main+0x74>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8000608:	f000 fd1a 	bl	8001040 <HAL_FLASH_Lock>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060c:	e7fe      	b.n	800060c <main+0xac>
 800060e:	bf00      	nop
 8000610:	12345678 	.word	0x12345678
 8000614:	00000000 	.word	0x00000000
 8000618:	0800c000 	.word	0x0800c000
 800061c:	2000003c 	.word	0x2000003c
 8000620:	081e0000 	.word	0x081e0000
 8000624:	081dffff 	.word	0x081dffff
 8000628:	20000040 	.word	0x20000040
 800062c:	20000028 	.word	0x20000028
 8000630:	20000048 	.word	0x20000048
 8000634:	20000044 	.word	0x20000044

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f002 fb7e 	bl	8002d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b2c      	ldr	r3, [pc, #176]	; (8000714 <SystemClock_Config+0xdc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a2b      	ldr	r2, [pc, #172]	; (8000714 <SystemClock_Config+0xdc>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b29      	ldr	r3, [pc, #164]	; (8000714 <SystemClock_Config+0xdc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <SystemClock_Config+0xe0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a25      	ldr	r2, [pc, #148]	; (8000718 <SystemClock_Config+0xe0>)
 8000682:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b23      	ldr	r3, [pc, #140]	; (8000718 <SystemClock_Config+0xe0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000694:	2306      	movs	r3, #6
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a0:	2310      	movs	r3, #16
 80006a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a4:	2302      	movs	r3, #2
 80006a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ac:	2308      	movs	r3, #8
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006b0:	23b4      	movs	r3, #180	; 0xb4
 80006b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b8:	2304      	movs	r3, #4
 80006ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f001 f949 	bl	8001958 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006cc:	f000 f994 	bl	80009f8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006d0:	f001 f8f2 	bl	80018b8 <HAL_PWREx_EnableOverDrive>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006da:	f000 f98d 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	230f      	movs	r3, #15
 80006e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2302      	movs	r3, #2
 80006e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2105      	movs	r1, #5
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 fba3 	bl	8001e48 <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000708:	f000 f976 	bl	80009f8 <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	3750      	adds	r7, #80	; 0x50
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <GetSector>:

/* USER CODE BEGIN 4 */
static uint32_t GetSector(uint32_t Address)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a82      	ldr	r2, [pc, #520]	; (8000934 <GetSector+0x218>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d206      	bcs.n	800073e <GetSector+0x22>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000736:	d302      	bcc.n	800073e <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	e0f3      	b.n	8000926 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a7d      	ldr	r2, [pc, #500]	; (8000938 <GetSector+0x21c>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d206      	bcs.n	8000754 <GetSector+0x38>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a7a      	ldr	r2, [pc, #488]	; (8000934 <GetSector+0x218>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d302      	bcc.n	8000754 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 800074e:	2301      	movs	r3, #1
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	e0e8      	b.n	8000926 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a79      	ldr	r2, [pc, #484]	; (800093c <GetSector+0x220>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d206      	bcs.n	800076a <GetSector+0x4e>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a76      	ldr	r2, [pc, #472]	; (8000938 <GetSector+0x21c>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d302      	bcc.n	800076a <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8000764:	2302      	movs	r3, #2
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	e0dd      	b.n	8000926 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a74      	ldr	r2, [pc, #464]	; (8000940 <GetSector+0x224>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d806      	bhi.n	8000780 <GetSector+0x64>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4a71      	ldr	r2, [pc, #452]	; (800093c <GetSector+0x220>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d302      	bcc.n	8000780 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 800077a:	2303      	movs	r3, #3
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	e0d2      	b.n	8000926 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a70      	ldr	r2, [pc, #448]	; (8000944 <GetSector+0x228>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d806      	bhi.n	8000796 <GetSector+0x7a>
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a6d      	ldr	r2, [pc, #436]	; (8000940 <GetSector+0x224>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d902      	bls.n	8000796 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8000790:	2304      	movs	r3, #4
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	e0c7      	b.n	8000926 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a6b      	ldr	r2, [pc, #428]	; (8000948 <GetSector+0x22c>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d806      	bhi.n	80007ac <GetSector+0x90>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a68      	ldr	r2, [pc, #416]	; (8000944 <GetSector+0x228>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d902      	bls.n	80007ac <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 80007a6:	2305      	movs	r3, #5
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	e0bc      	b.n	8000926 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a67      	ldr	r2, [pc, #412]	; (800094c <GetSector+0x230>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d806      	bhi.n	80007c2 <GetSector+0xa6>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a64      	ldr	r2, [pc, #400]	; (8000948 <GetSector+0x22c>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d902      	bls.n	80007c2 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 80007bc:	2306      	movs	r3, #6
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	e0b1      	b.n	8000926 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a62      	ldr	r2, [pc, #392]	; (8000950 <GetSector+0x234>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d806      	bhi.n	80007d8 <GetSector+0xbc>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a5f      	ldr	r2, [pc, #380]	; (800094c <GetSector+0x230>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d902      	bls.n	80007d8 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 80007d2:	2307      	movs	r3, #7
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	e0a6      	b.n	8000926 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a5e      	ldr	r2, [pc, #376]	; (8000954 <GetSector+0x238>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d806      	bhi.n	80007ee <GetSector+0xd2>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a5b      	ldr	r2, [pc, #364]	; (8000950 <GetSector+0x234>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d902      	bls.n	80007ee <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 80007e8:	2308      	movs	r3, #8
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	e09b      	b.n	8000926 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a59      	ldr	r2, [pc, #356]	; (8000958 <GetSector+0x23c>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d806      	bhi.n	8000804 <GetSector+0xe8>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a56      	ldr	r2, [pc, #344]	; (8000954 <GetSector+0x238>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d902      	bls.n	8000804 <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 80007fe:	2309      	movs	r3, #9
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	e090      	b.n	8000926 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a55      	ldr	r2, [pc, #340]	; (800095c <GetSector+0x240>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d806      	bhi.n	800081a <GetSector+0xfe>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a52      	ldr	r2, [pc, #328]	; (8000958 <GetSector+0x23c>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d902      	bls.n	800081a <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 8000814:	230a      	movs	r3, #10
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	e085      	b.n	8000926 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_12) && (Address >= ADDR_FLASH_SECTOR_11))
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000820:	d206      	bcs.n	8000830 <GetSector+0x114>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a4d      	ldr	r2, [pc, #308]	; (800095c <GetSector+0x240>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d902      	bls.n	8000830 <GetSector+0x114>
  {
    sector = FLASH_SECTOR_11;
 800082a:	230b      	movs	r3, #11
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	e07a      	b.n	8000926 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_13) && (Address >= ADDR_FLASH_SECTOR_12))
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a4b      	ldr	r2, [pc, #300]	; (8000960 <GetSector+0x244>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d206      	bcs.n	8000846 <GetSector+0x12a>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800083e:	d302      	bcc.n	8000846 <GetSector+0x12a>
  {
    sector = FLASH_SECTOR_12;
 8000840:	230c      	movs	r3, #12
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	e06f      	b.n	8000926 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_14) && (Address >= ADDR_FLASH_SECTOR_13))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a46      	ldr	r2, [pc, #280]	; (8000964 <GetSector+0x248>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d206      	bcs.n	800085c <GetSector+0x140>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a43      	ldr	r2, [pc, #268]	; (8000960 <GetSector+0x244>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d302      	bcc.n	800085c <GetSector+0x140>
  {
    sector = FLASH_SECTOR_13;
 8000856:	230d      	movs	r3, #13
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	e064      	b.n	8000926 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_15) && (Address >= ADDR_FLASH_SECTOR_14))
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a42      	ldr	r2, [pc, #264]	; (8000968 <GetSector+0x24c>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d206      	bcs.n	8000872 <GetSector+0x156>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a3f      	ldr	r2, [pc, #252]	; (8000964 <GetSector+0x248>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d302      	bcc.n	8000872 <GetSector+0x156>
  {
    sector = FLASH_SECTOR_14;
 800086c:	230e      	movs	r3, #14
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	e059      	b.n	8000926 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_16) && (Address >= ADDR_FLASH_SECTOR_15))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a3d      	ldr	r2, [pc, #244]	; (800096c <GetSector+0x250>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d806      	bhi.n	8000888 <GetSector+0x16c>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a3a      	ldr	r2, [pc, #232]	; (8000968 <GetSector+0x24c>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d302      	bcc.n	8000888 <GetSector+0x16c>
  {
    sector = FLASH_SECTOR_15;
 8000882:	230f      	movs	r3, #15
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	e04e      	b.n	8000926 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_17) && (Address >= ADDR_FLASH_SECTOR_16))
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a39      	ldr	r2, [pc, #228]	; (8000970 <GetSector+0x254>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d806      	bhi.n	800089e <GetSector+0x182>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a36      	ldr	r2, [pc, #216]	; (800096c <GetSector+0x250>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d902      	bls.n	800089e <GetSector+0x182>
  {
    sector = FLASH_SECTOR_16;
 8000898:	2310      	movs	r3, #16
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	e043      	b.n	8000926 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_18) && (Address >= ADDR_FLASH_SECTOR_17))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a34      	ldr	r2, [pc, #208]	; (8000974 <GetSector+0x258>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d806      	bhi.n	80008b4 <GetSector+0x198>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a31      	ldr	r2, [pc, #196]	; (8000970 <GetSector+0x254>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d902      	bls.n	80008b4 <GetSector+0x198>
  {
    sector = FLASH_SECTOR_17;
 80008ae:	2311      	movs	r3, #17
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	e038      	b.n	8000926 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_19) && (Address >= ADDR_FLASH_SECTOR_18))
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a30      	ldr	r2, [pc, #192]	; (8000978 <GetSector+0x25c>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d806      	bhi.n	80008ca <GetSector+0x1ae>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a2d      	ldr	r2, [pc, #180]	; (8000974 <GetSector+0x258>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d902      	bls.n	80008ca <GetSector+0x1ae>
  {
    sector = FLASH_SECTOR_18;
 80008c4:	2312      	movs	r3, #18
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	e02d      	b.n	8000926 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_20) && (Address >= ADDR_FLASH_SECTOR_19))
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a2b      	ldr	r2, [pc, #172]	; (800097c <GetSector+0x260>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d806      	bhi.n	80008e0 <GetSector+0x1c4>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a28      	ldr	r2, [pc, #160]	; (8000978 <GetSector+0x25c>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d902      	bls.n	80008e0 <GetSector+0x1c4>
  {
    sector = FLASH_SECTOR_19;
 80008da:	2313      	movs	r3, #19
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	e022      	b.n	8000926 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_21) && (Address >= ADDR_FLASH_SECTOR_20))
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a27      	ldr	r2, [pc, #156]	; (8000980 <GetSector+0x264>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d806      	bhi.n	80008f6 <GetSector+0x1da>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a24      	ldr	r2, [pc, #144]	; (800097c <GetSector+0x260>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d902      	bls.n	80008f6 <GetSector+0x1da>
  {
    sector = FLASH_SECTOR_20;
 80008f0:	2314      	movs	r3, #20
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	e017      	b.n	8000926 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_22) && (Address >= ADDR_FLASH_SECTOR_21))
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a22      	ldr	r2, [pc, #136]	; (8000984 <GetSector+0x268>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d806      	bhi.n	800090c <GetSector+0x1f0>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a1f      	ldr	r2, [pc, #124]	; (8000980 <GetSector+0x264>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d902      	bls.n	800090c <GetSector+0x1f0>
  {
    sector = FLASH_SECTOR_21;
 8000906:	2315      	movs	r3, #21
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	e00c      	b.n	8000926 <GetSector+0x20a>
  }
  else if((Address < ADDR_FLASH_SECTOR_23) && (Address >= ADDR_FLASH_SECTOR_22))
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a1e      	ldr	r2, [pc, #120]	; (8000988 <GetSector+0x26c>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d806      	bhi.n	8000922 <GetSector+0x206>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a1b      	ldr	r2, [pc, #108]	; (8000984 <GetSector+0x268>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d902      	bls.n	8000922 <GetSector+0x206>
  {
    sector = FLASH_SECTOR_22;
 800091c:	2316      	movs	r3, #22
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	e001      	b.n	8000926 <GetSector+0x20a>
  }
  else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_23) */
  {
    sector = FLASH_SECTOR_23;
 8000922:	2317      	movs	r3, #23
 8000924:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 8000926:	68fb      	ldr	r3, [r7, #12]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	08004000 	.word	0x08004000
 8000938:	08008000 	.word	0x08008000
 800093c:	0800c000 	.word	0x0800c000
 8000940:	0800ffff 	.word	0x0800ffff
 8000944:	0801ffff 	.word	0x0801ffff
 8000948:	0803ffff 	.word	0x0803ffff
 800094c:	0805ffff 	.word	0x0805ffff
 8000950:	0807ffff 	.word	0x0807ffff
 8000954:	0809ffff 	.word	0x0809ffff
 8000958:	080bffff 	.word	0x080bffff
 800095c:	080dffff 	.word	0x080dffff
 8000960:	08104000 	.word	0x08104000
 8000964:	08108000 	.word	0x08108000
 8000968:	0810c000 	.word	0x0810c000
 800096c:	0810ffff 	.word	0x0810ffff
 8000970:	0811ffff 	.word	0x0811ffff
 8000974:	0813ffff 	.word	0x0813ffff
 8000978:	0815ffff 	.word	0x0815ffff
 800097c:	0817ffff 	.word	0x0817ffff
 8000980:	0819ffff 	.word	0x0819ffff
 8000984:	081bffff 	.word	0x081bffff
 8000988:	081dffff 	.word	0x081dffff

0800098c <GetSectorSize>:


static uint32_t GetSectorSize(uint32_t Sector)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t sectorsize = 0x00;
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
  if((Sector == FLASH_SECTOR_0) || (Sector == FLASH_SECTOR_1) || (Sector == FLASH_SECTOR_2) ||\
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d014      	beq.n	80009c8 <GetSectorSize+0x3c>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d011      	beq.n	80009c8 <GetSectorSize+0x3c>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d00e      	beq.n	80009c8 <GetSectorSize+0x3c>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	d00b      	beq.n	80009c8 <GetSectorSize+0x3c>
     (Sector == FLASH_SECTOR_3) || (Sector == FLASH_SECTOR_12) || (Sector == FLASH_SECTOR_13) ||\
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b0c      	cmp	r3, #12
 80009b4:	d008      	beq.n	80009c8 <GetSectorSize+0x3c>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b0d      	cmp	r3, #13
 80009ba:	d005      	beq.n	80009c8 <GetSectorSize+0x3c>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b0e      	cmp	r3, #14
 80009c0:	d002      	beq.n	80009c8 <GetSectorSize+0x3c>
     (Sector == FLASH_SECTOR_14) || (Sector == FLASH_SECTOR_15))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d103      	bne.n	80009d0 <GetSectorSize+0x44>
  {
    sectorsize = 16 * 1024;
 80009c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	e00c      	b.n	80009ea <GetSectorSize+0x5e>
  }
  else if((Sector == FLASH_SECTOR_4) || (Sector == FLASH_SECTOR_16))
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	d002      	beq.n	80009dc <GetSectorSize+0x50>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b10      	cmp	r3, #16
 80009da:	d103      	bne.n	80009e4 <GetSectorSize+0x58>
  {
    sectorsize = 64 * 1024;
 80009dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	e002      	b.n	80009ea <GetSectorSize+0x5e>
  }
  else
  {
    sectorsize = 128 * 1024;
 80009e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009e8:	60fb      	str	r3, [r7, #12]
  }
  return sectorsize;
 80009ea:	68fb      	ldr	r3, [r7, #12]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <Error_Handler+0x8>
	...

08000a04 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_RTC_Init+0x44>)
 8000a0a:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <MX_RTC_Init+0x48>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_RTC_Init+0x44>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_RTC_Init+0x44>)
 8000a16:	227f      	movs	r2, #127	; 0x7f
 8000a18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_RTC_Init+0x44>)
 8000a1c:	22ff      	movs	r2, #255	; 0xff
 8000a1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_RTC_Init+0x44>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_RTC_Init+0x44>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_RTC_Init+0x44>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_RTC_Init+0x44>)
 8000a34:	f001 fda8 	bl	8002588 <HAL_RTC_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000a3e:	f7ff ffdb 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	2000004c 	.word	0x2000004c
 8000a4c:	40002800 	.word	0x40002800

08000a50 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08e      	sub	sp, #56	; 0x38
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	2230      	movs	r2, #48	; 0x30
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f002 f971 	bl	8002d48 <memset>
  if(rtcHandle->Instance==RTC)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a0c      	ldr	r2, [pc, #48]	; (8000a9c <HAL_RTC_MspInit+0x4c>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d111      	bne.n	8000a94 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a70:	2320      	movs	r3, #32
 8000a72:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000a74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a7a:	f107 0308 	add.w	r3, r7, #8
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 fbc2 	bl	8002208 <HAL_RCCEx_PeriphCLKConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000a8a:	f7ff ffb5 	bl	80009f8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <HAL_RTC_MspInit+0x50>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a94:	bf00      	nop
 8000a96:	3738      	adds	r7, #56	; 0x38
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40002800 	.word	0x40002800
 8000aa0:	42470e3c 	.word	0x42470e3c

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b40:	f000 f902 	bl	8000d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <SystemInit+0x20>)
 8000b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <SystemInit+0x20>)
 8000b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <MX_USART3_UART_Init+0x50>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000ba4:	f001 fdea 	bl	800277c <HAL_UART_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bae:	f7ff ff23 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2000006c 	.word	0x2000006c
 8000bbc:	40004800 	.word	0x40004800

08000bc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a19      	ldr	r2, [pc, #100]	; (8000c44 <HAL_UART_MspInit+0x84>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d12c      	bne.n	8000c3c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a17      	ldr	r2, [pc, #92]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a10      	ldr	r2, [pc, #64]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0308 	and.w	r3, r3, #8
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c2c:	2307      	movs	r3, #7
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <HAL_UART_MspInit+0x8c>)
 8000c38:	f000 fc92 	bl	8001560 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	; 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40004800 	.word	0x40004800
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020c00 	.word	0x40020c00

08000c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c88 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c56:	490e      	ldr	r1, [pc, #56]	; (8000c90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c58:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c6c:	4c0b      	ldr	r4, [pc, #44]	; (8000c9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c7a:	f7ff ff65 	bl	8000b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f002 f83f 	bl	8002d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c82:	f7ff fc6d 	bl	8000560 <main>
  bx  lr    
 8000c86:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c88:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c94:	08002d98 	.word	0x08002d98
  ldr r2, =_sbss
 8000c98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c9c:	200000d4 	.word	0x200000d4

08000ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC_IRQHandler>
	...

08000ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0d      	ldr	r2, [pc, #52]	; (8000ce4 <HAL_Init+0x40>)
 8000cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <HAL_Init+0x40>)
 8000cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_Init+0x40>)
 8000cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 f90d 	bl	8000eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd2:	200f      	movs	r0, #15
 8000cd4:	f000 f808 	bl	8000ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd8:	f7ff fee4 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023c00 	.word	0x40023c00

08000ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_InitTick+0x54>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_InitTick+0x58>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f917 	bl	8000f3a <HAL_SYSTICK_Config>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00e      	b.n	8000d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d80a      	bhi.n	8000d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f000 f8ed 	bl	8000f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d28:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <HAL_InitTick+0x5c>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e000      	b.n	8000d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000004 	.word	0x20000004

08000d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x20>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x24>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_IncTick+0x24>)
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	200000b0 	.word	0x200000b0

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	200000b0 	.word	0x200000b0

08000d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	60d3      	str	r3, [r2, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	; (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	; (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	; 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	; 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb8:	d301      	bcc.n	8000ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00f      	b.n	8000ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <SysTick_Config+0x40>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f7ff ff8e 	bl	8000dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed8:	2207      	movs	r2, #7
 8000eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	e000e010 	.word	0xe000e010

08000eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff47 	bl	8000d88 <__NVIC_SetPriorityGrouping>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f14:	f7ff ff5c 	bl	8000dd0 <__NVIC_GetPriorityGrouping>
 8000f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	6978      	ldr	r0, [r7, #20]
 8000f20:	f7ff ff8e 	bl	8000e40 <NVIC_EncodePriority>
 8000f24:	4602      	mov	r2, r0
 8000f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff5d 	bl	8000dec <__NVIC_SetPriority>
}
 8000f32:	bf00      	nop
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffb0 	bl	8000ea8 <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f66:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <HAL_FLASH_Program+0xa0>)
 8000f68:	7e1b      	ldrb	r3, [r3, #24]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d101      	bne.n	8000f72 <HAL_FLASH_Program+0x1e>
 8000f6e:	2302      	movs	r3, #2
 8000f70:	e03b      	b.n	8000fea <HAL_FLASH_Program+0x96>
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <HAL_FLASH_Program+0xa0>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f7c:	f000 f870 	bl	8001060 <FLASH_WaitForLastOperation>
 8000f80:	4603      	mov	r3, r0
 8000f82:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000f84:	7dfb      	ldrb	r3, [r7, #23]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d12b      	bne.n	8000fe2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d105      	bne.n	8000f9c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000f90:	783b      	ldrb	r3, [r7, #0]
 8000f92:	4619      	mov	r1, r3
 8000f94:	68b8      	ldr	r0, [r7, #8]
 8000f96:	f000 f91b 	bl	80011d0 <FLASH_Program_Byte>
 8000f9a:	e016      	b.n	8000fca <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d105      	bne.n	8000fae <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000fa2:	883b      	ldrh	r3, [r7, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	68b8      	ldr	r0, [r7, #8]
 8000fa8:	f000 f8ee 	bl	8001188 <FLASH_Program_HalfWord>
 8000fac:	e00d      	b.n	8000fca <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d105      	bne.n	8000fc0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	68b8      	ldr	r0, [r7, #8]
 8000fba:	f000 f8c3 	bl	8001144 <FLASH_Program_Word>
 8000fbe:	e004      	b.n	8000fca <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fc4:	68b8      	ldr	r0, [r7, #8]
 8000fc6:	f000 f88b 	bl	80010e0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fce:	f000 f847 	bl	8001060 <FLASH_WaitForLastOperation>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_FLASH_Program+0xa4>)
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_FLASH_Program+0xa4>)
 8000fdc:	f023 0301 	bic.w	r3, r3, #1
 8000fe0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fe2:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <HAL_FLASH_Program+0xa0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	761a      	strb	r2, [r3, #24]
  
  return status;
 8000fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200000b4 	.word	0x200000b4
 8000ff8:	40023c00 	.word	0x40023c00

08000ffc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_FLASH_Unlock+0x38>)
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	2b00      	cmp	r3, #0
 800100c:	da0b      	bge.n	8001026 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_FLASH_Unlock+0x38>)
 8001010:	4a09      	ldr	r2, [pc, #36]	; (8001038 <HAL_FLASH_Unlock+0x3c>)
 8001012:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <HAL_FLASH_Unlock+0x38>)
 8001016:	4a09      	ldr	r2, [pc, #36]	; (800103c <HAL_FLASH_Unlock+0x40>)
 8001018:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_FLASH_Unlock+0x38>)
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	2b00      	cmp	r3, #0
 8001020:	da01      	bge.n	8001026 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001026:	79fb      	ldrb	r3, [r7, #7]
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	40023c00 	.word	0x40023c00
 8001038:	45670123 	.word	0x45670123
 800103c:	cdef89ab 	.word	0xcdef89ab

08001040 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_FLASH_Lock+0x1c>)
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_FLASH_Lock+0x1c>)
 800104a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	40023c00 	.word	0x40023c00

08001060 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <FLASH_WaitForLastOperation+0x78>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001072:	f7ff fe7d 	bl	8000d70 <HAL_GetTick>
 8001076:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001078:	e010      	b.n	800109c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001080:	d00c      	beq.n	800109c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d007      	beq.n	8001098 <FLASH_WaitForLastOperation+0x38>
 8001088:	f7ff fe72 	bl	8000d70 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	429a      	cmp	r2, r3
 8001096:	d201      	bcs.n	800109c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e019      	b.n	80010d0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <FLASH_WaitForLastOperation+0x7c>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1e8      	bne.n	800107a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <FLASH_WaitForLastOperation+0x7c>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <FLASH_WaitForLastOperation+0x7c>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <FLASH_WaitForLastOperation+0x7c>)
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80010c6:	f000 f8a5 	bl	8001214 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
  
}  
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200000b4 	.word	0x200000b4
 80010dc:	40023c00 	.word	0x40023c00

080010e0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <FLASH_Program_DoubleWord+0x60>)
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	4a13      	ldr	r2, [pc, #76]	; (8001140 <FLASH_Program_DoubleWord+0x60>)
 80010f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <FLASH_Program_DoubleWord+0x60>)
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	4a10      	ldr	r2, [pc, #64]	; (8001140 <FLASH_Program_DoubleWord+0x60>)
 80010fe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001102:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <FLASH_Program_DoubleWord+0x60>)
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <FLASH_Program_DoubleWord+0x60>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001116:	f3bf 8f6f 	isb	sy
}
 800111a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800111c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	000a      	movs	r2, r1
 800112a:	2300      	movs	r3, #0
 800112c:	68f9      	ldr	r1, [r7, #12]
 800112e:	3104      	adds	r1, #4
 8001130:	4613      	mov	r3, r2
 8001132:	600b      	str	r3, [r1, #0]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	40023c00 	.word	0x40023c00

08001144 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <FLASH_Program_Word+0x40>)
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	4a0c      	ldr	r2, [pc, #48]	; (8001184 <FLASH_Program_Word+0x40>)
 8001154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001158:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <FLASH_Program_Word+0x40>)
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	4a09      	ldr	r2, [pc, #36]	; (8001184 <FLASH_Program_Word+0x40>)
 8001160:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001164:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <FLASH_Program_Word+0x40>)
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	4a06      	ldr	r2, [pc, #24]	; (8001184 <FLASH_Program_Word+0x40>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	601a      	str	r2, [r3, #0]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	40023c00 	.word	0x40023c00

08001188 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <FLASH_Program_HalfWord+0x44>)
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <FLASH_Program_HalfWord+0x44>)
 800119a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800119e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <FLASH_Program_HalfWord+0x44>)
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	4a09      	ldr	r2, [pc, #36]	; (80011cc <FLASH_Program_HalfWord+0x44>)
 80011a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <FLASH_Program_HalfWord+0x44>)
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <FLASH_Program_HalfWord+0x44>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	801a      	strh	r2, [r3, #0]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023c00 	.word	0x40023c00

080011d0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <FLASH_Program_Byte+0x40>)
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <FLASH_Program_Byte+0x40>)
 80011e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <FLASH_Program_Byte+0x40>)
 80011ea:	4a09      	ldr	r2, [pc, #36]	; (8001210 <FLASH_Program_Byte+0x40>)
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <FLASH_Program_Byte+0x40>)
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	4a06      	ldr	r2, [pc, #24]	; (8001210 <FLASH_Program_Byte+0x40>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	78fa      	ldrb	r2, [r7, #3]
 8001200:	701a      	strb	r2, [r3, #0]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023c00 	.word	0x40023c00

08001214 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001218:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	f003 0310 	and.w	r3, r3, #16
 8001220:	2b00      	cmp	r3, #0
 8001222:	d008      	beq.n	8001236 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001224:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	f043 0310 	orr.w	r3, r3, #16
 800122c:	4a2b      	ldr	r2, [pc, #172]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 800122e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001230:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 8001232:	2210      	movs	r2, #16
 8001234:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	f003 0320 	and.w	r3, r3, #32
 800123e:	2b00      	cmp	r3, #0
 8001240:	d008      	beq.n	8001254 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f043 0308 	orr.w	r3, r3, #8
 800124a:	4a24      	ldr	r2, [pc, #144]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 800124c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800124e:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 8001250:	2220      	movs	r2, #32
 8001252:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001254:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800125c:	2b00      	cmp	r3, #0
 800125e:	d008      	beq.n	8001272 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 800126a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800126c:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 800126e:	2240      	movs	r2, #64	; 0x40
 8001270:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127a:	2b00      	cmp	r3, #0
 800127c:	d008      	beq.n	8001290 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	f043 0302 	orr.w	r3, r3, #2
 8001286:	4a15      	ldr	r2, [pc, #84]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 8001288:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 800128c:	2280      	movs	r2, #128	; 0x80
 800128e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001298:	2b00      	cmp	r3, #0
 800129a:	d009      	beq.n	80012b0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 80012a6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 80012aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ae:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d008      	beq.n	80012ce <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	f043 0320 	orr.w	r3, r3, #32
 80012c4:	4a05      	ldr	r2, [pc, #20]	; (80012dc <FLASH_SetErrorCode+0xc8>)
 80012c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <FLASH_SetErrorCode+0xc4>)
 80012ca:	2202      	movs	r2, #2
 80012cc:	60da      	str	r2, [r3, #12]
  }
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	40023c00 	.word	0x40023c00
 80012dc:	200000b4 	.word	0x200000b4

080012e0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80012f2:	4b32      	ldr	r3, [pc, #200]	; (80013bc <HAL_FLASHEx_Erase+0xdc>)
 80012f4:	7e1b      	ldrb	r3, [r3, #24]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <HAL_FLASHEx_Erase+0x1e>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e05a      	b.n	80013b4 <HAL_FLASHEx_Erase+0xd4>
 80012fe:	4b2f      	ldr	r3, [pc, #188]	; (80013bc <HAL_FLASHEx_Erase+0xdc>)
 8001300:	2201      	movs	r2, #1
 8001302:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001304:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001308:	f7ff feaa 	bl	8001060 <FLASH_WaitForLastOperation>
 800130c:	4603      	mov	r3, r0
 800130e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d14a      	bne.n	80013ac <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d117      	bne.n	8001356 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4619      	mov	r1, r3
 8001332:	4610      	mov	r0, r2
 8001334:	f000 f846 	bl	80013c4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001338:	f24c 3050 	movw	r0, #50000	; 0xc350
 800133c:	f7ff fe90 	bl	8001060 <FLASH_WaitForLastOperation>
 8001340:	4603      	mov	r3, r0
 8001342:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001344:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <HAL_FLASHEx_Erase+0xe0>)
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <HAL_FLASHEx_Erase+0xe0>)
 800134a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800134e:	f023 0304 	bic.w	r3, r3, #4
 8001352:	6113      	str	r3, [r2, #16]
 8001354:	e028      	b.n	80013a8 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	e01c      	b.n	8001398 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	4619      	mov	r1, r3
 8001366:	68b8      	ldr	r0, [r7, #8]
 8001368:	f000 f866 	bl	8001438 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800136c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001370:	f7ff fe76 	bl	8001060 <FLASH_WaitForLastOperation>
 8001374:	4603      	mov	r3, r0
 8001376:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_FLASHEx_Erase+0xe0>)
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <HAL_FLASHEx_Erase+0xe0>)
 800137e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001382:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	601a      	str	r2, [r3, #0]
          break;
 8001390:	e00a      	b.n	80013a8 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	3301      	adds	r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68da      	ldr	r2, [r3, #12]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	4413      	add	r3, r2
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d3da      	bcc.n	800135e <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80013a8:	f000 f894 	bl	80014d4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <HAL_FLASHEx_Erase+0xdc>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	761a      	strb	r2, [r3, #24]

  return status;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200000b4 	.word	0x200000b4
 80013c0:	40023c00 	.word	0x40023c00

080013c4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <FLASH_MassErase+0x70>)
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	4a17      	ldr	r2, [pc, #92]	; (8001434 <FLASH_MassErase+0x70>)
 80013d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013da:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d108      	bne.n	80013f4 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <FLASH_MassErase+0x70>)
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	4a13      	ldr	r2, [pc, #76]	; (8001434 <FLASH_MassErase+0x70>)
 80013e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	6113      	str	r3, [r2, #16]
 80013f2:	e00f      	b.n	8001414 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d106      	bne.n	8001408 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <FLASH_MassErase+0x70>)
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <FLASH_MassErase+0x70>)
 8001400:	f043 0304 	orr.w	r3, r3, #4
 8001404:	6113      	str	r3, [r2, #16]
 8001406:	e005      	b.n	8001414 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <FLASH_MassErase+0x70>)
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	4a09      	ldr	r2, [pc, #36]	; (8001434 <FLASH_MassErase+0x70>)
 800140e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001412:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <FLASH_MassErase+0x70>)
 8001416:	691a      	ldr	r2, [r3, #16]
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	4313      	orrs	r3, r2
 800141e:	4a05      	ldr	r2, [pc, #20]	; (8001434 <FLASH_MassErase+0x70>)
 8001420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001424:	6113      	str	r3, [r2, #16]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023c00 	.word	0x40023c00

08001438 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d102      	bne.n	8001454 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	e010      	b.n	8001476 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d103      	bne.n	8001462 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800145a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	e009      	b.n	8001476 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d103      	bne.n	8001470 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	e002      	b.n	8001476 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001470:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001474:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b0b      	cmp	r3, #11
 800147a:	d902      	bls.n	8001482 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3304      	adds	r3, #4
 8001480:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <FLASH_Erase_Sector+0x98>)
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <FLASH_Erase_Sector+0x98>)
 8001488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800148c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <FLASH_Erase_Sector+0x98>)
 8001490:	691a      	ldr	r2, [r3, #16]
 8001492:	490f      	ldr	r1, [pc, #60]	; (80014d0 <FLASH_Erase_Sector+0x98>)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4313      	orrs	r3, r2
 8001498:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <FLASH_Erase_Sector+0x98>)
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <FLASH_Erase_Sector+0x98>)
 80014a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80014a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <FLASH_Erase_Sector+0x98>)
 80014a8:	691a      	ldr	r2, [r3, #16]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4313      	orrs	r3, r2
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <FLASH_Erase_Sector+0x98>)
 80014b2:	f043 0302 	orr.w	r3, r3, #2
 80014b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <FLASH_Erase_Sector+0x98>)
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <FLASH_Erase_Sector+0x98>)
 80014be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c2:	6113      	str	r3, [r2, #16]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	40023c00 	.word	0x40023c00

080014d4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80014d8:	4b20      	ldr	r3, [pc, #128]	; (800155c <FLASH_FlushCaches+0x88>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d017      	beq.n	8001514 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <FLASH_FlushCaches+0x88>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a1c      	ldr	r2, [pc, #112]	; (800155c <FLASH_FlushCaches+0x88>)
 80014ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014ee:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <FLASH_FlushCaches+0x88>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a19      	ldr	r2, [pc, #100]	; (800155c <FLASH_FlushCaches+0x88>)
 80014f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b17      	ldr	r3, [pc, #92]	; (800155c <FLASH_FlushCaches+0x88>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a16      	ldr	r2, [pc, #88]	; (800155c <FLASH_FlushCaches+0x88>)
 8001502:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001506:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <FLASH_FlushCaches+0x88>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a13      	ldr	r2, [pc, #76]	; (800155c <FLASH_FlushCaches+0x88>)
 800150e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001512:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <FLASH_FlushCaches+0x88>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151c:	2b00      	cmp	r3, #0
 800151e:	d017      	beq.n	8001550 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <FLASH_FlushCaches+0x88>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0d      	ldr	r2, [pc, #52]	; (800155c <FLASH_FlushCaches+0x88>)
 8001526:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800152a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <FLASH_FlushCaches+0x88>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0a      	ldr	r2, [pc, #40]	; (800155c <FLASH_FlushCaches+0x88>)
 8001532:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <FLASH_FlushCaches+0x88>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <FLASH_FlushCaches+0x88>)
 800153e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001542:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <FLASH_FlushCaches+0x88>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <FLASH_FlushCaches+0x88>)
 800154a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800154e:	6013      	str	r3, [r2, #0]
  }
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40023c00 	.word	0x40023c00

08001560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001560:	b480      	push	{r7}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
 800157a:	e177      	b.n	800186c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800157c:	2201      	movs	r2, #1
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	429a      	cmp	r2, r3
 8001596:	f040 8166 	bne.w	8001866 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d005      	beq.n	80015b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d130      	bne.n	8001614 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	2203      	movs	r2, #3
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e8:	2201      	movs	r2, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	091b      	lsrs	r3, r3, #4
 80015fe:	f003 0201 	and.w	r2, r3, #1
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b03      	cmp	r3, #3
 800161e:	d017      	beq.n	8001650 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	2203      	movs	r2, #3
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d123      	bne.n	80016a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	08da      	lsrs	r2, r3, #3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3208      	adds	r2, #8
 8001664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	220f      	movs	r2, #15
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	691a      	ldr	r2, [r3, #16]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	08da      	lsrs	r2, r3, #3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3208      	adds	r2, #8
 800169e:	69b9      	ldr	r1, [r7, #24]
 80016a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	2203      	movs	r2, #3
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0203 	and.w	r2, r3, #3
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 80c0 	beq.w	8001866 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	4b66      	ldr	r3, [pc, #408]	; (8001884 <HAL_GPIO_Init+0x324>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	4a65      	ldr	r2, [pc, #404]	; (8001884 <HAL_GPIO_Init+0x324>)
 80016f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f4:	6453      	str	r3, [r2, #68]	; 0x44
 80016f6:	4b63      	ldr	r3, [pc, #396]	; (8001884 <HAL_GPIO_Init+0x324>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001702:	4a61      	ldr	r2, [pc, #388]	; (8001888 <HAL_GPIO_Init+0x328>)
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	089b      	lsrs	r3, r3, #2
 8001708:	3302      	adds	r3, #2
 800170a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	220f      	movs	r2, #15
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a58      	ldr	r2, [pc, #352]	; (800188c <HAL_GPIO_Init+0x32c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d037      	beq.n	800179e <HAL_GPIO_Init+0x23e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a57      	ldr	r2, [pc, #348]	; (8001890 <HAL_GPIO_Init+0x330>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d031      	beq.n	800179a <HAL_GPIO_Init+0x23a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a56      	ldr	r2, [pc, #344]	; (8001894 <HAL_GPIO_Init+0x334>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d02b      	beq.n	8001796 <HAL_GPIO_Init+0x236>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a55      	ldr	r2, [pc, #340]	; (8001898 <HAL_GPIO_Init+0x338>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d025      	beq.n	8001792 <HAL_GPIO_Init+0x232>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a54      	ldr	r2, [pc, #336]	; (800189c <HAL_GPIO_Init+0x33c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d01f      	beq.n	800178e <HAL_GPIO_Init+0x22e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a53      	ldr	r2, [pc, #332]	; (80018a0 <HAL_GPIO_Init+0x340>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d019      	beq.n	800178a <HAL_GPIO_Init+0x22a>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a52      	ldr	r2, [pc, #328]	; (80018a4 <HAL_GPIO_Init+0x344>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d013      	beq.n	8001786 <HAL_GPIO_Init+0x226>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a51      	ldr	r2, [pc, #324]	; (80018a8 <HAL_GPIO_Init+0x348>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d00d      	beq.n	8001782 <HAL_GPIO_Init+0x222>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a50      	ldr	r2, [pc, #320]	; (80018ac <HAL_GPIO_Init+0x34c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d007      	beq.n	800177e <HAL_GPIO_Init+0x21e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4f      	ldr	r2, [pc, #316]	; (80018b0 <HAL_GPIO_Init+0x350>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d101      	bne.n	800177a <HAL_GPIO_Init+0x21a>
 8001776:	2309      	movs	r3, #9
 8001778:	e012      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 800177a:	230a      	movs	r3, #10
 800177c:	e010      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 800177e:	2308      	movs	r3, #8
 8001780:	e00e      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 8001782:	2307      	movs	r3, #7
 8001784:	e00c      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 8001786:	2306      	movs	r3, #6
 8001788:	e00a      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 800178a:	2305      	movs	r3, #5
 800178c:	e008      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 800178e:	2304      	movs	r3, #4
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 8001792:	2303      	movs	r3, #3
 8001794:	e004      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 8001796:	2302      	movs	r3, #2
 8001798:	e002      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 800179e:	2300      	movs	r3, #0
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	f002 0203 	and.w	r2, r2, #3
 80017a6:	0092      	lsls	r2, r2, #2
 80017a8:	4093      	lsls	r3, r2
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017b0:	4935      	ldr	r1, [pc, #212]	; (8001888 <HAL_GPIO_Init+0x328>)
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	089b      	lsrs	r3, r3, #2
 80017b6:	3302      	adds	r3, #2
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017be:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <HAL_GPIO_Init+0x354>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017e2:	4a34      	ldr	r2, [pc, #208]	; (80018b4 <HAL_GPIO_Init+0x354>)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017e8:	4b32      	ldr	r3, [pc, #200]	; (80018b4 <HAL_GPIO_Init+0x354>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800180c:	4a29      	ldr	r2, [pc, #164]	; (80018b4 <HAL_GPIO_Init+0x354>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001812:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <HAL_GPIO_Init+0x354>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001836:	4a1f      	ldr	r2, [pc, #124]	; (80018b4 <HAL_GPIO_Init+0x354>)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800183c:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <HAL_GPIO_Init+0x354>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001860:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <HAL_GPIO_Init+0x354>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3301      	adds	r3, #1
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	2b0f      	cmp	r3, #15
 8001870:	f67f ae84 	bls.w	800157c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	3724      	adds	r7, #36	; 0x24
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800
 8001888:	40013800 	.word	0x40013800
 800188c:	40020000 	.word	0x40020000
 8001890:	40020400 	.word	0x40020400
 8001894:	40020800 	.word	0x40020800
 8001898:	40020c00 	.word	0x40020c00
 800189c:	40021000 	.word	0x40021000
 80018a0:	40021400 	.word	0x40021400
 80018a4:	40021800 	.word	0x40021800
 80018a8:	40021c00 	.word	0x40021c00
 80018ac:	40022000 	.word	0x40022000
 80018b0:	40022400 	.word	0x40022400
 80018b4:	40013c00 	.word	0x40013c00

080018b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_PWREx_EnableOverDrive+0x90>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	4a1f      	ldr	r2, [pc, #124]	; (8001948 <HAL_PWREx_EnableOverDrive+0x90>)
 80018cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d0:	6413      	str	r3, [r2, #64]	; 0x40
 80018d2:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <HAL_PWREx_EnableOverDrive+0x90>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80018de:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_PWREx_EnableOverDrive+0x94>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018e4:	f7ff fa44 	bl	8000d70 <HAL_GetTick>
 80018e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018ea:	e009      	b.n	8001900 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018ec:	f7ff fa40 	bl	8000d70 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018fa:	d901      	bls.n	8001900 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e01f      	b.n	8001940 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <HAL_PWREx_EnableOverDrive+0x98>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800190c:	d1ee      	bne.n	80018ec <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001910:	2201      	movs	r2, #1
 8001912:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001914:	f7ff fa2c 	bl	8000d70 <HAL_GetTick>
 8001918:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800191a:	e009      	b.n	8001930 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800191c:	f7ff fa28 	bl	8000d70 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800192a:	d901      	bls.n	8001930 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e007      	b.n	8001940 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001930:	4b07      	ldr	r3, [pc, #28]	; (8001950 <HAL_PWREx_EnableOverDrive+0x98>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001938:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800193c:	d1ee      	bne.n	800191c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	420e0040 	.word	0x420e0040
 8001950:	40007000 	.word	0x40007000
 8001954:	420e0044 	.word	0x420e0044

08001958 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e267      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d075      	beq.n	8001a62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001976:	4b88      	ldr	r3, [pc, #544]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b04      	cmp	r3, #4
 8001980:	d00c      	beq.n	800199c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001982:	4b85      	ldr	r3, [pc, #532]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800198a:	2b08      	cmp	r3, #8
 800198c:	d112      	bne.n	80019b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800198e:	4b82      	ldr	r3, [pc, #520]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800199a:	d10b      	bne.n	80019b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800199c:	4b7e      	ldr	r3, [pc, #504]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d05b      	beq.n	8001a60 <HAL_RCC_OscConfig+0x108>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d157      	bne.n	8001a60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e242      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019bc:	d106      	bne.n	80019cc <HAL_RCC_OscConfig+0x74>
 80019be:	4b76      	ldr	r3, [pc, #472]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a75      	ldr	r2, [pc, #468]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 80019c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	e01d      	b.n	8001a08 <HAL_RCC_OscConfig+0xb0>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019d4:	d10c      	bne.n	80019f0 <HAL_RCC_OscConfig+0x98>
 80019d6:	4b70      	ldr	r3, [pc, #448]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a6f      	ldr	r2, [pc, #444]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 80019dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	4b6d      	ldr	r3, [pc, #436]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a6c      	ldr	r2, [pc, #432]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 80019e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	e00b      	b.n	8001a08 <HAL_RCC_OscConfig+0xb0>
 80019f0:	4b69      	ldr	r3, [pc, #420]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a68      	ldr	r2, [pc, #416]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 80019f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4b66      	ldr	r3, [pc, #408]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a65      	ldr	r2, [pc, #404]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d013      	beq.n	8001a38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7ff f9ae 	bl	8000d70 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a18:	f7ff f9aa 	bl	8000d70 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b64      	cmp	r3, #100	; 0x64
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e207      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2a:	4b5b      	ldr	r3, [pc, #364]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0xc0>
 8001a36:	e014      	b.n	8001a62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff f99a 	bl	8000d70 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff f996 	bl	8000d70 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	; 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e1f3      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a52:	4b51      	ldr	r3, [pc, #324]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0xe8>
 8001a5e:	e000      	b.n	8001a62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d063      	beq.n	8001b36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a6e:	4b4a      	ldr	r3, [pc, #296]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00b      	beq.n	8001a92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a7a:	4b47      	ldr	r3, [pc, #284]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d11c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a86:	4b44      	ldr	r3, [pc, #272]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d116      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a92:	4b41      	ldr	r3, [pc, #260]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d005      	beq.n	8001aaa <HAL_RCC_OscConfig+0x152>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d001      	beq.n	8001aaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e1c7      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4937      	ldr	r1, [pc, #220]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001abe:	e03a      	b.n	8001b36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d020      	beq.n	8001b0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac8:	4b34      	ldr	r3, [pc, #208]	; (8001b9c <HAL_RCC_OscConfig+0x244>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ace:	f7ff f94f 	bl	8000d70 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad6:	f7ff f94b 	bl	8000d70 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e1a8      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae8:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af4:	4b28      	ldr	r3, [pc, #160]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4925      	ldr	r1, [pc, #148]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]
 8001b08:	e015      	b.n	8001b36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b0a:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <HAL_RCC_OscConfig+0x244>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b10:	f7ff f92e 	bl	8000d70 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b18:	f7ff f92a 	bl	8000d70 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e187      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2a:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d036      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d016      	beq.n	8001b78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_RCC_OscConfig+0x248>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b50:	f7ff f90e 	bl	8000d70 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b58:	f7ff f90a 	bl	8000d70 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e167      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_RCC_OscConfig+0x240>)
 8001b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x200>
 8001b76:	e01b      	b.n	8001bb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_RCC_OscConfig+0x248>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7e:	f7ff f8f7 	bl	8000d70 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b84:	e00e      	b.n	8001ba4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b86:	f7ff f8f3 	bl	8000d70 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d907      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e150      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	42470000 	.word	0x42470000
 8001ba0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba4:	4b88      	ldr	r3, [pc, #544]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1ea      	bne.n	8001b86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 8097 	beq.w	8001cec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc2:	4b81      	ldr	r3, [pc, #516]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10f      	bne.n	8001bee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	4b7d      	ldr	r3, [pc, #500]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	4a7c      	ldr	r2, [pc, #496]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bde:	4b7a      	ldr	r3, [pc, #488]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bea:	2301      	movs	r3, #1
 8001bec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bee:	4b77      	ldr	r3, [pc, #476]	; (8001dcc <HAL_RCC_OscConfig+0x474>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d118      	bne.n	8001c2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bfa:	4b74      	ldr	r3, [pc, #464]	; (8001dcc <HAL_RCC_OscConfig+0x474>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a73      	ldr	r2, [pc, #460]	; (8001dcc <HAL_RCC_OscConfig+0x474>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c06:	f7ff f8b3 	bl	8000d70 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c0e:	f7ff f8af 	bl	8000d70 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e10c      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c20:	4b6a      	ldr	r3, [pc, #424]	; (8001dcc <HAL_RCC_OscConfig+0x474>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d106      	bne.n	8001c42 <HAL_RCC_OscConfig+0x2ea>
 8001c34:	4b64      	ldr	r3, [pc, #400]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c38:	4a63      	ldr	r2, [pc, #396]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c40:	e01c      	b.n	8001c7c <HAL_RCC_OscConfig+0x324>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b05      	cmp	r3, #5
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x30c>
 8001c4a:	4b5f      	ldr	r3, [pc, #380]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4e:	4a5e      	ldr	r2, [pc, #376]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	6713      	str	r3, [r2, #112]	; 0x70
 8001c56:	4b5c      	ldr	r3, [pc, #368]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5a:	4a5b      	ldr	r2, [pc, #364]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6713      	str	r3, [r2, #112]	; 0x70
 8001c62:	e00b      	b.n	8001c7c <HAL_RCC_OscConfig+0x324>
 8001c64:	4b58      	ldr	r3, [pc, #352]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c68:	4a57      	ldr	r2, [pc, #348]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001c6a:	f023 0301 	bic.w	r3, r3, #1
 8001c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c70:	4b55      	ldr	r3, [pc, #340]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c74:	4a54      	ldr	r2, [pc, #336]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001c76:	f023 0304 	bic.w	r3, r3, #4
 8001c7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d015      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c84:	f7ff f874 	bl	8000d70 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c8c:	f7ff f870 	bl	8000d70 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e0cb      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca2:	4b49      	ldr	r3, [pc, #292]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0ee      	beq.n	8001c8c <HAL_RCC_OscConfig+0x334>
 8001cae:	e014      	b.n	8001cda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb0:	f7ff f85e 	bl	8000d70 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb8:	f7ff f85a 	bl	8000d70 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e0b5      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cce:	4b3e      	ldr	r3, [pc, #248]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1ee      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d105      	bne.n	8001cec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce0:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	4a38      	ldr	r2, [pc, #224]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001ce6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80a1 	beq.w	8001e38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cf6:	4b34      	ldr	r3, [pc, #208]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d05c      	beq.n	8001dbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d141      	bne.n	8001d8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0a:	4b31      	ldr	r3, [pc, #196]	; (8001dd0 <HAL_RCC_OscConfig+0x478>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7ff f82e 	bl	8000d70 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff f82a 	bl	8000d70 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e087      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2a:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69da      	ldr	r2, [r3, #28]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	019b      	lsls	r3, r3, #6
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	085b      	lsrs	r3, r3, #1
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	041b      	lsls	r3, r3, #16
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d58:	061b      	lsls	r3, r3, #24
 8001d5a:	491b      	ldr	r1, [pc, #108]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_RCC_OscConfig+0x478>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7ff f803 	bl	8000d70 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6e:	f7fe ffff 	bl	8000d70 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e05c      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x416>
 8001d8c:	e054      	b.n	8001e38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <HAL_RCC_OscConfig+0x478>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7fe ffec 	bl	8000d70 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7fe ffe8 	bl	8000d70 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e045      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_RCC_OscConfig+0x470>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x444>
 8001dba:	e03d      	b.n	8001e38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e038      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40007000 	.word	0x40007000
 8001dd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <HAL_RCC_OscConfig+0x4ec>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d028      	beq.n	8001e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d121      	bne.n	8001e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d11a      	bne.n	8001e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e04:	4013      	ands	r3, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d111      	bne.n	8001e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1a:	085b      	lsrs	r3, r3, #1
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d107      	bne.n	8001e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e000      	b.n	8001e3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800

08001e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0cc      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e5c:	4b68      	ldr	r3, [pc, #416]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d90c      	bls.n	8001e84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6a:	4b65      	ldr	r3, [pc, #404]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e72:	4b63      	ldr	r3, [pc, #396]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0b8      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d020      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d005      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e9c:	4b59      	ldr	r3, [pc, #356]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	4a58      	ldr	r2, [pc, #352]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ea6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eb4:	4b53      	ldr	r3, [pc, #332]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	4a52      	ldr	r2, [pc, #328]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ebe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec0:	4b50      	ldr	r3, [pc, #320]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	494d      	ldr	r1, [pc, #308]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d044      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d107      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee6:	4b47      	ldr	r3, [pc, #284]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d119      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e07f      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d003      	beq.n	8001f06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d107      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f06:	4b3f      	ldr	r3, [pc, #252]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d109      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e06f      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f16:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e067      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f26:	4b37      	ldr	r3, [pc, #220]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f023 0203 	bic.w	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	4934      	ldr	r1, [pc, #208]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f38:	f7fe ff1a 	bl	8000d70 <HAL_GetTick>
 8001f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3e:	e00a      	b.n	8001f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f40:	f7fe ff16 	bl	8000d70 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e04f      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f56:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 020c 	and.w	r2, r3, #12
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d1eb      	bne.n	8001f40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f68:	4b25      	ldr	r3, [pc, #148]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 030f 	and.w	r3, r3, #15
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d20c      	bcs.n	8001f90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f76:	4b22      	ldr	r3, [pc, #136]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7e:	4b20      	ldr	r3, [pc, #128]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d001      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e032      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f9c:	4b19      	ldr	r3, [pc, #100]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4916      	ldr	r1, [pc, #88]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d009      	beq.n	8001fce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	490e      	ldr	r1, [pc, #56]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fce:	f000 f821 	bl	8002014 <HAL_RCC_GetSysClockFreq>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	091b      	lsrs	r3, r3, #4
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	490a      	ldr	r1, [pc, #40]	; (8002008 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe0:	5ccb      	ldrb	r3, [r1, r3]
 8001fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe6:	4a09      	ldr	r2, [pc, #36]	; (800200c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HAL_RCC_ClockConfig+0x1c8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fe7a 	bl	8000ce8 <HAL_InitTick>

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40023c00 	.word	0x40023c00
 8002004:	40023800 	.word	0x40023800
 8002008:	08002d70 	.word	0x08002d70
 800200c:	20000000 	.word	0x20000000
 8002010:	20000004 	.word	0x20000004

08002014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002018:	b090      	sub	sp, #64	; 0x40
 800201a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	637b      	str	r3, [r7, #52]	; 0x34
 8002020:	2300      	movs	r3, #0
 8002022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002024:	2300      	movs	r3, #0
 8002026:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800202c:	4b59      	ldr	r3, [pc, #356]	; (8002194 <HAL_RCC_GetSysClockFreq+0x180>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 030c 	and.w	r3, r3, #12
 8002034:	2b08      	cmp	r3, #8
 8002036:	d00d      	beq.n	8002054 <HAL_RCC_GetSysClockFreq+0x40>
 8002038:	2b08      	cmp	r3, #8
 800203a:	f200 80a1 	bhi.w	8002180 <HAL_RCC_GetSysClockFreq+0x16c>
 800203e:	2b00      	cmp	r3, #0
 8002040:	d002      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0x34>
 8002042:	2b04      	cmp	r3, #4
 8002044:	d003      	beq.n	800204e <HAL_RCC_GetSysClockFreq+0x3a>
 8002046:	e09b      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002048:	4b53      	ldr	r3, [pc, #332]	; (8002198 <HAL_RCC_GetSysClockFreq+0x184>)
 800204a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800204c:	e09b      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800204e:	4b53      	ldr	r3, [pc, #332]	; (800219c <HAL_RCC_GetSysClockFreq+0x188>)
 8002050:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002052:	e098      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002054:	4b4f      	ldr	r3, [pc, #316]	; (8002194 <HAL_RCC_GetSysClockFreq+0x180>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800205c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800205e:	4b4d      	ldr	r3, [pc, #308]	; (8002194 <HAL_RCC_GetSysClockFreq+0x180>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d028      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800206a:	4b4a      	ldr	r3, [pc, #296]	; (8002194 <HAL_RCC_GetSysClockFreq+0x180>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	099b      	lsrs	r3, r3, #6
 8002070:	2200      	movs	r2, #0
 8002072:	623b      	str	r3, [r7, #32]
 8002074:	627a      	str	r2, [r7, #36]	; 0x24
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800207c:	2100      	movs	r1, #0
 800207e:	4b47      	ldr	r3, [pc, #284]	; (800219c <HAL_RCC_GetSysClockFreq+0x188>)
 8002080:	fb03 f201 	mul.w	r2, r3, r1
 8002084:	2300      	movs	r3, #0
 8002086:	fb00 f303 	mul.w	r3, r0, r3
 800208a:	4413      	add	r3, r2
 800208c:	4a43      	ldr	r2, [pc, #268]	; (800219c <HAL_RCC_GetSysClockFreq+0x188>)
 800208e:	fba0 1202 	umull	r1, r2, r0, r2
 8002092:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002094:	460a      	mov	r2, r1
 8002096:	62ba      	str	r2, [r7, #40]	; 0x28
 8002098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800209a:	4413      	add	r3, r2
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800209e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a0:	2200      	movs	r2, #0
 80020a2:	61bb      	str	r3, [r7, #24]
 80020a4:	61fa      	str	r2, [r7, #28]
 80020a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020ae:	f7fe f89f 	bl	80001f0 <__aeabi_uldivmod>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4613      	mov	r3, r2
 80020b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020ba:	e053      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020bc:	4b35      	ldr	r3, [pc, #212]	; (8002194 <HAL_RCC_GetSysClockFreq+0x180>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	099b      	lsrs	r3, r3, #6
 80020c2:	2200      	movs	r2, #0
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	617a      	str	r2, [r7, #20]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80020ce:	f04f 0b00 	mov.w	fp, #0
 80020d2:	4652      	mov	r2, sl
 80020d4:	465b      	mov	r3, fp
 80020d6:	f04f 0000 	mov.w	r0, #0
 80020da:	f04f 0100 	mov.w	r1, #0
 80020de:	0159      	lsls	r1, r3, #5
 80020e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020e4:	0150      	lsls	r0, r2, #5
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	ebb2 080a 	subs.w	r8, r2, sl
 80020ee:	eb63 090b 	sbc.w	r9, r3, fp
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80020fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002102:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002106:	ebb2 0408 	subs.w	r4, r2, r8
 800210a:	eb63 0509 	sbc.w	r5, r3, r9
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	00eb      	lsls	r3, r5, #3
 8002118:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800211c:	00e2      	lsls	r2, r4, #3
 800211e:	4614      	mov	r4, r2
 8002120:	461d      	mov	r5, r3
 8002122:	eb14 030a 	adds.w	r3, r4, sl
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	eb45 030b 	adc.w	r3, r5, fp
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	e9d7 4500 	ldrd	r4, r5, [r7]
 800213a:	4629      	mov	r1, r5
 800213c:	028b      	lsls	r3, r1, #10
 800213e:	4621      	mov	r1, r4
 8002140:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002144:	4621      	mov	r1, r4
 8002146:	028a      	lsls	r2, r1, #10
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800214e:	2200      	movs	r2, #0
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	60fa      	str	r2, [r7, #12]
 8002154:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002158:	f7fe f84a 	bl	80001f0 <__aeabi_uldivmod>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4613      	mov	r3, r2
 8002162:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_RCC_GetSysClockFreq+0x180>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	0c1b      	lsrs	r3, r3, #16
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	3301      	adds	r3, #1
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002174:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800217e:	e002      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_RCC_GetSysClockFreq+0x184>)
 8002182:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002188:	4618      	mov	r0, r3
 800218a:	3740      	adds	r7, #64	; 0x40
 800218c:	46bd      	mov	sp, r7
 800218e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800
 8002198:	00f42400 	.word	0x00f42400
 800219c:	017d7840 	.word	0x017d7840

080021a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000000 	.word	0x20000000

080021b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021bc:	f7ff fff0 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021c0:	4602      	mov	r2, r0
 80021c2:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	0a9b      	lsrs	r3, r3, #10
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	4903      	ldr	r1, [pc, #12]	; (80021dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ce:	5ccb      	ldrb	r3, [r1, r3]
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800
 80021dc:	08002d80 	.word	0x08002d80

080021e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021e4:	f7ff ffdc 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	0b5b      	lsrs	r3, r3, #13
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	4903      	ldr	r1, [pc, #12]	; (8002204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40023800 	.word	0x40023800
 8002204:	08002d80 	.word	0x08002d80

08002208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10b      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800222c:	2b00      	cmp	r3, #0
 800222e:	d105      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002238:	2b00      	cmp	r3, #0
 800223a:	d075      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800223c:	4b91      	ldr	r3, [pc, #580]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002242:	f7fe fd95 	bl	8000d70 <HAL_GetTick>
 8002246:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002248:	e008      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800224a:	f7fe fd91 	bl	8000d70 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e189      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800225c:	4b8a      	ldr	r3, [pc, #552]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f0      	bne.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d009      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	019a      	lsls	r2, r3, #6
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	071b      	lsls	r3, r3, #28
 8002280:	4981      	ldr	r1, [pc, #516]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01f      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002294:	4b7c      	ldr	r3, [pc, #496]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800229a:	0f1b      	lsrs	r3, r3, #28
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	019a      	lsls	r2, r3, #6
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	061b      	lsls	r3, r3, #24
 80022ae:	431a      	orrs	r2, r3
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	071b      	lsls	r3, r3, #28
 80022b4:	4974      	ldr	r1, [pc, #464]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80022bc:	4b72      	ldr	r3, [pc, #456]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80022be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022c2:	f023 021f 	bic.w	r2, r3, #31
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	496e      	ldr	r1, [pc, #440]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00d      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	019a      	lsls	r2, r3, #6
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	061b      	lsls	r3, r3, #24
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	071b      	lsls	r3, r3, #28
 80022f4:	4964      	ldr	r1, [pc, #400]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80022fc:	4b61      	ldr	r3, [pc, #388]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80022fe:	2201      	movs	r2, #1
 8002300:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002302:	f7fe fd35 	bl	8000d70 <HAL_GetTick>
 8002306:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002308:	e008      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800230a:	f7fe fd31 	bl	8000d70 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e129      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800231c:	4b5a      	ldr	r3, [pc, #360]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d105      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800233c:	2b00      	cmp	r3, #0
 800233e:	d079      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002340:	4b52      	ldr	r3, [pc, #328]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002346:	f7fe fd13 	bl	8000d70 <HAL_GetTick>
 800234a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800234e:	f7fe fd0f 	bl	8000d70 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e107      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002360:	4b49      	ldr	r3, [pc, #292]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800236c:	d0ef      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	2b00      	cmp	r3, #0
 8002378:	d020      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800237a:	4b43      	ldr	r3, [pc, #268]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002380:	0f1b      	lsrs	r3, r3, #28
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	019a      	lsls	r2, r3, #6
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	061b      	lsls	r3, r3, #24
 8002394:	431a      	orrs	r2, r3
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	071b      	lsls	r3, r3, #28
 800239a:	493b      	ldr	r1, [pc, #236]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80023a2:	4b39      	ldr	r3, [pc, #228]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	3b01      	subs	r3, #1
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	4934      	ldr	r1, [pc, #208]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d01e      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023c8:	4b2f      	ldr	r3, [pc, #188]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	0e1b      	lsrs	r3, r3, #24
 80023d0:	f003 030f 	and.w	r3, r3, #15
 80023d4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	019a      	lsls	r2, r3, #6
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	061b      	lsls	r3, r3, #24
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	071b      	lsls	r3, r3, #28
 80023e8:	4927      	ldr	r1, [pc, #156]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80023f0:	4b25      	ldr	r3, [pc, #148]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	4922      	ldr	r1, [pc, #136]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002406:	4b21      	ldr	r3, [pc, #132]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002408:	2201      	movs	r2, #1
 800240a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800240c:	f7fe fcb0 	bl	8000d70 <HAL_GetTick>
 8002410:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002414:	f7fe fcac 	bl	8000d70 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e0a4      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002426:	4b18      	ldr	r3, [pc, #96]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800242e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002432:	d1ef      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0320 	and.w	r3, r3, #32
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 808b 	beq.w	8002558 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	4b10      	ldr	r3, [pc, #64]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800244c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002450:	6413      	str	r3, [r2, #64]	; 0x40
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800245e:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a0b      	ldr	r2, [pc, #44]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002468:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800246a:	f7fe fc81 	bl	8000d70 <HAL_GetTick>
 800246e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002470:	e010      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002472:	f7fe fc7d 	bl	8000d70 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d909      	bls.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e075      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002484:	42470068 	.word	0x42470068
 8002488:	40023800 	.word	0x40023800
 800248c:	42470070 	.word	0x42470070
 8002490:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002494:	4b38      	ldr	r3, [pc, #224]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0e8      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024a0:	4b36      	ldr	r3, [pc, #216]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d02f      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d028      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024be:	4b2f      	ldr	r3, [pc, #188]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80024c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024c8:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024ce:	4b2c      	ldr	r3, [pc, #176]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80024d4:	4a29      	ldr	r2, [pc, #164]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80024da:	4b28      	ldr	r3, [pc, #160]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80024dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d114      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80024e6:	f7fe fc43 	bl	8000d70 <HAL_GetTick>
 80024ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ec:	e00a      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ee:	f7fe fc3f 	bl	8000d70 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d901      	bls.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e035      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002504:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0ee      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002518:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800251c:	d10d      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800251e:	4b17      	ldr	r3, [pc, #92]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800252e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002532:	4912      	ldr	r1, [pc, #72]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002534:	4313      	orrs	r3, r2
 8002536:	608b      	str	r3, [r1, #8]
 8002538:	e005      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	4a0f      	ldr	r2, [pc, #60]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002540:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002544:	6093      	str	r3, [r2, #8]
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002548:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002552:	490a      	ldr	r1, [pc, #40]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002554:	4313      	orrs	r3, r2
 8002556:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b00      	cmp	r3, #0
 8002562:	d004      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800256c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40007000 	.word	0x40007000
 800257c:	40023800 	.word	0x40023800
 8002580:	42470e40 	.word	0x42470e40
 8002584:	424711e0 	.word	0x424711e0

08002588 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e066      	b.n	800266c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	7f5b      	ldrb	r3, [r3, #29]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fe fa4e 	bl	8000a50 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	22ca      	movs	r2, #202	; 0xca
 80025c0:	625a      	str	r2, [r3, #36]	; 0x24
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2253      	movs	r2, #83	; 0x53
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f87a 	bl	80026c4 <RTC_EnterInitMode>
 80025d0:	4603      	mov	r3, r0
 80025d2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d12c      	bne.n	8002634 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80025e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025ec:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6899      	ldr	r1, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	68d2      	ldr	r2, [r2, #12]
 8002614:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6919      	ldr	r1, [r3, #16]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	041a      	lsls	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f881 	bl	8002732 <RTC_ExitInitMode>
 8002630:	4603      	mov	r3, r0
 8002632:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d113      	bne.n	8002662 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699a      	ldr	r2, [r3, #24]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	22ff      	movs	r2, #255	; 0xff
 8002668:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800266a:	7bfb      	ldrb	r3, [r7, #15]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800268e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002690:	f7fe fb6e 	bl	8000d70 <HAL_GetTick>
 8002694:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002696:	e009      	b.n	80026ac <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002698:	f7fe fb6a 	bl	8000d70 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026a6:	d901      	bls.n	80026ac <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e007      	b.n	80026bc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0ee      	beq.n	8002698 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d122      	bne.n	8002728 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026f0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026f2:	f7fe fb3d 	bl	8000d70 <HAL_GetTick>
 80026f6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80026f8:	e00c      	b.n	8002714 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80026fa:	f7fe fb39 	bl	8000d70 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002708:	d904      	bls.n	8002714 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2204      	movs	r2, #4
 800270e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	d102      	bne.n	8002728 <RTC_EnterInitMode+0x64>
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d1e8      	bne.n	80026fa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002728:	7bfb      	ldrb	r3, [r7, #15]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68da      	ldr	r2, [r3, #12]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800274c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10a      	bne.n	8002772 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff ff89 	bl	8002674 <HAL_RTC_WaitForSynchro>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d004      	beq.n	8002772 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2204      	movs	r2, #4
 800276c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002772:	7bfb      	ldrb	r3, [r7, #15]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e03f      	b.n	800280e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fe fa0c 	bl	8000bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2224      	movs	r2, #36	; 0x24
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f829 	bl	8002818 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800281c:	b0c0      	sub	sp, #256	; 0x100
 800281e:	af00      	add	r7, sp, #0
 8002820:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002834:	68d9      	ldr	r1, [r3, #12]
 8002836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	ea40 0301 	orr.w	r3, r0, r1
 8002840:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	431a      	orrs	r2, r3
 8002850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	431a      	orrs	r2, r3
 8002858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002870:	f021 010c 	bic.w	r1, r1, #12
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800287e:	430b      	orrs	r3, r1
 8002880:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800288e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002892:	6999      	ldr	r1, [r3, #24]
 8002894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	ea40 0301 	orr.w	r3, r0, r1
 800289e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	4b8f      	ldr	r3, [pc, #572]	; (8002ae4 <UART_SetConfig+0x2cc>)
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d005      	beq.n	80028b8 <UART_SetConfig+0xa0>
 80028ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	4b8d      	ldr	r3, [pc, #564]	; (8002ae8 <UART_SetConfig+0x2d0>)
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d104      	bne.n	80028c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028b8:	f7ff fc92 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 80028bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80028c0:	e003      	b.n	80028ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028c2:	f7ff fc79 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 80028c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d4:	f040 810c 	bne.w	8002af0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028dc:	2200      	movs	r2, #0
 80028de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80028e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80028e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80028ea:	4622      	mov	r2, r4
 80028ec:	462b      	mov	r3, r5
 80028ee:	1891      	adds	r1, r2, r2
 80028f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80028f2:	415b      	adcs	r3, r3
 80028f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028fa:	4621      	mov	r1, r4
 80028fc:	eb12 0801 	adds.w	r8, r2, r1
 8002900:	4629      	mov	r1, r5
 8002902:	eb43 0901 	adc.w	r9, r3, r1
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800291a:	4690      	mov	r8, r2
 800291c:	4699      	mov	r9, r3
 800291e:	4623      	mov	r3, r4
 8002920:	eb18 0303 	adds.w	r3, r8, r3
 8002924:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002928:	462b      	mov	r3, r5
 800292a:	eb49 0303 	adc.w	r3, r9, r3
 800292e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800293e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002942:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002946:	460b      	mov	r3, r1
 8002948:	18db      	adds	r3, r3, r3
 800294a:	653b      	str	r3, [r7, #80]	; 0x50
 800294c:	4613      	mov	r3, r2
 800294e:	eb42 0303 	adc.w	r3, r2, r3
 8002952:	657b      	str	r3, [r7, #84]	; 0x54
 8002954:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002958:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800295c:	f7fd fc48 	bl	80001f0 <__aeabi_uldivmod>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4b61      	ldr	r3, [pc, #388]	; (8002aec <UART_SetConfig+0x2d4>)
 8002966:	fba3 2302 	umull	r2, r3, r3, r2
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	011c      	lsls	r4, r3, #4
 800296e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002972:	2200      	movs	r2, #0
 8002974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002978:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800297c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002980:	4642      	mov	r2, r8
 8002982:	464b      	mov	r3, r9
 8002984:	1891      	adds	r1, r2, r2
 8002986:	64b9      	str	r1, [r7, #72]	; 0x48
 8002988:	415b      	adcs	r3, r3
 800298a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800298c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002990:	4641      	mov	r1, r8
 8002992:	eb12 0a01 	adds.w	sl, r2, r1
 8002996:	4649      	mov	r1, r9
 8002998:	eb43 0b01 	adc.w	fp, r3, r1
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029b0:	4692      	mov	sl, r2
 80029b2:	469b      	mov	fp, r3
 80029b4:	4643      	mov	r3, r8
 80029b6:	eb1a 0303 	adds.w	r3, sl, r3
 80029ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029be:	464b      	mov	r3, r9
 80029c0:	eb4b 0303 	adc.w	r3, fp, r3
 80029c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80029c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80029d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80029dc:	460b      	mov	r3, r1
 80029de:	18db      	adds	r3, r3, r3
 80029e0:	643b      	str	r3, [r7, #64]	; 0x40
 80029e2:	4613      	mov	r3, r2
 80029e4:	eb42 0303 	adc.w	r3, r2, r3
 80029e8:	647b      	str	r3, [r7, #68]	; 0x44
 80029ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80029ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80029f2:	f7fd fbfd 	bl	80001f0 <__aeabi_uldivmod>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4611      	mov	r1, r2
 80029fc:	4b3b      	ldr	r3, [pc, #236]	; (8002aec <UART_SetConfig+0x2d4>)
 80029fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2264      	movs	r2, #100	; 0x64
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	1acb      	subs	r3, r1, r3
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a12:	4b36      	ldr	r3, [pc, #216]	; (8002aec <UART_SetConfig+0x2d4>)
 8002a14:	fba3 2302 	umull	r2, r3, r3, r2
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a20:	441c      	add	r4, r3
 8002a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a26:	2200      	movs	r2, #0
 8002a28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a34:	4642      	mov	r2, r8
 8002a36:	464b      	mov	r3, r9
 8002a38:	1891      	adds	r1, r2, r2
 8002a3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a3c:	415b      	adcs	r3, r3
 8002a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a44:	4641      	mov	r1, r8
 8002a46:	1851      	adds	r1, r2, r1
 8002a48:	6339      	str	r1, [r7, #48]	; 0x30
 8002a4a:	4649      	mov	r1, r9
 8002a4c:	414b      	adcs	r3, r1
 8002a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002a5c:	4659      	mov	r1, fp
 8002a5e:	00cb      	lsls	r3, r1, #3
 8002a60:	4651      	mov	r1, sl
 8002a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a66:	4651      	mov	r1, sl
 8002a68:	00ca      	lsls	r2, r1, #3
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4642      	mov	r2, r8
 8002a72:	189b      	adds	r3, r3, r2
 8002a74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a78:	464b      	mov	r3, r9
 8002a7a:	460a      	mov	r2, r1
 8002a7c:	eb42 0303 	adc.w	r3, r2, r3
 8002a80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a98:	460b      	mov	r3, r1
 8002a9a:	18db      	adds	r3, r3, r3
 8002a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	eb42 0303 	adc.w	r3, r2, r3
 8002aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002aaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002aae:	f7fd fb9f 	bl	80001f0 <__aeabi_uldivmod>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <UART_SetConfig+0x2d4>)
 8002ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	2164      	movs	r1, #100	; 0x64
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	3332      	adds	r3, #50	; 0x32
 8002aca:	4a08      	ldr	r2, [pc, #32]	; (8002aec <UART_SetConfig+0x2d4>)
 8002acc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	f003 0207 	and.w	r2, r3, #7
 8002ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4422      	add	r2, r4
 8002ade:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ae0:	e105      	b.n	8002cee <UART_SetConfig+0x4d6>
 8002ae2:	bf00      	nop
 8002ae4:	40011000 	.word	0x40011000
 8002ae8:	40011400 	.word	0x40011400
 8002aec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002af4:	2200      	movs	r2, #0
 8002af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002afa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002afe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b02:	4642      	mov	r2, r8
 8002b04:	464b      	mov	r3, r9
 8002b06:	1891      	adds	r1, r2, r2
 8002b08:	6239      	str	r1, [r7, #32]
 8002b0a:	415b      	adcs	r3, r3
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b12:	4641      	mov	r1, r8
 8002b14:	1854      	adds	r4, r2, r1
 8002b16:	4649      	mov	r1, r9
 8002b18:	eb43 0501 	adc.w	r5, r3, r1
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	00eb      	lsls	r3, r5, #3
 8002b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b2a:	00e2      	lsls	r2, r4, #3
 8002b2c:	4614      	mov	r4, r2
 8002b2e:	461d      	mov	r5, r3
 8002b30:	4643      	mov	r3, r8
 8002b32:	18e3      	adds	r3, r4, r3
 8002b34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b38:	464b      	mov	r3, r9
 8002b3a:	eb45 0303 	adc.w	r3, r5, r3
 8002b3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b5e:	4629      	mov	r1, r5
 8002b60:	008b      	lsls	r3, r1, #2
 8002b62:	4621      	mov	r1, r4
 8002b64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b68:	4621      	mov	r1, r4
 8002b6a:	008a      	lsls	r2, r1, #2
 8002b6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002b70:	f7fd fb3e 	bl	80001f0 <__aeabi_uldivmod>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4b60      	ldr	r3, [pc, #384]	; (8002cfc <UART_SetConfig+0x4e4>)
 8002b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	011c      	lsls	r4, r3, #4
 8002b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b86:	2200      	movs	r2, #0
 8002b88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b94:	4642      	mov	r2, r8
 8002b96:	464b      	mov	r3, r9
 8002b98:	1891      	adds	r1, r2, r2
 8002b9a:	61b9      	str	r1, [r7, #24]
 8002b9c:	415b      	adcs	r3, r3
 8002b9e:	61fb      	str	r3, [r7, #28]
 8002ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ba4:	4641      	mov	r1, r8
 8002ba6:	1851      	adds	r1, r2, r1
 8002ba8:	6139      	str	r1, [r7, #16]
 8002baa:	4649      	mov	r1, r9
 8002bac:	414b      	adcs	r3, r1
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bbc:	4659      	mov	r1, fp
 8002bbe:	00cb      	lsls	r3, r1, #3
 8002bc0:	4651      	mov	r1, sl
 8002bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bc6:	4651      	mov	r1, sl
 8002bc8:	00ca      	lsls	r2, r1, #3
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4642      	mov	r2, r8
 8002bd2:	189b      	adds	r3, r3, r2
 8002bd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bd8:	464b      	mov	r3, r9
 8002bda:	460a      	mov	r2, r1
 8002bdc:	eb42 0303 	adc.w	r3, r2, r3
 8002be0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002bfc:	4649      	mov	r1, r9
 8002bfe:	008b      	lsls	r3, r1, #2
 8002c00:	4641      	mov	r1, r8
 8002c02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c06:	4641      	mov	r1, r8
 8002c08:	008a      	lsls	r2, r1, #2
 8002c0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c0e:	f7fd faef 	bl	80001f0 <__aeabi_uldivmod>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4b39      	ldr	r3, [pc, #228]	; (8002cfc <UART_SetConfig+0x4e4>)
 8002c18:	fba3 1302 	umull	r1, r3, r3, r2
 8002c1c:	095b      	lsrs	r3, r3, #5
 8002c1e:	2164      	movs	r1, #100	; 0x64
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	3332      	adds	r3, #50	; 0x32
 8002c2a:	4a34      	ldr	r2, [pc, #208]	; (8002cfc <UART_SetConfig+0x4e4>)
 8002c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c30:	095b      	lsrs	r3, r3, #5
 8002c32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c36:	441c      	add	r4, r3
 8002c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	673b      	str	r3, [r7, #112]	; 0x70
 8002c40:	677a      	str	r2, [r7, #116]	; 0x74
 8002c42:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c46:	4642      	mov	r2, r8
 8002c48:	464b      	mov	r3, r9
 8002c4a:	1891      	adds	r1, r2, r2
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	415b      	adcs	r3, r3
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c56:	4641      	mov	r1, r8
 8002c58:	1851      	adds	r1, r2, r1
 8002c5a:	6039      	str	r1, [r7, #0]
 8002c5c:	4649      	mov	r1, r9
 8002c5e:	414b      	adcs	r3, r1
 8002c60:	607b      	str	r3, [r7, #4]
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c6e:	4659      	mov	r1, fp
 8002c70:	00cb      	lsls	r3, r1, #3
 8002c72:	4651      	mov	r1, sl
 8002c74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c78:	4651      	mov	r1, sl
 8002c7a:	00ca      	lsls	r2, r1, #3
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4603      	mov	r3, r0
 8002c82:	4642      	mov	r2, r8
 8002c84:	189b      	adds	r3, r3, r2
 8002c86:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c88:	464b      	mov	r3, r9
 8002c8a:	460a      	mov	r2, r1
 8002c8c:	eb42 0303 	adc.w	r3, r2, r3
 8002c90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	663b      	str	r3, [r7, #96]	; 0x60
 8002c9c:	667a      	str	r2, [r7, #100]	; 0x64
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002caa:	4649      	mov	r1, r9
 8002cac:	008b      	lsls	r3, r1, #2
 8002cae:	4641      	mov	r1, r8
 8002cb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cb4:	4641      	mov	r1, r8
 8002cb6:	008a      	lsls	r2, r1, #2
 8002cb8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002cbc:	f7fd fa98 	bl	80001f0 <__aeabi_uldivmod>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <UART_SetConfig+0x4e4>)
 8002cc6:	fba3 1302 	umull	r1, r3, r3, r2
 8002cca:	095b      	lsrs	r3, r3, #5
 8002ccc:	2164      	movs	r1, #100	; 0x64
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	3332      	adds	r3, #50	; 0x32
 8002cd8:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <UART_SetConfig+0x4e4>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	f003 020f 	and.w	r2, r3, #15
 8002ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4422      	add	r2, r4
 8002cec:	609a      	str	r2, [r3, #8]
}
 8002cee:	bf00      	nop
 8002cf0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cfa:	bf00      	nop
 8002cfc:	51eb851f 	.word	0x51eb851f

08002d00 <__libc_init_array>:
 8002d00:	b570      	push	{r4, r5, r6, lr}
 8002d02:	4d0d      	ldr	r5, [pc, #52]	; (8002d38 <__libc_init_array+0x38>)
 8002d04:	4c0d      	ldr	r4, [pc, #52]	; (8002d3c <__libc_init_array+0x3c>)
 8002d06:	1b64      	subs	r4, r4, r5
 8002d08:	10a4      	asrs	r4, r4, #2
 8002d0a:	2600      	movs	r6, #0
 8002d0c:	42a6      	cmp	r6, r4
 8002d0e:	d109      	bne.n	8002d24 <__libc_init_array+0x24>
 8002d10:	4d0b      	ldr	r5, [pc, #44]	; (8002d40 <__libc_init_array+0x40>)
 8002d12:	4c0c      	ldr	r4, [pc, #48]	; (8002d44 <__libc_init_array+0x44>)
 8002d14:	f000 f820 	bl	8002d58 <_init>
 8002d18:	1b64      	subs	r4, r4, r5
 8002d1a:	10a4      	asrs	r4, r4, #2
 8002d1c:	2600      	movs	r6, #0
 8002d1e:	42a6      	cmp	r6, r4
 8002d20:	d105      	bne.n	8002d2e <__libc_init_array+0x2e>
 8002d22:	bd70      	pop	{r4, r5, r6, pc}
 8002d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d28:	4798      	blx	r3
 8002d2a:	3601      	adds	r6, #1
 8002d2c:	e7ee      	b.n	8002d0c <__libc_init_array+0xc>
 8002d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d32:	4798      	blx	r3
 8002d34:	3601      	adds	r6, #1
 8002d36:	e7f2      	b.n	8002d1e <__libc_init_array+0x1e>
 8002d38:	08002d90 	.word	0x08002d90
 8002d3c:	08002d90 	.word	0x08002d90
 8002d40:	08002d90 	.word	0x08002d90
 8002d44:	08002d94 	.word	0x08002d94

08002d48 <memset>:
 8002d48:	4402      	add	r2, r0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d100      	bne.n	8002d52 <memset+0xa>
 8002d50:	4770      	bx	lr
 8002d52:	f803 1b01 	strb.w	r1, [r3], #1
 8002d56:	e7f9      	b.n	8002d4c <memset+0x4>

08002d58 <_init>:
 8002d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5a:	bf00      	nop
 8002d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d5e:	bc08      	pop	{r3}
 8002d60:	469e      	mov	lr, r3
 8002d62:	4770      	bx	lr

08002d64 <_fini>:
 8002d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d66:	bf00      	nop
 8002d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d6a:	bc08      	pop	{r3}
 8002d6c:	469e      	mov	lr, r3
 8002d6e:	4770      	bx	lr
