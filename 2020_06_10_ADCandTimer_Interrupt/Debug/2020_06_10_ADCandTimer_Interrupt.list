
2020_06_10_ADCandTimer_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053cc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800557c  0800557c  0001557c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800565c  0800565c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800565c  0800565c  0001565c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005664  08005664  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005664  08005664  00015664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005668  08005668  00015668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800566c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000012c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000019c  2000019c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012970  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cbe  00000000  00000000  00032a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  000356d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ed8  00000000  00000000  000366f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002726f  00000000  00000000  000375c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000148ec  00000000  00000000  0005e837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000edfbd  00000000  00000000  00073123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001610e0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049f0  00000000  00000000  00161130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005564 	.word	0x08005564

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005564 	.word	0x08005564

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800059a:	463b      	mov	r3, r7
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005a6:	4b22      	ldr	r3, [pc, #136]	; (8000630 <MX_ADC1_Init+0x9c>)
 80005a8:	4a22      	ldr	r2, [pc, #136]	; (8000634 <MX_ADC1_Init+0xa0>)
 80005aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005ac:	4b20      	ldr	r3, [pc, #128]	; (8000630 <MX_ADC1_Init+0x9c>)
 80005ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <MX_ADC1_Init+0x9c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ba:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <MX_ADC1_Init+0x9c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <MX_ADC1_Init+0x9c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c6:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <MX_ADC1_Init+0x9c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005ce:	4b18      	ldr	r3, [pc, #96]	; (8000630 <MX_ADC1_Init+0x9c>)
 80005d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80005d6:	4b16      	ldr	r3, [pc, #88]	; (8000630 <MX_ADC1_Init+0x9c>)
 80005d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_ADC1_Init+0x9c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_ADC1_Init+0x9c>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_ADC1_Init+0x9c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_ADC1_Init+0x9c>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f8:	480d      	ldr	r0, [pc, #52]	; (8000630 <MX_ADC1_Init+0x9c>)
 80005fa:	f000 fcbf 	bl	8000f7c <HAL_ADC_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000604:	f000 f9c2 	bl	800098c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000608:	2303      	movs	r3, #3
 800060a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800060c:	2301      	movs	r3, #1
 800060e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	4619      	mov	r1, r3
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_ADC1_Init+0x9c>)
 800061a:	f000 fdd3 	bl	80011c4 <HAL_ADC_ConfigChannel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000624:	f000 f9b2 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2000008c 	.word	0x2000008c
 8000634:	40012000 	.word	0x40012000

08000638 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <HAL_ADC_MspInit+0x7c>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d127      	bne.n	80006aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <HAL_ADC_MspInit+0x80>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000662:	4a15      	ldr	r2, [pc, #84]	; (80006b8 <HAL_ADC_MspInit+0x80>)
 8000664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000668:	6453      	str	r3, [r2, #68]	; 0x44
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <HAL_ADC_MspInit+0x80>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <HAL_ADC_MspInit+0x80>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <HAL_ADC_MspInit+0x80>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <HAL_ADC_MspInit+0x80>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000692:	2308      	movs	r3, #8
 8000694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000696:	2303      	movs	r3, #3
 8000698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <HAL_ADC_MspInit+0x84>)
 80006a6:	f001 f95f 	bl	8001968 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	; 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40012000 	.word	0x40012000
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40020000 	.word	0x40020000

080006c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <MX_GPIO_Init+0x90>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a1c      	ldr	r2, [pc, #112]	; (8000750 <MX_GPIO_Init+0x90>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_GPIO_Init+0x90>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_GPIO_Init+0x90>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a15      	ldr	r2, [pc, #84]	; (8000750 <MX_GPIO_Init+0x90>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_GPIO_Init+0x90>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_GPIO_Init+0x90>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <MX_GPIO_Init+0x90>)
 8000718:	f043 0308 	orr.w	r3, r3, #8
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_GPIO_Init+0x90>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0308 	and.w	r3, r3, #8
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800072a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000730:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000734:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	4619      	mov	r1, r3
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_GPIO_Init+0x94>)
 8000742:	f001 f911 	bl	8001968 <HAL_GPIO_Init>

}
 8000746:	bf00      	nop
 8000748:	3720      	adds	r7, #32
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40020800 	.word	0x40020800

08000758 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart3, &ch, 1, 100);
 8000760:	1d39      	adds	r1, r7, #4
 8000762:	2364      	movs	r3, #100	; 0x64
 8000764:	2201      	movs	r2, #1
 8000766:	4804      	ldr	r0, [pc, #16]	; (8000778 <__io_putchar+0x20>)
 8000768:	f002 feff 	bl	800356a <HAL_UART_Transmit>

	return ch;
 800076c:	687b      	ldr	r3, [r7, #4]
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000144 	.word	0x20000144

0800077c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000780:	f000 fb8a 	bl	8000e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000784:	f000 f816 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000788:	f7ff ff9a 	bl	80006c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800078c:	f7ff ff02 	bl	8000594 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000790:	f000 fa76 	bl	8000c80 <MX_TIM3_Init>
  MX_RTC_Init();
 8000794:	f000 f900 	bl	8000998 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000798:	f000 fae2 	bl	8000d60 <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800079c:	f000 f87c 	bl	8000898 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
/*  HAL_UART_Receive_IT(&huart3, &rx, 1);*/
  HAL_TIM_Base_Init(&htim3);
 80007a0:	4803      	ldr	r0, [pc, #12]	; (80007b0 <main+0x34>)
 80007a2:	f002 fa13 	bl	8002bcc <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 80007a6:	4802      	ldr	r0, [pc, #8]	; (80007b0 <main+0x34>)
 80007a8:	f002 fa60 	bl	8002c6c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80007ac:	e7fe      	b.n	80007ac <main+0x30>
 80007ae:	bf00      	nop
 80007b0:	200000fc 	.word	0x200000fc

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	; 0x50
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	2230      	movs	r2, #48	; 0x30
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f003 fec2 	bl	800454c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <SystemClock_Config+0xdc>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	4a2b      	ldr	r2, [pc, #172]	; (8000890 <SystemClock_Config+0xdc>)
 80007e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e6:	6413      	str	r3, [r2, #64]	; 0x40
 80007e8:	4b29      	ldr	r3, [pc, #164]	; (8000890 <SystemClock_Config+0xdc>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	4b26      	ldr	r3, [pc, #152]	; (8000894 <SystemClock_Config+0xe0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a25      	ldr	r2, [pc, #148]	; (8000894 <SystemClock_Config+0xe0>)
 80007fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	4b23      	ldr	r3, [pc, #140]	; (8000894 <SystemClock_Config+0xe0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000810:	2306      	movs	r3, #6
 8000812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000814:	2301      	movs	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000818:	2301      	movs	r3, #1
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081c:	2310      	movs	r3, #16
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000820:	2302      	movs	r3, #2
 8000822:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000824:	2300      	movs	r3, #0
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000828:	2308      	movs	r3, #8
 800082a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800082c:	23b4      	movs	r3, #180	; 0xb4
 800082e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000830:	2302      	movs	r3, #2
 8000832:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000834:	2304      	movs	r3, #4
 8000836:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000838:	f107 0320 	add.w	r3, r7, #32
 800083c:	4618      	mov	r0, r3
 800083e:	f001 fab3 	bl	8001da8 <HAL_RCC_OscConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000848:	f000 f8a0 	bl	800098c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800084c:	f001 fa5c 	bl	8001d08 <HAL_PWREx_EnableOverDrive>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000856:	f000 f899 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085a:	230f      	movs	r3, #15
 800085c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	2302      	movs	r3, #2
 8000860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000866:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800086a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800086c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000870:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	2105      	movs	r1, #5
 8000878:	4618      	mov	r0, r3
 800087a:	f001 fd0d 	bl	8002298 <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000884:	f000 f882 	bl	800098c <Error_Handler>
  }
}
 8000888:	bf00      	nop
 800088a:	3750      	adds	r7, #80	; 0x50
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800
 8000894:	40007000 	.word	0x40007000

08000898 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	2100      	movs	r1, #0
 80008a0:	2028      	movs	r0, #40	; 0x28
 80008a2:	f000 ff98 	bl	80017d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008a6:	2028      	movs	r0, #40	; 0x28
 80008a8:	f000 ffb1 	bl	800180e <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2100      	movs	r1, #0
 80008b0:	2027      	movs	r0, #39	; 0x27
 80008b2:	f000 ff90 	bl	80017d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80008b6:	2027      	movs	r0, #39	; 0x27
 80008b8:	f000 ffa9 	bl	800180e <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	201d      	movs	r0, #29
 80008c2:	f000 ff88 	bl	80017d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008c6:	201d      	movs	r0, #29
 80008c8:	f000 ffa1 	bl	800180e <HAL_NVIC_EnableIRQ>
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a23      	ldr	r2, [pc, #140]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d140      	bne.n	8000964 <HAL_TIM_PeriodElapsedCallback+0x94>
		HAL_ADC_Start(&hadc1);
 80008e2:	4823      	ldr	r0, [pc, #140]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80008e4:	f000 fb8e 	bl	8001004 <HAL_ADC_Start>
		ADC_value = HAL_ADC_GetValue(&hadc1);
 80008e8:	4821      	ldr	r0, [pc, #132]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80008ea:	f000 fc5d 	bl	80011a8 <HAL_ADC_GetValue>
 80008ee:	4603      	mov	r3, r0
 80008f0:	4a20      	ldr	r2, [pc, #128]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80008f2:	6013      	str	r3, [r2, #0]
		printf("ADC_value = %lu\r\n", ADC_value);
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	481f      	ldr	r0, [pc, #124]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80008fc:	f003 fe2e 	bl	800455c <iprintf>
		if (ADC_value <= UP_KEY_MAX) {
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b0f      	cmp	r3, #15
 8000906:	d802      	bhi.n	800090e <HAL_TIM_PeriodElapsedCallback+0x3e>
			printf("UP\r\n");
 8000908:	481c      	ldr	r0, [pc, #112]	; (800097c <HAL_TIM_PeriodElapsedCallback+0xac>)
 800090a:	f003 fead 	bl	8004668 <puts>
		}
		if (ADC_value >= DOWN_KEY_MIN && ADC_value <= DOWN_KEY_MAX) {
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f240 323d 	movw	r2, #829	; 0x33d
 8000916:	4293      	cmp	r3, r2
 8000918:	d908      	bls.n	800092c <HAL_TIM_PeriodElapsedCallback+0x5c>
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f240 3266 	movw	r2, #870	; 0x366
 8000922:	4293      	cmp	r3, r2
 8000924:	d802      	bhi.n	800092c <HAL_TIM_PeriodElapsedCallback+0x5c>
			printf("DOWN\r\n");
 8000926:	4816      	ldr	r0, [pc, #88]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000928:	f003 fe9e 	bl	8004668 <puts>
		}
		if (ADC_value >= LEFT_KEY_MIN && ADC_value <= LEFT_KEY_MAX) {
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8000934:	d307      	bcc.n	8000946 <HAL_TIM_PeriodElapsedCallback+0x76>
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f5b3 6ff5 	cmp.w	r3, #1960	; 0x7a8
 800093e:	d802      	bhi.n	8000946 <HAL_TIM_PeriodElapsedCallback+0x76>
			printf("LEFT\r\n");
 8000940:	4810      	ldr	r0, [pc, #64]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000942:	f003 fe91 	bl	8004668 <puts>
		}
		if (ADC_value >= RIGHT_KEY_MIN && ADC_value <= RIGHT_KEY_MAX) {
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f640 3285 	movw	r2, #2949	; 0xb85
 800094e:	4293      	cmp	r3, r2
 8000950:	d908      	bls.n	8000964 <HAL_TIM_PeriodElapsedCallback+0x94>
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f640 32c2 	movw	r2, #3010	; 0xbc2
 800095a:	4293      	cmp	r3, r2
 800095c:	d802      	bhi.n	8000964 <HAL_TIM_PeriodElapsedCallback+0x94>
			printf("RIGHT\r\n");
 800095e:	480a      	ldr	r0, [pc, #40]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000960:	f003 fe82 	bl	8004668 <puts>
		}
	}
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40000400 	.word	0x40000400
 8000970:	2000008c 	.word	0x2000008c
 8000974:	200000d4 	.word	0x200000d4
 8000978:	0800557c 	.word	0x0800557c
 800097c:	08005590 	.word	0x08005590
 8000980:	08005594 	.word	0x08005594
 8000984:	0800559c 	.word	0x0800559c
 8000988:	080055a4 	.word	0x080055a4

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_RTC_Init+0x44>)
 800099e:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <MX_RTC_Init+0x48>)
 80009a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_RTC_Init+0x44>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_RTC_Init+0x44>)
 80009aa:	227f      	movs	r2, #127	; 0x7f
 80009ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_RTC_Init+0x44>)
 80009b0:	22ff      	movs	r2, #255	; 0xff
 80009b2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_RTC_Init+0x44>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_RTC_Init+0x44>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_RTC_Init+0x44>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_RTC_Init+0x44>)
 80009c8:	f002 f806 	bl	80029d8 <HAL_RTC_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80009d2:	f7ff ffdb 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000d8 	.word	0x200000d8
 80009e0:	40002800 	.word	0x40002800

080009e4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08e      	sub	sp, #56	; 0x38
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	2230      	movs	r2, #48	; 0x30
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f003 fda9 	bl	800454c <memset>
  if(rtcHandle->Instance==RTC)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a0c      	ldr	r2, [pc, #48]	; (8000a30 <HAL_RTC_MspInit+0x4c>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d111      	bne.n	8000a28 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a04:	2320      	movs	r3, #32
 8000a06:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000a08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a0c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	4618      	mov	r0, r3
 8000a14:	f001 fe20 	bl	8002658 <HAL_RCCEx_PeriphCLKConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000a1e:	f7ff ffb5 	bl	800098c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <HAL_RTC_MspInit+0x50>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a28:	bf00      	nop
 8000a2a:	3738      	adds	r7, #56	; 0x38
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40002800 	.word	0x40002800
 8000a34:	42470e3c 	.word	0x42470e3c

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	4a0f      	ldr	r2, [pc, #60]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <NMI_Handler+0x4>

08000a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler+0x4>

08000a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <MemManage_Handler+0x4>

08000a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad4:	f000 fa32 	bl	8000f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <TIM3_IRQHandler+0x10>)
 8000ae2:	f002 f933 	bl	8002d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200000fc 	.word	0x200000fc

08000af0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <USART3_IRQHandler+0x10>)
 8000af6:	f002 fdcb 	bl	8003690 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000144 	.word	0x20000144

08000b04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b08:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b0c:	f001 f8d8 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	e00a      	b.n	8000b3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b26:	f3af 8000 	nop.w
 8000b2a:	4601      	mov	r1, r0
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	60ba      	str	r2, [r7, #8]
 8000b32:	b2ca      	uxtb	r2, r1
 8000b34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697a      	ldr	r2, [r7, #20]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	dbf0      	blt.n	8000b26 <_read+0x12>
	}

return len;
 8000b44:	687b      	ldr	r3, [r7, #4]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b086      	sub	sp, #24
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	60f8      	str	r0, [r7, #12]
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	e009      	b.n	8000b74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	60ba      	str	r2, [r7, #8]
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fdf5 	bl	8000758 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	3301      	adds	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697a      	ldr	r2, [r7, #20]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	dbf1      	blt.n	8000b60 <_write+0x12>
	}
	return len;
 8000b7c:	687b      	ldr	r3, [r7, #4]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <_close>:

int _close(int file)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bae:	605a      	str	r2, [r3, #4]
	return 0;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <_isatty>:

int _isatty(int file)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
	return 1;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
	return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <_sbrk+0x5c>)
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <_sbrk+0x60>)
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <_sbrk+0x64>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <_sbrk+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d207      	bcs.n	8000c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c20:	f003 fc6a 	bl	80044f8 <__errno>
 8000c24:	4603      	mov	r3, r0
 8000c26:	220c      	movs	r2, #12
 8000c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2e:	e009      	b.n	8000c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <_sbrk+0x64>)
 8000c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20030000 	.word	0x20030000
 8000c50:	00000400 	.word	0x00000400
 8000c54:	200000f8 	.word	0x200000f8
 8000c58:	200001a0 	.word	0x200001a0

08000c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c86:	f107 0308 	add.w	r3, r7, #8
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c94:	463b      	mov	r3, r7
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <MX_TIM3_Init+0x94>)
 8000c9e:	4a1e      	ldr	r2, [pc, #120]	; (8000d18 <MX_TIM3_Init+0x98>)
 8000ca0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <MX_TIM3_Init+0x94>)
 8000ca4:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ca8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <MX_TIM3_Init+0x94>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 900;
 8000cb0:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_TIM3_Init+0x94>)
 8000cb2:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000cb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_TIM3_Init+0x94>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_TIM3_Init+0x94>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cc4:	4813      	ldr	r0, [pc, #76]	; (8000d14 <MX_TIM3_Init+0x94>)
 8000cc6:	f001 ff81 	bl	8002bcc <HAL_TIM_Base_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000cd0:	f7ff fe5c 	bl	800098c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480c      	ldr	r0, [pc, #48]	; (8000d14 <MX_TIM3_Init+0x94>)
 8000ce2:	f002 f93b 	bl	8002f5c <HAL_TIM_ConfigClockSource>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000cec:	f7ff fe4e 	bl	800098c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cf0:	2320      	movs	r3, #32
 8000cf2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_TIM3_Init+0x94>)
 8000cfe:	f002 fb57 	bl	80033b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d08:	f7ff fe40 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200000fc 	.word	0x200000fc
 8000d18:	40000400 	.word	0x40000400

08000d1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <HAL_TIM_Base_MspInit+0x3c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d10d      	bne.n	8000d4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_TIM_Base_MspInit+0x40>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <HAL_TIM_Base_MspInit+0x40>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <HAL_TIM_Base_MspInit+0x40>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40000400 	.word	0x40000400
 8000d5c:	40023800 	.word	0x40023800

08000d60 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <MX_USART3_UART_Init+0x50>)
 8000d68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d86:	220c      	movs	r2, #12
 8000d88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d98:	f002 fb9a 	bl	80034d0 <HAL_UART_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000da2:	f7ff fdf3 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000144 	.word	0x20000144
 8000db0:	40004800 	.word	0x40004800

08000db4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a19      	ldr	r2, [pc, #100]	; (8000e38 <HAL_UART_MspInit+0x84>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d12c      	bne.n	8000e30 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <HAL_UART_MspInit+0x88>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <HAL_UART_MspInit+0x88>)
 8000de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de4:	6413      	str	r3, [r2, #64]	; 0x40
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_UART_MspInit+0x88>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_UART_MspInit+0x88>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a10      	ldr	r2, [pc, #64]	; (8000e3c <HAL_UART_MspInit+0x88>)
 8000dfc:	f043 0308 	orr.w	r3, r3, #8
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_UART_MspInit+0x88>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0308 	and.w	r3, r3, #8
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e20:	2307      	movs	r3, #7
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <HAL_UART_MspInit+0x8c>)
 8000e2c:	f000 fd9c 	bl	8001968 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e30:	bf00      	nop
 8000e32:	3728      	adds	r7, #40	; 0x28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40004800 	.word	0x40004800
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020c00 	.word	0x40020c00

08000e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e7c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e48:	480d      	ldr	r0, [pc, #52]	; (8000e80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e4a:	490e      	ldr	r1, [pc, #56]	; (8000e84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e60:	4c0b      	ldr	r4, [pc, #44]	; (8000e90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e6e:	f7ff fef5 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e72:	f003 fb47 	bl	8004504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e76:	f7ff fc81 	bl	800077c <main>
  bx  lr    
 8000e7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e7c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e88:	0800566c 	.word	0x0800566c
  ldr r2, =_sbss
 8000e8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e90:	2000019c 	.word	0x2000019c

08000e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC_IRQHandler>
	...

08000e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	; (8000ed8 <HAL_Init+0x40>)
 8000ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_Init+0x40>)
 8000eae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <HAL_Init+0x40>)
 8000eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 fc7d 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	200f      	movs	r0, #15
 8000ec8:	f000 f808 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ecc:	f7ff fdb4 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023c00 	.word	0x40023c00

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_InitTick+0x54>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x58>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 fc95 	bl	800182a <HAL_SYSTICK_Config>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00e      	b.n	8000f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d80a      	bhi.n	8000f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f000 fc5d 	bl	80017d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1c:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <HAL_InitTick+0x5c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000004 	.word	0x20000004

08000f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x20>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x24>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <HAL_IncTick+0x24>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000188 	.word	0x20000188

08000f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <HAL_GetTick+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000188 	.word	0x20000188

08000f7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e033      	b.n	8000ffa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d109      	bne.n	8000fae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff fb4c 	bl	8000638 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f003 0310 	and.w	r3, r3, #16
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d118      	bne.n	8000fec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fc2:	f023 0302 	bic.w	r3, r3, #2
 8000fc6:	f043 0202 	orr.w	r2, r3, #2
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 fa2a 	bl	8001428 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f023 0303 	bic.w	r3, r3, #3
 8000fe2:	f043 0201 	orr.w	r2, r3, #1
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	641a      	str	r2, [r3, #64]	; 0x40
 8000fea:	e001      	b.n	8000ff0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001016:	2b01      	cmp	r3, #1
 8001018:	d101      	bne.n	800101e <HAL_ADC_Start+0x1a>
 800101a:	2302      	movs	r3, #2
 800101c:	e0b2      	b.n	8001184 <HAL_ADC_Start+0x180>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2201      	movs	r2, #1
 8001022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b01      	cmp	r3, #1
 8001032:	d018      	beq.n	8001066 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f042 0201 	orr.w	r2, r2, #1
 8001042:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001044:	4b52      	ldr	r3, [pc, #328]	; (8001190 <HAL_ADC_Start+0x18c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a52      	ldr	r2, [pc, #328]	; (8001194 <HAL_ADC_Start+0x190>)
 800104a:	fba2 2303 	umull	r2, r3, r2, r3
 800104e:	0c9a      	lsrs	r2, r3, #18
 8001050:	4613      	mov	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4413      	add	r3, r2
 8001056:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001058:	e002      	b.n	8001060 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	3b01      	subs	r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f9      	bne.n	800105a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b01      	cmp	r3, #1
 8001072:	d17a      	bne.n	800116a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800107c:	f023 0301 	bic.w	r3, r3, #1
 8001080:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001092:	2b00      	cmp	r3, #0
 8001094:	d007      	beq.n	80010a6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800109e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010b2:	d106      	bne.n	80010c2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b8:	f023 0206 	bic.w	r2, r3, #6
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	645a      	str	r2, [r3, #68]	; 0x44
 80010c0:	e002      	b.n	80010c8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010d0:	4b31      	ldr	r3, [pc, #196]	; (8001198 <HAL_ADC_Start+0x194>)
 80010d2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010dc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 031f 	and.w	r3, r3, #31
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d12a      	bne.n	8001140 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a2b      	ldr	r2, [pc, #172]	; (800119c <HAL_ADC_Start+0x198>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d015      	beq.n	8001120 <HAL_ADC_Start+0x11c>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a29      	ldr	r2, [pc, #164]	; (80011a0 <HAL_ADC_Start+0x19c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d105      	bne.n	800110a <HAL_ADC_Start+0x106>
 80010fe:	4b26      	ldr	r3, [pc, #152]	; (8001198 <HAL_ADC_Start+0x194>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 031f 	and.w	r3, r3, #31
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00a      	beq.n	8001120 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a25      	ldr	r2, [pc, #148]	; (80011a4 <HAL_ADC_Start+0x1a0>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d136      	bne.n	8001182 <HAL_ADC_Start+0x17e>
 8001114:	4b20      	ldr	r3, [pc, #128]	; (8001198 <HAL_ADC_Start+0x194>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0310 	and.w	r3, r3, #16
 800111c:	2b00      	cmp	r3, #0
 800111e:	d130      	bne.n	8001182 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d129      	bne.n	8001182 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	e020      	b.n	8001182 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a15      	ldr	r2, [pc, #84]	; (800119c <HAL_ADC_Start+0x198>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d11b      	bne.n	8001182 <HAL_ADC_Start+0x17e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d114      	bne.n	8001182 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	e00b      	b.n	8001182 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f043 0210 	orr.w	r2, r3, #16
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f043 0201 	orr.w	r2, r3, #1
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	20000000 	.word	0x20000000
 8001194:	431bde83 	.word	0x431bde83
 8001198:	40012300 	.word	0x40012300
 800119c:	40012000 	.word	0x40012000
 80011a0:	40012100 	.word	0x40012100
 80011a4:	40012200 	.word	0x40012200

080011a8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x1c>
 80011dc:	2302      	movs	r3, #2
 80011de:	e113      	b.n	8001408 <HAL_ADC_ConfigChannel+0x244>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b09      	cmp	r3, #9
 80011ee:	d925      	bls.n	800123c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68d9      	ldr	r1, [r3, #12]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	4613      	mov	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	3b1e      	subs	r3, #30
 8001206:	2207      	movs	r2, #7
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43da      	mvns	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	400a      	ands	r2, r1
 8001214:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68d9      	ldr	r1, [r3, #12]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	b29b      	uxth	r3, r3
 8001226:	4618      	mov	r0, r3
 8001228:	4603      	mov	r3, r0
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4403      	add	r3, r0
 800122e:	3b1e      	subs	r3, #30
 8001230:	409a      	lsls	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	e022      	b.n	8001282 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6919      	ldr	r1, [r3, #16]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	b29b      	uxth	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	2207      	movs	r2, #7
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	400a      	ands	r2, r1
 800125e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6919      	ldr	r1, [r3, #16]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	4603      	mov	r3, r0
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4403      	add	r3, r0
 8001278:	409a      	lsls	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b06      	cmp	r3, #6
 8001288:	d824      	bhi.n	80012d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	3b05      	subs	r3, #5
 800129c:	221f      	movs	r2, #31
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	400a      	ands	r2, r1
 80012aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	3b05      	subs	r3, #5
 80012c6:	fa00 f203 	lsl.w	r2, r0, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	635a      	str	r2, [r3, #52]	; 0x34
 80012d2:	e04c      	b.n	800136e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b0c      	cmp	r3, #12
 80012da:	d824      	bhi.n	8001326 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	3b23      	subs	r3, #35	; 0x23
 80012ee:	221f      	movs	r2, #31
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43da      	mvns	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	400a      	ands	r2, r1
 80012fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	b29b      	uxth	r3, r3
 800130a:	4618      	mov	r0, r3
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	3b23      	subs	r3, #35	; 0x23
 8001318:	fa00 f203 	lsl.w	r2, r0, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	430a      	orrs	r2, r1
 8001322:	631a      	str	r2, [r3, #48]	; 0x30
 8001324:	e023      	b.n	800136e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	3b41      	subs	r3, #65	; 0x41
 8001338:	221f      	movs	r2, #31
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	400a      	ands	r2, r1
 8001346:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	b29b      	uxth	r3, r3
 8001354:	4618      	mov	r0, r3
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	3b41      	subs	r3, #65	; 0x41
 8001362:	fa00 f203 	lsl.w	r2, r0, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800136e:	4b29      	ldr	r3, [pc, #164]	; (8001414 <HAL_ADC_ConfigChannel+0x250>)
 8001370:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a28      	ldr	r2, [pc, #160]	; (8001418 <HAL_ADC_ConfigChannel+0x254>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d10f      	bne.n	800139c <HAL_ADC_ConfigChannel+0x1d8>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b12      	cmp	r3, #18
 8001382:	d10b      	bne.n	800139c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a1d      	ldr	r2, [pc, #116]	; (8001418 <HAL_ADC_ConfigChannel+0x254>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d12b      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x23a>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1c      	ldr	r2, [pc, #112]	; (800141c <HAL_ADC_ConfigChannel+0x258>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d003      	beq.n	80013b8 <HAL_ADC_ConfigChannel+0x1f4>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b11      	cmp	r3, #17
 80013b6:	d122      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a11      	ldr	r2, [pc, #68]	; (800141c <HAL_ADC_ConfigChannel+0x258>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d111      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <HAL_ADC_ConfigChannel+0x25c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a11      	ldr	r2, [pc, #68]	; (8001424 <HAL_ADC_ConfigChannel+0x260>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	0c9a      	lsrs	r2, r3, #18
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013f0:	e002      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f9      	bne.n	80013f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	40012300 	.word	0x40012300
 8001418:	40012000 	.word	0x40012000
 800141c:	10000012 	.word	0x10000012
 8001420:	20000000 	.word	0x20000000
 8001424:	431bde83 	.word	0x431bde83

08001428 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001430:	4b79      	ldr	r3, [pc, #484]	; (8001618 <ADC_Init+0x1f0>)
 8001432:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	431a      	orrs	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800145c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6859      	ldr	r1, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	021a      	lsls	r2, r3, #8
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001480:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6859      	ldr	r1, [r3, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6899      	ldr	r1, [r3, #8]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ba:	4a58      	ldr	r2, [pc, #352]	; (800161c <ADC_Init+0x1f4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d022      	beq.n	8001506 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6899      	ldr	r1, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6899      	ldr	r1, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	e00f      	b.n	8001526 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001514:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001524:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0202 	bic.w	r2, r2, #2
 8001534:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6899      	ldr	r1, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7e1b      	ldrb	r3, [r3, #24]
 8001540:	005a      	lsls	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d01b      	beq.n	800158c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001562:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001572:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6859      	ldr	r1, [r3, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	3b01      	subs	r3, #1
 8001580:	035a      	lsls	r2, r3, #13
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	e007      	b.n	800159c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800159a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	051a      	lsls	r2, r3, #20
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6899      	ldr	r1, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015de:	025a      	lsls	r2, r3, #9
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6899      	ldr	r1, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	029a      	lsls	r2, r3, #10
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	609a      	str	r2, [r3, #8]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40012300 	.word	0x40012300
 800161c:	0f000001 	.word	0x0f000001

08001620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0b      	blt.n	80016ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4907      	ldr	r1, [pc, #28]	; (80016bc <__NVIC_EnableIRQ+0x38>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800178c:	d301      	bcc.n	8001792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178e:	2301      	movs	r3, #1
 8001790:	e00f      	b.n	80017b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <SysTick_Config+0x40>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179a:	210f      	movs	r1, #15
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f7ff ff8e 	bl	80016c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <SysTick_Config+0x40>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <SysTick_Config+0x40>)
 80017ac:	2207      	movs	r2, #7
 80017ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	e000e010 	.word	0xe000e010

080017c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ff29 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e8:	f7ff ff3e 	bl	8001668 <__NVIC_GetPriorityGrouping>
 80017ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	6978      	ldr	r0, [r7, #20]
 80017f4:	f7ff ff8e 	bl	8001714 <NVIC_EncodePriority>
 80017f8:	4602      	mov	r2, r0
 80017fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff5d 	bl	80016c0 <__NVIC_SetPriority>
}
 8001806:	bf00      	nop
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff31 	bl	8001684 <__NVIC_EnableIRQ>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffa2 	bl	800177c <SysTick_Config>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b084      	sub	sp, #16
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001850:	f7ff fb88 	bl	8000f64 <HAL_GetTick>
 8001854:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d008      	beq.n	8001874 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2280      	movs	r2, #128	; 0x80
 8001866:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e052      	b.n	800191a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0216 	bic.w	r2, r2, #22
 8001882:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	695a      	ldr	r2, [r3, #20]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001892:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	2b00      	cmp	r3, #0
 800189a:	d103      	bne.n	80018a4 <HAL_DMA_Abort+0x62>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d007      	beq.n	80018b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0208 	bic.w	r2, r2, #8
 80018b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0201 	bic.w	r2, r2, #1
 80018c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018c4:	e013      	b.n	80018ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018c6:	f7ff fb4d 	bl	8000f64 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	d90c      	bls.n	80018ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2220      	movs	r2, #32
 80018d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2203      	movs	r2, #3
 80018de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e015      	b.n	800191a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1e4      	bne.n	80018c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001900:	223f      	movs	r2, #63	; 0x3f
 8001902:	409a      	lsls	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d004      	beq.n	8001940 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2280      	movs	r2, #128	; 0x80
 800193a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e00c      	b.n	800195a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2205      	movs	r2, #5
 8001944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0201 	bic.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	e177      	b.n	8001c74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001984:	2201      	movs	r2, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	429a      	cmp	r2, r3
 800199e:	f040 8166 	bne.w	8001c6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d005      	beq.n	80019ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d130      	bne.n	8001a1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	2203      	movs	r2, #3
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f0:	2201      	movs	r2, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	f003 0201 	and.w	r2, r3, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d017      	beq.n	8001a58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2203      	movs	r2, #3
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d123      	bne.n	8001aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3208      	adds	r2, #8
 8001a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	08da      	lsrs	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3208      	adds	r2, #8
 8001aa6:	69b9      	ldr	r1, [r7, #24]
 8001aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0203 	and.w	r2, r3, #3
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80c0 	beq.w	8001c6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b66      	ldr	r3, [pc, #408]	; (8001c8c <HAL_GPIO_Init+0x324>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	4a65      	ldr	r2, [pc, #404]	; (8001c8c <HAL_GPIO_Init+0x324>)
 8001af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001afc:	6453      	str	r3, [r2, #68]	; 0x44
 8001afe:	4b63      	ldr	r3, [pc, #396]	; (8001c8c <HAL_GPIO_Init+0x324>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b0a:	4a61      	ldr	r2, [pc, #388]	; (8001c90 <HAL_GPIO_Init+0x328>)
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	3302      	adds	r3, #2
 8001b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	220f      	movs	r2, #15
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a58      	ldr	r2, [pc, #352]	; (8001c94 <HAL_GPIO_Init+0x32c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d037      	beq.n	8001ba6 <HAL_GPIO_Init+0x23e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a57      	ldr	r2, [pc, #348]	; (8001c98 <HAL_GPIO_Init+0x330>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d031      	beq.n	8001ba2 <HAL_GPIO_Init+0x23a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a56      	ldr	r2, [pc, #344]	; (8001c9c <HAL_GPIO_Init+0x334>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d02b      	beq.n	8001b9e <HAL_GPIO_Init+0x236>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a55      	ldr	r2, [pc, #340]	; (8001ca0 <HAL_GPIO_Init+0x338>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d025      	beq.n	8001b9a <HAL_GPIO_Init+0x232>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a54      	ldr	r2, [pc, #336]	; (8001ca4 <HAL_GPIO_Init+0x33c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d01f      	beq.n	8001b96 <HAL_GPIO_Init+0x22e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a53      	ldr	r2, [pc, #332]	; (8001ca8 <HAL_GPIO_Init+0x340>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d019      	beq.n	8001b92 <HAL_GPIO_Init+0x22a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a52      	ldr	r2, [pc, #328]	; (8001cac <HAL_GPIO_Init+0x344>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <HAL_GPIO_Init+0x226>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a51      	ldr	r2, [pc, #324]	; (8001cb0 <HAL_GPIO_Init+0x348>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00d      	beq.n	8001b8a <HAL_GPIO_Init+0x222>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a50      	ldr	r2, [pc, #320]	; (8001cb4 <HAL_GPIO_Init+0x34c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d007      	beq.n	8001b86 <HAL_GPIO_Init+0x21e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4f      	ldr	r2, [pc, #316]	; (8001cb8 <HAL_GPIO_Init+0x350>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d101      	bne.n	8001b82 <HAL_GPIO_Init+0x21a>
 8001b7e:	2309      	movs	r3, #9
 8001b80:	e012      	b.n	8001ba8 <HAL_GPIO_Init+0x240>
 8001b82:	230a      	movs	r3, #10
 8001b84:	e010      	b.n	8001ba8 <HAL_GPIO_Init+0x240>
 8001b86:	2308      	movs	r3, #8
 8001b88:	e00e      	b.n	8001ba8 <HAL_GPIO_Init+0x240>
 8001b8a:	2307      	movs	r3, #7
 8001b8c:	e00c      	b.n	8001ba8 <HAL_GPIO_Init+0x240>
 8001b8e:	2306      	movs	r3, #6
 8001b90:	e00a      	b.n	8001ba8 <HAL_GPIO_Init+0x240>
 8001b92:	2305      	movs	r3, #5
 8001b94:	e008      	b.n	8001ba8 <HAL_GPIO_Init+0x240>
 8001b96:	2304      	movs	r3, #4
 8001b98:	e006      	b.n	8001ba8 <HAL_GPIO_Init+0x240>
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e004      	b.n	8001ba8 <HAL_GPIO_Init+0x240>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e002      	b.n	8001ba8 <HAL_GPIO_Init+0x240>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <HAL_GPIO_Init+0x240>
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	f002 0203 	and.w	r2, r2, #3
 8001bae:	0092      	lsls	r2, r2, #2
 8001bb0:	4093      	lsls	r3, r2
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bb8:	4935      	ldr	r1, [pc, #212]	; (8001c90 <HAL_GPIO_Init+0x328>)
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	089b      	lsrs	r3, r3, #2
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bc6:	4b3d      	ldr	r3, [pc, #244]	; (8001cbc <HAL_GPIO_Init+0x354>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bea:	4a34      	ldr	r2, [pc, #208]	; (8001cbc <HAL_GPIO_Init+0x354>)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bf0:	4b32      	ldr	r3, [pc, #200]	; (8001cbc <HAL_GPIO_Init+0x354>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c14:	4a29      	ldr	r2, [pc, #164]	; (8001cbc <HAL_GPIO_Init+0x354>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c1a:	4b28      	ldr	r3, [pc, #160]	; (8001cbc <HAL_GPIO_Init+0x354>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c3e:	4a1f      	ldr	r2, [pc, #124]	; (8001cbc <HAL_GPIO_Init+0x354>)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c44:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <HAL_GPIO_Init+0x354>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c68:	4a14      	ldr	r2, [pc, #80]	; (8001cbc <HAL_GPIO_Init+0x354>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3301      	adds	r3, #1
 8001c72:	61fb      	str	r3, [r7, #28]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	2b0f      	cmp	r3, #15
 8001c78:	f67f ae84 	bls.w	8001984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3724      	adds	r7, #36	; 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40013800 	.word	0x40013800
 8001c94:	40020000 	.word	0x40020000
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	40020800 	.word	0x40020800
 8001ca0:	40020c00 	.word	0x40020c00
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40021400 	.word	0x40021400
 8001cac:	40021800 	.word	0x40021800
 8001cb0:	40021c00 	.word	0x40021c00
 8001cb4:	40022000 	.word	0x40022000
 8001cb8:	40022400 	.word	0x40022400
 8001cbc:	40013c00 	.word	0x40013c00

08001cc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d006      	beq.n	8001ce4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cd6:	4a05      	ldr	r2, [pc, #20]	; (8001cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 f806 	bl	8001cf0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40013c00 	.word	0x40013c00

08001cf0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	603b      	str	r3, [r7, #0]
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	4a1f      	ldr	r2, [pc, #124]	; (8001d98 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d20:	6413      	str	r3, [r2, #64]	; 0x40
 8001d22:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <HAL_PWREx_EnableOverDrive+0x94>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d34:	f7ff f916 	bl	8000f64 <HAL_GetTick>
 8001d38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d3a:	e009      	b.n	8001d50 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d3c:	f7ff f912 	bl	8000f64 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d4a:	d901      	bls.n	8001d50 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e01f      	b.n	8001d90 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d50:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5c:	d1ee      	bne.n	8001d3c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d64:	f7ff f8fe 	bl	8000f64 <HAL_GetTick>
 8001d68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d6a:	e009      	b.n	8001d80 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d6c:	f7ff f8fa 	bl	8000f64 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d7a:	d901      	bls.n	8001d80 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e007      	b.n	8001d90 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d80:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d8c:	d1ee      	bne.n	8001d6c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	420e0040 	.word	0x420e0040
 8001da0:	40007000 	.word	0x40007000
 8001da4:	420e0044 	.word	0x420e0044

08001da8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e267      	b.n	800228a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d075      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dc6:	4b88      	ldr	r3, [pc, #544]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d00c      	beq.n	8001dec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dd2:	4b85      	ldr	r3, [pc, #532]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d112      	bne.n	8001e04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dde:	4b82      	ldr	r3, [pc, #520]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dea:	d10b      	bne.n	8001e04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dec:	4b7e      	ldr	r3, [pc, #504]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d05b      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x108>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d157      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e242      	b.n	800228a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e0c:	d106      	bne.n	8001e1c <HAL_RCC_OscConfig+0x74>
 8001e0e:	4b76      	ldr	r3, [pc, #472]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a75      	ldr	r2, [pc, #468]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e01d      	b.n	8001e58 <HAL_RCC_OscConfig+0xb0>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e24:	d10c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x98>
 8001e26:	4b70      	ldr	r3, [pc, #448]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a6f      	ldr	r2, [pc, #444]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	4b6d      	ldr	r3, [pc, #436]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a6c      	ldr	r2, [pc, #432]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e00b      	b.n	8001e58 <HAL_RCC_OscConfig+0xb0>
 8001e40:	4b69      	ldr	r3, [pc, #420]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a68      	ldr	r2, [pc, #416]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	4b66      	ldr	r3, [pc, #408]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a65      	ldr	r2, [pc, #404]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d013      	beq.n	8001e88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7ff f880 	bl	8000f64 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e68:	f7ff f87c 	bl	8000f64 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b64      	cmp	r3, #100	; 0x64
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e207      	b.n	800228a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7a:	4b5b      	ldr	r3, [pc, #364]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0xc0>
 8001e86:	e014      	b.n	8001eb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e88:	f7ff f86c 	bl	8000f64 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e90:	f7ff f868 	bl	8000f64 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b64      	cmp	r3, #100	; 0x64
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e1f3      	b.n	800228a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea2:	4b51      	ldr	r3, [pc, #324]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0xe8>
 8001eae:	e000      	b.n	8001eb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d063      	beq.n	8001f86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ebe:	4b4a      	ldr	r3, [pc, #296]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00b      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eca:	4b47      	ldr	r3, [pc, #284]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d11c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ed6:	4b44      	ldr	r3, [pc, #272]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d116      	bne.n	8001f10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee2:	4b41      	ldr	r3, [pc, #260]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d005      	beq.n	8001efa <HAL_RCC_OscConfig+0x152>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d001      	beq.n	8001efa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e1c7      	b.n	800228a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efa:	4b3b      	ldr	r3, [pc, #236]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4937      	ldr	r1, [pc, #220]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0e:	e03a      	b.n	8001f86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d020      	beq.n	8001f5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f18:	4b34      	ldr	r3, [pc, #208]	; (8001fec <HAL_RCC_OscConfig+0x244>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1e:	f7ff f821 	bl	8000f64 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f26:	f7ff f81d 	bl	8000f64 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e1a8      	b.n	800228a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f38:	4b2b      	ldr	r3, [pc, #172]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f44:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4925      	ldr	r1, [pc, #148]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	600b      	str	r3, [r1, #0]
 8001f58:	e015      	b.n	8001f86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f5a:	4b24      	ldr	r3, [pc, #144]	; (8001fec <HAL_RCC_OscConfig+0x244>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7ff f800 	bl	8000f64 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f68:	f7fe fffc 	bl	8000f64 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e187      	b.n	800228a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7a:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d036      	beq.n	8002000 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d016      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <HAL_RCC_OscConfig+0x248>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa0:	f7fe ffe0 	bl	8000f64 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fa8:	f7fe ffdc 	bl	8000f64 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e167      	b.n	800228a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x200>
 8001fc6:	e01b      	b.n	8002000 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <HAL_RCC_OscConfig+0x248>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fce:	f7fe ffc9 	bl	8000f64 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd4:	e00e      	b.n	8001ff4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fd6:	f7fe ffc5 	bl	8000f64 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d907      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e150      	b.n	800228a <HAL_RCC_OscConfig+0x4e2>
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	42470000 	.word	0x42470000
 8001ff0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff4:	4b88      	ldr	r3, [pc, #544]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 8001ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1ea      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 8097 	beq.w	800213c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200e:	2300      	movs	r3, #0
 8002010:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002012:	4b81      	ldr	r3, [pc, #516]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10f      	bne.n	800203e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	4b7d      	ldr	r3, [pc, #500]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	4a7c      	ldr	r2, [pc, #496]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 8002028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202c:	6413      	str	r3, [r2, #64]	; 0x40
 800202e:	4b7a      	ldr	r3, [pc, #488]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800203a:	2301      	movs	r3, #1
 800203c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203e:	4b77      	ldr	r3, [pc, #476]	; (800221c <HAL_RCC_OscConfig+0x474>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002046:	2b00      	cmp	r3, #0
 8002048:	d118      	bne.n	800207c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800204a:	4b74      	ldr	r3, [pc, #464]	; (800221c <HAL_RCC_OscConfig+0x474>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a73      	ldr	r2, [pc, #460]	; (800221c <HAL_RCC_OscConfig+0x474>)
 8002050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002056:	f7fe ff85 	bl	8000f64 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205e:	f7fe ff81 	bl	8000f64 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e10c      	b.n	800228a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002070:	4b6a      	ldr	r3, [pc, #424]	; (800221c <HAL_RCC_OscConfig+0x474>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d106      	bne.n	8002092 <HAL_RCC_OscConfig+0x2ea>
 8002084:	4b64      	ldr	r3, [pc, #400]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 8002086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002088:	4a63      	ldr	r2, [pc, #396]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6713      	str	r3, [r2, #112]	; 0x70
 8002090:	e01c      	b.n	80020cc <HAL_RCC_OscConfig+0x324>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b05      	cmp	r3, #5
 8002098:	d10c      	bne.n	80020b4 <HAL_RCC_OscConfig+0x30c>
 800209a:	4b5f      	ldr	r3, [pc, #380]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 800209c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209e:	4a5e      	ldr	r2, [pc, #376]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 80020a0:	f043 0304 	orr.w	r3, r3, #4
 80020a4:	6713      	str	r3, [r2, #112]	; 0x70
 80020a6:	4b5c      	ldr	r3, [pc, #368]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 80020a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020aa:	4a5b      	ldr	r2, [pc, #364]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6713      	str	r3, [r2, #112]	; 0x70
 80020b2:	e00b      	b.n	80020cc <HAL_RCC_OscConfig+0x324>
 80020b4:	4b58      	ldr	r3, [pc, #352]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 80020b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b8:	4a57      	ldr	r2, [pc, #348]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	6713      	str	r3, [r2, #112]	; 0x70
 80020c0:	4b55      	ldr	r3, [pc, #340]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 80020c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c4:	4a54      	ldr	r2, [pc, #336]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 80020c6:	f023 0304 	bic.w	r3, r3, #4
 80020ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d015      	beq.n	8002100 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d4:	f7fe ff46 	bl	8000f64 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020da:	e00a      	b.n	80020f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020dc:	f7fe ff42 	bl	8000f64 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e0cb      	b.n	800228a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f2:	4b49      	ldr	r3, [pc, #292]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 80020f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0ee      	beq.n	80020dc <HAL_RCC_OscConfig+0x334>
 80020fe:	e014      	b.n	800212a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002100:	f7fe ff30 	bl	8000f64 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002106:	e00a      	b.n	800211e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002108:	f7fe ff2c 	bl	8000f64 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	f241 3288 	movw	r2, #5000	; 0x1388
 8002116:	4293      	cmp	r3, r2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e0b5      	b.n	800228a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800211e:	4b3e      	ldr	r3, [pc, #248]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 8002120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ee      	bne.n	8002108 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800212a:	7dfb      	ldrb	r3, [r7, #23]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d105      	bne.n	800213c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002130:	4b39      	ldr	r3, [pc, #228]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	4a38      	ldr	r2, [pc, #224]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 8002136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800213a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80a1 	beq.w	8002288 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002146:	4b34      	ldr	r3, [pc, #208]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b08      	cmp	r3, #8
 8002150:	d05c      	beq.n	800220c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d141      	bne.n	80021de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215a:	4b31      	ldr	r3, [pc, #196]	; (8002220 <HAL_RCC_OscConfig+0x478>)
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7fe ff00 	bl	8000f64 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002168:	f7fe fefc 	bl	8000f64 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e087      	b.n	800228a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217a:	4b27      	ldr	r3, [pc, #156]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69da      	ldr	r2, [r3, #28]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	019b      	lsls	r3, r3, #6
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219c:	085b      	lsrs	r3, r3, #1
 800219e:	3b01      	subs	r3, #1
 80021a0:	041b      	lsls	r3, r3, #16
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	061b      	lsls	r3, r3, #24
 80021aa:	491b      	ldr	r1, [pc, #108]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021b0:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <HAL_RCC_OscConfig+0x478>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b6:	f7fe fed5 	bl	8000f64 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021be:	f7fe fed1 	bl	8000f64 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e05c      	b.n	800228a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x416>
 80021dc:	e054      	b.n	8002288 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <HAL_RCC_OscConfig+0x478>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7fe febe 	bl	8000f64 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ec:	f7fe feba 	bl	8000f64 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e045      	b.n	800228a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_RCC_OscConfig+0x470>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x444>
 800220a:	e03d      	b.n	8002288 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d107      	bne.n	8002224 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e038      	b.n	800228a <HAL_RCC_OscConfig+0x4e2>
 8002218:	40023800 	.word	0x40023800
 800221c:	40007000 	.word	0x40007000
 8002220:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002224:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <HAL_RCC_OscConfig+0x4ec>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d028      	beq.n	8002284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800223c:	429a      	cmp	r2, r3
 800223e:	d121      	bne.n	8002284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224a:	429a      	cmp	r2, r3
 800224c:	d11a      	bne.n	8002284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002254:	4013      	ands	r3, r2
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800225a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800225c:	4293      	cmp	r3, r2
 800225e:	d111      	bne.n	8002284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	085b      	lsrs	r3, r3, #1
 800226c:	3b01      	subs	r3, #1
 800226e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002270:	429a      	cmp	r2, r3
 8002272:	d107      	bne.n	8002284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002280:	429a      	cmp	r2, r3
 8002282:	d001      	beq.n	8002288 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e000      	b.n	800228a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800

08002298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0cc      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022ac:	4b68      	ldr	r3, [pc, #416]	; (8002450 <HAL_RCC_ClockConfig+0x1b8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d90c      	bls.n	80022d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b65      	ldr	r3, [pc, #404]	; (8002450 <HAL_RCC_ClockConfig+0x1b8>)
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b63      	ldr	r3, [pc, #396]	; (8002450 <HAL_RCC_ClockConfig+0x1b8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0b8      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d020      	beq.n	8002322 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022ec:	4b59      	ldr	r3, [pc, #356]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4a58      	ldr	r2, [pc, #352]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002304:	4b53      	ldr	r3, [pc, #332]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	4a52      	ldr	r2, [pc, #328]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800230e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002310:	4b50      	ldr	r3, [pc, #320]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	494d      	ldr	r1, [pc, #308]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	4313      	orrs	r3, r2
 8002320:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d044      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d107      	bne.n	8002346 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	4b47      	ldr	r3, [pc, #284]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d119      	bne.n	8002376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e07f      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d003      	beq.n	8002356 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002352:	2b03      	cmp	r3, #3
 8002354:	d107      	bne.n	8002366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002356:	4b3f      	ldr	r3, [pc, #252]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d109      	bne.n	8002376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e06f      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002366:	4b3b      	ldr	r3, [pc, #236]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e067      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002376:	4b37      	ldr	r3, [pc, #220]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f023 0203 	bic.w	r2, r3, #3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	4934      	ldr	r1, [pc, #208]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	4313      	orrs	r3, r2
 8002386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002388:	f7fe fdec 	bl	8000f64 <HAL_GetTick>
 800238c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238e:	e00a      	b.n	80023a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002390:	f7fe fde8 	bl	8000f64 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f241 3288 	movw	r2, #5000	; 0x1388
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e04f      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a6:	4b2b      	ldr	r3, [pc, #172]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 020c 	and.w	r2, r3, #12
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d1eb      	bne.n	8002390 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023b8:	4b25      	ldr	r3, [pc, #148]	; (8002450 <HAL_RCC_ClockConfig+0x1b8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d20c      	bcs.n	80023e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c6:	4b22      	ldr	r3, [pc, #136]	; (8002450 <HAL_RCC_ClockConfig+0x1b8>)
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ce:	4b20      	ldr	r3, [pc, #128]	; (8002450 <HAL_RCC_ClockConfig+0x1b8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e032      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ec:	4b19      	ldr	r3, [pc, #100]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4916      	ldr	r1, [pc, #88]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d009      	beq.n	800241e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800240a:	4b12      	ldr	r3, [pc, #72]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	490e      	ldr	r1, [pc, #56]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	4313      	orrs	r3, r2
 800241c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800241e:	f000 f821 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8002422:	4602      	mov	r2, r0
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	490a      	ldr	r1, [pc, #40]	; (8002458 <HAL_RCC_ClockConfig+0x1c0>)
 8002430:	5ccb      	ldrb	r3, [r1, r3]
 8002432:	fa22 f303 	lsr.w	r3, r2, r3
 8002436:	4a09      	ldr	r2, [pc, #36]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800243a:	4b09      	ldr	r3, [pc, #36]	; (8002460 <HAL_RCC_ClockConfig+0x1c8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fd4c 	bl	8000edc <HAL_InitTick>

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023c00 	.word	0x40023c00
 8002454:	40023800 	.word	0x40023800
 8002458:	080055ac 	.word	0x080055ac
 800245c:	20000000 	.word	0x20000000
 8002460:	20000004 	.word	0x20000004

08002464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002468:	b090      	sub	sp, #64	; 0x40
 800246a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	637b      	str	r3, [r7, #52]	; 0x34
 8002470:	2300      	movs	r3, #0
 8002472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002474:	2300      	movs	r3, #0
 8002476:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800247c:	4b59      	ldr	r3, [pc, #356]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	2b08      	cmp	r3, #8
 8002486:	d00d      	beq.n	80024a4 <HAL_RCC_GetSysClockFreq+0x40>
 8002488:	2b08      	cmp	r3, #8
 800248a:	f200 80a1 	bhi.w	80025d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0x34>
 8002492:	2b04      	cmp	r3, #4
 8002494:	d003      	beq.n	800249e <HAL_RCC_GetSysClockFreq+0x3a>
 8002496:	e09b      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002498:	4b53      	ldr	r3, [pc, #332]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800249a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800249c:	e09b      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800249e:	4b53      	ldr	r3, [pc, #332]	; (80025ec <HAL_RCC_GetSysClockFreq+0x188>)
 80024a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024a2:	e098      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024a4:	4b4f      	ldr	r3, [pc, #316]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ae:	4b4d      	ldr	r3, [pc, #308]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d028      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ba:	4b4a      	ldr	r3, [pc, #296]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	099b      	lsrs	r3, r3, #6
 80024c0:	2200      	movs	r2, #0
 80024c2:	623b      	str	r3, [r7, #32]
 80024c4:	627a      	str	r2, [r7, #36]	; 0x24
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024cc:	2100      	movs	r1, #0
 80024ce:	4b47      	ldr	r3, [pc, #284]	; (80025ec <HAL_RCC_GetSysClockFreq+0x188>)
 80024d0:	fb03 f201 	mul.w	r2, r3, r1
 80024d4:	2300      	movs	r3, #0
 80024d6:	fb00 f303 	mul.w	r3, r0, r3
 80024da:	4413      	add	r3, r2
 80024dc:	4a43      	ldr	r2, [pc, #268]	; (80025ec <HAL_RCC_GetSysClockFreq+0x188>)
 80024de:	fba0 1202 	umull	r1, r2, r0, r2
 80024e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024e4:	460a      	mov	r2, r1
 80024e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80024e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ea:	4413      	add	r3, r2
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f0:	2200      	movs	r2, #0
 80024f2:	61bb      	str	r3, [r7, #24]
 80024f4:	61fa      	str	r2, [r7, #28]
 80024f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024fe:	f7fd fec7 	bl	8000290 <__aeabi_uldivmod>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4613      	mov	r3, r2
 8002508:	63fb      	str	r3, [r7, #60]	; 0x3c
 800250a:	e053      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800250c:	4b35      	ldr	r3, [pc, #212]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	099b      	lsrs	r3, r3, #6
 8002512:	2200      	movs	r2, #0
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	617a      	str	r2, [r7, #20]
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800251e:	f04f 0b00 	mov.w	fp, #0
 8002522:	4652      	mov	r2, sl
 8002524:	465b      	mov	r3, fp
 8002526:	f04f 0000 	mov.w	r0, #0
 800252a:	f04f 0100 	mov.w	r1, #0
 800252e:	0159      	lsls	r1, r3, #5
 8002530:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002534:	0150      	lsls	r0, r2, #5
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	ebb2 080a 	subs.w	r8, r2, sl
 800253e:	eb63 090b 	sbc.w	r9, r3, fp
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800254e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002552:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002556:	ebb2 0408 	subs.w	r4, r2, r8
 800255a:	eb63 0509 	sbc.w	r5, r3, r9
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	00eb      	lsls	r3, r5, #3
 8002568:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800256c:	00e2      	lsls	r2, r4, #3
 800256e:	4614      	mov	r4, r2
 8002570:	461d      	mov	r5, r3
 8002572:	eb14 030a 	adds.w	r3, r4, sl
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	eb45 030b 	adc.w	r3, r5, fp
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	e9d7 4500 	ldrd	r4, r5, [r7]
 800258a:	4629      	mov	r1, r5
 800258c:	028b      	lsls	r3, r1, #10
 800258e:	4621      	mov	r1, r4
 8002590:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002594:	4621      	mov	r1, r4
 8002596:	028a      	lsls	r2, r1, #10
 8002598:	4610      	mov	r0, r2
 800259a:	4619      	mov	r1, r3
 800259c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259e:	2200      	movs	r2, #0
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	60fa      	str	r2, [r7, #12]
 80025a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025a8:	f7fd fe72 	bl	8000290 <__aeabi_uldivmod>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4613      	mov	r3, r2
 80025b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	0c1b      	lsrs	r3, r3, #16
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	3301      	adds	r3, #1
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80025c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025ce:	e002      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80025d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3740      	adds	r7, #64	; 0x40
 80025dc:	46bd      	mov	sp, r7
 80025de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	00f42400 	.word	0x00f42400
 80025ec:	017d7840 	.word	0x017d7840

080025f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <HAL_RCC_GetHCLKFreq+0x14>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20000000 	.word	0x20000000

08002608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800260c:	f7ff fff0 	bl	80025f0 <HAL_RCC_GetHCLKFreq>
 8002610:	4602      	mov	r2, r0
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	0a9b      	lsrs	r3, r3, #10
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	4903      	ldr	r1, [pc, #12]	; (800262c <HAL_RCC_GetPCLK1Freq+0x24>)
 800261e:	5ccb      	ldrb	r3, [r1, r3]
 8002620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002624:	4618      	mov	r0, r3
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40023800 	.word	0x40023800
 800262c:	080055bc 	.word	0x080055bc

08002630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002634:	f7ff ffdc 	bl	80025f0 <HAL_RCC_GetHCLKFreq>
 8002638:	4602      	mov	r2, r0
 800263a:	4b05      	ldr	r3, [pc, #20]	; (8002650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	0b5b      	lsrs	r3, r3, #13
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	4903      	ldr	r1, [pc, #12]	; (8002654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002646:	5ccb      	ldrb	r3, [r1, r3]
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800264c:	4618      	mov	r0, r3
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40023800 	.word	0x40023800
 8002654:	080055bc 	.word	0x080055bc

08002658 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10b      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800267c:	2b00      	cmp	r3, #0
 800267e:	d105      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002688:	2b00      	cmp	r3, #0
 800268a:	d075      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800268c:	4b91      	ldr	r3, [pc, #580]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002692:	f7fe fc67 	bl	8000f64 <HAL_GetTick>
 8002696:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002698:	e008      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800269a:	f7fe fc63 	bl	8000f64 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e189      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026ac:	4b8a      	ldr	r3, [pc, #552]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1f0      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d009      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	019a      	lsls	r2, r3, #6
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	071b      	lsls	r3, r3, #28
 80026d0:	4981      	ldr	r1, [pc, #516]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d01f      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026e4:	4b7c      	ldr	r3, [pc, #496]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ea:	0f1b      	lsrs	r3, r3, #28
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	019a      	lsls	r2, r3, #6
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	061b      	lsls	r3, r3, #24
 80026fe:	431a      	orrs	r2, r3
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	071b      	lsls	r3, r3, #28
 8002704:	4974      	ldr	r1, [pc, #464]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800270c:	4b72      	ldr	r3, [pc, #456]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800270e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002712:	f023 021f 	bic.w	r2, r3, #31
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	3b01      	subs	r3, #1
 800271c:	496e      	ldr	r1, [pc, #440]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00d      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	019a      	lsls	r2, r3, #6
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	061b      	lsls	r3, r3, #24
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	071b      	lsls	r3, r3, #28
 8002744:	4964      	ldr	r1, [pc, #400]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800274c:	4b61      	ldr	r3, [pc, #388]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800274e:	2201      	movs	r2, #1
 8002750:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002752:	f7fe fc07 	bl	8000f64 <HAL_GetTick>
 8002756:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002758:	e008      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800275a:	f7fe fc03 	bl	8000f64 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e129      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800276c:	4b5a      	ldr	r3, [pc, #360]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800278c:	2b00      	cmp	r3, #0
 800278e:	d079      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002790:	4b52      	ldr	r3, [pc, #328]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002796:	f7fe fbe5 	bl	8000f64 <HAL_GetTick>
 800279a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800279c:	e008      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800279e:	f7fe fbe1 	bl	8000f64 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e107      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027b0:	4b49      	ldr	r3, [pc, #292]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027bc:	d0ef      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d020      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027ca:	4b43      	ldr	r3, [pc, #268]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d0:	0f1b      	lsrs	r3, r3, #28
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	019a      	lsls	r2, r3, #6
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	061b      	lsls	r3, r3, #24
 80027e4:	431a      	orrs	r2, r3
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	071b      	lsls	r3, r3, #28
 80027ea:	493b      	ldr	r1, [pc, #236]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027f2:	4b39      	ldr	r3, [pc, #228]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	3b01      	subs	r3, #1
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	4934      	ldr	r1, [pc, #208]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01e      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002818:	4b2f      	ldr	r3, [pc, #188]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	0e1b      	lsrs	r3, r3, #24
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	019a      	lsls	r2, r3, #6
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	061b      	lsls	r3, r3, #24
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	071b      	lsls	r3, r3, #28
 8002838:	4927      	ldr	r1, [pc, #156]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002840:	4b25      	ldr	r3, [pc, #148]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002842:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002846:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	4922      	ldr	r1, [pc, #136]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002856:	4b21      	ldr	r3, [pc, #132]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002858:	2201      	movs	r2, #1
 800285a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800285c:	f7fe fb82 	bl	8000f64 <HAL_GetTick>
 8002860:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002864:	f7fe fb7e 	bl	8000f64 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e0a4      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002876:	4b18      	ldr	r3, [pc, #96]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800287e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002882:	d1ef      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 808b 	beq.w	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	4a0f      	ldr	r2, [pc, #60]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a0:	6413      	str	r3, [r2, #64]	; 0x40
 80028a2:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80028ae:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a0b      	ldr	r2, [pc, #44]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80028b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028ba:	f7fe fb53 	bl	8000f64 <HAL_GetTick>
 80028be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80028c0:	e010      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80028c2:	f7fe fb4f 	bl	8000f64 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d909      	bls.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e075      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80028d4:	42470068 	.word	0x42470068
 80028d8:	40023800 	.word	0x40023800
 80028dc:	42470070 	.word	0x42470070
 80028e0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80028e4:	4b38      	ldr	r3, [pc, #224]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0e8      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028f0:	4b36      	ldr	r3, [pc, #216]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80028f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d02f      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	429a      	cmp	r2, r3
 800290c:	d028      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800290e:	4b2f      	ldr	r3, [pc, #188]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002916:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002918:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800291e:	4b2c      	ldr	r3, [pc, #176]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002924:	4a29      	ldr	r2, [pc, #164]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800292a:	4b28      	ldr	r3, [pc, #160]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800292c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b01      	cmp	r3, #1
 8002934:	d114      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002936:	f7fe fb15 	bl	8000f64 <HAL_GetTick>
 800293a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293c:	e00a      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800293e:	f7fe fb11 	bl	8000f64 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	f241 3288 	movw	r2, #5000	; 0x1388
 800294c:	4293      	cmp	r3, r2
 800294e:	d901      	bls.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e035      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002954:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0ee      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800296c:	d10d      	bne.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800296e:	4b17      	ldr	r3, [pc, #92]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800297e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002982:	4912      	ldr	r1, [pc, #72]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002984:	4313      	orrs	r3, r2
 8002986:	608b      	str	r3, [r1, #8]
 8002988:	e005      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	4a0f      	ldr	r2, [pc, #60]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002990:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002994:	6093      	str	r3, [r2, #8]
 8002996:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002998:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a2:	490a      	ldr	r1, [pc, #40]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d004      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80029ba:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80029bc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40007000 	.word	0x40007000
 80029cc:	40023800 	.word	0x40023800
 80029d0:	42470e40 	.word	0x42470e40
 80029d4:	424711e0 	.word	0x424711e0

080029d8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e066      	b.n	8002abc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	7f5b      	ldrb	r3, [r3, #29]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d105      	bne.n	8002a04 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fd fff0 	bl	80009e4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	22ca      	movs	r2, #202	; 0xca
 8002a10:	625a      	str	r2, [r3, #36]	; 0x24
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2253      	movs	r2, #83	; 0x53
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f87a 	bl	8002b14 <RTC_EnterInitMode>
 8002a20:	4603      	mov	r3, r0
 8002a22:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d12c      	bne.n	8002a84 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a3c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6899      	ldr	r1, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	68d2      	ldr	r2, [r2, #12]
 8002a64:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6919      	ldr	r1, [r3, #16]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	041a      	lsls	r2, r3, #16
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f881 	bl	8002b82 <RTC_ExitInitMode>
 8002a80:	4603      	mov	r3, r0
 8002a82:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d113      	bne.n	8002ab2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699a      	ldr	r2, [r3, #24]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	22ff      	movs	r2, #255	; 0xff
 8002ab8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ade:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ae0:	f7fe fa40 	bl	8000f64 <HAL_GetTick>
 8002ae4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ae6:	e009      	b.n	8002afc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ae8:	f7fe fa3c 	bl	8000f64 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002af6:	d901      	bls.n	8002afc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e007      	b.n	8002b0c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0ee      	beq.n	8002ae8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d122      	bne.n	8002b78 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b40:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b42:	f7fe fa0f 	bl	8000f64 <HAL_GetTick>
 8002b46:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b48:	e00c      	b.n	8002b64 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b4a:	f7fe fa0b 	bl	8000f64 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b58:	d904      	bls.n	8002b64 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2204      	movs	r2, #4
 8002b5e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d102      	bne.n	8002b78 <RTC_EnterInitMode+0x64>
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d1e8      	bne.n	8002b4a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b084      	sub	sp, #16
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b9c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10a      	bne.n	8002bc2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff ff89 	bl	8002ac4 <HAL_RTC_WaitForSynchro>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d004      	beq.n	8002bc2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2204      	movs	r2, #4
 8002bbc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e041      	b.n	8002c62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fe f892 	bl	8000d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3304      	adds	r3, #4
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	f000 fa96 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d001      	beq.n	8002c84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e04e      	b.n	8002d22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a23      	ldr	r2, [pc, #140]	; (8002d30 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d022      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x80>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cae:	d01d      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x80>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a1f      	ldr	r2, [pc, #124]	; (8002d34 <HAL_TIM_Base_Start_IT+0xc8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d018      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x80>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1e      	ldr	r2, [pc, #120]	; (8002d38 <HAL_TIM_Base_Start_IT+0xcc>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d013      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x80>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1c      	ldr	r2, [pc, #112]	; (8002d3c <HAL_TIM_Base_Start_IT+0xd0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00e      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x80>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1b      	ldr	r2, [pc, #108]	; (8002d40 <HAL_TIM_Base_Start_IT+0xd4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d009      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x80>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a19      	ldr	r2, [pc, #100]	; (8002d44 <HAL_TIM_Base_Start_IT+0xd8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d004      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x80>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d111      	bne.n	8002d10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2b06      	cmp	r3, #6
 8002cfc:	d010      	beq.n	8002d20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 0201 	orr.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d0e:	e007      	b.n	8002d20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40010000 	.word	0x40010000
 8002d34:	40000400 	.word	0x40000400
 8002d38:	40000800 	.word	0x40000800
 8002d3c:	40000c00 	.word	0x40000c00
 8002d40:	40010400 	.word	0x40010400
 8002d44:	40014000 	.word	0x40014000
 8002d48:	40001800 	.word	0x40001800

08002d4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d122      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d11b      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f06f 0202 	mvn.w	r2, #2
 8002d78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f9b5 	bl	80030fe <HAL_TIM_IC_CaptureCallback>
 8002d94:	e005      	b.n	8002da2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f9a7 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f9b8 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d122      	bne.n	8002dfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d11b      	bne.n	8002dfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0204 	mvn.w	r2, #4
 8002dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f98b 	bl	80030fe <HAL_TIM_IC_CaptureCallback>
 8002de8:	e005      	b.n	8002df6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f97d 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f98e 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d122      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d11b      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f06f 0208 	mvn.w	r2, #8
 8002e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2204      	movs	r2, #4
 8002e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f961 	bl	80030fe <HAL_TIM_IC_CaptureCallback>
 8002e3c:	e005      	b.n	8002e4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f953 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f964 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	2b10      	cmp	r3, #16
 8002e5c:	d122      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d11b      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0210 	mvn.w	r2, #16
 8002e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2208      	movs	r2, #8
 8002e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f937 	bl	80030fe <HAL_TIM_IC_CaptureCallback>
 8002e90:	e005      	b.n	8002e9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f929 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f93a 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d10e      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d107      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f06f 0201 	mvn.w	r2, #1
 8002ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fd fd00 	bl	80008d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eda:	2b80      	cmp	r3, #128	; 0x80
 8002edc:	d10e      	bne.n	8002efc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee8:	2b80      	cmp	r3, #128	; 0x80
 8002eea:	d107      	bne.n	8002efc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fae0 	bl	80034bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f06:	2b40      	cmp	r3, #64	; 0x40
 8002f08:	d10e      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f14:	2b40      	cmp	r3, #64	; 0x40
 8002f16:	d107      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f8ff 	bl	8003126 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d10e      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b20      	cmp	r3, #32
 8002f42:	d107      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f06f 0220 	mvn.w	r2, #32
 8002f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 faaa 	bl	80034a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f54:	bf00      	nop
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_TIM_ConfigClockSource+0x1c>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e0b4      	b.n	80030e2 <HAL_TIM_ConfigClockSource+0x186>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb0:	d03e      	beq.n	8003030 <HAL_TIM_ConfigClockSource+0xd4>
 8002fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb6:	f200 8087 	bhi.w	80030c8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fbe:	f000 8086 	beq.w	80030ce <HAL_TIM_ConfigClockSource+0x172>
 8002fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc6:	d87f      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc8:	2b70      	cmp	r3, #112	; 0x70
 8002fca:	d01a      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0xa6>
 8002fcc:	2b70      	cmp	r3, #112	; 0x70
 8002fce:	d87b      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd0:	2b60      	cmp	r3, #96	; 0x60
 8002fd2:	d050      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0x11a>
 8002fd4:	2b60      	cmp	r3, #96	; 0x60
 8002fd6:	d877      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd8:	2b50      	cmp	r3, #80	; 0x50
 8002fda:	d03c      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0xfa>
 8002fdc:	2b50      	cmp	r3, #80	; 0x50
 8002fde:	d873      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe0:	2b40      	cmp	r3, #64	; 0x40
 8002fe2:	d058      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x13a>
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	d86f      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe8:	2b30      	cmp	r3, #48	; 0x30
 8002fea:	d064      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x15a>
 8002fec:	2b30      	cmp	r3, #48	; 0x30
 8002fee:	d86b      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d060      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x15a>
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d867      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d05c      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x15a>
 8002ffc:	2b10      	cmp	r3, #16
 8002ffe:	d05a      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x15a>
 8003000:	e062      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6899      	ldr	r1, [r3, #8]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f000 f9ad 	bl	8003370 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003024:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	609a      	str	r2, [r3, #8]
      break;
 800302e:	e04f      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6818      	ldr	r0, [r3, #0]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	6899      	ldr	r1, [r3, #8]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f000 f996 	bl	8003370 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003052:	609a      	str	r2, [r3, #8]
      break;
 8003054:	e03c      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6859      	ldr	r1, [r3, #4]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	461a      	mov	r2, r3
 8003064:	f000 f90a 	bl	800327c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2150      	movs	r1, #80	; 0x50
 800306e:	4618      	mov	r0, r3
 8003070:	f000 f963 	bl	800333a <TIM_ITRx_SetConfig>
      break;
 8003074:	e02c      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6859      	ldr	r1, [r3, #4]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	461a      	mov	r2, r3
 8003084:	f000 f929 	bl	80032da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2160      	movs	r1, #96	; 0x60
 800308e:	4618      	mov	r0, r3
 8003090:	f000 f953 	bl	800333a <TIM_ITRx_SetConfig>
      break;
 8003094:	e01c      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	461a      	mov	r2, r3
 80030a4:	f000 f8ea 	bl	800327c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2140      	movs	r1, #64	; 0x40
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f943 	bl	800333a <TIM_ITRx_SetConfig>
      break;
 80030b4:	e00c      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4619      	mov	r1, r3
 80030c0:	4610      	mov	r0, r2
 80030c2:	f000 f93a 	bl	800333a <TIM_ITRx_SetConfig>
      break;
 80030c6:	e003      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
      break;
 80030cc:	e000      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a40      	ldr	r2, [pc, #256]	; (8003250 <TIM_Base_SetConfig+0x114>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d013      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315a:	d00f      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a3d      	ldr	r2, [pc, #244]	; (8003254 <TIM_Base_SetConfig+0x118>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00b      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a3c      	ldr	r2, [pc, #240]	; (8003258 <TIM_Base_SetConfig+0x11c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d007      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a3b      	ldr	r2, [pc, #236]	; (800325c <TIM_Base_SetConfig+0x120>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d003      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a3a      	ldr	r2, [pc, #232]	; (8003260 <TIM_Base_SetConfig+0x124>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d108      	bne.n	800318e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a2f      	ldr	r2, [pc, #188]	; (8003250 <TIM_Base_SetConfig+0x114>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d02b      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319c:	d027      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a2c      	ldr	r2, [pc, #176]	; (8003254 <TIM_Base_SetConfig+0x118>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d023      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a2b      	ldr	r2, [pc, #172]	; (8003258 <TIM_Base_SetConfig+0x11c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01f      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a2a      	ldr	r2, [pc, #168]	; (800325c <TIM_Base_SetConfig+0x120>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d01b      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a29      	ldr	r2, [pc, #164]	; (8003260 <TIM_Base_SetConfig+0x124>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d017      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a28      	ldr	r2, [pc, #160]	; (8003264 <TIM_Base_SetConfig+0x128>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a27      	ldr	r2, [pc, #156]	; (8003268 <TIM_Base_SetConfig+0x12c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00f      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a26      	ldr	r2, [pc, #152]	; (800326c <TIM_Base_SetConfig+0x130>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00b      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a25      	ldr	r2, [pc, #148]	; (8003270 <TIM_Base_SetConfig+0x134>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d007      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a24      	ldr	r2, [pc, #144]	; (8003274 <TIM_Base_SetConfig+0x138>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d003      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a23      	ldr	r2, [pc, #140]	; (8003278 <TIM_Base_SetConfig+0x13c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d108      	bne.n	8003200 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <TIM_Base_SetConfig+0x114>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d003      	beq.n	8003234 <TIM_Base_SetConfig+0xf8>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a0c      	ldr	r2, [pc, #48]	; (8003260 <TIM_Base_SetConfig+0x124>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d103      	bne.n	800323c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	615a      	str	r2, [r3, #20]
}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40010000 	.word	0x40010000
 8003254:	40000400 	.word	0x40000400
 8003258:	40000800 	.word	0x40000800
 800325c:	40000c00 	.word	0x40000c00
 8003260:	40010400 	.word	0x40010400
 8003264:	40014000 	.word	0x40014000
 8003268:	40014400 	.word	0x40014400
 800326c:	40014800 	.word	0x40014800
 8003270:	40001800 	.word	0x40001800
 8003274:	40001c00 	.word	0x40001c00
 8003278:	40002000 	.word	0x40002000

0800327c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	f023 0201 	bic.w	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f023 030a 	bic.w	r3, r3, #10
 80032b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	621a      	str	r2, [r3, #32]
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032da:	b480      	push	{r7}
 80032dc:	b087      	sub	sp, #28
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f023 0210 	bic.w	r2, r3, #16
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003304:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	031b      	lsls	r3, r3, #12
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003316:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	621a      	str	r2, [r3, #32]
}
 800332e:	bf00      	nop
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800333a:	b480      	push	{r7}
 800333c:	b085      	sub	sp, #20
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003350:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	f043 0307 	orr.w	r3, r3, #7
 800335c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	609a      	str	r2, [r3, #8]
}
 8003364:	bf00      	nop
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800338a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	021a      	lsls	r2, r3, #8
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	431a      	orrs	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4313      	orrs	r3, r2
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	609a      	str	r2, [r3, #8]
}
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e05a      	b.n	800347e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a21      	ldr	r2, [pc, #132]	; (800348c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d022      	beq.n	8003452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003414:	d01d      	beq.n	8003452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1d      	ldr	r2, [pc, #116]	; (8003490 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d018      	beq.n	8003452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1b      	ldr	r2, [pc, #108]	; (8003494 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d013      	beq.n	8003452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1a      	ldr	r2, [pc, #104]	; (8003498 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00e      	beq.n	8003452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a18      	ldr	r2, [pc, #96]	; (800349c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d009      	beq.n	8003452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a17      	ldr	r2, [pc, #92]	; (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d004      	beq.n	8003452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a15      	ldr	r2, [pc, #84]	; (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d10c      	bne.n	800346c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003458:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	4313      	orrs	r3, r2
 8003462:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40010000 	.word	0x40010000
 8003490:	40000400 	.word	0x40000400
 8003494:	40000800 	.word	0x40000800
 8003498:	40000c00 	.word	0x40000c00
 800349c:	40010400 	.word	0x40010400
 80034a0:	40014000 	.word	0x40014000
 80034a4:	40001800 	.word	0x40001800

080034a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e03f      	b.n	8003562 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fd fc5c 	bl	8000db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2224      	movs	r2, #36	; 0x24
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003512:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fd7b 	bl	8004010 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003528:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695a      	ldr	r2, [r3, #20]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003538:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003548:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b08a      	sub	sp, #40	; 0x28
 800356e:	af02      	add	r7, sp, #8
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	603b      	str	r3, [r7, #0]
 8003576:	4613      	mov	r3, r2
 8003578:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b20      	cmp	r3, #32
 8003588:	d17c      	bne.n	8003684 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_UART_Transmit+0x2c>
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e075      	b.n	8003686 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_UART_Transmit+0x3e>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e06e      	b.n	8003686 <HAL_UART_Transmit+0x11c>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2221      	movs	r2, #33	; 0x21
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035be:	f7fd fcd1 	bl	8000f64 <HAL_GetTick>
 80035c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	88fa      	ldrh	r2, [r7, #6]
 80035c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	88fa      	ldrh	r2, [r7, #6]
 80035ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d8:	d108      	bne.n	80035ec <HAL_UART_Transmit+0x82>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d104      	bne.n	80035ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	61bb      	str	r3, [r7, #24]
 80035ea:	e003      	b.n	80035f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035fc:	e02a      	b.n	8003654 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2200      	movs	r2, #0
 8003606:	2180      	movs	r1, #128	; 0x80
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 faf9 	bl	8003c00 <UART_WaitOnFlagUntilTimeout>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e036      	b.n	8003686 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10b      	bne.n	8003636 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800362c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	3302      	adds	r3, #2
 8003632:	61bb      	str	r3, [r7, #24]
 8003634:	e007      	b.n	8003646 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	781a      	ldrb	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	3301      	adds	r3, #1
 8003644:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800364a:	b29b      	uxth	r3, r3
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1cf      	bne.n	80035fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2200      	movs	r2, #0
 8003666:	2140      	movs	r1, #64	; 0x40
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 fac9 	bl	8003c00 <UART_WaitOnFlagUntilTimeout>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e006      	b.n	8003686 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	e000      	b.n	8003686 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003684:	2302      	movs	r3, #2
  }
}
 8003686:	4618      	mov	r0, r3
 8003688:	3720      	adds	r7, #32
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b0ba      	sub	sp, #232	; 0xe8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80036bc:	2300      	movs	r3, #0
 80036be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80036ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10f      	bne.n	80036f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <HAL_UART_IRQHandler+0x66>
 80036e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fbd3 	bl	8003e9a <UART_Receive_IT>
      return;
 80036f4:	e256      	b.n	8003ba4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 80de 	beq.w	80038bc <HAL_UART_IRQHandler+0x22c>
 8003700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d106      	bne.n	800371a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800370c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003710:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 80d1 	beq.w	80038bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800371a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00b      	beq.n	800373e <HAL_UART_IRQHandler+0xae>
 8003726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800372a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	f043 0201 	orr.w	r2, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800373e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003742:	f003 0304 	and.w	r3, r3, #4
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00b      	beq.n	8003762 <HAL_UART_IRQHandler+0xd2>
 800374a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d005      	beq.n	8003762 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	f043 0202 	orr.w	r2, r3, #2
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00b      	beq.n	8003786 <HAL_UART_IRQHandler+0xf6>
 800376e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d005      	beq.n	8003786 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f043 0204 	orr.w	r2, r3, #4
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d011      	beq.n	80037b6 <HAL_UART_IRQHandler+0x126>
 8003792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b00      	cmp	r3, #0
 800379c:	d105      	bne.n	80037aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800379e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f043 0208 	orr.w	r2, r3, #8
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 81ed 	beq.w	8003b9a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <HAL_UART_IRQHandler+0x14e>
 80037cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d0:	f003 0320 	and.w	r3, r3, #32
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fb5e 	bl	8003e9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e8:	2b40      	cmp	r3, #64	; 0x40
 80037ea:	bf0c      	ite	eq
 80037ec:	2301      	moveq	r3, #1
 80037ee:	2300      	movne	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d103      	bne.n	800380a <HAL_UART_IRQHandler+0x17a>
 8003802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003806:	2b00      	cmp	r3, #0
 8003808:	d04f      	beq.n	80038aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fa66 	bl	8003cdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381a:	2b40      	cmp	r3, #64	; 0x40
 800381c:	d141      	bne.n	80038a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	3314      	adds	r3, #20
 8003824:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800382c:	e853 3f00 	ldrex	r3, [r3]
 8003830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003834:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800383c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3314      	adds	r3, #20
 8003846:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800384a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800384e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003852:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003856:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800385a:	e841 2300 	strex	r3, r2, [r1]
 800385e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003862:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1d9      	bne.n	800381e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386e:	2b00      	cmp	r3, #0
 8003870:	d013      	beq.n	800389a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	4a7d      	ldr	r2, [pc, #500]	; (8003a6c <HAL_UART_IRQHandler+0x3dc>)
 8003878:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe f84f 	bl	8001922 <HAL_DMA_Abort_IT>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d016      	beq.n	80038b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003894:	4610      	mov	r0, r2
 8003896:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003898:	e00e      	b.n	80038b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f99a 	bl	8003bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a0:	e00a      	b.n	80038b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f996 	bl	8003bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a8:	e006      	b.n	80038b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f992 	bl	8003bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80038b6:	e170      	b.n	8003b9a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b8:	bf00      	nop
    return;
 80038ba:	e16e      	b.n	8003b9a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	f040 814a 	bne.w	8003b5a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ca:	f003 0310 	and.w	r3, r3, #16
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 8143 	beq.w	8003b5a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 813c 	beq.w	8003b5a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038e2:	2300      	movs	r3, #0
 80038e4:	60bb      	str	r3, [r7, #8]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003902:	2b40      	cmp	r3, #64	; 0x40
 8003904:	f040 80b4 	bne.w	8003a70 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003914:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 8140 	beq.w	8003b9e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003922:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003926:	429a      	cmp	r2, r3
 8003928:	f080 8139 	bcs.w	8003b9e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003932:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800393e:	f000 8088 	beq.w	8003a52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	330c      	adds	r3, #12
 8003948:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003950:	e853 3f00 	ldrex	r3, [r3]
 8003954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800395c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003960:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	330c      	adds	r3, #12
 800396a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800396e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003972:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003976:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800397a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800397e:	e841 2300 	strex	r3, r2, [r1]
 8003982:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003986:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1d9      	bne.n	8003942 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3314      	adds	r3, #20
 8003994:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003998:	e853 3f00 	ldrex	r3, [r3]
 800399c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800399e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039a0:	f023 0301 	bic.w	r3, r3, #1
 80039a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3314      	adds	r3, #20
 80039ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039be:	e841 2300 	strex	r3, r2, [r1]
 80039c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1e1      	bne.n	800398e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3314      	adds	r3, #20
 80039d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039d4:	e853 3f00 	ldrex	r3, [r3]
 80039d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3314      	adds	r3, #20
 80039ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039f6:	e841 2300 	strex	r3, r2, [r1]
 80039fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1e3      	bne.n	80039ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	330c      	adds	r3, #12
 8003a16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a1a:	e853 3f00 	ldrex	r3, [r3]
 8003a1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a22:	f023 0310 	bic.w	r3, r3, #16
 8003a26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	330c      	adds	r3, #12
 8003a30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a34:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a3c:	e841 2300 	strex	r3, r2, [r1]
 8003a40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e3      	bne.n	8003a10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fd fef8 	bl	8001842 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	4619      	mov	r1, r3
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f8c0 	bl	8003be8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a68:	e099      	b.n	8003b9e <HAL_UART_IRQHandler+0x50e>
 8003a6a:	bf00      	nop
 8003a6c:	08003da3 	.word	0x08003da3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 808b 	beq.w	8003ba2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003a8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 8086 	beq.w	8003ba2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	330c      	adds	r3, #12
 8003a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003aac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	330c      	adds	r3, #12
 8003ab6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003aba:	647a      	str	r2, [r7, #68]	; 0x44
 8003abc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ac0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e3      	bne.n	8003a96 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3314      	adds	r3, #20
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	623b      	str	r3, [r7, #32]
   return(result);
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	f023 0301 	bic.w	r3, r3, #1
 8003ae4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3314      	adds	r3, #20
 8003aee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003af2:	633a      	str	r2, [r7, #48]	; 0x30
 8003af4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003afa:	e841 2300 	strex	r3, r2, [r1]
 8003afe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1e3      	bne.n	8003ace <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0310 	bic.w	r3, r3, #16
 8003b2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	330c      	adds	r3, #12
 8003b34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b38:	61fa      	str	r2, [r7, #28]
 8003b3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3c:	69b9      	ldr	r1, [r7, #24]
 8003b3e:	69fa      	ldr	r2, [r7, #28]
 8003b40:	e841 2300 	strex	r3, r2, [r1]
 8003b44:	617b      	str	r3, [r7, #20]
   return(result);
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e3      	bne.n	8003b14 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b50:	4619      	mov	r1, r3
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f848 	bl	8003be8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b58:	e023      	b.n	8003ba2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <HAL_UART_IRQHandler+0x4ea>
 8003b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f929 	bl	8003dca <UART_Transmit_IT>
    return;
 8003b78:	e014      	b.n	8003ba4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00e      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x514>
 8003b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d008      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f969 	bl	8003e6a <UART_EndTransmit_IT>
    return;
 8003b98:	e004      	b.n	8003ba4 <HAL_UART_IRQHandler+0x514>
    return;
 8003b9a:	bf00      	nop
 8003b9c:	e002      	b.n	8003ba4 <HAL_UART_IRQHandler+0x514>
      return;
 8003b9e:	bf00      	nop
 8003ba0:	e000      	b.n	8003ba4 <HAL_UART_IRQHandler+0x514>
      return;
 8003ba2:	bf00      	nop
  }
}
 8003ba4:	37e8      	adds	r7, #232	; 0xe8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop

08003bac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b090      	sub	sp, #64	; 0x40
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	603b      	str	r3, [r7, #0]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c10:	e050      	b.n	8003cb4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c18:	d04c      	beq.n	8003cb4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d007      	beq.n	8003c30 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c20:	f7fd f9a0 	bl	8000f64 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d241      	bcs.n	8003cb4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	330c      	adds	r3, #12
 8003c36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	330c      	adds	r3, #12
 8003c4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c50:	637a      	str	r2, [r7, #52]	; 0x34
 8003c52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e5      	bne.n	8003c30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3314      	adds	r3, #20
 8003c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	e853 3f00 	ldrex	r3, [r3]
 8003c72:	613b      	str	r3, [r7, #16]
   return(result);
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f023 0301 	bic.w	r3, r3, #1
 8003c7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3314      	adds	r3, #20
 8003c82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c84:	623a      	str	r2, [r7, #32]
 8003c86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c88:	69f9      	ldr	r1, [r7, #28]
 8003c8a:	6a3a      	ldr	r2, [r7, #32]
 8003c8c:	e841 2300 	strex	r3, r2, [r1]
 8003c90:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1e5      	bne.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e00f      	b.n	8003cd4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	bf0c      	ite	eq
 8003cc4:	2301      	moveq	r3, #1
 8003cc6:	2300      	movne	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	79fb      	ldrb	r3, [r7, #7]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d09f      	beq.n	8003c12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3740      	adds	r7, #64	; 0x40
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b095      	sub	sp, #84	; 0x54
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	330c      	adds	r3, #12
 8003cea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cee:	e853 3f00 	ldrex	r3, [r3]
 8003cf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	330c      	adds	r3, #12
 8003d02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d04:	643a      	str	r2, [r7, #64]	; 0x40
 8003d06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d0c:	e841 2300 	strex	r3, r2, [r1]
 8003d10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1e5      	bne.n	8003ce4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3314      	adds	r3, #20
 8003d1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	e853 3f00 	ldrex	r3, [r3]
 8003d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f023 0301 	bic.w	r3, r3, #1
 8003d2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3314      	adds	r3, #20
 8003d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e5      	bne.n	8003d18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d119      	bne.n	8003d88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	e853 3f00 	ldrex	r3, [r3]
 8003d62:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f023 0310 	bic.w	r3, r3, #16
 8003d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	330c      	adds	r3, #12
 8003d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d74:	61ba      	str	r2, [r7, #24]
 8003d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	6979      	ldr	r1, [r7, #20]
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	e841 2300 	strex	r3, r2, [r1]
 8003d80:	613b      	str	r3, [r7, #16]
   return(result);
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e5      	bne.n	8003d54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d96:	bf00      	nop
 8003d98:	3754      	adds	r7, #84	; 0x54
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b084      	sub	sp, #16
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f7ff ff09 	bl	8003bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b21      	cmp	r3, #33	; 0x21
 8003ddc:	d13e      	bne.n	8003e5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de6:	d114      	bne.n	8003e12 <UART_Transmit_IT+0x48>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d110      	bne.n	8003e12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	1c9a      	adds	r2, r3, #2
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	621a      	str	r2, [r3, #32]
 8003e10:	e008      	b.n	8003e24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	1c59      	adds	r1, r3, #1
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6211      	str	r1, [r2, #32]
 8003e1c:	781a      	ldrb	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	4619      	mov	r1, r3
 8003e32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10f      	bne.n	8003e58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e000      	b.n	8003e5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e5c:	2302      	movs	r3, #2
  }
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff fe8e 	bl	8003bac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b08c      	sub	sp, #48	; 0x30
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b22      	cmp	r3, #34	; 0x22
 8003eac:	f040 80ab 	bne.w	8004006 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb8:	d117      	bne.n	8003eea <UART_Receive_IT+0x50>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d113      	bne.n	8003eea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee2:	1c9a      	adds	r2, r3, #2
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ee8:	e026      	b.n	8003f38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efc:	d007      	beq.n	8003f0e <UART_Receive_IT+0x74>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10a      	bne.n	8003f1c <UART_Receive_IT+0x82>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f18:	701a      	strb	r2, [r3, #0]
 8003f1a:	e008      	b.n	8003f2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	4619      	mov	r1, r3
 8003f46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d15a      	bne.n	8004002 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0220 	bic.w	r2, r2, #32
 8003f5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0201 	bic.w	r2, r2, #1
 8003f7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d135      	bne.n	8003ff8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	330c      	adds	r3, #12
 8003f98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f023 0310 	bic.w	r3, r3, #16
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	330c      	adds	r3, #12
 8003fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb2:	623a      	str	r2, [r7, #32]
 8003fb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	69f9      	ldr	r1, [r7, #28]
 8003fb8:	6a3a      	ldr	r2, [r7, #32]
 8003fba:	e841 2300 	strex	r3, r2, [r1]
 8003fbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e5      	bne.n	8003f92 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	2b10      	cmp	r3, #16
 8003fd2:	d10a      	bne.n	8003fea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff fdf9 	bl	8003be8 <HAL_UARTEx_RxEventCallback>
 8003ff6:	e002      	b.n	8003ffe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff fde1 	bl	8003bc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	e002      	b.n	8004008 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	e000      	b.n	8004008 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004006:	2302      	movs	r3, #2
  }
}
 8004008:	4618      	mov	r0, r3
 800400a:	3730      	adds	r7, #48	; 0x30
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004014:	b0c0      	sub	sp, #256	; 0x100
 8004016:	af00      	add	r7, sp, #0
 8004018:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402c:	68d9      	ldr	r1, [r3, #12]
 800402e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	ea40 0301 	orr.w	r3, r0, r1
 8004038:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	431a      	orrs	r2, r3
 8004048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	431a      	orrs	r2, r3
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004068:	f021 010c 	bic.w	r1, r1, #12
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004076:	430b      	orrs	r3, r1
 8004078:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800407a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408a:	6999      	ldr	r1, [r3, #24]
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	ea40 0301 	orr.w	r3, r0, r1
 8004096:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	4b8f      	ldr	r3, [pc, #572]	; (80042dc <UART_SetConfig+0x2cc>)
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d005      	beq.n	80040b0 <UART_SetConfig+0xa0>
 80040a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	4b8d      	ldr	r3, [pc, #564]	; (80042e0 <UART_SetConfig+0x2d0>)
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d104      	bne.n	80040ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040b0:	f7fe fabe 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
 80040b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040b8:	e003      	b.n	80040c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040ba:	f7fe faa5 	bl	8002608 <HAL_RCC_GetPCLK1Freq>
 80040be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040cc:	f040 810c 	bne.w	80042e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040d4:	2200      	movs	r2, #0
 80040d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040e2:	4622      	mov	r2, r4
 80040e4:	462b      	mov	r3, r5
 80040e6:	1891      	adds	r1, r2, r2
 80040e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80040ea:	415b      	adcs	r3, r3
 80040ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040f2:	4621      	mov	r1, r4
 80040f4:	eb12 0801 	adds.w	r8, r2, r1
 80040f8:	4629      	mov	r1, r5
 80040fa:	eb43 0901 	adc.w	r9, r3, r1
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800410a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800410e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004112:	4690      	mov	r8, r2
 8004114:	4699      	mov	r9, r3
 8004116:	4623      	mov	r3, r4
 8004118:	eb18 0303 	adds.w	r3, r8, r3
 800411c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004120:	462b      	mov	r3, r5
 8004122:	eb49 0303 	adc.w	r3, r9, r3
 8004126:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800412a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004136:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800413a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800413e:	460b      	mov	r3, r1
 8004140:	18db      	adds	r3, r3, r3
 8004142:	653b      	str	r3, [r7, #80]	; 0x50
 8004144:	4613      	mov	r3, r2
 8004146:	eb42 0303 	adc.w	r3, r2, r3
 800414a:	657b      	str	r3, [r7, #84]	; 0x54
 800414c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004150:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004154:	f7fc f89c 	bl	8000290 <__aeabi_uldivmod>
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	4b61      	ldr	r3, [pc, #388]	; (80042e4 <UART_SetConfig+0x2d4>)
 800415e:	fba3 2302 	umull	r2, r3, r3, r2
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	011c      	lsls	r4, r3, #4
 8004166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800416a:	2200      	movs	r2, #0
 800416c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004170:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004174:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004178:	4642      	mov	r2, r8
 800417a:	464b      	mov	r3, r9
 800417c:	1891      	adds	r1, r2, r2
 800417e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004180:	415b      	adcs	r3, r3
 8004182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004184:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004188:	4641      	mov	r1, r8
 800418a:	eb12 0a01 	adds.w	sl, r2, r1
 800418e:	4649      	mov	r1, r9
 8004190:	eb43 0b01 	adc.w	fp, r3, r1
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041a8:	4692      	mov	sl, r2
 80041aa:	469b      	mov	fp, r3
 80041ac:	4643      	mov	r3, r8
 80041ae:	eb1a 0303 	adds.w	r3, sl, r3
 80041b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041b6:	464b      	mov	r3, r9
 80041b8:	eb4b 0303 	adc.w	r3, fp, r3
 80041bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041d4:	460b      	mov	r3, r1
 80041d6:	18db      	adds	r3, r3, r3
 80041d8:	643b      	str	r3, [r7, #64]	; 0x40
 80041da:	4613      	mov	r3, r2
 80041dc:	eb42 0303 	adc.w	r3, r2, r3
 80041e0:	647b      	str	r3, [r7, #68]	; 0x44
 80041e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041ea:	f7fc f851 	bl	8000290 <__aeabi_uldivmod>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4611      	mov	r1, r2
 80041f4:	4b3b      	ldr	r3, [pc, #236]	; (80042e4 <UART_SetConfig+0x2d4>)
 80041f6:	fba3 2301 	umull	r2, r3, r3, r1
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	2264      	movs	r2, #100	; 0x64
 80041fe:	fb02 f303 	mul.w	r3, r2, r3
 8004202:	1acb      	subs	r3, r1, r3
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800420a:	4b36      	ldr	r3, [pc, #216]	; (80042e4 <UART_SetConfig+0x2d4>)
 800420c:	fba3 2302 	umull	r2, r3, r3, r2
 8004210:	095b      	lsrs	r3, r3, #5
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004218:	441c      	add	r4, r3
 800421a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800421e:	2200      	movs	r2, #0
 8004220:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004224:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004228:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800422c:	4642      	mov	r2, r8
 800422e:	464b      	mov	r3, r9
 8004230:	1891      	adds	r1, r2, r2
 8004232:	63b9      	str	r1, [r7, #56]	; 0x38
 8004234:	415b      	adcs	r3, r3
 8004236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004238:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800423c:	4641      	mov	r1, r8
 800423e:	1851      	adds	r1, r2, r1
 8004240:	6339      	str	r1, [r7, #48]	; 0x30
 8004242:	4649      	mov	r1, r9
 8004244:	414b      	adcs	r3, r1
 8004246:	637b      	str	r3, [r7, #52]	; 0x34
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004254:	4659      	mov	r1, fp
 8004256:	00cb      	lsls	r3, r1, #3
 8004258:	4651      	mov	r1, sl
 800425a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800425e:	4651      	mov	r1, sl
 8004260:	00ca      	lsls	r2, r1, #3
 8004262:	4610      	mov	r0, r2
 8004264:	4619      	mov	r1, r3
 8004266:	4603      	mov	r3, r0
 8004268:	4642      	mov	r2, r8
 800426a:	189b      	adds	r3, r3, r2
 800426c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004270:	464b      	mov	r3, r9
 8004272:	460a      	mov	r2, r1
 8004274:	eb42 0303 	adc.w	r3, r2, r3
 8004278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800427c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004288:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800428c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004290:	460b      	mov	r3, r1
 8004292:	18db      	adds	r3, r3, r3
 8004294:	62bb      	str	r3, [r7, #40]	; 0x28
 8004296:	4613      	mov	r3, r2
 8004298:	eb42 0303 	adc.w	r3, r2, r3
 800429c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800429e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042a6:	f7fb fff3 	bl	8000290 <__aeabi_uldivmod>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <UART_SetConfig+0x2d4>)
 80042b0:	fba3 1302 	umull	r1, r3, r3, r2
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	2164      	movs	r1, #100	; 0x64
 80042b8:	fb01 f303 	mul.w	r3, r1, r3
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	3332      	adds	r3, #50	; 0x32
 80042c2:	4a08      	ldr	r2, [pc, #32]	; (80042e4 <UART_SetConfig+0x2d4>)
 80042c4:	fba2 2303 	umull	r2, r3, r2, r3
 80042c8:	095b      	lsrs	r3, r3, #5
 80042ca:	f003 0207 	and.w	r2, r3, #7
 80042ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4422      	add	r2, r4
 80042d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042d8:	e105      	b.n	80044e6 <UART_SetConfig+0x4d6>
 80042da:	bf00      	nop
 80042dc:	40011000 	.word	0x40011000
 80042e0:	40011400 	.word	0x40011400
 80042e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ec:	2200      	movs	r2, #0
 80042ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042fa:	4642      	mov	r2, r8
 80042fc:	464b      	mov	r3, r9
 80042fe:	1891      	adds	r1, r2, r2
 8004300:	6239      	str	r1, [r7, #32]
 8004302:	415b      	adcs	r3, r3
 8004304:	627b      	str	r3, [r7, #36]	; 0x24
 8004306:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800430a:	4641      	mov	r1, r8
 800430c:	1854      	adds	r4, r2, r1
 800430e:	4649      	mov	r1, r9
 8004310:	eb43 0501 	adc.w	r5, r3, r1
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	00eb      	lsls	r3, r5, #3
 800431e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004322:	00e2      	lsls	r2, r4, #3
 8004324:	4614      	mov	r4, r2
 8004326:	461d      	mov	r5, r3
 8004328:	4643      	mov	r3, r8
 800432a:	18e3      	adds	r3, r4, r3
 800432c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004330:	464b      	mov	r3, r9
 8004332:	eb45 0303 	adc.w	r3, r5, r3
 8004336:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800433a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004346:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004356:	4629      	mov	r1, r5
 8004358:	008b      	lsls	r3, r1, #2
 800435a:	4621      	mov	r1, r4
 800435c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004360:	4621      	mov	r1, r4
 8004362:	008a      	lsls	r2, r1, #2
 8004364:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004368:	f7fb ff92 	bl	8000290 <__aeabi_uldivmod>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4b60      	ldr	r3, [pc, #384]	; (80044f4 <UART_SetConfig+0x4e4>)
 8004372:	fba3 2302 	umull	r2, r3, r3, r2
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	011c      	lsls	r4, r3, #4
 800437a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800437e:	2200      	movs	r2, #0
 8004380:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004384:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004388:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800438c:	4642      	mov	r2, r8
 800438e:	464b      	mov	r3, r9
 8004390:	1891      	adds	r1, r2, r2
 8004392:	61b9      	str	r1, [r7, #24]
 8004394:	415b      	adcs	r3, r3
 8004396:	61fb      	str	r3, [r7, #28]
 8004398:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800439c:	4641      	mov	r1, r8
 800439e:	1851      	adds	r1, r2, r1
 80043a0:	6139      	str	r1, [r7, #16]
 80043a2:	4649      	mov	r1, r9
 80043a4:	414b      	adcs	r3, r1
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043b4:	4659      	mov	r1, fp
 80043b6:	00cb      	lsls	r3, r1, #3
 80043b8:	4651      	mov	r1, sl
 80043ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043be:	4651      	mov	r1, sl
 80043c0:	00ca      	lsls	r2, r1, #3
 80043c2:	4610      	mov	r0, r2
 80043c4:	4619      	mov	r1, r3
 80043c6:	4603      	mov	r3, r0
 80043c8:	4642      	mov	r2, r8
 80043ca:	189b      	adds	r3, r3, r2
 80043cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043d0:	464b      	mov	r3, r9
 80043d2:	460a      	mov	r2, r1
 80043d4:	eb42 0303 	adc.w	r3, r2, r3
 80043d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80043e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043f4:	4649      	mov	r1, r9
 80043f6:	008b      	lsls	r3, r1, #2
 80043f8:	4641      	mov	r1, r8
 80043fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043fe:	4641      	mov	r1, r8
 8004400:	008a      	lsls	r2, r1, #2
 8004402:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004406:	f7fb ff43 	bl	8000290 <__aeabi_uldivmod>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4b39      	ldr	r3, [pc, #228]	; (80044f4 <UART_SetConfig+0x4e4>)
 8004410:	fba3 1302 	umull	r1, r3, r3, r2
 8004414:	095b      	lsrs	r3, r3, #5
 8004416:	2164      	movs	r1, #100	; 0x64
 8004418:	fb01 f303 	mul.w	r3, r1, r3
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	3332      	adds	r3, #50	; 0x32
 8004422:	4a34      	ldr	r2, [pc, #208]	; (80044f4 <UART_SetConfig+0x4e4>)
 8004424:	fba2 2303 	umull	r2, r3, r2, r3
 8004428:	095b      	lsrs	r3, r3, #5
 800442a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800442e:	441c      	add	r4, r3
 8004430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004434:	2200      	movs	r2, #0
 8004436:	673b      	str	r3, [r7, #112]	; 0x70
 8004438:	677a      	str	r2, [r7, #116]	; 0x74
 800443a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800443e:	4642      	mov	r2, r8
 8004440:	464b      	mov	r3, r9
 8004442:	1891      	adds	r1, r2, r2
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	415b      	adcs	r3, r3
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800444e:	4641      	mov	r1, r8
 8004450:	1851      	adds	r1, r2, r1
 8004452:	6039      	str	r1, [r7, #0]
 8004454:	4649      	mov	r1, r9
 8004456:	414b      	adcs	r3, r1
 8004458:	607b      	str	r3, [r7, #4]
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	f04f 0300 	mov.w	r3, #0
 8004462:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004466:	4659      	mov	r1, fp
 8004468:	00cb      	lsls	r3, r1, #3
 800446a:	4651      	mov	r1, sl
 800446c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004470:	4651      	mov	r1, sl
 8004472:	00ca      	lsls	r2, r1, #3
 8004474:	4610      	mov	r0, r2
 8004476:	4619      	mov	r1, r3
 8004478:	4603      	mov	r3, r0
 800447a:	4642      	mov	r2, r8
 800447c:	189b      	adds	r3, r3, r2
 800447e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004480:	464b      	mov	r3, r9
 8004482:	460a      	mov	r2, r1
 8004484:	eb42 0303 	adc.w	r3, r2, r3
 8004488:	66fb      	str	r3, [r7, #108]	; 0x6c
 800448a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	663b      	str	r3, [r7, #96]	; 0x60
 8004494:	667a      	str	r2, [r7, #100]	; 0x64
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044a2:	4649      	mov	r1, r9
 80044a4:	008b      	lsls	r3, r1, #2
 80044a6:	4641      	mov	r1, r8
 80044a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044ac:	4641      	mov	r1, r8
 80044ae:	008a      	lsls	r2, r1, #2
 80044b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044b4:	f7fb feec 	bl	8000290 <__aeabi_uldivmod>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4b0d      	ldr	r3, [pc, #52]	; (80044f4 <UART_SetConfig+0x4e4>)
 80044be:	fba3 1302 	umull	r1, r3, r3, r2
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	2164      	movs	r1, #100	; 0x64
 80044c6:	fb01 f303 	mul.w	r3, r1, r3
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	3332      	adds	r3, #50	; 0x32
 80044d0:	4a08      	ldr	r2, [pc, #32]	; (80044f4 <UART_SetConfig+0x4e4>)
 80044d2:	fba2 2303 	umull	r2, r3, r2, r3
 80044d6:	095b      	lsrs	r3, r3, #5
 80044d8:	f003 020f 	and.w	r2, r3, #15
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4422      	add	r2, r4
 80044e4:	609a      	str	r2, [r3, #8]
}
 80044e6:	bf00      	nop
 80044e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044ec:	46bd      	mov	sp, r7
 80044ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f2:	bf00      	nop
 80044f4:	51eb851f 	.word	0x51eb851f

080044f8 <__errno>:
 80044f8:	4b01      	ldr	r3, [pc, #4]	; (8004500 <__errno+0x8>)
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	2000000c 	.word	0x2000000c

08004504 <__libc_init_array>:
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	4d0d      	ldr	r5, [pc, #52]	; (800453c <__libc_init_array+0x38>)
 8004508:	4c0d      	ldr	r4, [pc, #52]	; (8004540 <__libc_init_array+0x3c>)
 800450a:	1b64      	subs	r4, r4, r5
 800450c:	10a4      	asrs	r4, r4, #2
 800450e:	2600      	movs	r6, #0
 8004510:	42a6      	cmp	r6, r4
 8004512:	d109      	bne.n	8004528 <__libc_init_array+0x24>
 8004514:	4d0b      	ldr	r5, [pc, #44]	; (8004544 <__libc_init_array+0x40>)
 8004516:	4c0c      	ldr	r4, [pc, #48]	; (8004548 <__libc_init_array+0x44>)
 8004518:	f001 f824 	bl	8005564 <_init>
 800451c:	1b64      	subs	r4, r4, r5
 800451e:	10a4      	asrs	r4, r4, #2
 8004520:	2600      	movs	r6, #0
 8004522:	42a6      	cmp	r6, r4
 8004524:	d105      	bne.n	8004532 <__libc_init_array+0x2e>
 8004526:	bd70      	pop	{r4, r5, r6, pc}
 8004528:	f855 3b04 	ldr.w	r3, [r5], #4
 800452c:	4798      	blx	r3
 800452e:	3601      	adds	r6, #1
 8004530:	e7ee      	b.n	8004510 <__libc_init_array+0xc>
 8004532:	f855 3b04 	ldr.w	r3, [r5], #4
 8004536:	4798      	blx	r3
 8004538:	3601      	adds	r6, #1
 800453a:	e7f2      	b.n	8004522 <__libc_init_array+0x1e>
 800453c:	08005664 	.word	0x08005664
 8004540:	08005664 	.word	0x08005664
 8004544:	08005664 	.word	0x08005664
 8004548:	08005668 	.word	0x08005668

0800454c <memset>:
 800454c:	4402      	add	r2, r0
 800454e:	4603      	mov	r3, r0
 8004550:	4293      	cmp	r3, r2
 8004552:	d100      	bne.n	8004556 <memset+0xa>
 8004554:	4770      	bx	lr
 8004556:	f803 1b01 	strb.w	r1, [r3], #1
 800455a:	e7f9      	b.n	8004550 <memset+0x4>

0800455c <iprintf>:
 800455c:	b40f      	push	{r0, r1, r2, r3}
 800455e:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <iprintf+0x2c>)
 8004560:	b513      	push	{r0, r1, r4, lr}
 8004562:	681c      	ldr	r4, [r3, #0]
 8004564:	b124      	cbz	r4, 8004570 <iprintf+0x14>
 8004566:	69a3      	ldr	r3, [r4, #24]
 8004568:	b913      	cbnz	r3, 8004570 <iprintf+0x14>
 800456a:	4620      	mov	r0, r4
 800456c:	f000 fa5e 	bl	8004a2c <__sinit>
 8004570:	ab05      	add	r3, sp, #20
 8004572:	9a04      	ldr	r2, [sp, #16]
 8004574:	68a1      	ldr	r1, [r4, #8]
 8004576:	9301      	str	r3, [sp, #4]
 8004578:	4620      	mov	r0, r4
 800457a:	f000 fc67 	bl	8004e4c <_vfiprintf_r>
 800457e:	b002      	add	sp, #8
 8004580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004584:	b004      	add	sp, #16
 8004586:	4770      	bx	lr
 8004588:	2000000c 	.word	0x2000000c

0800458c <_puts_r>:
 800458c:	b570      	push	{r4, r5, r6, lr}
 800458e:	460e      	mov	r6, r1
 8004590:	4605      	mov	r5, r0
 8004592:	b118      	cbz	r0, 800459c <_puts_r+0x10>
 8004594:	6983      	ldr	r3, [r0, #24]
 8004596:	b90b      	cbnz	r3, 800459c <_puts_r+0x10>
 8004598:	f000 fa48 	bl	8004a2c <__sinit>
 800459c:	69ab      	ldr	r3, [r5, #24]
 800459e:	68ac      	ldr	r4, [r5, #8]
 80045a0:	b913      	cbnz	r3, 80045a8 <_puts_r+0x1c>
 80045a2:	4628      	mov	r0, r5
 80045a4:	f000 fa42 	bl	8004a2c <__sinit>
 80045a8:	4b2c      	ldr	r3, [pc, #176]	; (800465c <_puts_r+0xd0>)
 80045aa:	429c      	cmp	r4, r3
 80045ac:	d120      	bne.n	80045f0 <_puts_r+0x64>
 80045ae:	686c      	ldr	r4, [r5, #4]
 80045b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045b2:	07db      	lsls	r3, r3, #31
 80045b4:	d405      	bmi.n	80045c2 <_puts_r+0x36>
 80045b6:	89a3      	ldrh	r3, [r4, #12]
 80045b8:	0598      	lsls	r0, r3, #22
 80045ba:	d402      	bmi.n	80045c2 <_puts_r+0x36>
 80045bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045be:	f000 fad3 	bl	8004b68 <__retarget_lock_acquire_recursive>
 80045c2:	89a3      	ldrh	r3, [r4, #12]
 80045c4:	0719      	lsls	r1, r3, #28
 80045c6:	d51d      	bpl.n	8004604 <_puts_r+0x78>
 80045c8:	6923      	ldr	r3, [r4, #16]
 80045ca:	b1db      	cbz	r3, 8004604 <_puts_r+0x78>
 80045cc:	3e01      	subs	r6, #1
 80045ce:	68a3      	ldr	r3, [r4, #8]
 80045d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80045d4:	3b01      	subs	r3, #1
 80045d6:	60a3      	str	r3, [r4, #8]
 80045d8:	bb39      	cbnz	r1, 800462a <_puts_r+0x9e>
 80045da:	2b00      	cmp	r3, #0
 80045dc:	da38      	bge.n	8004650 <_puts_r+0xc4>
 80045de:	4622      	mov	r2, r4
 80045e0:	210a      	movs	r1, #10
 80045e2:	4628      	mov	r0, r5
 80045e4:	f000 f848 	bl	8004678 <__swbuf_r>
 80045e8:	3001      	adds	r0, #1
 80045ea:	d011      	beq.n	8004610 <_puts_r+0x84>
 80045ec:	250a      	movs	r5, #10
 80045ee:	e011      	b.n	8004614 <_puts_r+0x88>
 80045f0:	4b1b      	ldr	r3, [pc, #108]	; (8004660 <_puts_r+0xd4>)
 80045f2:	429c      	cmp	r4, r3
 80045f4:	d101      	bne.n	80045fa <_puts_r+0x6e>
 80045f6:	68ac      	ldr	r4, [r5, #8]
 80045f8:	e7da      	b.n	80045b0 <_puts_r+0x24>
 80045fa:	4b1a      	ldr	r3, [pc, #104]	; (8004664 <_puts_r+0xd8>)
 80045fc:	429c      	cmp	r4, r3
 80045fe:	bf08      	it	eq
 8004600:	68ec      	ldreq	r4, [r5, #12]
 8004602:	e7d5      	b.n	80045b0 <_puts_r+0x24>
 8004604:	4621      	mov	r1, r4
 8004606:	4628      	mov	r0, r5
 8004608:	f000 f888 	bl	800471c <__swsetup_r>
 800460c:	2800      	cmp	r0, #0
 800460e:	d0dd      	beq.n	80045cc <_puts_r+0x40>
 8004610:	f04f 35ff 	mov.w	r5, #4294967295
 8004614:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004616:	07da      	lsls	r2, r3, #31
 8004618:	d405      	bmi.n	8004626 <_puts_r+0x9a>
 800461a:	89a3      	ldrh	r3, [r4, #12]
 800461c:	059b      	lsls	r3, r3, #22
 800461e:	d402      	bmi.n	8004626 <_puts_r+0x9a>
 8004620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004622:	f000 faa2 	bl	8004b6a <__retarget_lock_release_recursive>
 8004626:	4628      	mov	r0, r5
 8004628:	bd70      	pop	{r4, r5, r6, pc}
 800462a:	2b00      	cmp	r3, #0
 800462c:	da04      	bge.n	8004638 <_puts_r+0xac>
 800462e:	69a2      	ldr	r2, [r4, #24]
 8004630:	429a      	cmp	r2, r3
 8004632:	dc06      	bgt.n	8004642 <_puts_r+0xb6>
 8004634:	290a      	cmp	r1, #10
 8004636:	d004      	beq.n	8004642 <_puts_r+0xb6>
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	6022      	str	r2, [r4, #0]
 800463e:	7019      	strb	r1, [r3, #0]
 8004640:	e7c5      	b.n	80045ce <_puts_r+0x42>
 8004642:	4622      	mov	r2, r4
 8004644:	4628      	mov	r0, r5
 8004646:	f000 f817 	bl	8004678 <__swbuf_r>
 800464a:	3001      	adds	r0, #1
 800464c:	d1bf      	bne.n	80045ce <_puts_r+0x42>
 800464e:	e7df      	b.n	8004610 <_puts_r+0x84>
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	250a      	movs	r5, #10
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	6022      	str	r2, [r4, #0]
 8004658:	701d      	strb	r5, [r3, #0]
 800465a:	e7db      	b.n	8004614 <_puts_r+0x88>
 800465c:	080055e8 	.word	0x080055e8
 8004660:	08005608 	.word	0x08005608
 8004664:	080055c8 	.word	0x080055c8

08004668 <puts>:
 8004668:	4b02      	ldr	r3, [pc, #8]	; (8004674 <puts+0xc>)
 800466a:	4601      	mov	r1, r0
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	f7ff bf8d 	b.w	800458c <_puts_r>
 8004672:	bf00      	nop
 8004674:	2000000c 	.word	0x2000000c

08004678 <__swbuf_r>:
 8004678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467a:	460e      	mov	r6, r1
 800467c:	4614      	mov	r4, r2
 800467e:	4605      	mov	r5, r0
 8004680:	b118      	cbz	r0, 800468a <__swbuf_r+0x12>
 8004682:	6983      	ldr	r3, [r0, #24]
 8004684:	b90b      	cbnz	r3, 800468a <__swbuf_r+0x12>
 8004686:	f000 f9d1 	bl	8004a2c <__sinit>
 800468a:	4b21      	ldr	r3, [pc, #132]	; (8004710 <__swbuf_r+0x98>)
 800468c:	429c      	cmp	r4, r3
 800468e:	d12b      	bne.n	80046e8 <__swbuf_r+0x70>
 8004690:	686c      	ldr	r4, [r5, #4]
 8004692:	69a3      	ldr	r3, [r4, #24]
 8004694:	60a3      	str	r3, [r4, #8]
 8004696:	89a3      	ldrh	r3, [r4, #12]
 8004698:	071a      	lsls	r2, r3, #28
 800469a:	d52f      	bpl.n	80046fc <__swbuf_r+0x84>
 800469c:	6923      	ldr	r3, [r4, #16]
 800469e:	b36b      	cbz	r3, 80046fc <__swbuf_r+0x84>
 80046a0:	6923      	ldr	r3, [r4, #16]
 80046a2:	6820      	ldr	r0, [r4, #0]
 80046a4:	1ac0      	subs	r0, r0, r3
 80046a6:	6963      	ldr	r3, [r4, #20]
 80046a8:	b2f6      	uxtb	r6, r6
 80046aa:	4283      	cmp	r3, r0
 80046ac:	4637      	mov	r7, r6
 80046ae:	dc04      	bgt.n	80046ba <__swbuf_r+0x42>
 80046b0:	4621      	mov	r1, r4
 80046b2:	4628      	mov	r0, r5
 80046b4:	f000 f926 	bl	8004904 <_fflush_r>
 80046b8:	bb30      	cbnz	r0, 8004708 <__swbuf_r+0x90>
 80046ba:	68a3      	ldr	r3, [r4, #8]
 80046bc:	3b01      	subs	r3, #1
 80046be:	60a3      	str	r3, [r4, #8]
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	6022      	str	r2, [r4, #0]
 80046c6:	701e      	strb	r6, [r3, #0]
 80046c8:	6963      	ldr	r3, [r4, #20]
 80046ca:	3001      	adds	r0, #1
 80046cc:	4283      	cmp	r3, r0
 80046ce:	d004      	beq.n	80046da <__swbuf_r+0x62>
 80046d0:	89a3      	ldrh	r3, [r4, #12]
 80046d2:	07db      	lsls	r3, r3, #31
 80046d4:	d506      	bpl.n	80046e4 <__swbuf_r+0x6c>
 80046d6:	2e0a      	cmp	r6, #10
 80046d8:	d104      	bne.n	80046e4 <__swbuf_r+0x6c>
 80046da:	4621      	mov	r1, r4
 80046dc:	4628      	mov	r0, r5
 80046de:	f000 f911 	bl	8004904 <_fflush_r>
 80046e2:	b988      	cbnz	r0, 8004708 <__swbuf_r+0x90>
 80046e4:	4638      	mov	r0, r7
 80046e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046e8:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <__swbuf_r+0x9c>)
 80046ea:	429c      	cmp	r4, r3
 80046ec:	d101      	bne.n	80046f2 <__swbuf_r+0x7a>
 80046ee:	68ac      	ldr	r4, [r5, #8]
 80046f0:	e7cf      	b.n	8004692 <__swbuf_r+0x1a>
 80046f2:	4b09      	ldr	r3, [pc, #36]	; (8004718 <__swbuf_r+0xa0>)
 80046f4:	429c      	cmp	r4, r3
 80046f6:	bf08      	it	eq
 80046f8:	68ec      	ldreq	r4, [r5, #12]
 80046fa:	e7ca      	b.n	8004692 <__swbuf_r+0x1a>
 80046fc:	4621      	mov	r1, r4
 80046fe:	4628      	mov	r0, r5
 8004700:	f000 f80c 	bl	800471c <__swsetup_r>
 8004704:	2800      	cmp	r0, #0
 8004706:	d0cb      	beq.n	80046a0 <__swbuf_r+0x28>
 8004708:	f04f 37ff 	mov.w	r7, #4294967295
 800470c:	e7ea      	b.n	80046e4 <__swbuf_r+0x6c>
 800470e:	bf00      	nop
 8004710:	080055e8 	.word	0x080055e8
 8004714:	08005608 	.word	0x08005608
 8004718:	080055c8 	.word	0x080055c8

0800471c <__swsetup_r>:
 800471c:	4b32      	ldr	r3, [pc, #200]	; (80047e8 <__swsetup_r+0xcc>)
 800471e:	b570      	push	{r4, r5, r6, lr}
 8004720:	681d      	ldr	r5, [r3, #0]
 8004722:	4606      	mov	r6, r0
 8004724:	460c      	mov	r4, r1
 8004726:	b125      	cbz	r5, 8004732 <__swsetup_r+0x16>
 8004728:	69ab      	ldr	r3, [r5, #24]
 800472a:	b913      	cbnz	r3, 8004732 <__swsetup_r+0x16>
 800472c:	4628      	mov	r0, r5
 800472e:	f000 f97d 	bl	8004a2c <__sinit>
 8004732:	4b2e      	ldr	r3, [pc, #184]	; (80047ec <__swsetup_r+0xd0>)
 8004734:	429c      	cmp	r4, r3
 8004736:	d10f      	bne.n	8004758 <__swsetup_r+0x3c>
 8004738:	686c      	ldr	r4, [r5, #4]
 800473a:	89a3      	ldrh	r3, [r4, #12]
 800473c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004740:	0719      	lsls	r1, r3, #28
 8004742:	d42c      	bmi.n	800479e <__swsetup_r+0x82>
 8004744:	06dd      	lsls	r5, r3, #27
 8004746:	d411      	bmi.n	800476c <__swsetup_r+0x50>
 8004748:	2309      	movs	r3, #9
 800474a:	6033      	str	r3, [r6, #0]
 800474c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004750:	81a3      	strh	r3, [r4, #12]
 8004752:	f04f 30ff 	mov.w	r0, #4294967295
 8004756:	e03e      	b.n	80047d6 <__swsetup_r+0xba>
 8004758:	4b25      	ldr	r3, [pc, #148]	; (80047f0 <__swsetup_r+0xd4>)
 800475a:	429c      	cmp	r4, r3
 800475c:	d101      	bne.n	8004762 <__swsetup_r+0x46>
 800475e:	68ac      	ldr	r4, [r5, #8]
 8004760:	e7eb      	b.n	800473a <__swsetup_r+0x1e>
 8004762:	4b24      	ldr	r3, [pc, #144]	; (80047f4 <__swsetup_r+0xd8>)
 8004764:	429c      	cmp	r4, r3
 8004766:	bf08      	it	eq
 8004768:	68ec      	ldreq	r4, [r5, #12]
 800476a:	e7e6      	b.n	800473a <__swsetup_r+0x1e>
 800476c:	0758      	lsls	r0, r3, #29
 800476e:	d512      	bpl.n	8004796 <__swsetup_r+0x7a>
 8004770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004772:	b141      	cbz	r1, 8004786 <__swsetup_r+0x6a>
 8004774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004778:	4299      	cmp	r1, r3
 800477a:	d002      	beq.n	8004782 <__swsetup_r+0x66>
 800477c:	4630      	mov	r0, r6
 800477e:	f000 fa5b 	bl	8004c38 <_free_r>
 8004782:	2300      	movs	r3, #0
 8004784:	6363      	str	r3, [r4, #52]	; 0x34
 8004786:	89a3      	ldrh	r3, [r4, #12]
 8004788:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800478c:	81a3      	strh	r3, [r4, #12]
 800478e:	2300      	movs	r3, #0
 8004790:	6063      	str	r3, [r4, #4]
 8004792:	6923      	ldr	r3, [r4, #16]
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	89a3      	ldrh	r3, [r4, #12]
 8004798:	f043 0308 	orr.w	r3, r3, #8
 800479c:	81a3      	strh	r3, [r4, #12]
 800479e:	6923      	ldr	r3, [r4, #16]
 80047a0:	b94b      	cbnz	r3, 80047b6 <__swsetup_r+0x9a>
 80047a2:	89a3      	ldrh	r3, [r4, #12]
 80047a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ac:	d003      	beq.n	80047b6 <__swsetup_r+0x9a>
 80047ae:	4621      	mov	r1, r4
 80047b0:	4630      	mov	r0, r6
 80047b2:	f000 fa01 	bl	8004bb8 <__smakebuf_r>
 80047b6:	89a0      	ldrh	r0, [r4, #12]
 80047b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047bc:	f010 0301 	ands.w	r3, r0, #1
 80047c0:	d00a      	beq.n	80047d8 <__swsetup_r+0xbc>
 80047c2:	2300      	movs	r3, #0
 80047c4:	60a3      	str	r3, [r4, #8]
 80047c6:	6963      	ldr	r3, [r4, #20]
 80047c8:	425b      	negs	r3, r3
 80047ca:	61a3      	str	r3, [r4, #24]
 80047cc:	6923      	ldr	r3, [r4, #16]
 80047ce:	b943      	cbnz	r3, 80047e2 <__swsetup_r+0xc6>
 80047d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80047d4:	d1ba      	bne.n	800474c <__swsetup_r+0x30>
 80047d6:	bd70      	pop	{r4, r5, r6, pc}
 80047d8:	0781      	lsls	r1, r0, #30
 80047da:	bf58      	it	pl
 80047dc:	6963      	ldrpl	r3, [r4, #20]
 80047de:	60a3      	str	r3, [r4, #8]
 80047e0:	e7f4      	b.n	80047cc <__swsetup_r+0xb0>
 80047e2:	2000      	movs	r0, #0
 80047e4:	e7f7      	b.n	80047d6 <__swsetup_r+0xba>
 80047e6:	bf00      	nop
 80047e8:	2000000c 	.word	0x2000000c
 80047ec:	080055e8 	.word	0x080055e8
 80047f0:	08005608 	.word	0x08005608
 80047f4:	080055c8 	.word	0x080055c8

080047f8 <__sflush_r>:
 80047f8:	898a      	ldrh	r2, [r1, #12]
 80047fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047fe:	4605      	mov	r5, r0
 8004800:	0710      	lsls	r0, r2, #28
 8004802:	460c      	mov	r4, r1
 8004804:	d458      	bmi.n	80048b8 <__sflush_r+0xc0>
 8004806:	684b      	ldr	r3, [r1, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	dc05      	bgt.n	8004818 <__sflush_r+0x20>
 800480c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	dc02      	bgt.n	8004818 <__sflush_r+0x20>
 8004812:	2000      	movs	r0, #0
 8004814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800481a:	2e00      	cmp	r6, #0
 800481c:	d0f9      	beq.n	8004812 <__sflush_r+0x1a>
 800481e:	2300      	movs	r3, #0
 8004820:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004824:	682f      	ldr	r7, [r5, #0]
 8004826:	602b      	str	r3, [r5, #0]
 8004828:	d032      	beq.n	8004890 <__sflush_r+0x98>
 800482a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800482c:	89a3      	ldrh	r3, [r4, #12]
 800482e:	075a      	lsls	r2, r3, #29
 8004830:	d505      	bpl.n	800483e <__sflush_r+0x46>
 8004832:	6863      	ldr	r3, [r4, #4]
 8004834:	1ac0      	subs	r0, r0, r3
 8004836:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004838:	b10b      	cbz	r3, 800483e <__sflush_r+0x46>
 800483a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800483c:	1ac0      	subs	r0, r0, r3
 800483e:	2300      	movs	r3, #0
 8004840:	4602      	mov	r2, r0
 8004842:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004844:	6a21      	ldr	r1, [r4, #32]
 8004846:	4628      	mov	r0, r5
 8004848:	47b0      	blx	r6
 800484a:	1c43      	adds	r3, r0, #1
 800484c:	89a3      	ldrh	r3, [r4, #12]
 800484e:	d106      	bne.n	800485e <__sflush_r+0x66>
 8004850:	6829      	ldr	r1, [r5, #0]
 8004852:	291d      	cmp	r1, #29
 8004854:	d82c      	bhi.n	80048b0 <__sflush_r+0xb8>
 8004856:	4a2a      	ldr	r2, [pc, #168]	; (8004900 <__sflush_r+0x108>)
 8004858:	40ca      	lsrs	r2, r1
 800485a:	07d6      	lsls	r6, r2, #31
 800485c:	d528      	bpl.n	80048b0 <__sflush_r+0xb8>
 800485e:	2200      	movs	r2, #0
 8004860:	6062      	str	r2, [r4, #4]
 8004862:	04d9      	lsls	r1, r3, #19
 8004864:	6922      	ldr	r2, [r4, #16]
 8004866:	6022      	str	r2, [r4, #0]
 8004868:	d504      	bpl.n	8004874 <__sflush_r+0x7c>
 800486a:	1c42      	adds	r2, r0, #1
 800486c:	d101      	bne.n	8004872 <__sflush_r+0x7a>
 800486e:	682b      	ldr	r3, [r5, #0]
 8004870:	b903      	cbnz	r3, 8004874 <__sflush_r+0x7c>
 8004872:	6560      	str	r0, [r4, #84]	; 0x54
 8004874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004876:	602f      	str	r7, [r5, #0]
 8004878:	2900      	cmp	r1, #0
 800487a:	d0ca      	beq.n	8004812 <__sflush_r+0x1a>
 800487c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004880:	4299      	cmp	r1, r3
 8004882:	d002      	beq.n	800488a <__sflush_r+0x92>
 8004884:	4628      	mov	r0, r5
 8004886:	f000 f9d7 	bl	8004c38 <_free_r>
 800488a:	2000      	movs	r0, #0
 800488c:	6360      	str	r0, [r4, #52]	; 0x34
 800488e:	e7c1      	b.n	8004814 <__sflush_r+0x1c>
 8004890:	6a21      	ldr	r1, [r4, #32]
 8004892:	2301      	movs	r3, #1
 8004894:	4628      	mov	r0, r5
 8004896:	47b0      	blx	r6
 8004898:	1c41      	adds	r1, r0, #1
 800489a:	d1c7      	bne.n	800482c <__sflush_r+0x34>
 800489c:	682b      	ldr	r3, [r5, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0c4      	beq.n	800482c <__sflush_r+0x34>
 80048a2:	2b1d      	cmp	r3, #29
 80048a4:	d001      	beq.n	80048aa <__sflush_r+0xb2>
 80048a6:	2b16      	cmp	r3, #22
 80048a8:	d101      	bne.n	80048ae <__sflush_r+0xb6>
 80048aa:	602f      	str	r7, [r5, #0]
 80048ac:	e7b1      	b.n	8004812 <__sflush_r+0x1a>
 80048ae:	89a3      	ldrh	r3, [r4, #12]
 80048b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b4:	81a3      	strh	r3, [r4, #12]
 80048b6:	e7ad      	b.n	8004814 <__sflush_r+0x1c>
 80048b8:	690f      	ldr	r7, [r1, #16]
 80048ba:	2f00      	cmp	r7, #0
 80048bc:	d0a9      	beq.n	8004812 <__sflush_r+0x1a>
 80048be:	0793      	lsls	r3, r2, #30
 80048c0:	680e      	ldr	r6, [r1, #0]
 80048c2:	bf08      	it	eq
 80048c4:	694b      	ldreq	r3, [r1, #20]
 80048c6:	600f      	str	r7, [r1, #0]
 80048c8:	bf18      	it	ne
 80048ca:	2300      	movne	r3, #0
 80048cc:	eba6 0807 	sub.w	r8, r6, r7
 80048d0:	608b      	str	r3, [r1, #8]
 80048d2:	f1b8 0f00 	cmp.w	r8, #0
 80048d6:	dd9c      	ble.n	8004812 <__sflush_r+0x1a>
 80048d8:	6a21      	ldr	r1, [r4, #32]
 80048da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048dc:	4643      	mov	r3, r8
 80048de:	463a      	mov	r2, r7
 80048e0:	4628      	mov	r0, r5
 80048e2:	47b0      	blx	r6
 80048e4:	2800      	cmp	r0, #0
 80048e6:	dc06      	bgt.n	80048f6 <__sflush_r+0xfe>
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ee:	81a3      	strh	r3, [r4, #12]
 80048f0:	f04f 30ff 	mov.w	r0, #4294967295
 80048f4:	e78e      	b.n	8004814 <__sflush_r+0x1c>
 80048f6:	4407      	add	r7, r0
 80048f8:	eba8 0800 	sub.w	r8, r8, r0
 80048fc:	e7e9      	b.n	80048d2 <__sflush_r+0xda>
 80048fe:	bf00      	nop
 8004900:	20400001 	.word	0x20400001

08004904 <_fflush_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	690b      	ldr	r3, [r1, #16]
 8004908:	4605      	mov	r5, r0
 800490a:	460c      	mov	r4, r1
 800490c:	b913      	cbnz	r3, 8004914 <_fflush_r+0x10>
 800490e:	2500      	movs	r5, #0
 8004910:	4628      	mov	r0, r5
 8004912:	bd38      	pop	{r3, r4, r5, pc}
 8004914:	b118      	cbz	r0, 800491e <_fflush_r+0x1a>
 8004916:	6983      	ldr	r3, [r0, #24]
 8004918:	b90b      	cbnz	r3, 800491e <_fflush_r+0x1a>
 800491a:	f000 f887 	bl	8004a2c <__sinit>
 800491e:	4b14      	ldr	r3, [pc, #80]	; (8004970 <_fflush_r+0x6c>)
 8004920:	429c      	cmp	r4, r3
 8004922:	d11b      	bne.n	800495c <_fflush_r+0x58>
 8004924:	686c      	ldr	r4, [r5, #4]
 8004926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0ef      	beq.n	800490e <_fflush_r+0xa>
 800492e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004930:	07d0      	lsls	r0, r2, #31
 8004932:	d404      	bmi.n	800493e <_fflush_r+0x3a>
 8004934:	0599      	lsls	r1, r3, #22
 8004936:	d402      	bmi.n	800493e <_fflush_r+0x3a>
 8004938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800493a:	f000 f915 	bl	8004b68 <__retarget_lock_acquire_recursive>
 800493e:	4628      	mov	r0, r5
 8004940:	4621      	mov	r1, r4
 8004942:	f7ff ff59 	bl	80047f8 <__sflush_r>
 8004946:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004948:	07da      	lsls	r2, r3, #31
 800494a:	4605      	mov	r5, r0
 800494c:	d4e0      	bmi.n	8004910 <_fflush_r+0xc>
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	059b      	lsls	r3, r3, #22
 8004952:	d4dd      	bmi.n	8004910 <_fflush_r+0xc>
 8004954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004956:	f000 f908 	bl	8004b6a <__retarget_lock_release_recursive>
 800495a:	e7d9      	b.n	8004910 <_fflush_r+0xc>
 800495c:	4b05      	ldr	r3, [pc, #20]	; (8004974 <_fflush_r+0x70>)
 800495e:	429c      	cmp	r4, r3
 8004960:	d101      	bne.n	8004966 <_fflush_r+0x62>
 8004962:	68ac      	ldr	r4, [r5, #8]
 8004964:	e7df      	b.n	8004926 <_fflush_r+0x22>
 8004966:	4b04      	ldr	r3, [pc, #16]	; (8004978 <_fflush_r+0x74>)
 8004968:	429c      	cmp	r4, r3
 800496a:	bf08      	it	eq
 800496c:	68ec      	ldreq	r4, [r5, #12]
 800496e:	e7da      	b.n	8004926 <_fflush_r+0x22>
 8004970:	080055e8 	.word	0x080055e8
 8004974:	08005608 	.word	0x08005608
 8004978:	080055c8 	.word	0x080055c8

0800497c <std>:
 800497c:	2300      	movs	r3, #0
 800497e:	b510      	push	{r4, lr}
 8004980:	4604      	mov	r4, r0
 8004982:	e9c0 3300 	strd	r3, r3, [r0]
 8004986:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800498a:	6083      	str	r3, [r0, #8]
 800498c:	8181      	strh	r1, [r0, #12]
 800498e:	6643      	str	r3, [r0, #100]	; 0x64
 8004990:	81c2      	strh	r2, [r0, #14]
 8004992:	6183      	str	r3, [r0, #24]
 8004994:	4619      	mov	r1, r3
 8004996:	2208      	movs	r2, #8
 8004998:	305c      	adds	r0, #92	; 0x5c
 800499a:	f7ff fdd7 	bl	800454c <memset>
 800499e:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <std+0x38>)
 80049a0:	6263      	str	r3, [r4, #36]	; 0x24
 80049a2:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <std+0x3c>)
 80049a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80049a6:	4b05      	ldr	r3, [pc, #20]	; (80049bc <std+0x40>)
 80049a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049aa:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <std+0x44>)
 80049ac:	6224      	str	r4, [r4, #32]
 80049ae:	6323      	str	r3, [r4, #48]	; 0x30
 80049b0:	bd10      	pop	{r4, pc}
 80049b2:	bf00      	nop
 80049b4:	080053f5 	.word	0x080053f5
 80049b8:	08005417 	.word	0x08005417
 80049bc:	0800544f 	.word	0x0800544f
 80049c0:	08005473 	.word	0x08005473

080049c4 <_cleanup_r>:
 80049c4:	4901      	ldr	r1, [pc, #4]	; (80049cc <_cleanup_r+0x8>)
 80049c6:	f000 b8af 	b.w	8004b28 <_fwalk_reent>
 80049ca:	bf00      	nop
 80049cc:	08004905 	.word	0x08004905

080049d0 <__sfmoreglue>:
 80049d0:	b570      	push	{r4, r5, r6, lr}
 80049d2:	2268      	movs	r2, #104	; 0x68
 80049d4:	1e4d      	subs	r5, r1, #1
 80049d6:	4355      	muls	r5, r2
 80049d8:	460e      	mov	r6, r1
 80049da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80049de:	f000 f997 	bl	8004d10 <_malloc_r>
 80049e2:	4604      	mov	r4, r0
 80049e4:	b140      	cbz	r0, 80049f8 <__sfmoreglue+0x28>
 80049e6:	2100      	movs	r1, #0
 80049e8:	e9c0 1600 	strd	r1, r6, [r0]
 80049ec:	300c      	adds	r0, #12
 80049ee:	60a0      	str	r0, [r4, #8]
 80049f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80049f4:	f7ff fdaa 	bl	800454c <memset>
 80049f8:	4620      	mov	r0, r4
 80049fa:	bd70      	pop	{r4, r5, r6, pc}

080049fc <__sfp_lock_acquire>:
 80049fc:	4801      	ldr	r0, [pc, #4]	; (8004a04 <__sfp_lock_acquire+0x8>)
 80049fe:	f000 b8b3 	b.w	8004b68 <__retarget_lock_acquire_recursive>
 8004a02:	bf00      	nop
 8004a04:	2000018d 	.word	0x2000018d

08004a08 <__sfp_lock_release>:
 8004a08:	4801      	ldr	r0, [pc, #4]	; (8004a10 <__sfp_lock_release+0x8>)
 8004a0a:	f000 b8ae 	b.w	8004b6a <__retarget_lock_release_recursive>
 8004a0e:	bf00      	nop
 8004a10:	2000018d 	.word	0x2000018d

08004a14 <__sinit_lock_acquire>:
 8004a14:	4801      	ldr	r0, [pc, #4]	; (8004a1c <__sinit_lock_acquire+0x8>)
 8004a16:	f000 b8a7 	b.w	8004b68 <__retarget_lock_acquire_recursive>
 8004a1a:	bf00      	nop
 8004a1c:	2000018e 	.word	0x2000018e

08004a20 <__sinit_lock_release>:
 8004a20:	4801      	ldr	r0, [pc, #4]	; (8004a28 <__sinit_lock_release+0x8>)
 8004a22:	f000 b8a2 	b.w	8004b6a <__retarget_lock_release_recursive>
 8004a26:	bf00      	nop
 8004a28:	2000018e 	.word	0x2000018e

08004a2c <__sinit>:
 8004a2c:	b510      	push	{r4, lr}
 8004a2e:	4604      	mov	r4, r0
 8004a30:	f7ff fff0 	bl	8004a14 <__sinit_lock_acquire>
 8004a34:	69a3      	ldr	r3, [r4, #24]
 8004a36:	b11b      	cbz	r3, 8004a40 <__sinit+0x14>
 8004a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a3c:	f7ff bff0 	b.w	8004a20 <__sinit_lock_release>
 8004a40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004a44:	6523      	str	r3, [r4, #80]	; 0x50
 8004a46:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <__sinit+0x68>)
 8004a48:	4a13      	ldr	r2, [pc, #76]	; (8004a98 <__sinit+0x6c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004a4e:	42a3      	cmp	r3, r4
 8004a50:	bf04      	itt	eq
 8004a52:	2301      	moveq	r3, #1
 8004a54:	61a3      	streq	r3, [r4, #24]
 8004a56:	4620      	mov	r0, r4
 8004a58:	f000 f820 	bl	8004a9c <__sfp>
 8004a5c:	6060      	str	r0, [r4, #4]
 8004a5e:	4620      	mov	r0, r4
 8004a60:	f000 f81c 	bl	8004a9c <__sfp>
 8004a64:	60a0      	str	r0, [r4, #8]
 8004a66:	4620      	mov	r0, r4
 8004a68:	f000 f818 	bl	8004a9c <__sfp>
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	60e0      	str	r0, [r4, #12]
 8004a70:	2104      	movs	r1, #4
 8004a72:	6860      	ldr	r0, [r4, #4]
 8004a74:	f7ff ff82 	bl	800497c <std>
 8004a78:	68a0      	ldr	r0, [r4, #8]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	2109      	movs	r1, #9
 8004a7e:	f7ff ff7d 	bl	800497c <std>
 8004a82:	68e0      	ldr	r0, [r4, #12]
 8004a84:	2202      	movs	r2, #2
 8004a86:	2112      	movs	r1, #18
 8004a88:	f7ff ff78 	bl	800497c <std>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	61a3      	str	r3, [r4, #24]
 8004a90:	e7d2      	b.n	8004a38 <__sinit+0xc>
 8004a92:	bf00      	nop
 8004a94:	080055c4 	.word	0x080055c4
 8004a98:	080049c5 	.word	0x080049c5

08004a9c <__sfp>:
 8004a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9e:	4607      	mov	r7, r0
 8004aa0:	f7ff ffac 	bl	80049fc <__sfp_lock_acquire>
 8004aa4:	4b1e      	ldr	r3, [pc, #120]	; (8004b20 <__sfp+0x84>)
 8004aa6:	681e      	ldr	r6, [r3, #0]
 8004aa8:	69b3      	ldr	r3, [r6, #24]
 8004aaa:	b913      	cbnz	r3, 8004ab2 <__sfp+0x16>
 8004aac:	4630      	mov	r0, r6
 8004aae:	f7ff ffbd 	bl	8004a2c <__sinit>
 8004ab2:	3648      	adds	r6, #72	; 0x48
 8004ab4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	d503      	bpl.n	8004ac4 <__sfp+0x28>
 8004abc:	6833      	ldr	r3, [r6, #0]
 8004abe:	b30b      	cbz	r3, 8004b04 <__sfp+0x68>
 8004ac0:	6836      	ldr	r6, [r6, #0]
 8004ac2:	e7f7      	b.n	8004ab4 <__sfp+0x18>
 8004ac4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ac8:	b9d5      	cbnz	r5, 8004b00 <__sfp+0x64>
 8004aca:	4b16      	ldr	r3, [pc, #88]	; (8004b24 <__sfp+0x88>)
 8004acc:	60e3      	str	r3, [r4, #12]
 8004ace:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ad2:	6665      	str	r5, [r4, #100]	; 0x64
 8004ad4:	f000 f847 	bl	8004b66 <__retarget_lock_init_recursive>
 8004ad8:	f7ff ff96 	bl	8004a08 <__sfp_lock_release>
 8004adc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004ae0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ae4:	6025      	str	r5, [r4, #0]
 8004ae6:	61a5      	str	r5, [r4, #24]
 8004ae8:	2208      	movs	r2, #8
 8004aea:	4629      	mov	r1, r5
 8004aec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004af0:	f7ff fd2c 	bl	800454c <memset>
 8004af4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004af8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004afc:	4620      	mov	r0, r4
 8004afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b00:	3468      	adds	r4, #104	; 0x68
 8004b02:	e7d9      	b.n	8004ab8 <__sfp+0x1c>
 8004b04:	2104      	movs	r1, #4
 8004b06:	4638      	mov	r0, r7
 8004b08:	f7ff ff62 	bl	80049d0 <__sfmoreglue>
 8004b0c:	4604      	mov	r4, r0
 8004b0e:	6030      	str	r0, [r6, #0]
 8004b10:	2800      	cmp	r0, #0
 8004b12:	d1d5      	bne.n	8004ac0 <__sfp+0x24>
 8004b14:	f7ff ff78 	bl	8004a08 <__sfp_lock_release>
 8004b18:	230c      	movs	r3, #12
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	e7ee      	b.n	8004afc <__sfp+0x60>
 8004b1e:	bf00      	nop
 8004b20:	080055c4 	.word	0x080055c4
 8004b24:	ffff0001 	.word	0xffff0001

08004b28 <_fwalk_reent>:
 8004b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b2c:	4606      	mov	r6, r0
 8004b2e:	4688      	mov	r8, r1
 8004b30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b34:	2700      	movs	r7, #0
 8004b36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b3a:	f1b9 0901 	subs.w	r9, r9, #1
 8004b3e:	d505      	bpl.n	8004b4c <_fwalk_reent+0x24>
 8004b40:	6824      	ldr	r4, [r4, #0]
 8004b42:	2c00      	cmp	r4, #0
 8004b44:	d1f7      	bne.n	8004b36 <_fwalk_reent+0xe>
 8004b46:	4638      	mov	r0, r7
 8004b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b4c:	89ab      	ldrh	r3, [r5, #12]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d907      	bls.n	8004b62 <_fwalk_reent+0x3a>
 8004b52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b56:	3301      	adds	r3, #1
 8004b58:	d003      	beq.n	8004b62 <_fwalk_reent+0x3a>
 8004b5a:	4629      	mov	r1, r5
 8004b5c:	4630      	mov	r0, r6
 8004b5e:	47c0      	blx	r8
 8004b60:	4307      	orrs	r7, r0
 8004b62:	3568      	adds	r5, #104	; 0x68
 8004b64:	e7e9      	b.n	8004b3a <_fwalk_reent+0x12>

08004b66 <__retarget_lock_init_recursive>:
 8004b66:	4770      	bx	lr

08004b68 <__retarget_lock_acquire_recursive>:
 8004b68:	4770      	bx	lr

08004b6a <__retarget_lock_release_recursive>:
 8004b6a:	4770      	bx	lr

08004b6c <__swhatbuf_r>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	460e      	mov	r6, r1
 8004b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b74:	2900      	cmp	r1, #0
 8004b76:	b096      	sub	sp, #88	; 0x58
 8004b78:	4614      	mov	r4, r2
 8004b7a:	461d      	mov	r5, r3
 8004b7c:	da08      	bge.n	8004b90 <__swhatbuf_r+0x24>
 8004b7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	602a      	str	r2, [r5, #0]
 8004b86:	061a      	lsls	r2, r3, #24
 8004b88:	d410      	bmi.n	8004bac <__swhatbuf_r+0x40>
 8004b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b8e:	e00e      	b.n	8004bae <__swhatbuf_r+0x42>
 8004b90:	466a      	mov	r2, sp
 8004b92:	f000 fc95 	bl	80054c0 <_fstat_r>
 8004b96:	2800      	cmp	r0, #0
 8004b98:	dbf1      	blt.n	8004b7e <__swhatbuf_r+0x12>
 8004b9a:	9a01      	ldr	r2, [sp, #4]
 8004b9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ba0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ba4:	425a      	negs	r2, r3
 8004ba6:	415a      	adcs	r2, r3
 8004ba8:	602a      	str	r2, [r5, #0]
 8004baa:	e7ee      	b.n	8004b8a <__swhatbuf_r+0x1e>
 8004bac:	2340      	movs	r3, #64	; 0x40
 8004bae:	2000      	movs	r0, #0
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	b016      	add	sp, #88	; 0x58
 8004bb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004bb8 <__smakebuf_r>:
 8004bb8:	898b      	ldrh	r3, [r1, #12]
 8004bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bbc:	079d      	lsls	r5, r3, #30
 8004bbe:	4606      	mov	r6, r0
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	d507      	bpl.n	8004bd4 <__smakebuf_r+0x1c>
 8004bc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bc8:	6023      	str	r3, [r4, #0]
 8004bca:	6123      	str	r3, [r4, #16]
 8004bcc:	2301      	movs	r3, #1
 8004bce:	6163      	str	r3, [r4, #20]
 8004bd0:	b002      	add	sp, #8
 8004bd2:	bd70      	pop	{r4, r5, r6, pc}
 8004bd4:	ab01      	add	r3, sp, #4
 8004bd6:	466a      	mov	r2, sp
 8004bd8:	f7ff ffc8 	bl	8004b6c <__swhatbuf_r>
 8004bdc:	9900      	ldr	r1, [sp, #0]
 8004bde:	4605      	mov	r5, r0
 8004be0:	4630      	mov	r0, r6
 8004be2:	f000 f895 	bl	8004d10 <_malloc_r>
 8004be6:	b948      	cbnz	r0, 8004bfc <__smakebuf_r+0x44>
 8004be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bec:	059a      	lsls	r2, r3, #22
 8004bee:	d4ef      	bmi.n	8004bd0 <__smakebuf_r+0x18>
 8004bf0:	f023 0303 	bic.w	r3, r3, #3
 8004bf4:	f043 0302 	orr.w	r3, r3, #2
 8004bf8:	81a3      	strh	r3, [r4, #12]
 8004bfa:	e7e3      	b.n	8004bc4 <__smakebuf_r+0xc>
 8004bfc:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <__smakebuf_r+0x7c>)
 8004bfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c00:	89a3      	ldrh	r3, [r4, #12]
 8004c02:	6020      	str	r0, [r4, #0]
 8004c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c08:	81a3      	strh	r3, [r4, #12]
 8004c0a:	9b00      	ldr	r3, [sp, #0]
 8004c0c:	6163      	str	r3, [r4, #20]
 8004c0e:	9b01      	ldr	r3, [sp, #4]
 8004c10:	6120      	str	r0, [r4, #16]
 8004c12:	b15b      	cbz	r3, 8004c2c <__smakebuf_r+0x74>
 8004c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c18:	4630      	mov	r0, r6
 8004c1a:	f000 fc63 	bl	80054e4 <_isatty_r>
 8004c1e:	b128      	cbz	r0, 8004c2c <__smakebuf_r+0x74>
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	f023 0303 	bic.w	r3, r3, #3
 8004c26:	f043 0301 	orr.w	r3, r3, #1
 8004c2a:	81a3      	strh	r3, [r4, #12]
 8004c2c:	89a0      	ldrh	r0, [r4, #12]
 8004c2e:	4305      	orrs	r5, r0
 8004c30:	81a5      	strh	r5, [r4, #12]
 8004c32:	e7cd      	b.n	8004bd0 <__smakebuf_r+0x18>
 8004c34:	080049c5 	.word	0x080049c5

08004c38 <_free_r>:
 8004c38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c3a:	2900      	cmp	r1, #0
 8004c3c:	d044      	beq.n	8004cc8 <_free_r+0x90>
 8004c3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c42:	9001      	str	r0, [sp, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f1a1 0404 	sub.w	r4, r1, #4
 8004c4a:	bfb8      	it	lt
 8004c4c:	18e4      	addlt	r4, r4, r3
 8004c4e:	f000 fc6b 	bl	8005528 <__malloc_lock>
 8004c52:	4a1e      	ldr	r2, [pc, #120]	; (8004ccc <_free_r+0x94>)
 8004c54:	9801      	ldr	r0, [sp, #4]
 8004c56:	6813      	ldr	r3, [r2, #0]
 8004c58:	b933      	cbnz	r3, 8004c68 <_free_r+0x30>
 8004c5a:	6063      	str	r3, [r4, #4]
 8004c5c:	6014      	str	r4, [r2, #0]
 8004c5e:	b003      	add	sp, #12
 8004c60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c64:	f000 bc66 	b.w	8005534 <__malloc_unlock>
 8004c68:	42a3      	cmp	r3, r4
 8004c6a:	d908      	bls.n	8004c7e <_free_r+0x46>
 8004c6c:	6825      	ldr	r5, [r4, #0]
 8004c6e:	1961      	adds	r1, r4, r5
 8004c70:	428b      	cmp	r3, r1
 8004c72:	bf01      	itttt	eq
 8004c74:	6819      	ldreq	r1, [r3, #0]
 8004c76:	685b      	ldreq	r3, [r3, #4]
 8004c78:	1949      	addeq	r1, r1, r5
 8004c7a:	6021      	streq	r1, [r4, #0]
 8004c7c:	e7ed      	b.n	8004c5a <_free_r+0x22>
 8004c7e:	461a      	mov	r2, r3
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	b10b      	cbz	r3, 8004c88 <_free_r+0x50>
 8004c84:	42a3      	cmp	r3, r4
 8004c86:	d9fa      	bls.n	8004c7e <_free_r+0x46>
 8004c88:	6811      	ldr	r1, [r2, #0]
 8004c8a:	1855      	adds	r5, r2, r1
 8004c8c:	42a5      	cmp	r5, r4
 8004c8e:	d10b      	bne.n	8004ca8 <_free_r+0x70>
 8004c90:	6824      	ldr	r4, [r4, #0]
 8004c92:	4421      	add	r1, r4
 8004c94:	1854      	adds	r4, r2, r1
 8004c96:	42a3      	cmp	r3, r4
 8004c98:	6011      	str	r1, [r2, #0]
 8004c9a:	d1e0      	bne.n	8004c5e <_free_r+0x26>
 8004c9c:	681c      	ldr	r4, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	6053      	str	r3, [r2, #4]
 8004ca2:	4421      	add	r1, r4
 8004ca4:	6011      	str	r1, [r2, #0]
 8004ca6:	e7da      	b.n	8004c5e <_free_r+0x26>
 8004ca8:	d902      	bls.n	8004cb0 <_free_r+0x78>
 8004caa:	230c      	movs	r3, #12
 8004cac:	6003      	str	r3, [r0, #0]
 8004cae:	e7d6      	b.n	8004c5e <_free_r+0x26>
 8004cb0:	6825      	ldr	r5, [r4, #0]
 8004cb2:	1961      	adds	r1, r4, r5
 8004cb4:	428b      	cmp	r3, r1
 8004cb6:	bf04      	itt	eq
 8004cb8:	6819      	ldreq	r1, [r3, #0]
 8004cba:	685b      	ldreq	r3, [r3, #4]
 8004cbc:	6063      	str	r3, [r4, #4]
 8004cbe:	bf04      	itt	eq
 8004cc0:	1949      	addeq	r1, r1, r5
 8004cc2:	6021      	streq	r1, [r4, #0]
 8004cc4:	6054      	str	r4, [r2, #4]
 8004cc6:	e7ca      	b.n	8004c5e <_free_r+0x26>
 8004cc8:	b003      	add	sp, #12
 8004cca:	bd30      	pop	{r4, r5, pc}
 8004ccc:	20000190 	.word	0x20000190

08004cd0 <sbrk_aligned>:
 8004cd0:	b570      	push	{r4, r5, r6, lr}
 8004cd2:	4e0e      	ldr	r6, [pc, #56]	; (8004d0c <sbrk_aligned+0x3c>)
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	6831      	ldr	r1, [r6, #0]
 8004cd8:	4605      	mov	r5, r0
 8004cda:	b911      	cbnz	r1, 8004ce2 <sbrk_aligned+0x12>
 8004cdc:	f000 fb7a 	bl	80053d4 <_sbrk_r>
 8004ce0:	6030      	str	r0, [r6, #0]
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	f000 fb75 	bl	80053d4 <_sbrk_r>
 8004cea:	1c43      	adds	r3, r0, #1
 8004cec:	d00a      	beq.n	8004d04 <sbrk_aligned+0x34>
 8004cee:	1cc4      	adds	r4, r0, #3
 8004cf0:	f024 0403 	bic.w	r4, r4, #3
 8004cf4:	42a0      	cmp	r0, r4
 8004cf6:	d007      	beq.n	8004d08 <sbrk_aligned+0x38>
 8004cf8:	1a21      	subs	r1, r4, r0
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	f000 fb6a 	bl	80053d4 <_sbrk_r>
 8004d00:	3001      	adds	r0, #1
 8004d02:	d101      	bne.n	8004d08 <sbrk_aligned+0x38>
 8004d04:	f04f 34ff 	mov.w	r4, #4294967295
 8004d08:	4620      	mov	r0, r4
 8004d0a:	bd70      	pop	{r4, r5, r6, pc}
 8004d0c:	20000194 	.word	0x20000194

08004d10 <_malloc_r>:
 8004d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d14:	1ccd      	adds	r5, r1, #3
 8004d16:	f025 0503 	bic.w	r5, r5, #3
 8004d1a:	3508      	adds	r5, #8
 8004d1c:	2d0c      	cmp	r5, #12
 8004d1e:	bf38      	it	cc
 8004d20:	250c      	movcc	r5, #12
 8004d22:	2d00      	cmp	r5, #0
 8004d24:	4607      	mov	r7, r0
 8004d26:	db01      	blt.n	8004d2c <_malloc_r+0x1c>
 8004d28:	42a9      	cmp	r1, r5
 8004d2a:	d905      	bls.n	8004d38 <_malloc_r+0x28>
 8004d2c:	230c      	movs	r3, #12
 8004d2e:	603b      	str	r3, [r7, #0]
 8004d30:	2600      	movs	r6, #0
 8004d32:	4630      	mov	r0, r6
 8004d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d38:	4e2e      	ldr	r6, [pc, #184]	; (8004df4 <_malloc_r+0xe4>)
 8004d3a:	f000 fbf5 	bl	8005528 <__malloc_lock>
 8004d3e:	6833      	ldr	r3, [r6, #0]
 8004d40:	461c      	mov	r4, r3
 8004d42:	bb34      	cbnz	r4, 8004d92 <_malloc_r+0x82>
 8004d44:	4629      	mov	r1, r5
 8004d46:	4638      	mov	r0, r7
 8004d48:	f7ff ffc2 	bl	8004cd0 <sbrk_aligned>
 8004d4c:	1c43      	adds	r3, r0, #1
 8004d4e:	4604      	mov	r4, r0
 8004d50:	d14d      	bne.n	8004dee <_malloc_r+0xde>
 8004d52:	6834      	ldr	r4, [r6, #0]
 8004d54:	4626      	mov	r6, r4
 8004d56:	2e00      	cmp	r6, #0
 8004d58:	d140      	bne.n	8004ddc <_malloc_r+0xcc>
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	4631      	mov	r1, r6
 8004d5e:	4638      	mov	r0, r7
 8004d60:	eb04 0803 	add.w	r8, r4, r3
 8004d64:	f000 fb36 	bl	80053d4 <_sbrk_r>
 8004d68:	4580      	cmp	r8, r0
 8004d6a:	d13a      	bne.n	8004de2 <_malloc_r+0xd2>
 8004d6c:	6821      	ldr	r1, [r4, #0]
 8004d6e:	3503      	adds	r5, #3
 8004d70:	1a6d      	subs	r5, r5, r1
 8004d72:	f025 0503 	bic.w	r5, r5, #3
 8004d76:	3508      	adds	r5, #8
 8004d78:	2d0c      	cmp	r5, #12
 8004d7a:	bf38      	it	cc
 8004d7c:	250c      	movcc	r5, #12
 8004d7e:	4629      	mov	r1, r5
 8004d80:	4638      	mov	r0, r7
 8004d82:	f7ff ffa5 	bl	8004cd0 <sbrk_aligned>
 8004d86:	3001      	adds	r0, #1
 8004d88:	d02b      	beq.n	8004de2 <_malloc_r+0xd2>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	442b      	add	r3, r5
 8004d8e:	6023      	str	r3, [r4, #0]
 8004d90:	e00e      	b.n	8004db0 <_malloc_r+0xa0>
 8004d92:	6822      	ldr	r2, [r4, #0]
 8004d94:	1b52      	subs	r2, r2, r5
 8004d96:	d41e      	bmi.n	8004dd6 <_malloc_r+0xc6>
 8004d98:	2a0b      	cmp	r2, #11
 8004d9a:	d916      	bls.n	8004dca <_malloc_r+0xba>
 8004d9c:	1961      	adds	r1, r4, r5
 8004d9e:	42a3      	cmp	r3, r4
 8004da0:	6025      	str	r5, [r4, #0]
 8004da2:	bf18      	it	ne
 8004da4:	6059      	strne	r1, [r3, #4]
 8004da6:	6863      	ldr	r3, [r4, #4]
 8004da8:	bf08      	it	eq
 8004daa:	6031      	streq	r1, [r6, #0]
 8004dac:	5162      	str	r2, [r4, r5]
 8004dae:	604b      	str	r3, [r1, #4]
 8004db0:	4638      	mov	r0, r7
 8004db2:	f104 060b 	add.w	r6, r4, #11
 8004db6:	f000 fbbd 	bl	8005534 <__malloc_unlock>
 8004dba:	f026 0607 	bic.w	r6, r6, #7
 8004dbe:	1d23      	adds	r3, r4, #4
 8004dc0:	1af2      	subs	r2, r6, r3
 8004dc2:	d0b6      	beq.n	8004d32 <_malloc_r+0x22>
 8004dc4:	1b9b      	subs	r3, r3, r6
 8004dc6:	50a3      	str	r3, [r4, r2]
 8004dc8:	e7b3      	b.n	8004d32 <_malloc_r+0x22>
 8004dca:	6862      	ldr	r2, [r4, #4]
 8004dcc:	42a3      	cmp	r3, r4
 8004dce:	bf0c      	ite	eq
 8004dd0:	6032      	streq	r2, [r6, #0]
 8004dd2:	605a      	strne	r2, [r3, #4]
 8004dd4:	e7ec      	b.n	8004db0 <_malloc_r+0xa0>
 8004dd6:	4623      	mov	r3, r4
 8004dd8:	6864      	ldr	r4, [r4, #4]
 8004dda:	e7b2      	b.n	8004d42 <_malloc_r+0x32>
 8004ddc:	4634      	mov	r4, r6
 8004dde:	6876      	ldr	r6, [r6, #4]
 8004de0:	e7b9      	b.n	8004d56 <_malloc_r+0x46>
 8004de2:	230c      	movs	r3, #12
 8004de4:	603b      	str	r3, [r7, #0]
 8004de6:	4638      	mov	r0, r7
 8004de8:	f000 fba4 	bl	8005534 <__malloc_unlock>
 8004dec:	e7a1      	b.n	8004d32 <_malloc_r+0x22>
 8004dee:	6025      	str	r5, [r4, #0]
 8004df0:	e7de      	b.n	8004db0 <_malloc_r+0xa0>
 8004df2:	bf00      	nop
 8004df4:	20000190 	.word	0x20000190

08004df8 <__sfputc_r>:
 8004df8:	6893      	ldr	r3, [r2, #8]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	b410      	push	{r4}
 8004e00:	6093      	str	r3, [r2, #8]
 8004e02:	da08      	bge.n	8004e16 <__sfputc_r+0x1e>
 8004e04:	6994      	ldr	r4, [r2, #24]
 8004e06:	42a3      	cmp	r3, r4
 8004e08:	db01      	blt.n	8004e0e <__sfputc_r+0x16>
 8004e0a:	290a      	cmp	r1, #10
 8004e0c:	d103      	bne.n	8004e16 <__sfputc_r+0x1e>
 8004e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e12:	f7ff bc31 	b.w	8004678 <__swbuf_r>
 8004e16:	6813      	ldr	r3, [r2, #0]
 8004e18:	1c58      	adds	r0, r3, #1
 8004e1a:	6010      	str	r0, [r2, #0]
 8004e1c:	7019      	strb	r1, [r3, #0]
 8004e1e:	4608      	mov	r0, r1
 8004e20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <__sfputs_r>:
 8004e26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e28:	4606      	mov	r6, r0
 8004e2a:	460f      	mov	r7, r1
 8004e2c:	4614      	mov	r4, r2
 8004e2e:	18d5      	adds	r5, r2, r3
 8004e30:	42ac      	cmp	r4, r5
 8004e32:	d101      	bne.n	8004e38 <__sfputs_r+0x12>
 8004e34:	2000      	movs	r0, #0
 8004e36:	e007      	b.n	8004e48 <__sfputs_r+0x22>
 8004e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e3c:	463a      	mov	r2, r7
 8004e3e:	4630      	mov	r0, r6
 8004e40:	f7ff ffda 	bl	8004df8 <__sfputc_r>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d1f3      	bne.n	8004e30 <__sfputs_r+0xa>
 8004e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e4c <_vfiprintf_r>:
 8004e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e50:	460d      	mov	r5, r1
 8004e52:	b09d      	sub	sp, #116	; 0x74
 8004e54:	4614      	mov	r4, r2
 8004e56:	4698      	mov	r8, r3
 8004e58:	4606      	mov	r6, r0
 8004e5a:	b118      	cbz	r0, 8004e64 <_vfiprintf_r+0x18>
 8004e5c:	6983      	ldr	r3, [r0, #24]
 8004e5e:	b90b      	cbnz	r3, 8004e64 <_vfiprintf_r+0x18>
 8004e60:	f7ff fde4 	bl	8004a2c <__sinit>
 8004e64:	4b89      	ldr	r3, [pc, #548]	; (800508c <_vfiprintf_r+0x240>)
 8004e66:	429d      	cmp	r5, r3
 8004e68:	d11b      	bne.n	8004ea2 <_vfiprintf_r+0x56>
 8004e6a:	6875      	ldr	r5, [r6, #4]
 8004e6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e6e:	07d9      	lsls	r1, r3, #31
 8004e70:	d405      	bmi.n	8004e7e <_vfiprintf_r+0x32>
 8004e72:	89ab      	ldrh	r3, [r5, #12]
 8004e74:	059a      	lsls	r2, r3, #22
 8004e76:	d402      	bmi.n	8004e7e <_vfiprintf_r+0x32>
 8004e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e7a:	f7ff fe75 	bl	8004b68 <__retarget_lock_acquire_recursive>
 8004e7e:	89ab      	ldrh	r3, [r5, #12]
 8004e80:	071b      	lsls	r3, r3, #28
 8004e82:	d501      	bpl.n	8004e88 <_vfiprintf_r+0x3c>
 8004e84:	692b      	ldr	r3, [r5, #16]
 8004e86:	b9eb      	cbnz	r3, 8004ec4 <_vfiprintf_r+0x78>
 8004e88:	4629      	mov	r1, r5
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	f7ff fc46 	bl	800471c <__swsetup_r>
 8004e90:	b1c0      	cbz	r0, 8004ec4 <_vfiprintf_r+0x78>
 8004e92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e94:	07dc      	lsls	r4, r3, #31
 8004e96:	d50e      	bpl.n	8004eb6 <_vfiprintf_r+0x6a>
 8004e98:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9c:	b01d      	add	sp, #116	; 0x74
 8004e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea2:	4b7b      	ldr	r3, [pc, #492]	; (8005090 <_vfiprintf_r+0x244>)
 8004ea4:	429d      	cmp	r5, r3
 8004ea6:	d101      	bne.n	8004eac <_vfiprintf_r+0x60>
 8004ea8:	68b5      	ldr	r5, [r6, #8]
 8004eaa:	e7df      	b.n	8004e6c <_vfiprintf_r+0x20>
 8004eac:	4b79      	ldr	r3, [pc, #484]	; (8005094 <_vfiprintf_r+0x248>)
 8004eae:	429d      	cmp	r5, r3
 8004eb0:	bf08      	it	eq
 8004eb2:	68f5      	ldreq	r5, [r6, #12]
 8004eb4:	e7da      	b.n	8004e6c <_vfiprintf_r+0x20>
 8004eb6:	89ab      	ldrh	r3, [r5, #12]
 8004eb8:	0598      	lsls	r0, r3, #22
 8004eba:	d4ed      	bmi.n	8004e98 <_vfiprintf_r+0x4c>
 8004ebc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ebe:	f7ff fe54 	bl	8004b6a <__retarget_lock_release_recursive>
 8004ec2:	e7e9      	b.n	8004e98 <_vfiprintf_r+0x4c>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ec8:	2320      	movs	r3, #32
 8004eca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ece:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ed2:	2330      	movs	r3, #48	; 0x30
 8004ed4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005098 <_vfiprintf_r+0x24c>
 8004ed8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004edc:	f04f 0901 	mov.w	r9, #1
 8004ee0:	4623      	mov	r3, r4
 8004ee2:	469a      	mov	sl, r3
 8004ee4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ee8:	b10a      	cbz	r2, 8004eee <_vfiprintf_r+0xa2>
 8004eea:	2a25      	cmp	r2, #37	; 0x25
 8004eec:	d1f9      	bne.n	8004ee2 <_vfiprintf_r+0x96>
 8004eee:	ebba 0b04 	subs.w	fp, sl, r4
 8004ef2:	d00b      	beq.n	8004f0c <_vfiprintf_r+0xc0>
 8004ef4:	465b      	mov	r3, fp
 8004ef6:	4622      	mov	r2, r4
 8004ef8:	4629      	mov	r1, r5
 8004efa:	4630      	mov	r0, r6
 8004efc:	f7ff ff93 	bl	8004e26 <__sfputs_r>
 8004f00:	3001      	adds	r0, #1
 8004f02:	f000 80aa 	beq.w	800505a <_vfiprintf_r+0x20e>
 8004f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f08:	445a      	add	r2, fp
 8004f0a:	9209      	str	r2, [sp, #36]	; 0x24
 8004f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 80a2 	beq.w	800505a <_vfiprintf_r+0x20e>
 8004f16:	2300      	movs	r3, #0
 8004f18:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f20:	f10a 0a01 	add.w	sl, sl, #1
 8004f24:	9304      	str	r3, [sp, #16]
 8004f26:	9307      	str	r3, [sp, #28]
 8004f28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f2c:	931a      	str	r3, [sp, #104]	; 0x68
 8004f2e:	4654      	mov	r4, sl
 8004f30:	2205      	movs	r2, #5
 8004f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f36:	4858      	ldr	r0, [pc, #352]	; (8005098 <_vfiprintf_r+0x24c>)
 8004f38:	f7fb f95a 	bl	80001f0 <memchr>
 8004f3c:	9a04      	ldr	r2, [sp, #16]
 8004f3e:	b9d8      	cbnz	r0, 8004f78 <_vfiprintf_r+0x12c>
 8004f40:	06d1      	lsls	r1, r2, #27
 8004f42:	bf44      	itt	mi
 8004f44:	2320      	movmi	r3, #32
 8004f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f4a:	0713      	lsls	r3, r2, #28
 8004f4c:	bf44      	itt	mi
 8004f4e:	232b      	movmi	r3, #43	; 0x2b
 8004f50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f54:	f89a 3000 	ldrb.w	r3, [sl]
 8004f58:	2b2a      	cmp	r3, #42	; 0x2a
 8004f5a:	d015      	beq.n	8004f88 <_vfiprintf_r+0x13c>
 8004f5c:	9a07      	ldr	r2, [sp, #28]
 8004f5e:	4654      	mov	r4, sl
 8004f60:	2000      	movs	r0, #0
 8004f62:	f04f 0c0a 	mov.w	ip, #10
 8004f66:	4621      	mov	r1, r4
 8004f68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f6c:	3b30      	subs	r3, #48	; 0x30
 8004f6e:	2b09      	cmp	r3, #9
 8004f70:	d94e      	bls.n	8005010 <_vfiprintf_r+0x1c4>
 8004f72:	b1b0      	cbz	r0, 8004fa2 <_vfiprintf_r+0x156>
 8004f74:	9207      	str	r2, [sp, #28]
 8004f76:	e014      	b.n	8004fa2 <_vfiprintf_r+0x156>
 8004f78:	eba0 0308 	sub.w	r3, r0, r8
 8004f7c:	fa09 f303 	lsl.w	r3, r9, r3
 8004f80:	4313      	orrs	r3, r2
 8004f82:	9304      	str	r3, [sp, #16]
 8004f84:	46a2      	mov	sl, r4
 8004f86:	e7d2      	b.n	8004f2e <_vfiprintf_r+0xe2>
 8004f88:	9b03      	ldr	r3, [sp, #12]
 8004f8a:	1d19      	adds	r1, r3, #4
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	9103      	str	r1, [sp, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	bfbb      	ittet	lt
 8004f94:	425b      	neglt	r3, r3
 8004f96:	f042 0202 	orrlt.w	r2, r2, #2
 8004f9a:	9307      	strge	r3, [sp, #28]
 8004f9c:	9307      	strlt	r3, [sp, #28]
 8004f9e:	bfb8      	it	lt
 8004fa0:	9204      	strlt	r2, [sp, #16]
 8004fa2:	7823      	ldrb	r3, [r4, #0]
 8004fa4:	2b2e      	cmp	r3, #46	; 0x2e
 8004fa6:	d10c      	bne.n	8004fc2 <_vfiprintf_r+0x176>
 8004fa8:	7863      	ldrb	r3, [r4, #1]
 8004faa:	2b2a      	cmp	r3, #42	; 0x2a
 8004fac:	d135      	bne.n	800501a <_vfiprintf_r+0x1ce>
 8004fae:	9b03      	ldr	r3, [sp, #12]
 8004fb0:	1d1a      	adds	r2, r3, #4
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	9203      	str	r2, [sp, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	bfb8      	it	lt
 8004fba:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fbe:	3402      	adds	r4, #2
 8004fc0:	9305      	str	r3, [sp, #20]
 8004fc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80050a8 <_vfiprintf_r+0x25c>
 8004fc6:	7821      	ldrb	r1, [r4, #0]
 8004fc8:	2203      	movs	r2, #3
 8004fca:	4650      	mov	r0, sl
 8004fcc:	f7fb f910 	bl	80001f0 <memchr>
 8004fd0:	b140      	cbz	r0, 8004fe4 <_vfiprintf_r+0x198>
 8004fd2:	2340      	movs	r3, #64	; 0x40
 8004fd4:	eba0 000a 	sub.w	r0, r0, sl
 8004fd8:	fa03 f000 	lsl.w	r0, r3, r0
 8004fdc:	9b04      	ldr	r3, [sp, #16]
 8004fde:	4303      	orrs	r3, r0
 8004fe0:	3401      	adds	r4, #1
 8004fe2:	9304      	str	r3, [sp, #16]
 8004fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fe8:	482c      	ldr	r0, [pc, #176]	; (800509c <_vfiprintf_r+0x250>)
 8004fea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fee:	2206      	movs	r2, #6
 8004ff0:	f7fb f8fe 	bl	80001f0 <memchr>
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	d03f      	beq.n	8005078 <_vfiprintf_r+0x22c>
 8004ff8:	4b29      	ldr	r3, [pc, #164]	; (80050a0 <_vfiprintf_r+0x254>)
 8004ffa:	bb1b      	cbnz	r3, 8005044 <_vfiprintf_r+0x1f8>
 8004ffc:	9b03      	ldr	r3, [sp, #12]
 8004ffe:	3307      	adds	r3, #7
 8005000:	f023 0307 	bic.w	r3, r3, #7
 8005004:	3308      	adds	r3, #8
 8005006:	9303      	str	r3, [sp, #12]
 8005008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800500a:	443b      	add	r3, r7
 800500c:	9309      	str	r3, [sp, #36]	; 0x24
 800500e:	e767      	b.n	8004ee0 <_vfiprintf_r+0x94>
 8005010:	fb0c 3202 	mla	r2, ip, r2, r3
 8005014:	460c      	mov	r4, r1
 8005016:	2001      	movs	r0, #1
 8005018:	e7a5      	b.n	8004f66 <_vfiprintf_r+0x11a>
 800501a:	2300      	movs	r3, #0
 800501c:	3401      	adds	r4, #1
 800501e:	9305      	str	r3, [sp, #20]
 8005020:	4619      	mov	r1, r3
 8005022:	f04f 0c0a 	mov.w	ip, #10
 8005026:	4620      	mov	r0, r4
 8005028:	f810 2b01 	ldrb.w	r2, [r0], #1
 800502c:	3a30      	subs	r2, #48	; 0x30
 800502e:	2a09      	cmp	r2, #9
 8005030:	d903      	bls.n	800503a <_vfiprintf_r+0x1ee>
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0c5      	beq.n	8004fc2 <_vfiprintf_r+0x176>
 8005036:	9105      	str	r1, [sp, #20]
 8005038:	e7c3      	b.n	8004fc2 <_vfiprintf_r+0x176>
 800503a:	fb0c 2101 	mla	r1, ip, r1, r2
 800503e:	4604      	mov	r4, r0
 8005040:	2301      	movs	r3, #1
 8005042:	e7f0      	b.n	8005026 <_vfiprintf_r+0x1da>
 8005044:	ab03      	add	r3, sp, #12
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	462a      	mov	r2, r5
 800504a:	4b16      	ldr	r3, [pc, #88]	; (80050a4 <_vfiprintf_r+0x258>)
 800504c:	a904      	add	r1, sp, #16
 800504e:	4630      	mov	r0, r6
 8005050:	f3af 8000 	nop.w
 8005054:	4607      	mov	r7, r0
 8005056:	1c78      	adds	r0, r7, #1
 8005058:	d1d6      	bne.n	8005008 <_vfiprintf_r+0x1bc>
 800505a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800505c:	07d9      	lsls	r1, r3, #31
 800505e:	d405      	bmi.n	800506c <_vfiprintf_r+0x220>
 8005060:	89ab      	ldrh	r3, [r5, #12]
 8005062:	059a      	lsls	r2, r3, #22
 8005064:	d402      	bmi.n	800506c <_vfiprintf_r+0x220>
 8005066:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005068:	f7ff fd7f 	bl	8004b6a <__retarget_lock_release_recursive>
 800506c:	89ab      	ldrh	r3, [r5, #12]
 800506e:	065b      	lsls	r3, r3, #25
 8005070:	f53f af12 	bmi.w	8004e98 <_vfiprintf_r+0x4c>
 8005074:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005076:	e711      	b.n	8004e9c <_vfiprintf_r+0x50>
 8005078:	ab03      	add	r3, sp, #12
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	462a      	mov	r2, r5
 800507e:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <_vfiprintf_r+0x258>)
 8005080:	a904      	add	r1, sp, #16
 8005082:	4630      	mov	r0, r6
 8005084:	f000 f880 	bl	8005188 <_printf_i>
 8005088:	e7e4      	b.n	8005054 <_vfiprintf_r+0x208>
 800508a:	bf00      	nop
 800508c:	080055e8 	.word	0x080055e8
 8005090:	08005608 	.word	0x08005608
 8005094:	080055c8 	.word	0x080055c8
 8005098:	08005628 	.word	0x08005628
 800509c:	08005632 	.word	0x08005632
 80050a0:	00000000 	.word	0x00000000
 80050a4:	08004e27 	.word	0x08004e27
 80050a8:	0800562e 	.word	0x0800562e

080050ac <_printf_common>:
 80050ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050b0:	4616      	mov	r6, r2
 80050b2:	4699      	mov	r9, r3
 80050b4:	688a      	ldr	r2, [r1, #8]
 80050b6:	690b      	ldr	r3, [r1, #16]
 80050b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050bc:	4293      	cmp	r3, r2
 80050be:	bfb8      	it	lt
 80050c0:	4613      	movlt	r3, r2
 80050c2:	6033      	str	r3, [r6, #0]
 80050c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050c8:	4607      	mov	r7, r0
 80050ca:	460c      	mov	r4, r1
 80050cc:	b10a      	cbz	r2, 80050d2 <_printf_common+0x26>
 80050ce:	3301      	adds	r3, #1
 80050d0:	6033      	str	r3, [r6, #0]
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	0699      	lsls	r1, r3, #26
 80050d6:	bf42      	ittt	mi
 80050d8:	6833      	ldrmi	r3, [r6, #0]
 80050da:	3302      	addmi	r3, #2
 80050dc:	6033      	strmi	r3, [r6, #0]
 80050de:	6825      	ldr	r5, [r4, #0]
 80050e0:	f015 0506 	ands.w	r5, r5, #6
 80050e4:	d106      	bne.n	80050f4 <_printf_common+0x48>
 80050e6:	f104 0a19 	add.w	sl, r4, #25
 80050ea:	68e3      	ldr	r3, [r4, #12]
 80050ec:	6832      	ldr	r2, [r6, #0]
 80050ee:	1a9b      	subs	r3, r3, r2
 80050f0:	42ab      	cmp	r3, r5
 80050f2:	dc26      	bgt.n	8005142 <_printf_common+0x96>
 80050f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050f8:	1e13      	subs	r3, r2, #0
 80050fa:	6822      	ldr	r2, [r4, #0]
 80050fc:	bf18      	it	ne
 80050fe:	2301      	movne	r3, #1
 8005100:	0692      	lsls	r2, r2, #26
 8005102:	d42b      	bmi.n	800515c <_printf_common+0xb0>
 8005104:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005108:	4649      	mov	r1, r9
 800510a:	4638      	mov	r0, r7
 800510c:	47c0      	blx	r8
 800510e:	3001      	adds	r0, #1
 8005110:	d01e      	beq.n	8005150 <_printf_common+0xa4>
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	68e5      	ldr	r5, [r4, #12]
 8005116:	6832      	ldr	r2, [r6, #0]
 8005118:	f003 0306 	and.w	r3, r3, #6
 800511c:	2b04      	cmp	r3, #4
 800511e:	bf08      	it	eq
 8005120:	1aad      	subeq	r5, r5, r2
 8005122:	68a3      	ldr	r3, [r4, #8]
 8005124:	6922      	ldr	r2, [r4, #16]
 8005126:	bf0c      	ite	eq
 8005128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800512c:	2500      	movne	r5, #0
 800512e:	4293      	cmp	r3, r2
 8005130:	bfc4      	itt	gt
 8005132:	1a9b      	subgt	r3, r3, r2
 8005134:	18ed      	addgt	r5, r5, r3
 8005136:	2600      	movs	r6, #0
 8005138:	341a      	adds	r4, #26
 800513a:	42b5      	cmp	r5, r6
 800513c:	d11a      	bne.n	8005174 <_printf_common+0xc8>
 800513e:	2000      	movs	r0, #0
 8005140:	e008      	b.n	8005154 <_printf_common+0xa8>
 8005142:	2301      	movs	r3, #1
 8005144:	4652      	mov	r2, sl
 8005146:	4649      	mov	r1, r9
 8005148:	4638      	mov	r0, r7
 800514a:	47c0      	blx	r8
 800514c:	3001      	adds	r0, #1
 800514e:	d103      	bne.n	8005158 <_printf_common+0xac>
 8005150:	f04f 30ff 	mov.w	r0, #4294967295
 8005154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005158:	3501      	adds	r5, #1
 800515a:	e7c6      	b.n	80050ea <_printf_common+0x3e>
 800515c:	18e1      	adds	r1, r4, r3
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	2030      	movs	r0, #48	; 0x30
 8005162:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005166:	4422      	add	r2, r4
 8005168:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800516c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005170:	3302      	adds	r3, #2
 8005172:	e7c7      	b.n	8005104 <_printf_common+0x58>
 8005174:	2301      	movs	r3, #1
 8005176:	4622      	mov	r2, r4
 8005178:	4649      	mov	r1, r9
 800517a:	4638      	mov	r0, r7
 800517c:	47c0      	blx	r8
 800517e:	3001      	adds	r0, #1
 8005180:	d0e6      	beq.n	8005150 <_printf_common+0xa4>
 8005182:	3601      	adds	r6, #1
 8005184:	e7d9      	b.n	800513a <_printf_common+0x8e>
	...

08005188 <_printf_i>:
 8005188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800518c:	7e0f      	ldrb	r7, [r1, #24]
 800518e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005190:	2f78      	cmp	r7, #120	; 0x78
 8005192:	4691      	mov	r9, r2
 8005194:	4680      	mov	r8, r0
 8005196:	460c      	mov	r4, r1
 8005198:	469a      	mov	sl, r3
 800519a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800519e:	d807      	bhi.n	80051b0 <_printf_i+0x28>
 80051a0:	2f62      	cmp	r7, #98	; 0x62
 80051a2:	d80a      	bhi.n	80051ba <_printf_i+0x32>
 80051a4:	2f00      	cmp	r7, #0
 80051a6:	f000 80d8 	beq.w	800535a <_printf_i+0x1d2>
 80051aa:	2f58      	cmp	r7, #88	; 0x58
 80051ac:	f000 80a3 	beq.w	80052f6 <_printf_i+0x16e>
 80051b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051b8:	e03a      	b.n	8005230 <_printf_i+0xa8>
 80051ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051be:	2b15      	cmp	r3, #21
 80051c0:	d8f6      	bhi.n	80051b0 <_printf_i+0x28>
 80051c2:	a101      	add	r1, pc, #4	; (adr r1, 80051c8 <_printf_i+0x40>)
 80051c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051c8:	08005221 	.word	0x08005221
 80051cc:	08005235 	.word	0x08005235
 80051d0:	080051b1 	.word	0x080051b1
 80051d4:	080051b1 	.word	0x080051b1
 80051d8:	080051b1 	.word	0x080051b1
 80051dc:	080051b1 	.word	0x080051b1
 80051e0:	08005235 	.word	0x08005235
 80051e4:	080051b1 	.word	0x080051b1
 80051e8:	080051b1 	.word	0x080051b1
 80051ec:	080051b1 	.word	0x080051b1
 80051f0:	080051b1 	.word	0x080051b1
 80051f4:	08005341 	.word	0x08005341
 80051f8:	08005265 	.word	0x08005265
 80051fc:	08005323 	.word	0x08005323
 8005200:	080051b1 	.word	0x080051b1
 8005204:	080051b1 	.word	0x080051b1
 8005208:	08005363 	.word	0x08005363
 800520c:	080051b1 	.word	0x080051b1
 8005210:	08005265 	.word	0x08005265
 8005214:	080051b1 	.word	0x080051b1
 8005218:	080051b1 	.word	0x080051b1
 800521c:	0800532b 	.word	0x0800532b
 8005220:	682b      	ldr	r3, [r5, #0]
 8005222:	1d1a      	adds	r2, r3, #4
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	602a      	str	r2, [r5, #0]
 8005228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800522c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005230:	2301      	movs	r3, #1
 8005232:	e0a3      	b.n	800537c <_printf_i+0x1f4>
 8005234:	6820      	ldr	r0, [r4, #0]
 8005236:	6829      	ldr	r1, [r5, #0]
 8005238:	0606      	lsls	r6, r0, #24
 800523a:	f101 0304 	add.w	r3, r1, #4
 800523e:	d50a      	bpl.n	8005256 <_printf_i+0xce>
 8005240:	680e      	ldr	r6, [r1, #0]
 8005242:	602b      	str	r3, [r5, #0]
 8005244:	2e00      	cmp	r6, #0
 8005246:	da03      	bge.n	8005250 <_printf_i+0xc8>
 8005248:	232d      	movs	r3, #45	; 0x2d
 800524a:	4276      	negs	r6, r6
 800524c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005250:	485e      	ldr	r0, [pc, #376]	; (80053cc <_printf_i+0x244>)
 8005252:	230a      	movs	r3, #10
 8005254:	e019      	b.n	800528a <_printf_i+0x102>
 8005256:	680e      	ldr	r6, [r1, #0]
 8005258:	602b      	str	r3, [r5, #0]
 800525a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800525e:	bf18      	it	ne
 8005260:	b236      	sxthne	r6, r6
 8005262:	e7ef      	b.n	8005244 <_printf_i+0xbc>
 8005264:	682b      	ldr	r3, [r5, #0]
 8005266:	6820      	ldr	r0, [r4, #0]
 8005268:	1d19      	adds	r1, r3, #4
 800526a:	6029      	str	r1, [r5, #0]
 800526c:	0601      	lsls	r1, r0, #24
 800526e:	d501      	bpl.n	8005274 <_printf_i+0xec>
 8005270:	681e      	ldr	r6, [r3, #0]
 8005272:	e002      	b.n	800527a <_printf_i+0xf2>
 8005274:	0646      	lsls	r6, r0, #25
 8005276:	d5fb      	bpl.n	8005270 <_printf_i+0xe8>
 8005278:	881e      	ldrh	r6, [r3, #0]
 800527a:	4854      	ldr	r0, [pc, #336]	; (80053cc <_printf_i+0x244>)
 800527c:	2f6f      	cmp	r7, #111	; 0x6f
 800527e:	bf0c      	ite	eq
 8005280:	2308      	moveq	r3, #8
 8005282:	230a      	movne	r3, #10
 8005284:	2100      	movs	r1, #0
 8005286:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800528a:	6865      	ldr	r5, [r4, #4]
 800528c:	60a5      	str	r5, [r4, #8]
 800528e:	2d00      	cmp	r5, #0
 8005290:	bfa2      	ittt	ge
 8005292:	6821      	ldrge	r1, [r4, #0]
 8005294:	f021 0104 	bicge.w	r1, r1, #4
 8005298:	6021      	strge	r1, [r4, #0]
 800529a:	b90e      	cbnz	r6, 80052a0 <_printf_i+0x118>
 800529c:	2d00      	cmp	r5, #0
 800529e:	d04d      	beq.n	800533c <_printf_i+0x1b4>
 80052a0:	4615      	mov	r5, r2
 80052a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80052a6:	fb03 6711 	mls	r7, r3, r1, r6
 80052aa:	5dc7      	ldrb	r7, [r0, r7]
 80052ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052b0:	4637      	mov	r7, r6
 80052b2:	42bb      	cmp	r3, r7
 80052b4:	460e      	mov	r6, r1
 80052b6:	d9f4      	bls.n	80052a2 <_printf_i+0x11a>
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d10b      	bne.n	80052d4 <_printf_i+0x14c>
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	07de      	lsls	r6, r3, #31
 80052c0:	d508      	bpl.n	80052d4 <_printf_i+0x14c>
 80052c2:	6923      	ldr	r3, [r4, #16]
 80052c4:	6861      	ldr	r1, [r4, #4]
 80052c6:	4299      	cmp	r1, r3
 80052c8:	bfde      	ittt	le
 80052ca:	2330      	movle	r3, #48	; 0x30
 80052cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052d4:	1b52      	subs	r2, r2, r5
 80052d6:	6122      	str	r2, [r4, #16]
 80052d8:	f8cd a000 	str.w	sl, [sp]
 80052dc:	464b      	mov	r3, r9
 80052de:	aa03      	add	r2, sp, #12
 80052e0:	4621      	mov	r1, r4
 80052e2:	4640      	mov	r0, r8
 80052e4:	f7ff fee2 	bl	80050ac <_printf_common>
 80052e8:	3001      	adds	r0, #1
 80052ea:	d14c      	bne.n	8005386 <_printf_i+0x1fe>
 80052ec:	f04f 30ff 	mov.w	r0, #4294967295
 80052f0:	b004      	add	sp, #16
 80052f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f6:	4835      	ldr	r0, [pc, #212]	; (80053cc <_printf_i+0x244>)
 80052f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052fc:	6829      	ldr	r1, [r5, #0]
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	f851 6b04 	ldr.w	r6, [r1], #4
 8005304:	6029      	str	r1, [r5, #0]
 8005306:	061d      	lsls	r5, r3, #24
 8005308:	d514      	bpl.n	8005334 <_printf_i+0x1ac>
 800530a:	07df      	lsls	r7, r3, #31
 800530c:	bf44      	itt	mi
 800530e:	f043 0320 	orrmi.w	r3, r3, #32
 8005312:	6023      	strmi	r3, [r4, #0]
 8005314:	b91e      	cbnz	r6, 800531e <_printf_i+0x196>
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	f023 0320 	bic.w	r3, r3, #32
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	2310      	movs	r3, #16
 8005320:	e7b0      	b.n	8005284 <_printf_i+0xfc>
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	f043 0320 	orr.w	r3, r3, #32
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	2378      	movs	r3, #120	; 0x78
 800532c:	4828      	ldr	r0, [pc, #160]	; (80053d0 <_printf_i+0x248>)
 800532e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005332:	e7e3      	b.n	80052fc <_printf_i+0x174>
 8005334:	0659      	lsls	r1, r3, #25
 8005336:	bf48      	it	mi
 8005338:	b2b6      	uxthmi	r6, r6
 800533a:	e7e6      	b.n	800530a <_printf_i+0x182>
 800533c:	4615      	mov	r5, r2
 800533e:	e7bb      	b.n	80052b8 <_printf_i+0x130>
 8005340:	682b      	ldr	r3, [r5, #0]
 8005342:	6826      	ldr	r6, [r4, #0]
 8005344:	6961      	ldr	r1, [r4, #20]
 8005346:	1d18      	adds	r0, r3, #4
 8005348:	6028      	str	r0, [r5, #0]
 800534a:	0635      	lsls	r5, r6, #24
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	d501      	bpl.n	8005354 <_printf_i+0x1cc>
 8005350:	6019      	str	r1, [r3, #0]
 8005352:	e002      	b.n	800535a <_printf_i+0x1d2>
 8005354:	0670      	lsls	r0, r6, #25
 8005356:	d5fb      	bpl.n	8005350 <_printf_i+0x1c8>
 8005358:	8019      	strh	r1, [r3, #0]
 800535a:	2300      	movs	r3, #0
 800535c:	6123      	str	r3, [r4, #16]
 800535e:	4615      	mov	r5, r2
 8005360:	e7ba      	b.n	80052d8 <_printf_i+0x150>
 8005362:	682b      	ldr	r3, [r5, #0]
 8005364:	1d1a      	adds	r2, r3, #4
 8005366:	602a      	str	r2, [r5, #0]
 8005368:	681d      	ldr	r5, [r3, #0]
 800536a:	6862      	ldr	r2, [r4, #4]
 800536c:	2100      	movs	r1, #0
 800536e:	4628      	mov	r0, r5
 8005370:	f7fa ff3e 	bl	80001f0 <memchr>
 8005374:	b108      	cbz	r0, 800537a <_printf_i+0x1f2>
 8005376:	1b40      	subs	r0, r0, r5
 8005378:	6060      	str	r0, [r4, #4]
 800537a:	6863      	ldr	r3, [r4, #4]
 800537c:	6123      	str	r3, [r4, #16]
 800537e:	2300      	movs	r3, #0
 8005380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005384:	e7a8      	b.n	80052d8 <_printf_i+0x150>
 8005386:	6923      	ldr	r3, [r4, #16]
 8005388:	462a      	mov	r2, r5
 800538a:	4649      	mov	r1, r9
 800538c:	4640      	mov	r0, r8
 800538e:	47d0      	blx	sl
 8005390:	3001      	adds	r0, #1
 8005392:	d0ab      	beq.n	80052ec <_printf_i+0x164>
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	079b      	lsls	r3, r3, #30
 8005398:	d413      	bmi.n	80053c2 <_printf_i+0x23a>
 800539a:	68e0      	ldr	r0, [r4, #12]
 800539c:	9b03      	ldr	r3, [sp, #12]
 800539e:	4298      	cmp	r0, r3
 80053a0:	bfb8      	it	lt
 80053a2:	4618      	movlt	r0, r3
 80053a4:	e7a4      	b.n	80052f0 <_printf_i+0x168>
 80053a6:	2301      	movs	r3, #1
 80053a8:	4632      	mov	r2, r6
 80053aa:	4649      	mov	r1, r9
 80053ac:	4640      	mov	r0, r8
 80053ae:	47d0      	blx	sl
 80053b0:	3001      	adds	r0, #1
 80053b2:	d09b      	beq.n	80052ec <_printf_i+0x164>
 80053b4:	3501      	adds	r5, #1
 80053b6:	68e3      	ldr	r3, [r4, #12]
 80053b8:	9903      	ldr	r1, [sp, #12]
 80053ba:	1a5b      	subs	r3, r3, r1
 80053bc:	42ab      	cmp	r3, r5
 80053be:	dcf2      	bgt.n	80053a6 <_printf_i+0x21e>
 80053c0:	e7eb      	b.n	800539a <_printf_i+0x212>
 80053c2:	2500      	movs	r5, #0
 80053c4:	f104 0619 	add.w	r6, r4, #25
 80053c8:	e7f5      	b.n	80053b6 <_printf_i+0x22e>
 80053ca:	bf00      	nop
 80053cc:	08005639 	.word	0x08005639
 80053d0:	0800564a 	.word	0x0800564a

080053d4 <_sbrk_r>:
 80053d4:	b538      	push	{r3, r4, r5, lr}
 80053d6:	4d06      	ldr	r5, [pc, #24]	; (80053f0 <_sbrk_r+0x1c>)
 80053d8:	2300      	movs	r3, #0
 80053da:	4604      	mov	r4, r0
 80053dc:	4608      	mov	r0, r1
 80053de:	602b      	str	r3, [r5, #0]
 80053e0:	f7fb fc06 	bl	8000bf0 <_sbrk>
 80053e4:	1c43      	adds	r3, r0, #1
 80053e6:	d102      	bne.n	80053ee <_sbrk_r+0x1a>
 80053e8:	682b      	ldr	r3, [r5, #0]
 80053ea:	b103      	cbz	r3, 80053ee <_sbrk_r+0x1a>
 80053ec:	6023      	str	r3, [r4, #0]
 80053ee:	bd38      	pop	{r3, r4, r5, pc}
 80053f0:	20000198 	.word	0x20000198

080053f4 <__sread>:
 80053f4:	b510      	push	{r4, lr}
 80053f6:	460c      	mov	r4, r1
 80053f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053fc:	f000 f8a0 	bl	8005540 <_read_r>
 8005400:	2800      	cmp	r0, #0
 8005402:	bfab      	itete	ge
 8005404:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005406:	89a3      	ldrhlt	r3, [r4, #12]
 8005408:	181b      	addge	r3, r3, r0
 800540a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800540e:	bfac      	ite	ge
 8005410:	6563      	strge	r3, [r4, #84]	; 0x54
 8005412:	81a3      	strhlt	r3, [r4, #12]
 8005414:	bd10      	pop	{r4, pc}

08005416 <__swrite>:
 8005416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800541a:	461f      	mov	r7, r3
 800541c:	898b      	ldrh	r3, [r1, #12]
 800541e:	05db      	lsls	r3, r3, #23
 8005420:	4605      	mov	r5, r0
 8005422:	460c      	mov	r4, r1
 8005424:	4616      	mov	r6, r2
 8005426:	d505      	bpl.n	8005434 <__swrite+0x1e>
 8005428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800542c:	2302      	movs	r3, #2
 800542e:	2200      	movs	r2, #0
 8005430:	f000 f868 	bl	8005504 <_lseek_r>
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800543a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800543e:	81a3      	strh	r3, [r4, #12]
 8005440:	4632      	mov	r2, r6
 8005442:	463b      	mov	r3, r7
 8005444:	4628      	mov	r0, r5
 8005446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800544a:	f000 b817 	b.w	800547c <_write_r>

0800544e <__sseek>:
 800544e:	b510      	push	{r4, lr}
 8005450:	460c      	mov	r4, r1
 8005452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005456:	f000 f855 	bl	8005504 <_lseek_r>
 800545a:	1c43      	adds	r3, r0, #1
 800545c:	89a3      	ldrh	r3, [r4, #12]
 800545e:	bf15      	itete	ne
 8005460:	6560      	strne	r0, [r4, #84]	; 0x54
 8005462:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005466:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800546a:	81a3      	strheq	r3, [r4, #12]
 800546c:	bf18      	it	ne
 800546e:	81a3      	strhne	r3, [r4, #12]
 8005470:	bd10      	pop	{r4, pc}

08005472 <__sclose>:
 8005472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005476:	f000 b813 	b.w	80054a0 <_close_r>
	...

0800547c <_write_r>:
 800547c:	b538      	push	{r3, r4, r5, lr}
 800547e:	4d07      	ldr	r5, [pc, #28]	; (800549c <_write_r+0x20>)
 8005480:	4604      	mov	r4, r0
 8005482:	4608      	mov	r0, r1
 8005484:	4611      	mov	r1, r2
 8005486:	2200      	movs	r2, #0
 8005488:	602a      	str	r2, [r5, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	f7fb fb5f 	bl	8000b4e <_write>
 8005490:	1c43      	adds	r3, r0, #1
 8005492:	d102      	bne.n	800549a <_write_r+0x1e>
 8005494:	682b      	ldr	r3, [r5, #0]
 8005496:	b103      	cbz	r3, 800549a <_write_r+0x1e>
 8005498:	6023      	str	r3, [r4, #0]
 800549a:	bd38      	pop	{r3, r4, r5, pc}
 800549c:	20000198 	.word	0x20000198

080054a0 <_close_r>:
 80054a0:	b538      	push	{r3, r4, r5, lr}
 80054a2:	4d06      	ldr	r5, [pc, #24]	; (80054bc <_close_r+0x1c>)
 80054a4:	2300      	movs	r3, #0
 80054a6:	4604      	mov	r4, r0
 80054a8:	4608      	mov	r0, r1
 80054aa:	602b      	str	r3, [r5, #0]
 80054ac:	f7fb fb6b 	bl	8000b86 <_close>
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	d102      	bne.n	80054ba <_close_r+0x1a>
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	b103      	cbz	r3, 80054ba <_close_r+0x1a>
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	20000198 	.word	0x20000198

080054c0 <_fstat_r>:
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	4d07      	ldr	r5, [pc, #28]	; (80054e0 <_fstat_r+0x20>)
 80054c4:	2300      	movs	r3, #0
 80054c6:	4604      	mov	r4, r0
 80054c8:	4608      	mov	r0, r1
 80054ca:	4611      	mov	r1, r2
 80054cc:	602b      	str	r3, [r5, #0]
 80054ce:	f7fb fb66 	bl	8000b9e <_fstat>
 80054d2:	1c43      	adds	r3, r0, #1
 80054d4:	d102      	bne.n	80054dc <_fstat_r+0x1c>
 80054d6:	682b      	ldr	r3, [r5, #0]
 80054d8:	b103      	cbz	r3, 80054dc <_fstat_r+0x1c>
 80054da:	6023      	str	r3, [r4, #0]
 80054dc:	bd38      	pop	{r3, r4, r5, pc}
 80054de:	bf00      	nop
 80054e0:	20000198 	.word	0x20000198

080054e4 <_isatty_r>:
 80054e4:	b538      	push	{r3, r4, r5, lr}
 80054e6:	4d06      	ldr	r5, [pc, #24]	; (8005500 <_isatty_r+0x1c>)
 80054e8:	2300      	movs	r3, #0
 80054ea:	4604      	mov	r4, r0
 80054ec:	4608      	mov	r0, r1
 80054ee:	602b      	str	r3, [r5, #0]
 80054f0:	f7fb fb65 	bl	8000bbe <_isatty>
 80054f4:	1c43      	adds	r3, r0, #1
 80054f6:	d102      	bne.n	80054fe <_isatty_r+0x1a>
 80054f8:	682b      	ldr	r3, [r5, #0]
 80054fa:	b103      	cbz	r3, 80054fe <_isatty_r+0x1a>
 80054fc:	6023      	str	r3, [r4, #0]
 80054fe:	bd38      	pop	{r3, r4, r5, pc}
 8005500:	20000198 	.word	0x20000198

08005504 <_lseek_r>:
 8005504:	b538      	push	{r3, r4, r5, lr}
 8005506:	4d07      	ldr	r5, [pc, #28]	; (8005524 <_lseek_r+0x20>)
 8005508:	4604      	mov	r4, r0
 800550a:	4608      	mov	r0, r1
 800550c:	4611      	mov	r1, r2
 800550e:	2200      	movs	r2, #0
 8005510:	602a      	str	r2, [r5, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	f7fb fb5e 	bl	8000bd4 <_lseek>
 8005518:	1c43      	adds	r3, r0, #1
 800551a:	d102      	bne.n	8005522 <_lseek_r+0x1e>
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	b103      	cbz	r3, 8005522 <_lseek_r+0x1e>
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	bd38      	pop	{r3, r4, r5, pc}
 8005524:	20000198 	.word	0x20000198

08005528 <__malloc_lock>:
 8005528:	4801      	ldr	r0, [pc, #4]	; (8005530 <__malloc_lock+0x8>)
 800552a:	f7ff bb1d 	b.w	8004b68 <__retarget_lock_acquire_recursive>
 800552e:	bf00      	nop
 8005530:	2000018c 	.word	0x2000018c

08005534 <__malloc_unlock>:
 8005534:	4801      	ldr	r0, [pc, #4]	; (800553c <__malloc_unlock+0x8>)
 8005536:	f7ff bb18 	b.w	8004b6a <__retarget_lock_release_recursive>
 800553a:	bf00      	nop
 800553c:	2000018c 	.word	0x2000018c

08005540 <_read_r>:
 8005540:	b538      	push	{r3, r4, r5, lr}
 8005542:	4d07      	ldr	r5, [pc, #28]	; (8005560 <_read_r+0x20>)
 8005544:	4604      	mov	r4, r0
 8005546:	4608      	mov	r0, r1
 8005548:	4611      	mov	r1, r2
 800554a:	2200      	movs	r2, #0
 800554c:	602a      	str	r2, [r5, #0]
 800554e:	461a      	mov	r2, r3
 8005550:	f7fb fae0 	bl	8000b14 <_read>
 8005554:	1c43      	adds	r3, r0, #1
 8005556:	d102      	bne.n	800555e <_read_r+0x1e>
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	b103      	cbz	r3, 800555e <_read_r+0x1e>
 800555c:	6023      	str	r3, [r4, #0]
 800555e:	bd38      	pop	{r3, r4, r5, pc}
 8005560:	20000198 	.word	0x20000198

08005564 <_init>:
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005566:	bf00      	nop
 8005568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556a:	bc08      	pop	{r3}
 800556c:	469e      	mov	lr, r3
 800556e:	4770      	bx	lr

08005570 <_fini>:
 8005570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005572:	bf00      	nop
 8005574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005576:	bc08      	pop	{r3}
 8005578:	469e      	mov	lr, r3
 800557a:	4770      	bx	lr
