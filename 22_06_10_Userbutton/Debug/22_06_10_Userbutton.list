
22_06_10_Userbutton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042d0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08004480  08004480  00014480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004570  08004570  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004570  08004570  00014570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004578  08004578  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004578  08004578  00014578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800457c  0800457c  0001457c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000b0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000120  20000120  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bbbc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021be  00000000  00000000  0002bc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  0002de20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008a0  00000000  00000000  0002e7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024979  00000000  00000000  0002f058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cea3  00000000  00000000  000539d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d90d3  00000000  00000000  00060874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00139947  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ce0  00000000  00000000  00139998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004468 	.word	0x08004468

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004468 	.word	0x08004468

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	4b27      	ldr	r3, [pc, #156]	; (800064c <MX_GPIO_Init+0xb8>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a26      	ldr	r2, [pc, #152]	; (800064c <MX_GPIO_Init+0xb8>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b24      	ldr	r3, [pc, #144]	; (800064c <MX_GPIO_Init+0xb8>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	4b20      	ldr	r3, [pc, #128]	; (800064c <MX_GPIO_Init+0xb8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a1f      	ldr	r2, [pc, #124]	; (800064c <MX_GPIO_Init+0xb8>)
 80005d0:	f043 0302 	orr.w	r3, r3, #2
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b1d      	ldr	r3, [pc, #116]	; (800064c <MX_GPIO_Init+0xb8>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0302 	and.w	r3, r3, #2
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_GPIO_Init+0xb8>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a18      	ldr	r2, [pc, #96]	; (800064c <MX_GPIO_Init+0xb8>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <MX_GPIO_Init+0xb8>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000604:	4812      	ldr	r0, [pc, #72]	; (8000650 <MX_GPIO_Init+0xbc>)
 8000606:	f000 ff51 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800060a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800060e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000610:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	4619      	mov	r1, r3
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <MX_GPIO_Init+0xc0>)
 8000622:	f000 fd7f 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8000626:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800062a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062c:	2301      	movs	r3, #1
 800062e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	4619      	mov	r1, r3
 800063e:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_GPIO_Init+0xbc>)
 8000640:	f000 fd70 	bl	8001124 <HAL_GPIO_Init>

}
 8000644:	bf00      	nop
 8000646:	3720      	adds	r7, #32
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40020400 	.word	0x40020400
 8000654:	40020800 	.word	0x40020800

08000658 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &ch, 1, 100);
 8000660:	1d39      	adds	r1, r7, #4
 8000662:	2364      	movs	r3, #100	; 0x64
 8000664:	2201      	movs	r2, #1
 8000666:	4804      	ldr	r0, [pc, #16]	; (8000678 <__io_putchar+0x20>)
 8000668:	f001 ff01 	bl	800246e <HAL_UART_Transmit>
	return ch;
 800066c:	687b      	ldr	r3, [r7, #4]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200000c8 	.word	0x200000c8

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000680:	f000 fb3a 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000684:	f000 f80a 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000688:	f7ff ff84 	bl	8000594 <MX_GPIO_Init>
  MX_RTC_Init();
 800068c:	f000 f92e 	bl	80008ec <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000690:	f000 fa96 	bl	8000bc0 <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000694:	f000 f874 	bl	8000780 <MX_NVIC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000698:	e7fe      	b.n	8000698 <main+0x1c>
	...

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	; 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	; 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f002 fed0 	bl	8003450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b2c      	ldr	r3, [pc, #176]	; (8000778 <SystemClock_Config+0xdc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	4a2b      	ldr	r2, [pc, #172]	; (8000778 <SystemClock_Config+0xdc>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	; 0x40
 80006d0:	4b29      	ldr	r3, [pc, #164]	; (8000778 <SystemClock_Config+0xdc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b26      	ldr	r3, [pc, #152]	; (800077c <SystemClock_Config+0xe0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a25      	ldr	r2, [pc, #148]	; (800077c <SystemClock_Config+0xe0>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b23      	ldr	r3, [pc, #140]	; (800077c <SystemClock_Config+0xe0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80006f8:	2306      	movs	r3, #6
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000704:	2310      	movs	r3, #16
 8000706:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000708:	2302      	movs	r3, #2
 800070a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070c:	2300      	movs	r3, #0
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000710:	2308      	movs	r3, #8
 8000712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000714:	23b4      	movs	r3, #180	; 0xb4
 8000716:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800071c:	2304      	movs	r3, #4
 800071e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f000 ff43 	bl	80015b0 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000730:	f000 f8d6 	bl	80008e0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000734:	f000 feec 	bl	8001510 <HAL_PWREx_EnableOverDrive>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800073e:	f000 f8cf 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	230f      	movs	r3, #15
 8000744:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000746:	2302      	movs	r3, #2
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800074e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000752:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000758:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2105      	movs	r1, #5
 8000760:	4618      	mov	r0, r3
 8000762:	f001 f99d 	bl	8001aa0 <HAL_RCC_ClockConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800076c:	f000 f8b8 	bl	80008e0 <Error_Handler>
  }
}
 8000770:	bf00      	nop
 8000772:	3750      	adds	r7, #80	; 0x50
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000784:	2200      	movs	r2, #0
 8000786:	2100      	movs	r1, #0
 8000788:	2027      	movs	r0, #39	; 0x27
 800078a:	f000 fc02 	bl	8000f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 800078e:	2027      	movs	r0, #39	; 0x27
 8000790:	f000 fc1b 	bl	8000fca <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	2100      	movs	r1, #0
 8000798:	2028      	movs	r0, #40	; 0x28
 800079a:	f000 fbfa 	bl	8000f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800079e:	2028      	movs	r0, #40	; 0x28
 80007a0:	f000 fc13 	bl	8000fca <HAL_NVIC_EnableIRQ>
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	80fb      	strh	r3, [r7, #6]
	int current_time;
	int time_interval;
	int last_time;
	int i;

	if (GPIO_Pin == GPIO_PIN_13) {
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007b8:	f040 8082 	bne.w	80008c0 <HAL_GPIO_EXTI_Callback+0x118>
		current_time = HAL_GetTick();
 80007bc:	f000 fb02 	bl	8000dc4 <HAL_GetTick>
 80007c0:	4603      	mov	r3, r0
 80007c2:	61bb      	str	r3, [r7, #24]
		time_interval = current_time - last_time;
 80007c4:	69ba      	ldr	r2, [r7, #24]
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	613b      	str	r3, [r7, #16]
		last_time = current_time;
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	617b      	str	r3, [r7, #20]

		pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80007d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d4:	483c      	ldr	r0, [pc, #240]	; (80008c8 <HAL_GPIO_EXTI_Callback+0x120>)
 80007d6:	f000 fe51 	bl	800147c <HAL_GPIO_ReadPin>
 80007da:	4603      	mov	r3, r0
 80007dc:	73fb      	strb	r3, [r7, #15]

		if (time_interval <= 2)
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	dc06      	bgt.n	80007f2 <HAL_GPIO_EXTI_Callback+0x4a>
			printf("Noise %d, %d\r\n", pin, time_interval);
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	4619      	mov	r1, r3
 80007ea:	4838      	ldr	r0, [pc, #224]	; (80008cc <HAL_GPIO_EXTI_Callback+0x124>)
 80007ec:	f002 fe38 	bl	8003460 <iprintf>
 80007f0:	e01d      	b.n	800082e <HAL_GPIO_EXTI_Callback+0x86>
		else {
			click[2].time = click[1].time;
 80007f2:	4b37      	ldr	r3, [pc, #220]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	4a36      	ldr	r2, [pc, #216]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 80007f8:	6113      	str	r3, [r2, #16]
			click[2].level = click[1].level;
 80007fa:	4b35      	ldr	r3, [pc, #212]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 80007fc:	7b1a      	ldrb	r2, [r3, #12]
 80007fe:	4b34      	ldr	r3, [pc, #208]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 8000800:	751a      	strb	r2, [r3, #20]

			click[1].time = click[0].time;
 8000802:	4b33      	ldr	r3, [pc, #204]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a32      	ldr	r2, [pc, #200]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 8000808:	6093      	str	r3, [r2, #8]
			click[1].level = click[0].level;
 800080a:	4b31      	ldr	r3, [pc, #196]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 800080c:	791a      	ldrb	r2, [r3, #4]
 800080e:	4b30      	ldr	r3, [pc, #192]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 8000810:	731a      	strb	r2, [r3, #12]

			click[1].time = click[0].time;
 8000812:	4b2f      	ldr	r3, [pc, #188]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a2e      	ldr	r2, [pc, #184]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 8000818:	6093      	str	r3, [r2, #8]
			click[1].level = click[0].level;
 800081a:	4b2d      	ldr	r3, [pc, #180]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 800081c:	791a      	ldrb	r2, [r3, #4]
 800081e:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 8000820:	731a      	strb	r2, [r3, #12]

			click[0].time = time_interval;
 8000822:	4a2b      	ldr	r2, [pc, #172]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	6013      	str	r3, [r2, #0]
			click[0].level = pin;
 8000828:	4a29      	ldr	r2, [pc, #164]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	7113      	strb	r3, [r2, #4]
		}
		if (click[2].level == GPIO_PIN_RESET && click[1].level == GPIO_PIN_SET
 800082e:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 8000830:	7d1b      	ldrb	r3, [r3, #20]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d122      	bne.n	800087c <HAL_GPIO_EXTI_Callback+0xd4>
 8000836:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 8000838:	7b1b      	ldrb	r3, [r3, #12]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d11e      	bne.n	800087c <HAL_GPIO_EXTI_Callback+0xd4>
					&& click[0].level == GPIO_PIN_RESET) {
 800083e:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 8000840:	791b      	ldrb	r3, [r3, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d11a      	bne.n	800087c <HAL_GPIO_EXTI_Callback+0xd4>
				for (i = 0; i < 3; i++) {
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
 800084a:	e00e      	b.n	800086a <HAL_GPIO_EXTI_Callback+0xc2>
					if (click[i].time >= DOUBLE_CLICK_MIN
 800084c:	4a20      	ldr	r2, [pc, #128]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000854:	2b27      	cmp	r3, #39	; 0x27
 8000856:	dd0b      	ble.n	8000870 <HAL_GPIO_EXTI_Callback+0xc8>
							&& click[i].time <= DOUBLE_CLICK_MAX) {
 8000858:	4a1d      	ldr	r2, [pc, #116]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000860:	2b78      	cmp	r3, #120	; 0x78
 8000862:	dc05      	bgt.n	8000870 <HAL_GPIO_EXTI_Callback+0xc8>
				for (i = 0; i < 3; i++) {
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	3301      	adds	r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	2b02      	cmp	r3, #2
 800086e:	dded      	ble.n	800084c <HAL_GPIO_EXTI_Callback+0xa4>
						continue;
					} else
						break;
				}
				if (i == 3) {
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	2b03      	cmp	r3, #3
 8000874:	d102      	bne.n	800087c <HAL_GPIO_EXTI_Callback+0xd4>
					printf("Double Click\r\n");
 8000876:	4817      	ldr	r0, [pc, #92]	; (80008d4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000878:	f002 fe78 	bl	800356c <puts>
				}
			}
			if (click[0].level == GPIO_PIN_RESET && click[0].time >= LONG_CLICK_MIN) // long click
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d109      	bne.n	8000898 <HAL_GPIO_EXTI_Callback+0xf0>
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f240 52db 	movw	r2, #1499	; 0x5db
 800088c:	4293      	cmp	r3, r2
 800088e:	dd03      	ble.n	8000898 <HAL_GPIO_EXTI_Callback+0xf0>
			{
				printf("Long Key\r\n");
 8000890:	4811      	ldr	r0, [pc, #68]	; (80008d8 <HAL_GPIO_EXTI_Callback+0x130>)
 8000892:	f002 fe6b 	bl	800356c <puts>
			} else if (click[0].level
					== GPIO_PIN_RESET&& click[0].time < LONG_CLICK_MIN && click[0].time > DOUBLE_CLICK_MAX) {
				printf("Select Key, %ld\r\n", click[0].time);
			}
	}
}
 8000896:	e013      	b.n	80008c0 <HAL_GPIO_EXTI_Callback+0x118>
			} else if (click[0].level
 8000898:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 800089a:	791b      	ldrb	r3, [r3, #4]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d10f      	bne.n	80008c0 <HAL_GPIO_EXTI_Callback+0x118>
					== GPIO_PIN_RESET&& click[0].time < LONG_CLICK_MIN && click[0].time > DOUBLE_CLICK_MAX) {
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f240 52db 	movw	r2, #1499	; 0x5db
 80008a8:	4293      	cmp	r3, r2
 80008aa:	dc09      	bgt.n	80008c0 <HAL_GPIO_EXTI_Callback+0x118>
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b78      	cmp	r3, #120	; 0x78
 80008b2:	dd05      	ble.n	80008c0 <HAL_GPIO_EXTI_Callback+0x118>
				printf("Select Key, %ld\r\n", click[0].time);
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x128>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	4808      	ldr	r0, [pc, #32]	; (80008dc <HAL_GPIO_EXTI_Callback+0x134>)
 80008bc:	f002 fdd0 	bl	8003460 <iprintf>
}
 80008c0:	bf00      	nop
 80008c2:	3720      	adds	r7, #32
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40020800 	.word	0x40020800
 80008cc:	08004480 	.word	0x08004480
 80008d0:	2000008c 	.word	0x2000008c
 80008d4:	08004490 	.word	0x08004490
 80008d8:	080044a0 	.word	0x080044a0
 80008dc:	080044ac 	.word	0x080044ac

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_RTC_Init+0x44>)
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <MX_RTC_Init+0x48>)
 80008f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_RTC_Init+0x44>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_RTC_Init+0x44>)
 80008fe:	227f      	movs	r2, #127	; 0x7f
 8000900:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_RTC_Init+0x44>)
 8000904:	22ff      	movs	r2, #255	; 0xff
 8000906:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_RTC_Init+0x44>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_RTC_Init+0x44>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_RTC_Init+0x44>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_RTC_Init+0x44>)
 800091c:	f001 fc60 	bl	80021e0 <HAL_RTC_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000926:	f7ff ffdb 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200000a4 	.word	0x200000a4
 8000934:	40002800 	.word	0x40002800

08000938 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08e      	sub	sp, #56	; 0x38
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	2230      	movs	r2, #48	; 0x30
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f002 fd81 	bl	8003450 <memset>
  if(rtcHandle->Instance==RTC)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <HAL_RTC_MspInit+0x4c>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d111      	bne.n	800097c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000958:	2320      	movs	r3, #32
 800095a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800095c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000960:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	4618      	mov	r0, r3
 8000968:	f001 fa7a 	bl	8001e60 <HAL_RCCEx_PeriphCLKConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000972:	f7ff ffb5 	bl	80008e0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000976:	4b04      	ldr	r3, [pc, #16]	; (8000988 <HAL_RTC_MspInit+0x50>)
 8000978:	2201      	movs	r2, #1
 800097a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800097c:	bf00      	nop
 800097e:	3738      	adds	r7, #56	; 0x38
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40002800 	.word	0x40002800
 8000988:	42470e3c 	.word	0x42470e3c

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a0f      	ldr	r2, [pc, #60]	; (80009d8 <HAL_MspInit+0x4c>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_MspInit+0x4c>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800

080009dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <NMI_Handler+0x4>

080009e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <HardFault_Handler+0x4>

080009e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <MemManage_Handler+0x4>

080009ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <BusFault_Handler+0x4>

080009f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <UsageFault_Handler+0x4>

080009fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a28:	f000 f9b8 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a34:	4802      	ldr	r0, [pc, #8]	; (8000a40 <USART3_IRQHandler+0x10>)
 8000a36:	f001 fdad 	bl	8002594 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200000c8 	.word	0x200000c8

08000a44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a4c:	f000 fd48 	bl	80014e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	e00a      	b.n	8000a7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a66:	f3af 8000 	nop.w
 8000a6a:	4601      	mov	r1, r0
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	60ba      	str	r2, [r7, #8]
 8000a72:	b2ca      	uxtb	r2, r1
 8000a74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697a      	ldr	r2, [r7, #20]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	dbf0      	blt.n	8000a66 <_read+0x12>
	}

return len;
 8000a84:	687b      	ldr	r3, [r7, #4]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	60f8      	str	r0, [r7, #12]
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	e009      	b.n	8000ab4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	60ba      	str	r2, [r7, #8]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fdd5 	bl	8000658 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	dbf1      	blt.n	8000aa0 <_write+0x12>
	}
	return len;
 8000abc:	687b      	ldr	r3, [r7, #4]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <_close>:

int _close(int file)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
	return -1;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
 8000ae6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aee:	605a      	str	r2, [r3, #4]
	return 0;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <_isatty>:

int _isatty(int file)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
	return 1;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b38:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <_sbrk+0x5c>)
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <_sbrk+0x60>)
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <_sbrk+0x64>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <_sbrk+0x68>)
 8000b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d207      	bcs.n	8000b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b60:	f002 fc4c 	bl	80033fc <__errno>
 8000b64:	4603      	mov	r3, r0
 8000b66:	220c      	movs	r2, #12
 8000b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	e009      	b.n	8000b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b76:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <_sbrk+0x64>)
 8000b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20030000 	.word	0x20030000
 8000b90:	00000400 	.word	0x00000400
 8000b94:	200000c4 	.word	0x200000c4
 8000b98:	20000120 	.word	0x20000120

08000b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <SystemInit+0x20>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <SystemInit+0x20>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_USART3_UART_Init+0x4c>)
 8000bc6:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <MX_USART3_UART_Init+0x50>)
 8000bc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <MX_USART3_UART_Init+0x4c>)
 8000bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_USART3_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <MX_USART3_UART_Init+0x4c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <MX_USART3_UART_Init+0x4c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <MX_USART3_UART_Init+0x4c>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <MX_USART3_UART_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <MX_USART3_UART_Init+0x4c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_USART3_UART_Init+0x4c>)
 8000bf8:	f001 fbec 	bl	80023d4 <HAL_UART_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c02:	f7ff fe6d 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200000c8 	.word	0x200000c8
 8000c10:	40004800 	.word	0x40004800

08000c14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <HAL_UART_MspInit+0x84>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d12c      	bne.n	8000c90 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a17      	ldr	r2, [pc, #92]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c80:	2307      	movs	r3, #7
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <HAL_UART_MspInit+0x8c>)
 8000c8c:	f000 fa4a 	bl	8001124 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c90:	bf00      	nop
 8000c92:	3728      	adds	r7, #40	; 0x28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40004800 	.word	0x40004800
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020c00 	.word	0x40020c00

08000ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cdc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000caa:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc0:	4c0b      	ldr	r4, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cce:	f7ff ff65 	bl	8000b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f002 fb99 	bl	8003408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd6:	f7ff fcd1 	bl	800067c <main>
  bx  lr    
 8000cda:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cdc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ce8:	08004580 	.word	0x08004580
  ldr r2, =_sbss
 8000cec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cf0:	20000120 	.word	0x20000120

08000cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <HAL_Init+0x40>)
 8000d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_Init+0x40>)
 8000d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_Init+0x40>)
 8000d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 f92b 	bl	8000f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	200f      	movs	r0, #15
 8000d28:	f000 f808 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff fe2e 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023c00 	.word	0x40023c00

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x54>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x58>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 f943 	bl	8000fe6 <HAL_SYSTICK_Config>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00e      	b.n	8000d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d80a      	bhi.n	8000d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 f90b 	bl	8000f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d7c:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <HAL_InitTick+0x5c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	2000010c 	.word	0x2000010c

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000010c 	.word	0x2000010c

08000ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0e:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	60d3      	str	r3, [r2, #12]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <__NVIC_GetPriorityGrouping+0x18>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	f003 0307 	and.w	r3, r3, #7
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	db0b      	blt.n	8000e6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	f003 021f 	and.w	r2, r3, #31
 8000e58:	4907      	ldr	r1, [pc, #28]	; (8000e78 <__NVIC_EnableIRQ+0x38>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	095b      	lsrs	r3, r3, #5
 8000e60:	2001      	movs	r0, #1
 8000e62:	fa00 f202 	lsl.w	r2, r0, r2
 8000e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000e100 	.word	0xe000e100

08000e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db0a      	blt.n	8000ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	490c      	ldr	r1, [pc, #48]	; (8000ec8 <__NVIC_SetPriority+0x4c>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	0112      	lsls	r2, r2, #4
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea4:	e00a      	b.n	8000ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4908      	ldr	r1, [pc, #32]	; (8000ecc <__NVIC_SetPriority+0x50>)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	3b04      	subs	r3, #4
 8000eb4:	0112      	lsls	r2, r2, #4
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	440b      	add	r3, r1
 8000eba:	761a      	strb	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f1c3 0307 	rsb	r3, r3, #7
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	bf28      	it	cs
 8000eee:	2304      	movcs	r3, #4
 8000ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d902      	bls.n	8000f00 <NVIC_EncodePriority+0x30>
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3b03      	subs	r3, #3
 8000efe:	e000      	b.n	8000f02 <NVIC_EncodePriority+0x32>
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43d9      	mvns	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4313      	orrs	r3, r2
         );
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3724      	adds	r7, #36	; 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f48:	d301      	bcc.n	8000f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00f      	b.n	8000f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <SysTick_Config+0x40>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f56:	210f      	movs	r1, #15
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f7ff ff8e 	bl	8000e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <SysTick_Config+0x40>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <SysTick_Config+0x40>)
 8000f68:	2207      	movs	r2, #7
 8000f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	e000e010 	.word	0xe000e010

08000f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff ff29 	bl	8000ddc <__NVIC_SetPriorityGrouping>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa4:	f7ff ff3e 	bl	8000e24 <__NVIC_GetPriorityGrouping>
 8000fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	6978      	ldr	r0, [r7, #20]
 8000fb0:	f7ff ff8e 	bl	8000ed0 <NVIC_EncodePriority>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff5d 	bl	8000e7c <__NVIC_SetPriority>
}
 8000fc2:	bf00      	nop
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff31 	bl	8000e40 <__NVIC_EnableIRQ>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ffa2 	bl	8000f38 <SysTick_Config>
 8000ff4:	4603      	mov	r3, r0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b084      	sub	sp, #16
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800100c:	f7ff feda 	bl	8000dc4 <HAL_GetTick>
 8001010:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b02      	cmp	r3, #2
 800101c:	d008      	beq.n	8001030 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e052      	b.n	80010d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0216 	bic.w	r2, r2, #22
 800103e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	695a      	ldr	r2, [r3, #20]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800104e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	2b00      	cmp	r3, #0
 8001056:	d103      	bne.n	8001060 <HAL_DMA_Abort+0x62>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800105c:	2b00      	cmp	r3, #0
 800105e:	d007      	beq.n	8001070 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 0208 	bic.w	r2, r2, #8
 800106e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 0201 	bic.w	r2, r2, #1
 800107e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001080:	e013      	b.n	80010aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001082:	f7ff fe9f 	bl	8000dc4 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b05      	cmp	r3, #5
 800108e:	d90c      	bls.n	80010aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2220      	movs	r2, #32
 8001094:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2203      	movs	r2, #3
 800109a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e015      	b.n	80010d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1e4      	bne.n	8001082 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010bc:	223f      	movs	r2, #63	; 0x3f
 80010be:	409a      	lsls	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d004      	beq.n	80010fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2280      	movs	r2, #128	; 0x80
 80010f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e00c      	b.n	8001116 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2205      	movs	r2, #5
 8001100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 0201 	bic.w	r2, r2, #1
 8001112:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	e177      	b.n	8001430 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	429a      	cmp	r2, r3
 800115a:	f040 8166 	bne.w	800142a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b01      	cmp	r3, #1
 8001168:	d005      	beq.n	8001176 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001172:	2b02      	cmp	r3, #2
 8001174:	d130      	bne.n	80011d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	f003 0201 	and.w	r2, r3, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d017      	beq.n	8001214 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d123      	bne.n	8001268 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	08da      	lsrs	r2, r3, #3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3208      	adds	r2, #8
 8001228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	08da      	lsrs	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3208      	adds	r2, #8
 8001262:	69b9      	ldr	r1, [r7, #24]
 8001264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0203 	and.w	r2, r3, #3
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80c0 	beq.w	800142a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b66      	ldr	r3, [pc, #408]	; (8001448 <HAL_GPIO_Init+0x324>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	4a65      	ldr	r2, [pc, #404]	; (8001448 <HAL_GPIO_Init+0x324>)
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ba:	4b63      	ldr	r3, [pc, #396]	; (8001448 <HAL_GPIO_Init+0x324>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c6:	4a61      	ldr	r2, [pc, #388]	; (800144c <HAL_GPIO_Init+0x328>)
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3302      	adds	r3, #2
 80012ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	220f      	movs	r2, #15
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a58      	ldr	r2, [pc, #352]	; (8001450 <HAL_GPIO_Init+0x32c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d037      	beq.n	8001362 <HAL_GPIO_Init+0x23e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a57      	ldr	r2, [pc, #348]	; (8001454 <HAL_GPIO_Init+0x330>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d031      	beq.n	800135e <HAL_GPIO_Init+0x23a>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a56      	ldr	r2, [pc, #344]	; (8001458 <HAL_GPIO_Init+0x334>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d02b      	beq.n	800135a <HAL_GPIO_Init+0x236>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a55      	ldr	r2, [pc, #340]	; (800145c <HAL_GPIO_Init+0x338>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d025      	beq.n	8001356 <HAL_GPIO_Init+0x232>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a54      	ldr	r2, [pc, #336]	; (8001460 <HAL_GPIO_Init+0x33c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d01f      	beq.n	8001352 <HAL_GPIO_Init+0x22e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a53      	ldr	r2, [pc, #332]	; (8001464 <HAL_GPIO_Init+0x340>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d019      	beq.n	800134e <HAL_GPIO_Init+0x22a>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a52      	ldr	r2, [pc, #328]	; (8001468 <HAL_GPIO_Init+0x344>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d013      	beq.n	800134a <HAL_GPIO_Init+0x226>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a51      	ldr	r2, [pc, #324]	; (800146c <HAL_GPIO_Init+0x348>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d00d      	beq.n	8001346 <HAL_GPIO_Init+0x222>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a50      	ldr	r2, [pc, #320]	; (8001470 <HAL_GPIO_Init+0x34c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d007      	beq.n	8001342 <HAL_GPIO_Init+0x21e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4f      	ldr	r2, [pc, #316]	; (8001474 <HAL_GPIO_Init+0x350>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d101      	bne.n	800133e <HAL_GPIO_Init+0x21a>
 800133a:	2309      	movs	r3, #9
 800133c:	e012      	b.n	8001364 <HAL_GPIO_Init+0x240>
 800133e:	230a      	movs	r3, #10
 8001340:	e010      	b.n	8001364 <HAL_GPIO_Init+0x240>
 8001342:	2308      	movs	r3, #8
 8001344:	e00e      	b.n	8001364 <HAL_GPIO_Init+0x240>
 8001346:	2307      	movs	r3, #7
 8001348:	e00c      	b.n	8001364 <HAL_GPIO_Init+0x240>
 800134a:	2306      	movs	r3, #6
 800134c:	e00a      	b.n	8001364 <HAL_GPIO_Init+0x240>
 800134e:	2305      	movs	r3, #5
 8001350:	e008      	b.n	8001364 <HAL_GPIO_Init+0x240>
 8001352:	2304      	movs	r3, #4
 8001354:	e006      	b.n	8001364 <HAL_GPIO_Init+0x240>
 8001356:	2303      	movs	r3, #3
 8001358:	e004      	b.n	8001364 <HAL_GPIO_Init+0x240>
 800135a:	2302      	movs	r3, #2
 800135c:	e002      	b.n	8001364 <HAL_GPIO_Init+0x240>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <HAL_GPIO_Init+0x240>
 8001362:	2300      	movs	r3, #0
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	f002 0203 	and.w	r2, r2, #3
 800136a:	0092      	lsls	r2, r2, #2
 800136c:	4093      	lsls	r3, r2
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001374:	4935      	ldr	r1, [pc, #212]	; (800144c <HAL_GPIO_Init+0x328>)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001382:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <HAL_GPIO_Init+0x354>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013a6:	4a34      	ldr	r2, [pc, #208]	; (8001478 <HAL_GPIO_Init+0x354>)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013ac:	4b32      	ldr	r3, [pc, #200]	; (8001478 <HAL_GPIO_Init+0x354>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013d0:	4a29      	ldr	r2, [pc, #164]	; (8001478 <HAL_GPIO_Init+0x354>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013d6:	4b28      	ldr	r3, [pc, #160]	; (8001478 <HAL_GPIO_Init+0x354>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013fa:	4a1f      	ldr	r2, [pc, #124]	; (8001478 <HAL_GPIO_Init+0x354>)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <HAL_GPIO_Init+0x354>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001424:	4a14      	ldr	r2, [pc, #80]	; (8001478 <HAL_GPIO_Init+0x354>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3301      	adds	r3, #1
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	2b0f      	cmp	r3, #15
 8001434:	f67f ae84 	bls.w	8001140 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40013800 	.word	0x40013800
 8001450:	40020000 	.word	0x40020000
 8001454:	40020400 	.word	0x40020400
 8001458:	40020800 	.word	0x40020800
 800145c:	40020c00 	.word	0x40020c00
 8001460:	40021000 	.word	0x40021000
 8001464:	40021400 	.word	0x40021400
 8001468:	40021800 	.word	0x40021800
 800146c:	40021c00 	.word	0x40021c00
 8001470:	40022000 	.word	0x40022000
 8001474:	40022400 	.word	0x40022400
 8001478:	40013c00 	.word	0x40013c00

0800147c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	887b      	ldrh	r3, [r7, #2]
 800148e:	4013      	ands	r3, r2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	e001      	b.n	800149e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800149e:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
 80014b8:	4613      	mov	r3, r2
 80014ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014bc:	787b      	ldrb	r3, [r7, #1]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c8:	e003      	b.n	80014d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ca:	887b      	ldrh	r3, [r7, #2]
 80014cc:	041a      	lsls	r2, r3, #16
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	619a      	str	r2, [r3, #24]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014ec:	695a      	ldr	r2, [r3, #20]
 80014ee:	88fb      	ldrh	r3, [r7, #6]
 80014f0:	4013      	ands	r3, r2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d006      	beq.n	8001504 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014f6:	4a05      	ldr	r2, [pc, #20]	; (800150c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f952 	bl	80007a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40013c00 	.word	0x40013c00

08001510 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a1f      	ldr	r2, [pc, #124]	; (80015a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_PWREx_EnableOverDrive+0x90>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001536:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001538:	2201      	movs	r2, #1
 800153a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800153c:	f7ff fc42 	bl	8000dc4 <HAL_GetTick>
 8001540:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001542:	e009      	b.n	8001558 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001544:	f7ff fc3e 	bl	8000dc4 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001552:	d901      	bls.n	8001558 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e01f      	b.n	8001598 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001564:	d1ee      	bne.n	8001544 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800156c:	f7ff fc2a 	bl	8000dc4 <HAL_GetTick>
 8001570:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001572:	e009      	b.n	8001588 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001574:	f7ff fc26 	bl	8000dc4 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001582:	d901      	bls.n	8001588 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e007      	b.n	8001598 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001590:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001594:	d1ee      	bne.n	8001574 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	420e0040 	.word	0x420e0040
 80015a8:	40007000 	.word	0x40007000
 80015ac:	420e0044 	.word	0x420e0044

080015b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e267      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d075      	beq.n	80016ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ce:	4b88      	ldr	r3, [pc, #544]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d00c      	beq.n	80015f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015da:	4b85      	ldr	r3, [pc, #532]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d112      	bne.n	800160c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e6:	4b82      	ldr	r3, [pc, #520]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015f2:	d10b      	bne.n	800160c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f4:	4b7e      	ldr	r3, [pc, #504]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d05b      	beq.n	80016b8 <HAL_RCC_OscConfig+0x108>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d157      	bne.n	80016b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e242      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001614:	d106      	bne.n	8001624 <HAL_RCC_OscConfig+0x74>
 8001616:	4b76      	ldr	r3, [pc, #472]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a75      	ldr	r2, [pc, #468]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800161c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e01d      	b.n	8001660 <HAL_RCC_OscConfig+0xb0>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800162c:	d10c      	bne.n	8001648 <HAL_RCC_OscConfig+0x98>
 800162e:	4b70      	ldr	r3, [pc, #448]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a6f      	ldr	r2, [pc, #444]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	4b6d      	ldr	r3, [pc, #436]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a6c      	ldr	r2, [pc, #432]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	e00b      	b.n	8001660 <HAL_RCC_OscConfig+0xb0>
 8001648:	4b69      	ldr	r3, [pc, #420]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a68      	ldr	r2, [pc, #416]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800164e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b66      	ldr	r3, [pc, #408]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a65      	ldr	r2, [pc, #404]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800165a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d013      	beq.n	8001690 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff fbac 	bl	8000dc4 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff fba8 	bl	8000dc4 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	; 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e207      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	4b5b      	ldr	r3, [pc, #364]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0xc0>
 800168e:	e014      	b.n	80016ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fb98 	bl	8000dc4 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fb94 	bl	8000dc4 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e1f3      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016aa:	4b51      	ldr	r3, [pc, #324]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0xe8>
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d063      	beq.n	800178e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016c6:	4b4a      	ldr	r3, [pc, #296]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00b      	beq.n	80016ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016d2:	4b47      	ldr	r3, [pc, #284]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d11c      	bne.n	8001718 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016de:	4b44      	ldr	r3, [pc, #272]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d116      	bne.n	8001718 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <HAL_RCC_OscConfig+0x152>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d001      	beq.n	8001702 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e1c7      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001702:	4b3b      	ldr	r3, [pc, #236]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	4937      	ldr	r1, [pc, #220]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001716:	e03a      	b.n	800178e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d020      	beq.n	8001762 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001720:	4b34      	ldr	r3, [pc, #208]	; (80017f4 <HAL_RCC_OscConfig+0x244>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001726:	f7ff fb4d 	bl	8000dc4 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800172e:	f7ff fb49 	bl	8000dc4 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e1a8      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001740:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4925      	ldr	r1, [pc, #148]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800175c:	4313      	orrs	r3, r2
 800175e:	600b      	str	r3, [r1, #0]
 8001760:	e015      	b.n	800178e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <HAL_RCC_OscConfig+0x244>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7ff fb2c 	bl	8000dc4 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001770:	f7ff fb28 	bl	8000dc4 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e187      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001782:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d036      	beq.n	8001808 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d016      	beq.n	80017d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_RCC_OscConfig+0x248>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a8:	f7ff fb0c 	bl	8000dc4 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b0:	f7ff fb08 	bl	8000dc4 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e167      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80017c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x200>
 80017ce:	e01b      	b.n	8001808 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_RCC_OscConfig+0x248>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d6:	f7ff faf5 	bl	8000dc4 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017dc:	e00e      	b.n	80017fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017de:	f7ff faf1 	bl	8000dc4 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d907      	bls.n	80017fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e150      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
 80017f0:	40023800 	.word	0x40023800
 80017f4:	42470000 	.word	0x42470000
 80017f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fc:	4b88      	ldr	r3, [pc, #544]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80017fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1ea      	bne.n	80017de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 8097 	beq.w	8001944 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181a:	4b81      	ldr	r3, [pc, #516]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10f      	bne.n	8001846 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b7d      	ldr	r3, [pc, #500]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	4a7c      	ldr	r2, [pc, #496]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001834:	6413      	str	r3, [r2, #64]	; 0x40
 8001836:	4b7a      	ldr	r3, [pc, #488]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001842:	2301      	movs	r3, #1
 8001844:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001846:	4b77      	ldr	r3, [pc, #476]	; (8001a24 <HAL_RCC_OscConfig+0x474>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184e:	2b00      	cmp	r3, #0
 8001850:	d118      	bne.n	8001884 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001852:	4b74      	ldr	r3, [pc, #464]	; (8001a24 <HAL_RCC_OscConfig+0x474>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a73      	ldr	r2, [pc, #460]	; (8001a24 <HAL_RCC_OscConfig+0x474>)
 8001858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185e:	f7ff fab1 	bl	8000dc4 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001866:	f7ff faad 	bl	8000dc4 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e10c      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001878:	4b6a      	ldr	r3, [pc, #424]	; (8001a24 <HAL_RCC_OscConfig+0x474>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d106      	bne.n	800189a <HAL_RCC_OscConfig+0x2ea>
 800188c:	4b64      	ldr	r3, [pc, #400]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 800188e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001890:	4a63      	ldr	r2, [pc, #396]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6713      	str	r3, [r2, #112]	; 0x70
 8001898:	e01c      	b.n	80018d4 <HAL_RCC_OscConfig+0x324>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b05      	cmp	r3, #5
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0x30c>
 80018a2:	4b5f      	ldr	r3, [pc, #380]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a6:	4a5e      	ldr	r2, [pc, #376]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	6713      	str	r3, [r2, #112]	; 0x70
 80018ae:	4b5c      	ldr	r3, [pc, #368]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	4a5b      	ldr	r2, [pc, #364]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ba:	e00b      	b.n	80018d4 <HAL_RCC_OscConfig+0x324>
 80018bc:	4b58      	ldr	r3, [pc, #352]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c0:	4a57      	ldr	r2, [pc, #348]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018c2:	f023 0301 	bic.w	r3, r3, #1
 80018c6:	6713      	str	r3, [r2, #112]	; 0x70
 80018c8:	4b55      	ldr	r3, [pc, #340]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018cc:	4a54      	ldr	r2, [pc, #336]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018ce:	f023 0304 	bic.w	r3, r3, #4
 80018d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d015      	beq.n	8001908 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018dc:	f7ff fa72 	bl	8000dc4 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e4:	f7ff fa6e 	bl	8000dc4 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e0cb      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fa:	4b49      	ldr	r3, [pc, #292]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0ee      	beq.n	80018e4 <HAL_RCC_OscConfig+0x334>
 8001906:	e014      	b.n	8001932 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7ff fa5c 	bl	8000dc4 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190e:	e00a      	b.n	8001926 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001910:	f7ff fa58 	bl	8000dc4 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	; 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e0b5      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001926:	4b3e      	ldr	r3, [pc, #248]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1ee      	bne.n	8001910 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001932:	7dfb      	ldrb	r3, [r7, #23]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d105      	bne.n	8001944 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001938:	4b39      	ldr	r3, [pc, #228]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	4a38      	ldr	r2, [pc, #224]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 800193e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001942:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 80a1 	beq.w	8001a90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800194e:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 030c 	and.w	r3, r3, #12
 8001956:	2b08      	cmp	r3, #8
 8001958:	d05c      	beq.n	8001a14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d141      	bne.n	80019e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001962:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <HAL_RCC_OscConfig+0x478>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fa2c 	bl	8000dc4 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff fa28 	bl	8000dc4 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e087      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001982:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69da      	ldr	r2, [r3, #28]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	019b      	lsls	r3, r3, #6
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	085b      	lsrs	r3, r3, #1
 80019a6:	3b01      	subs	r3, #1
 80019a8:	041b      	lsls	r3, r3, #16
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	061b      	lsls	r3, r3, #24
 80019b2:	491b      	ldr	r1, [pc, #108]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b8:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <HAL_RCC_OscConfig+0x478>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019be:	f7ff fa01 	bl	8000dc4 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c6:	f7ff f9fd 	bl	8000dc4 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e05c      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x416>
 80019e4:	e054      	b.n	8001a90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <HAL_RCC_OscConfig+0x478>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff f9ea 	bl	8000dc4 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff f9e6 	bl	8000dc4 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e045      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x444>
 8001a12:	e03d      	b.n	8001a90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d107      	bne.n	8001a2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e038      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40007000 	.word	0x40007000
 8001a28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_RCC_OscConfig+0x4ec>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d028      	beq.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d121      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d11a      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d111      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	085b      	lsrs	r3, r3, #1
 8001a74:	3b01      	subs	r3, #1
 8001a76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0cc      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b68      	ldr	r3, [pc, #416]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 030f 	and.w	r3, r3, #15
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d90c      	bls.n	8001adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b65      	ldr	r3, [pc, #404]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b63      	ldr	r3, [pc, #396]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0b8      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d020      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af4:	4b59      	ldr	r3, [pc, #356]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4a58      	ldr	r2, [pc, #352]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001afe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b0c:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	4a52      	ldr	r2, [pc, #328]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b18:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	494d      	ldr	r1, [pc, #308]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d044      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d119      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e07f      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d003      	beq.n	8001b5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5e:	4b3f      	ldr	r3, [pc, #252]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e06f      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6e:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e067      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b7e:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f023 0203 	bic.w	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4934      	ldr	r1, [pc, #208]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b90:	f7ff f918 	bl	8000dc4 <HAL_GetTick>
 8001b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b98:	f7ff f914 	bl	8000dc4 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e04f      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bae:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 020c 	and.w	r2, r3, #12
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d1eb      	bne.n	8001b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d20c      	bcs.n	8001be8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e032      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf4:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	4916      	ldr	r1, [pc, #88]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d009      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	490e      	ldr	r1, [pc, #56]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c26:	f000 f821 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	490a      	ldr	r1, [pc, #40]	; (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001c38:	5ccb      	ldrb	r3, [r1, r3]
 8001c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3e:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff f878 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023c00 	.word	0x40023c00
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	080044c0 	.word	0x080044c0
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000004 	.word	0x20000004

08001c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c70:	b090      	sub	sp, #64	; 0x40
 8001c72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	637b      	str	r3, [r7, #52]	; 0x34
 8001c78:	2300      	movs	r3, #0
 8001c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c84:	4b59      	ldr	r3, [pc, #356]	; (8001dec <HAL_RCC_GetSysClockFreq+0x180>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d00d      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0x40>
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	f200 80a1 	bhi.w	8001dd8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d003      	beq.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c9e:	e09b      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ca0:	4b53      	ldr	r3, [pc, #332]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ca2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001ca4:	e09b      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ca6:	4b53      	ldr	r3, [pc, #332]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ca8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001caa:	e098      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cac:	4b4f      	ldr	r3, [pc, #316]	; (8001dec <HAL_RCC_GetSysClockFreq+0x180>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cb4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cb6:	4b4d      	ldr	r3, [pc, #308]	; (8001dec <HAL_RCC_GetSysClockFreq+0x180>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d028      	beq.n	8001d14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc2:	4b4a      	ldr	r3, [pc, #296]	; (8001dec <HAL_RCC_GetSysClockFreq+0x180>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	099b      	lsrs	r3, r3, #6
 8001cc8:	2200      	movs	r2, #0
 8001cca:	623b      	str	r3, [r7, #32]
 8001ccc:	627a      	str	r2, [r7, #36]	; 0x24
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4b47      	ldr	r3, [pc, #284]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cd8:	fb03 f201 	mul.w	r2, r3, r1
 8001cdc:	2300      	movs	r3, #0
 8001cde:	fb00 f303 	mul.w	r3, r0, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	4a43      	ldr	r2, [pc, #268]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ce6:	fba0 1202 	umull	r1, r2, r0, r2
 8001cea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cec:	460a      	mov	r2, r1
 8001cee:	62ba      	str	r2, [r7, #40]	; 0x28
 8001cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cf2:	4413      	add	r3, r2
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	61fa      	str	r2, [r7, #28]
 8001cfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d06:	f7fe fac3 	bl	8000290 <__aeabi_uldivmod>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4613      	mov	r3, r2
 8001d10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d12:	e053      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d14:	4b35      	ldr	r3, [pc, #212]	; (8001dec <HAL_RCC_GetSysClockFreq+0x180>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	099b      	lsrs	r3, r3, #6
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	617a      	str	r2, [r7, #20]
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d26:	f04f 0b00 	mov.w	fp, #0
 8001d2a:	4652      	mov	r2, sl
 8001d2c:	465b      	mov	r3, fp
 8001d2e:	f04f 0000 	mov.w	r0, #0
 8001d32:	f04f 0100 	mov.w	r1, #0
 8001d36:	0159      	lsls	r1, r3, #5
 8001d38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d3c:	0150      	lsls	r0, r2, #5
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	ebb2 080a 	subs.w	r8, r2, sl
 8001d46:	eb63 090b 	sbc.w	r9, r3, fp
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d5e:	ebb2 0408 	subs.w	r4, r2, r8
 8001d62:	eb63 0509 	sbc.w	r5, r3, r9
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	00eb      	lsls	r3, r5, #3
 8001d70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d74:	00e2      	lsls	r2, r4, #3
 8001d76:	4614      	mov	r4, r2
 8001d78:	461d      	mov	r5, r3
 8001d7a:	eb14 030a 	adds.w	r3, r4, sl
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	eb45 030b 	adc.w	r3, r5, fp
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d92:	4629      	mov	r1, r5
 8001d94:	028b      	lsls	r3, r1, #10
 8001d96:	4621      	mov	r1, r4
 8001d98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d9c:	4621      	mov	r1, r4
 8001d9e:	028a      	lsls	r2, r1, #10
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da6:	2200      	movs	r2, #0
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	60fa      	str	r2, [r7, #12]
 8001dac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001db0:	f7fe fa6e 	bl	8000290 <__aeabi_uldivmod>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4613      	mov	r3, r2
 8001dba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_RCC_GetSysClockFreq+0x180>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	0c1b      	lsrs	r3, r3, #16
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001dcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dd6:	e002      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001dda:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3740      	adds	r7, #64	; 0x40
 8001de4:	46bd      	mov	sp, r7
 8001de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	00f42400 	.word	0x00f42400
 8001df4:	017d7840 	.word	0x017d7840

08001df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000000 	.word	0x20000000

08001e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e14:	f7ff fff0 	bl	8001df8 <HAL_RCC_GetHCLKFreq>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	0a9b      	lsrs	r3, r3, #10
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	4903      	ldr	r1, [pc, #12]	; (8001e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e26:	5ccb      	ldrb	r3, [r1, r3]
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40023800 	.word	0x40023800
 8001e34:	080044d0 	.word	0x080044d0

08001e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e3c:	f7ff ffdc 	bl	8001df8 <HAL_RCC_GetHCLKFreq>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	0b5b      	lsrs	r3, r3, #13
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	4903      	ldr	r1, [pc, #12]	; (8001e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e4e:	5ccb      	ldrb	r3, [r1, r3]
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	080044d0 	.word	0x080044d0

08001e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10b      	bne.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d105      	bne.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d075      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001e94:	4b91      	ldr	r3, [pc, #580]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e9a:	f7fe ff93 	bl	8000dc4 <HAL_GetTick>
 8001e9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ea2:	f7fe ff8f 	bl	8000dc4 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e189      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001eb4:	4b8a      	ldr	r3, [pc, #552]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d009      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	019a      	lsls	r2, r3, #6
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	071b      	lsls	r3, r3, #28
 8001ed8:	4981      	ldr	r1, [pc, #516]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d01f      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001eec:	4b7c      	ldr	r3, [pc, #496]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ef2:	0f1b      	lsrs	r3, r3, #28
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	019a      	lsls	r2, r3, #6
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	061b      	lsls	r3, r3, #24
 8001f06:	431a      	orrs	r2, r3
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	071b      	lsls	r3, r3, #28
 8001f0c:	4974      	ldr	r1, [pc, #464]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001f14:	4b72      	ldr	r3, [pc, #456]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f1a:	f023 021f 	bic.w	r2, r3, #31
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	496e      	ldr	r1, [pc, #440]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00d      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	019a      	lsls	r2, r3, #6
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	061b      	lsls	r3, r3, #24
 8001f44:	431a      	orrs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	071b      	lsls	r3, r3, #28
 8001f4c:	4964      	ldr	r1, [pc, #400]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001f54:	4b61      	ldr	r3, [pc, #388]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f5a:	f7fe ff33 	bl	8000dc4 <HAL_GetTick>
 8001f5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f62:	f7fe ff2f 	bl	8000dc4 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e129      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f74:	4b5a      	ldr	r3, [pc, #360]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d105      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d079      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001f98:	4b52      	ldr	r3, [pc, #328]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f9e:	f7fe ff11 	bl	8000dc4 <HAL_GetTick>
 8001fa2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001fa6:	f7fe ff0d 	bl	8000dc4 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e107      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fb8:	4b49      	ldr	r3, [pc, #292]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fc4:	d0ef      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d020      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001fd2:	4b43      	ldr	r3, [pc, #268]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd8:	0f1b      	lsrs	r3, r3, #28
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	019a      	lsls	r2, r3, #6
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	061b      	lsls	r3, r3, #24
 8001fec:	431a      	orrs	r2, r3
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	071b      	lsls	r3, r3, #28
 8001ff2:	493b      	ldr	r1, [pc, #236]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001ffa:	4b39      	ldr	r3, [pc, #228]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002000:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	3b01      	subs	r3, #1
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	4934      	ldr	r1, [pc, #208]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01e      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002020:	4b2f      	ldr	r3, [pc, #188]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002026:	0e1b      	lsrs	r3, r3, #24
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	019a      	lsls	r2, r3, #6
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	061b      	lsls	r3, r3, #24
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	071b      	lsls	r3, r3, #28
 8002040:	4927      	ldr	r1, [pc, #156]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002048:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800204a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800204e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	4922      	ldr	r1, [pc, #136]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800205e:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002060:	2201      	movs	r2, #1
 8002062:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002064:	f7fe feae 	bl	8000dc4 <HAL_GetTick>
 8002068:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800206a:	e008      	b.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800206c:	f7fe feaa 	bl	8000dc4 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e0a4      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800207e:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800208a:	d1ef      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 808b 	beq.w	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	4a0f      	ldr	r2, [pc, #60]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80020b6:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a0b      	ldr	r2, [pc, #44]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80020bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020c2:	f7fe fe7f 	bl	8000dc4 <HAL_GetTick>
 80020c6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80020c8:	e010      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80020ca:	f7fe fe7b 	bl	8000dc4 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d909      	bls.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e075      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80020dc:	42470068 	.word	0x42470068
 80020e0:	40023800 	.word	0x40023800
 80020e4:	42470070 	.word	0x42470070
 80020e8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80020ec:	4b38      	ldr	r3, [pc, #224]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0e8      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020f8:	4b36      	ldr	r3, [pc, #216]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002100:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d02f      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	429a      	cmp	r2, r3
 8002114:	d028      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002116:	4b2f      	ldr	r3, [pc, #188]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800211e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002120:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002122:	2201      	movs	r2, #1
 8002124:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002126:	4b2c      	ldr	r3, [pc, #176]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800212c:	4a29      	ldr	r2, [pc, #164]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002132:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b01      	cmp	r3, #1
 800213c:	d114      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800213e:	f7fe fe41 	bl	8000dc4 <HAL_GetTick>
 8002142:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002144:	e00a      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7fe fe3d 	bl	8000dc4 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f241 3288 	movw	r2, #5000	; 0x1388
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e035      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215c:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0ee      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002170:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002174:	d10d      	bne.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002176:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002182:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800218a:	4912      	ldr	r1, [pc, #72]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800218c:	4313      	orrs	r3, r2
 800218e:	608b      	str	r3, [r1, #8]
 8002190:	e005      	b.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	4a0f      	ldr	r2, [pc, #60]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002198:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800219c:	6093      	str	r3, [r2, #8]
 800219e:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80021a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021aa:	490a      	ldr	r1, [pc, #40]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0310 	and.w	r3, r3, #16
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d004      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80021c4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40007000 	.word	0x40007000
 80021d4:	40023800 	.word	0x40023800
 80021d8:	42470e40 	.word	0x42470e40
 80021dc:	424711e0 	.word	0x424711e0

080021e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e066      	b.n	80022c4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	7f5b      	ldrb	r3, [r3, #29]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d105      	bne.n	800220c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7fe fb96 	bl	8000938 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	22ca      	movs	r2, #202	; 0xca
 8002218:	625a      	str	r2, [r3, #36]	; 0x24
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2253      	movs	r2, #83	; 0x53
 8002220:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f87a 	bl	800231c <RTC_EnterInitMode>
 8002228:	4603      	mov	r3, r0
 800222a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d12c      	bne.n	800228c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002244:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6899      	ldr	r1, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	68d2      	ldr	r2, [r2, #12]
 800226c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6919      	ldr	r1, [r3, #16]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	041a      	lsls	r2, r3, #16
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f881 	bl	800238a <RTC_ExitInitMode>
 8002288:	4603      	mov	r3, r0
 800228a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d113      	bne.n	80022ba <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699a      	ldr	r2, [r3, #24]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	22ff      	movs	r2, #255	; 0xff
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022e6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022e8:	f7fe fd6c 	bl	8000dc4 <HAL_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80022ee:	e009      	b.n	8002304 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80022f0:	f7fe fd68 	bl	8000dc4 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022fe:	d901      	bls.n	8002304 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e007      	b.n	8002314 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	f003 0320 	and.w	r3, r3, #32
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0ee      	beq.n	80022f0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002336:	2b00      	cmp	r3, #0
 8002338:	d122      	bne.n	8002380 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002348:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800234a:	f7fe fd3b 	bl	8000dc4 <HAL_GetTick>
 800234e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002350:	e00c      	b.n	800236c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002352:	f7fe fd37 	bl	8000dc4 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002360:	d904      	bls.n	800236c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2204      	movs	r2, #4
 8002366:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	d102      	bne.n	8002380 <RTC_EnterInitMode+0x64>
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d1e8      	bne.n	8002352 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002380:	7bfb      	ldrb	r3, [r7, #15]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b084      	sub	sp, #16
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023a4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10a      	bne.n	80023ca <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff89 	bl	80022cc <HAL_RTC_WaitForSynchro>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d004      	beq.n	80023ca <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2204      	movs	r2, #4
 80023c4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e03f      	b.n	8002466 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe fc0a 	bl	8000c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2224      	movs	r2, #36	; 0x24
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002416:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 fd7b 	bl	8002f14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800242c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800243c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800244c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2220      	movs	r2, #32
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b08a      	sub	sp, #40	; 0x28
 8002472:	af02      	add	r7, sp, #8
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	4613      	mov	r3, r2
 800247c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b20      	cmp	r3, #32
 800248c:	d17c      	bne.n	8002588 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <HAL_UART_Transmit+0x2c>
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e075      	b.n	800258a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_UART_Transmit+0x3e>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e06e      	b.n	800258a <HAL_UART_Transmit+0x11c>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2221      	movs	r2, #33	; 0x21
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024c2:	f7fe fc7f 	bl	8000dc4 <HAL_GetTick>
 80024c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	88fa      	ldrh	r2, [r7, #6]
 80024cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	88fa      	ldrh	r2, [r7, #6]
 80024d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024dc:	d108      	bne.n	80024f0 <HAL_UART_Transmit+0x82>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d104      	bne.n	80024f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	61bb      	str	r3, [r7, #24]
 80024ee:	e003      	b.n	80024f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002500:	e02a      	b.n	8002558 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2200      	movs	r2, #0
 800250a:	2180      	movs	r1, #128	; 0x80
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 faf9 	bl	8002b04 <UART_WaitOnFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e036      	b.n	800258a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10b      	bne.n	800253a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002530:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	3302      	adds	r3, #2
 8002536:	61bb      	str	r3, [r7, #24]
 8002538:	e007      	b.n	800254a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	781a      	ldrb	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	3301      	adds	r3, #1
 8002548:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800255c:	b29b      	uxth	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1cf      	bne.n	8002502 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2200      	movs	r2, #0
 800256a:	2140      	movs	r1, #64	; 0x40
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 fac9 	bl	8002b04 <UART_WaitOnFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e006      	b.n	800258a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	e000      	b.n	800258a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002588:	2302      	movs	r3, #2
  }
}
 800258a:	4618      	mov	r0, r3
 800258c:	3720      	adds	r7, #32
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b0ba      	sub	sp, #232	; 0xe8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80025d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10f      	bne.n	80025fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <HAL_UART_IRQHandler+0x66>
 80025e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 fbd3 	bl	8002d9e <UART_Receive_IT>
      return;
 80025f8:	e256      	b.n	8002aa8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80025fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 80de 	beq.w	80027c0 <HAL_UART_IRQHandler+0x22c>
 8002604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d106      	bne.n	800261e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002614:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80d1 	beq.w	80027c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800261e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00b      	beq.n	8002642 <HAL_UART_IRQHandler+0xae>
 800262a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002646:	f003 0304 	and.w	r3, r3, #4
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00b      	beq.n	8002666 <HAL_UART_IRQHandler+0xd2>
 800264e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f043 0202 	orr.w	r2, r3, #2
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00b      	beq.n	800268a <HAL_UART_IRQHandler+0xf6>
 8002672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f043 0204 	orr.w	r2, r3, #4
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800268a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d011      	beq.n	80026ba <HAL_UART_IRQHandler+0x126>
 8002696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800269a:	f003 0320 	and.w	r3, r3, #32
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d105      	bne.n	80026ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80026a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f043 0208 	orr.w	r2, r3, #8
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 81ed 	beq.w	8002a9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026c8:	f003 0320 	and.w	r3, r3, #32
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_UART_IRQHandler+0x14e>
 80026d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026d4:	f003 0320 	and.w	r3, r3, #32
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 fb5e 	bl	8002d9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ec:	2b40      	cmp	r3, #64	; 0x40
 80026ee:	bf0c      	ite	eq
 80026f0:	2301      	moveq	r3, #1
 80026f2:	2300      	movne	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d103      	bne.n	800270e <HAL_UART_IRQHandler+0x17a>
 8002706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800270a:	2b00      	cmp	r3, #0
 800270c:	d04f      	beq.n	80027ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 fa66 	bl	8002be0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271e:	2b40      	cmp	r3, #64	; 0x40
 8002720:	d141      	bne.n	80027a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3314      	adds	r3, #20
 8002728:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800272c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002730:	e853 3f00 	ldrex	r3, [r3]
 8002734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002738:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800273c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002740:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3314      	adds	r3, #20
 800274a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800274e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002752:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002756:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800275a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800275e:	e841 2300 	strex	r3, r2, [r1]
 8002762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002766:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1d9      	bne.n	8002722 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002772:	2b00      	cmp	r3, #0
 8002774:	d013      	beq.n	800279e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277a:	4a7d      	ldr	r2, [pc, #500]	; (8002970 <HAL_UART_IRQHandler+0x3dc>)
 800277c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002782:	4618      	mov	r0, r3
 8002784:	f7fe fcab 	bl	80010de <HAL_DMA_Abort_IT>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d016      	beq.n	80027bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002798:	4610      	mov	r0, r2
 800279a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800279c:	e00e      	b.n	80027bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f99a 	bl	8002ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a4:	e00a      	b.n	80027bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f996 	bl	8002ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ac:	e006      	b.n	80027bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f992 	bl	8002ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80027ba:	e170      	b.n	8002a9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027bc:	bf00      	nop
    return;
 80027be:	e16e      	b.n	8002a9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	f040 814a 	bne.w	8002a5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80027ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 8143 	beq.w	8002a5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80027d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 813c 	beq.w	8002a5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002806:	2b40      	cmp	r3, #64	; 0x40
 8002808:	f040 80b4 	bne.w	8002974 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002818:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 8140 	beq.w	8002aa2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800282a:	429a      	cmp	r2, r3
 800282c:	f080 8139 	bcs.w	8002aa2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002836:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002842:	f000 8088 	beq.w	8002956 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	330c      	adds	r3, #12
 800284c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002850:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002854:	e853 3f00 	ldrex	r3, [r3]
 8002858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800285c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	330c      	adds	r3, #12
 800286e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002872:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002876:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800287e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002882:	e841 2300 	strex	r3, r2, [r1]
 8002886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800288a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1d9      	bne.n	8002846 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3314      	adds	r3, #20
 8002898:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800289c:	e853 3f00 	ldrex	r3, [r3]
 80028a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80028a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3314      	adds	r3, #20
 80028b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80028ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80028be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80028c2:	e841 2300 	strex	r3, r2, [r1]
 80028c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80028c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1e1      	bne.n	8002892 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	3314      	adds	r3, #20
 80028d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028d8:	e853 3f00 	ldrex	r3, [r3]
 80028dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80028de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	3314      	adds	r3, #20
 80028ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80028f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80028f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028fa:	e841 2300 	strex	r3, r2, [r1]
 80028fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1e3      	bne.n	80028ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2220      	movs	r2, #32
 800290a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	330c      	adds	r3, #12
 800291a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800291c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800291e:	e853 3f00 	ldrex	r3, [r3]
 8002922:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002926:	f023 0310 	bic.w	r3, r3, #16
 800292a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	330c      	adds	r3, #12
 8002934:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002938:	65ba      	str	r2, [r7, #88]	; 0x58
 800293a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800293e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002940:	e841 2300 	strex	r3, r2, [r1]
 8002944:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1e3      	bne.n	8002914 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	4618      	mov	r0, r3
 8002952:	f7fe fb54 	bl	8000ffe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800295e:	b29b      	uxth	r3, r3
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	b29b      	uxth	r3, r3
 8002964:	4619      	mov	r1, r3
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f8c0 	bl	8002aec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800296c:	e099      	b.n	8002aa2 <HAL_UART_IRQHandler+0x50e>
 800296e:	bf00      	nop
 8002970:	08002ca7 	.word	0x08002ca7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800297c:	b29b      	uxth	r3, r3
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 808b 	beq.w	8002aa6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002990:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 8086 	beq.w	8002aa6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	330c      	adds	r3, #12
 80029a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a4:	e853 3f00 	ldrex	r3, [r3]
 80029a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80029aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	330c      	adds	r3, #12
 80029ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80029be:	647a      	str	r2, [r7, #68]	; 0x44
 80029c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029c6:	e841 2300 	strex	r3, r2, [r1]
 80029ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1e3      	bne.n	800299a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	3314      	adds	r3, #20
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	e853 3f00 	ldrex	r3, [r3]
 80029e0:	623b      	str	r3, [r7, #32]
   return(result);
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	f023 0301 	bic.w	r3, r3, #1
 80029e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3314      	adds	r3, #20
 80029f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80029f6:	633a      	str	r2, [r7, #48]	; 0x30
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029fe:	e841 2300 	strex	r3, r2, [r1]
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1e3      	bne.n	80029d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	330c      	adds	r3, #12
 8002a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	e853 3f00 	ldrex	r3, [r3]
 8002a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0310 	bic.w	r3, r3, #16
 8002a2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	330c      	adds	r3, #12
 8002a38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a3c:	61fa      	str	r2, [r7, #28]
 8002a3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a40:	69b9      	ldr	r1, [r7, #24]
 8002a42:	69fa      	ldr	r2, [r7, #28]
 8002a44:	e841 2300 	strex	r3, r2, [r1]
 8002a48:	617b      	str	r3, [r7, #20]
   return(result);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1e3      	bne.n	8002a18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a54:	4619      	mov	r1, r3
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f848 	bl	8002aec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a5c:	e023      	b.n	8002aa6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d009      	beq.n	8002a7e <HAL_UART_IRQHandler+0x4ea>
 8002a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f929 	bl	8002cce <UART_Transmit_IT>
    return;
 8002a7c:	e014      	b.n	8002aa8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00e      	beq.n	8002aa8 <HAL_UART_IRQHandler+0x514>
 8002a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d008      	beq.n	8002aa8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f969 	bl	8002d6e <UART_EndTransmit_IT>
    return;
 8002a9c:	e004      	b.n	8002aa8 <HAL_UART_IRQHandler+0x514>
    return;
 8002a9e:	bf00      	nop
 8002aa0:	e002      	b.n	8002aa8 <HAL_UART_IRQHandler+0x514>
      return;
 8002aa2:	bf00      	nop
 8002aa4:	e000      	b.n	8002aa8 <HAL_UART_IRQHandler+0x514>
      return;
 8002aa6:	bf00      	nop
  }
}
 8002aa8:	37e8      	adds	r7, #232	; 0xe8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop

08002ab0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b090      	sub	sp, #64	; 0x40
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	603b      	str	r3, [r7, #0]
 8002b10:	4613      	mov	r3, r2
 8002b12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b14:	e050      	b.n	8002bb8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1c:	d04c      	beq.n	8002bb8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d007      	beq.n	8002b34 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b24:	f7fe f94e 	bl	8000dc4 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d241      	bcs.n	8002bb8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	330c      	adds	r3, #12
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3e:	e853 3f00 	ldrex	r3, [r3]
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	330c      	adds	r3, #12
 8002b52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b54:	637a      	str	r2, [r7, #52]	; 0x34
 8002b56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b5c:	e841 2300 	strex	r3, r2, [r1]
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1e5      	bne.n	8002b34 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3314      	adds	r3, #20
 8002b6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	e853 3f00 	ldrex	r3, [r3]
 8002b76:	613b      	str	r3, [r7, #16]
   return(result);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f023 0301 	bic.w	r3, r3, #1
 8002b7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3314      	adds	r3, #20
 8002b86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b88:	623a      	str	r2, [r7, #32]
 8002b8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8c:	69f9      	ldr	r1, [r7, #28]
 8002b8e:	6a3a      	ldr	r2, [r7, #32]
 8002b90:	e841 2300 	strex	r3, r2, [r1]
 8002b94:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1e5      	bne.n	8002b68 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e00f      	b.n	8002bd8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d09f      	beq.n	8002b16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3740      	adds	r7, #64	; 0x40
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b095      	sub	sp, #84	; 0x54
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	330c      	adds	r3, #12
 8002bee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf2:	e853 3f00 	ldrex	r3, [r3]
 8002bf6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	330c      	adds	r3, #12
 8002c06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c08:	643a      	str	r2, [r7, #64]	; 0x40
 8002c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c10:	e841 2300 	strex	r3, r2, [r1]
 8002c14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1e5      	bne.n	8002be8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3314      	adds	r3, #20
 8002c22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	e853 3f00 	ldrex	r3, [r3]
 8002c2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f023 0301 	bic.w	r3, r3, #1
 8002c32:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	3314      	adds	r3, #20
 8002c3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c44:	e841 2300 	strex	r3, r2, [r1]
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1e5      	bne.n	8002c1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d119      	bne.n	8002c8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	330c      	adds	r3, #12
 8002c5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	e853 3f00 	ldrex	r3, [r3]
 8002c66:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f023 0310 	bic.w	r3, r3, #16
 8002c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	330c      	adds	r3, #12
 8002c76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c78:	61ba      	str	r2, [r7, #24]
 8002c7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7c:	6979      	ldr	r1, [r7, #20]
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	e841 2300 	strex	r3, r2, [r1]
 8002c84:	613b      	str	r3, [r7, #16]
   return(result);
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1e5      	bne.n	8002c58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c9a:	bf00      	nop
 8002c9c:	3754      	adds	r7, #84	; 0x54
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f7ff ff09 	bl	8002ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b085      	sub	sp, #20
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b21      	cmp	r3, #33	; 0x21
 8002ce0:	d13e      	bne.n	8002d60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cea:	d114      	bne.n	8002d16 <UART_Transmit_IT+0x48>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d110      	bne.n	8002d16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	1c9a      	adds	r2, r3, #2
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	621a      	str	r2, [r3, #32]
 8002d14:	e008      	b.n	8002d28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	1c59      	adds	r1, r3, #1
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6211      	str	r1, [r2, #32]
 8002d20:	781a      	ldrb	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	4619      	mov	r1, r3
 8002d36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10f      	bne.n	8002d5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e000      	b.n	8002d62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
  }
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff fe8e 	bl	8002ab0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b08c      	sub	sp, #48	; 0x30
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b22      	cmp	r3, #34	; 0x22
 8002db0:	f040 80ab 	bne.w	8002f0a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dbc:	d117      	bne.n	8002dee <UART_Receive_IT+0x50>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d113      	bne.n	8002dee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de6:	1c9a      	adds	r2, r3, #2
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	629a      	str	r2, [r3, #40]	; 0x28
 8002dec:	e026      	b.n	8002e3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e00:	d007      	beq.n	8002e12 <UART_Receive_IT+0x74>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10a      	bne.n	8002e20 <UART_Receive_IT+0x82>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	e008      	b.n	8002e32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	4619      	mov	r1, r3
 8002e4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d15a      	bne.n	8002f06 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0220 	bic.w	r2, r2, #32
 8002e5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0201 	bic.w	r2, r2, #1
 8002e7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d135      	bne.n	8002efc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	330c      	adds	r3, #12
 8002e9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	e853 3f00 	ldrex	r3, [r3]
 8002ea4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f023 0310 	bic.w	r3, r3, #16
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	330c      	adds	r3, #12
 8002eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb6:	623a      	str	r2, [r7, #32]
 8002eb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eba:	69f9      	ldr	r1, [r7, #28]
 8002ebc:	6a3a      	ldr	r2, [r7, #32]
 8002ebe:	e841 2300 	strex	r3, r2, [r1]
 8002ec2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1e5      	bne.n	8002e96 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	2b10      	cmp	r3, #16
 8002ed6:	d10a      	bne.n	8002eee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff fdf9 	bl	8002aec <HAL_UARTEx_RxEventCallback>
 8002efa:	e002      	b.n	8002f02 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff fde1 	bl	8002ac4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e002      	b.n	8002f0c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	e000      	b.n	8002f0c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002f0a:	2302      	movs	r3, #2
  }
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3730      	adds	r7, #48	; 0x30
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f18:	b0c0      	sub	sp, #256	; 0x100
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f30:	68d9      	ldr	r1, [r3, #12]
 8002f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	ea40 0301 	orr.w	r3, r0, r1
 8002f3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f6c:	f021 010c 	bic.w	r1, r1, #12
 8002f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f7a:	430b      	orrs	r3, r1
 8002f7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8e:	6999      	ldr	r1, [r3, #24]
 8002f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	ea40 0301 	orr.w	r3, r0, r1
 8002f9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	4b8f      	ldr	r3, [pc, #572]	; (80031e0 <UART_SetConfig+0x2cc>)
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d005      	beq.n	8002fb4 <UART_SetConfig+0xa0>
 8002fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	4b8d      	ldr	r3, [pc, #564]	; (80031e4 <UART_SetConfig+0x2d0>)
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d104      	bne.n	8002fbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fb4:	f7fe ff40 	bl	8001e38 <HAL_RCC_GetPCLK2Freq>
 8002fb8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002fbc:	e003      	b.n	8002fc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fbe:	f7fe ff27 	bl	8001e10 <HAL_RCC_GetPCLK1Freq>
 8002fc2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fd0:	f040 810c 	bne.w	80031ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fde:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fe2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002fe6:	4622      	mov	r2, r4
 8002fe8:	462b      	mov	r3, r5
 8002fea:	1891      	adds	r1, r2, r2
 8002fec:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fee:	415b      	adcs	r3, r3
 8002ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ff2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	eb12 0801 	adds.w	r8, r2, r1
 8002ffc:	4629      	mov	r1, r5
 8002ffe:	eb43 0901 	adc.w	r9, r3, r1
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	f04f 0300 	mov.w	r3, #0
 800300a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800300e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003012:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003016:	4690      	mov	r8, r2
 8003018:	4699      	mov	r9, r3
 800301a:	4623      	mov	r3, r4
 800301c:	eb18 0303 	adds.w	r3, r8, r3
 8003020:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003024:	462b      	mov	r3, r5
 8003026:	eb49 0303 	adc.w	r3, r9, r3
 800302a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800302e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800303a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800303e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003042:	460b      	mov	r3, r1
 8003044:	18db      	adds	r3, r3, r3
 8003046:	653b      	str	r3, [r7, #80]	; 0x50
 8003048:	4613      	mov	r3, r2
 800304a:	eb42 0303 	adc.w	r3, r2, r3
 800304e:	657b      	str	r3, [r7, #84]	; 0x54
 8003050:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003054:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003058:	f7fd f91a 	bl	8000290 <__aeabi_uldivmod>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4b61      	ldr	r3, [pc, #388]	; (80031e8 <UART_SetConfig+0x2d4>)
 8003062:	fba3 2302 	umull	r2, r3, r3, r2
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	011c      	lsls	r4, r3, #4
 800306a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800306e:	2200      	movs	r2, #0
 8003070:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003074:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003078:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800307c:	4642      	mov	r2, r8
 800307e:	464b      	mov	r3, r9
 8003080:	1891      	adds	r1, r2, r2
 8003082:	64b9      	str	r1, [r7, #72]	; 0x48
 8003084:	415b      	adcs	r3, r3
 8003086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003088:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800308c:	4641      	mov	r1, r8
 800308e:	eb12 0a01 	adds.w	sl, r2, r1
 8003092:	4649      	mov	r1, r9
 8003094:	eb43 0b01 	adc.w	fp, r3, r1
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030ac:	4692      	mov	sl, r2
 80030ae:	469b      	mov	fp, r3
 80030b0:	4643      	mov	r3, r8
 80030b2:	eb1a 0303 	adds.w	r3, sl, r3
 80030b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030ba:	464b      	mov	r3, r9
 80030bc:	eb4b 0303 	adc.w	r3, fp, r3
 80030c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030d8:	460b      	mov	r3, r1
 80030da:	18db      	adds	r3, r3, r3
 80030dc:	643b      	str	r3, [r7, #64]	; 0x40
 80030de:	4613      	mov	r3, r2
 80030e0:	eb42 0303 	adc.w	r3, r2, r3
 80030e4:	647b      	str	r3, [r7, #68]	; 0x44
 80030e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030ee:	f7fd f8cf 	bl	8000290 <__aeabi_uldivmod>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4611      	mov	r1, r2
 80030f8:	4b3b      	ldr	r3, [pc, #236]	; (80031e8 <UART_SetConfig+0x2d4>)
 80030fa:	fba3 2301 	umull	r2, r3, r3, r1
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	2264      	movs	r2, #100	; 0x64
 8003102:	fb02 f303 	mul.w	r3, r2, r3
 8003106:	1acb      	subs	r3, r1, r3
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800310e:	4b36      	ldr	r3, [pc, #216]	; (80031e8 <UART_SetConfig+0x2d4>)
 8003110:	fba3 2302 	umull	r2, r3, r3, r2
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800311c:	441c      	add	r4, r3
 800311e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003122:	2200      	movs	r2, #0
 8003124:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003128:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800312c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003130:	4642      	mov	r2, r8
 8003132:	464b      	mov	r3, r9
 8003134:	1891      	adds	r1, r2, r2
 8003136:	63b9      	str	r1, [r7, #56]	; 0x38
 8003138:	415b      	adcs	r3, r3
 800313a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800313c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003140:	4641      	mov	r1, r8
 8003142:	1851      	adds	r1, r2, r1
 8003144:	6339      	str	r1, [r7, #48]	; 0x30
 8003146:	4649      	mov	r1, r9
 8003148:	414b      	adcs	r3, r1
 800314a:	637b      	str	r3, [r7, #52]	; 0x34
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003158:	4659      	mov	r1, fp
 800315a:	00cb      	lsls	r3, r1, #3
 800315c:	4651      	mov	r1, sl
 800315e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003162:	4651      	mov	r1, sl
 8003164:	00ca      	lsls	r2, r1, #3
 8003166:	4610      	mov	r0, r2
 8003168:	4619      	mov	r1, r3
 800316a:	4603      	mov	r3, r0
 800316c:	4642      	mov	r2, r8
 800316e:	189b      	adds	r3, r3, r2
 8003170:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003174:	464b      	mov	r3, r9
 8003176:	460a      	mov	r2, r1
 8003178:	eb42 0303 	adc.w	r3, r2, r3
 800317c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800318c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003190:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003194:	460b      	mov	r3, r1
 8003196:	18db      	adds	r3, r3, r3
 8003198:	62bb      	str	r3, [r7, #40]	; 0x28
 800319a:	4613      	mov	r3, r2
 800319c:	eb42 0303 	adc.w	r3, r2, r3
 80031a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80031aa:	f7fd f871 	bl	8000290 <__aeabi_uldivmod>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4b0d      	ldr	r3, [pc, #52]	; (80031e8 <UART_SetConfig+0x2d4>)
 80031b4:	fba3 1302 	umull	r1, r3, r3, r2
 80031b8:	095b      	lsrs	r3, r3, #5
 80031ba:	2164      	movs	r1, #100	; 0x64
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	3332      	adds	r3, #50	; 0x32
 80031c6:	4a08      	ldr	r2, [pc, #32]	; (80031e8 <UART_SetConfig+0x2d4>)
 80031c8:	fba2 2303 	umull	r2, r3, r2, r3
 80031cc:	095b      	lsrs	r3, r3, #5
 80031ce:	f003 0207 	and.w	r2, r3, #7
 80031d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4422      	add	r2, r4
 80031da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031dc:	e105      	b.n	80033ea <UART_SetConfig+0x4d6>
 80031de:	bf00      	nop
 80031e0:	40011000 	.word	0x40011000
 80031e4:	40011400 	.word	0x40011400
 80031e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031f0:	2200      	movs	r2, #0
 80031f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031fe:	4642      	mov	r2, r8
 8003200:	464b      	mov	r3, r9
 8003202:	1891      	adds	r1, r2, r2
 8003204:	6239      	str	r1, [r7, #32]
 8003206:	415b      	adcs	r3, r3
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
 800320a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800320e:	4641      	mov	r1, r8
 8003210:	1854      	adds	r4, r2, r1
 8003212:	4649      	mov	r1, r9
 8003214:	eb43 0501 	adc.w	r5, r3, r1
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	00eb      	lsls	r3, r5, #3
 8003222:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003226:	00e2      	lsls	r2, r4, #3
 8003228:	4614      	mov	r4, r2
 800322a:	461d      	mov	r5, r3
 800322c:	4643      	mov	r3, r8
 800322e:	18e3      	adds	r3, r4, r3
 8003230:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003234:	464b      	mov	r3, r9
 8003236:	eb45 0303 	adc.w	r3, r5, r3
 800323a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800323e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800324a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800325a:	4629      	mov	r1, r5
 800325c:	008b      	lsls	r3, r1, #2
 800325e:	4621      	mov	r1, r4
 8003260:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003264:	4621      	mov	r1, r4
 8003266:	008a      	lsls	r2, r1, #2
 8003268:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800326c:	f7fd f810 	bl	8000290 <__aeabi_uldivmod>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4b60      	ldr	r3, [pc, #384]	; (80033f8 <UART_SetConfig+0x4e4>)
 8003276:	fba3 2302 	umull	r2, r3, r3, r2
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	011c      	lsls	r4, r3, #4
 800327e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003282:	2200      	movs	r2, #0
 8003284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003288:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800328c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003290:	4642      	mov	r2, r8
 8003292:	464b      	mov	r3, r9
 8003294:	1891      	adds	r1, r2, r2
 8003296:	61b9      	str	r1, [r7, #24]
 8003298:	415b      	adcs	r3, r3
 800329a:	61fb      	str	r3, [r7, #28]
 800329c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032a0:	4641      	mov	r1, r8
 80032a2:	1851      	adds	r1, r2, r1
 80032a4:	6139      	str	r1, [r7, #16]
 80032a6:	4649      	mov	r1, r9
 80032a8:	414b      	adcs	r3, r1
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032b8:	4659      	mov	r1, fp
 80032ba:	00cb      	lsls	r3, r1, #3
 80032bc:	4651      	mov	r1, sl
 80032be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032c2:	4651      	mov	r1, sl
 80032c4:	00ca      	lsls	r2, r1, #3
 80032c6:	4610      	mov	r0, r2
 80032c8:	4619      	mov	r1, r3
 80032ca:	4603      	mov	r3, r0
 80032cc:	4642      	mov	r2, r8
 80032ce:	189b      	adds	r3, r3, r2
 80032d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032d4:	464b      	mov	r3, r9
 80032d6:	460a      	mov	r2, r1
 80032d8:	eb42 0303 	adc.w	r3, r2, r3
 80032dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80032ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032f8:	4649      	mov	r1, r9
 80032fa:	008b      	lsls	r3, r1, #2
 80032fc:	4641      	mov	r1, r8
 80032fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003302:	4641      	mov	r1, r8
 8003304:	008a      	lsls	r2, r1, #2
 8003306:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800330a:	f7fc ffc1 	bl	8000290 <__aeabi_uldivmod>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	4b39      	ldr	r3, [pc, #228]	; (80033f8 <UART_SetConfig+0x4e4>)
 8003314:	fba3 1302 	umull	r1, r3, r3, r2
 8003318:	095b      	lsrs	r3, r3, #5
 800331a:	2164      	movs	r1, #100	; 0x64
 800331c:	fb01 f303 	mul.w	r3, r1, r3
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	3332      	adds	r3, #50	; 0x32
 8003326:	4a34      	ldr	r2, [pc, #208]	; (80033f8 <UART_SetConfig+0x4e4>)
 8003328:	fba2 2303 	umull	r2, r3, r2, r3
 800332c:	095b      	lsrs	r3, r3, #5
 800332e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003332:	441c      	add	r4, r3
 8003334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003338:	2200      	movs	r2, #0
 800333a:	673b      	str	r3, [r7, #112]	; 0x70
 800333c:	677a      	str	r2, [r7, #116]	; 0x74
 800333e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003342:	4642      	mov	r2, r8
 8003344:	464b      	mov	r3, r9
 8003346:	1891      	adds	r1, r2, r2
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	415b      	adcs	r3, r3
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003352:	4641      	mov	r1, r8
 8003354:	1851      	adds	r1, r2, r1
 8003356:	6039      	str	r1, [r7, #0]
 8003358:	4649      	mov	r1, r9
 800335a:	414b      	adcs	r3, r1
 800335c:	607b      	str	r3, [r7, #4]
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800336a:	4659      	mov	r1, fp
 800336c:	00cb      	lsls	r3, r1, #3
 800336e:	4651      	mov	r1, sl
 8003370:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003374:	4651      	mov	r1, sl
 8003376:	00ca      	lsls	r2, r1, #3
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	4603      	mov	r3, r0
 800337e:	4642      	mov	r2, r8
 8003380:	189b      	adds	r3, r3, r2
 8003382:	66bb      	str	r3, [r7, #104]	; 0x68
 8003384:	464b      	mov	r3, r9
 8003386:	460a      	mov	r2, r1
 8003388:	eb42 0303 	adc.w	r3, r2, r3
 800338c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800338e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	663b      	str	r3, [r7, #96]	; 0x60
 8003398:	667a      	str	r2, [r7, #100]	; 0x64
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80033a6:	4649      	mov	r1, r9
 80033a8:	008b      	lsls	r3, r1, #2
 80033aa:	4641      	mov	r1, r8
 80033ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033b0:	4641      	mov	r1, r8
 80033b2:	008a      	lsls	r2, r1, #2
 80033b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033b8:	f7fc ff6a 	bl	8000290 <__aeabi_uldivmod>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4b0d      	ldr	r3, [pc, #52]	; (80033f8 <UART_SetConfig+0x4e4>)
 80033c2:	fba3 1302 	umull	r1, r3, r3, r2
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	2164      	movs	r1, #100	; 0x64
 80033ca:	fb01 f303 	mul.w	r3, r1, r3
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	3332      	adds	r3, #50	; 0x32
 80033d4:	4a08      	ldr	r2, [pc, #32]	; (80033f8 <UART_SetConfig+0x4e4>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	095b      	lsrs	r3, r3, #5
 80033dc:	f003 020f 	and.w	r2, r3, #15
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4422      	add	r2, r4
 80033e8:	609a      	str	r2, [r3, #8]
}
 80033ea:	bf00      	nop
 80033ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033f0:	46bd      	mov	sp, r7
 80033f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033f6:	bf00      	nop
 80033f8:	51eb851f 	.word	0x51eb851f

080033fc <__errno>:
 80033fc:	4b01      	ldr	r3, [pc, #4]	; (8003404 <__errno+0x8>)
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	2000000c 	.word	0x2000000c

08003408 <__libc_init_array>:
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	4d0d      	ldr	r5, [pc, #52]	; (8003440 <__libc_init_array+0x38>)
 800340c:	4c0d      	ldr	r4, [pc, #52]	; (8003444 <__libc_init_array+0x3c>)
 800340e:	1b64      	subs	r4, r4, r5
 8003410:	10a4      	asrs	r4, r4, #2
 8003412:	2600      	movs	r6, #0
 8003414:	42a6      	cmp	r6, r4
 8003416:	d109      	bne.n	800342c <__libc_init_array+0x24>
 8003418:	4d0b      	ldr	r5, [pc, #44]	; (8003448 <__libc_init_array+0x40>)
 800341a:	4c0c      	ldr	r4, [pc, #48]	; (800344c <__libc_init_array+0x44>)
 800341c:	f001 f824 	bl	8004468 <_init>
 8003420:	1b64      	subs	r4, r4, r5
 8003422:	10a4      	asrs	r4, r4, #2
 8003424:	2600      	movs	r6, #0
 8003426:	42a6      	cmp	r6, r4
 8003428:	d105      	bne.n	8003436 <__libc_init_array+0x2e>
 800342a:	bd70      	pop	{r4, r5, r6, pc}
 800342c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003430:	4798      	blx	r3
 8003432:	3601      	adds	r6, #1
 8003434:	e7ee      	b.n	8003414 <__libc_init_array+0xc>
 8003436:	f855 3b04 	ldr.w	r3, [r5], #4
 800343a:	4798      	blx	r3
 800343c:	3601      	adds	r6, #1
 800343e:	e7f2      	b.n	8003426 <__libc_init_array+0x1e>
 8003440:	08004578 	.word	0x08004578
 8003444:	08004578 	.word	0x08004578
 8003448:	08004578 	.word	0x08004578
 800344c:	0800457c 	.word	0x0800457c

08003450 <memset>:
 8003450:	4402      	add	r2, r0
 8003452:	4603      	mov	r3, r0
 8003454:	4293      	cmp	r3, r2
 8003456:	d100      	bne.n	800345a <memset+0xa>
 8003458:	4770      	bx	lr
 800345a:	f803 1b01 	strb.w	r1, [r3], #1
 800345e:	e7f9      	b.n	8003454 <memset+0x4>

08003460 <iprintf>:
 8003460:	b40f      	push	{r0, r1, r2, r3}
 8003462:	4b0a      	ldr	r3, [pc, #40]	; (800348c <iprintf+0x2c>)
 8003464:	b513      	push	{r0, r1, r4, lr}
 8003466:	681c      	ldr	r4, [r3, #0]
 8003468:	b124      	cbz	r4, 8003474 <iprintf+0x14>
 800346a:	69a3      	ldr	r3, [r4, #24]
 800346c:	b913      	cbnz	r3, 8003474 <iprintf+0x14>
 800346e:	4620      	mov	r0, r4
 8003470:	f000 fa5e 	bl	8003930 <__sinit>
 8003474:	ab05      	add	r3, sp, #20
 8003476:	9a04      	ldr	r2, [sp, #16]
 8003478:	68a1      	ldr	r1, [r4, #8]
 800347a:	9301      	str	r3, [sp, #4]
 800347c:	4620      	mov	r0, r4
 800347e:	f000 fc67 	bl	8003d50 <_vfiprintf_r>
 8003482:	b002      	add	sp, #8
 8003484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003488:	b004      	add	sp, #16
 800348a:	4770      	bx	lr
 800348c:	2000000c 	.word	0x2000000c

08003490 <_puts_r>:
 8003490:	b570      	push	{r4, r5, r6, lr}
 8003492:	460e      	mov	r6, r1
 8003494:	4605      	mov	r5, r0
 8003496:	b118      	cbz	r0, 80034a0 <_puts_r+0x10>
 8003498:	6983      	ldr	r3, [r0, #24]
 800349a:	b90b      	cbnz	r3, 80034a0 <_puts_r+0x10>
 800349c:	f000 fa48 	bl	8003930 <__sinit>
 80034a0:	69ab      	ldr	r3, [r5, #24]
 80034a2:	68ac      	ldr	r4, [r5, #8]
 80034a4:	b913      	cbnz	r3, 80034ac <_puts_r+0x1c>
 80034a6:	4628      	mov	r0, r5
 80034a8:	f000 fa42 	bl	8003930 <__sinit>
 80034ac:	4b2c      	ldr	r3, [pc, #176]	; (8003560 <_puts_r+0xd0>)
 80034ae:	429c      	cmp	r4, r3
 80034b0:	d120      	bne.n	80034f4 <_puts_r+0x64>
 80034b2:	686c      	ldr	r4, [r5, #4]
 80034b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034b6:	07db      	lsls	r3, r3, #31
 80034b8:	d405      	bmi.n	80034c6 <_puts_r+0x36>
 80034ba:	89a3      	ldrh	r3, [r4, #12]
 80034bc:	0598      	lsls	r0, r3, #22
 80034be:	d402      	bmi.n	80034c6 <_puts_r+0x36>
 80034c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034c2:	f000 fad3 	bl	8003a6c <__retarget_lock_acquire_recursive>
 80034c6:	89a3      	ldrh	r3, [r4, #12]
 80034c8:	0719      	lsls	r1, r3, #28
 80034ca:	d51d      	bpl.n	8003508 <_puts_r+0x78>
 80034cc:	6923      	ldr	r3, [r4, #16]
 80034ce:	b1db      	cbz	r3, 8003508 <_puts_r+0x78>
 80034d0:	3e01      	subs	r6, #1
 80034d2:	68a3      	ldr	r3, [r4, #8]
 80034d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034d8:	3b01      	subs	r3, #1
 80034da:	60a3      	str	r3, [r4, #8]
 80034dc:	bb39      	cbnz	r1, 800352e <_puts_r+0x9e>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	da38      	bge.n	8003554 <_puts_r+0xc4>
 80034e2:	4622      	mov	r2, r4
 80034e4:	210a      	movs	r1, #10
 80034e6:	4628      	mov	r0, r5
 80034e8:	f000 f848 	bl	800357c <__swbuf_r>
 80034ec:	3001      	adds	r0, #1
 80034ee:	d011      	beq.n	8003514 <_puts_r+0x84>
 80034f0:	250a      	movs	r5, #10
 80034f2:	e011      	b.n	8003518 <_puts_r+0x88>
 80034f4:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <_puts_r+0xd4>)
 80034f6:	429c      	cmp	r4, r3
 80034f8:	d101      	bne.n	80034fe <_puts_r+0x6e>
 80034fa:	68ac      	ldr	r4, [r5, #8]
 80034fc:	e7da      	b.n	80034b4 <_puts_r+0x24>
 80034fe:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <_puts_r+0xd8>)
 8003500:	429c      	cmp	r4, r3
 8003502:	bf08      	it	eq
 8003504:	68ec      	ldreq	r4, [r5, #12]
 8003506:	e7d5      	b.n	80034b4 <_puts_r+0x24>
 8003508:	4621      	mov	r1, r4
 800350a:	4628      	mov	r0, r5
 800350c:	f000 f888 	bl	8003620 <__swsetup_r>
 8003510:	2800      	cmp	r0, #0
 8003512:	d0dd      	beq.n	80034d0 <_puts_r+0x40>
 8003514:	f04f 35ff 	mov.w	r5, #4294967295
 8003518:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800351a:	07da      	lsls	r2, r3, #31
 800351c:	d405      	bmi.n	800352a <_puts_r+0x9a>
 800351e:	89a3      	ldrh	r3, [r4, #12]
 8003520:	059b      	lsls	r3, r3, #22
 8003522:	d402      	bmi.n	800352a <_puts_r+0x9a>
 8003524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003526:	f000 faa2 	bl	8003a6e <__retarget_lock_release_recursive>
 800352a:	4628      	mov	r0, r5
 800352c:	bd70      	pop	{r4, r5, r6, pc}
 800352e:	2b00      	cmp	r3, #0
 8003530:	da04      	bge.n	800353c <_puts_r+0xac>
 8003532:	69a2      	ldr	r2, [r4, #24]
 8003534:	429a      	cmp	r2, r3
 8003536:	dc06      	bgt.n	8003546 <_puts_r+0xb6>
 8003538:	290a      	cmp	r1, #10
 800353a:	d004      	beq.n	8003546 <_puts_r+0xb6>
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	6022      	str	r2, [r4, #0]
 8003542:	7019      	strb	r1, [r3, #0]
 8003544:	e7c5      	b.n	80034d2 <_puts_r+0x42>
 8003546:	4622      	mov	r2, r4
 8003548:	4628      	mov	r0, r5
 800354a:	f000 f817 	bl	800357c <__swbuf_r>
 800354e:	3001      	adds	r0, #1
 8003550:	d1bf      	bne.n	80034d2 <_puts_r+0x42>
 8003552:	e7df      	b.n	8003514 <_puts_r+0x84>
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	250a      	movs	r5, #10
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	6022      	str	r2, [r4, #0]
 800355c:	701d      	strb	r5, [r3, #0]
 800355e:	e7db      	b.n	8003518 <_puts_r+0x88>
 8003560:	080044fc 	.word	0x080044fc
 8003564:	0800451c 	.word	0x0800451c
 8003568:	080044dc 	.word	0x080044dc

0800356c <puts>:
 800356c:	4b02      	ldr	r3, [pc, #8]	; (8003578 <puts+0xc>)
 800356e:	4601      	mov	r1, r0
 8003570:	6818      	ldr	r0, [r3, #0]
 8003572:	f7ff bf8d 	b.w	8003490 <_puts_r>
 8003576:	bf00      	nop
 8003578:	2000000c 	.word	0x2000000c

0800357c <__swbuf_r>:
 800357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357e:	460e      	mov	r6, r1
 8003580:	4614      	mov	r4, r2
 8003582:	4605      	mov	r5, r0
 8003584:	b118      	cbz	r0, 800358e <__swbuf_r+0x12>
 8003586:	6983      	ldr	r3, [r0, #24]
 8003588:	b90b      	cbnz	r3, 800358e <__swbuf_r+0x12>
 800358a:	f000 f9d1 	bl	8003930 <__sinit>
 800358e:	4b21      	ldr	r3, [pc, #132]	; (8003614 <__swbuf_r+0x98>)
 8003590:	429c      	cmp	r4, r3
 8003592:	d12b      	bne.n	80035ec <__swbuf_r+0x70>
 8003594:	686c      	ldr	r4, [r5, #4]
 8003596:	69a3      	ldr	r3, [r4, #24]
 8003598:	60a3      	str	r3, [r4, #8]
 800359a:	89a3      	ldrh	r3, [r4, #12]
 800359c:	071a      	lsls	r2, r3, #28
 800359e:	d52f      	bpl.n	8003600 <__swbuf_r+0x84>
 80035a0:	6923      	ldr	r3, [r4, #16]
 80035a2:	b36b      	cbz	r3, 8003600 <__swbuf_r+0x84>
 80035a4:	6923      	ldr	r3, [r4, #16]
 80035a6:	6820      	ldr	r0, [r4, #0]
 80035a8:	1ac0      	subs	r0, r0, r3
 80035aa:	6963      	ldr	r3, [r4, #20]
 80035ac:	b2f6      	uxtb	r6, r6
 80035ae:	4283      	cmp	r3, r0
 80035b0:	4637      	mov	r7, r6
 80035b2:	dc04      	bgt.n	80035be <__swbuf_r+0x42>
 80035b4:	4621      	mov	r1, r4
 80035b6:	4628      	mov	r0, r5
 80035b8:	f000 f926 	bl	8003808 <_fflush_r>
 80035bc:	bb30      	cbnz	r0, 800360c <__swbuf_r+0x90>
 80035be:	68a3      	ldr	r3, [r4, #8]
 80035c0:	3b01      	subs	r3, #1
 80035c2:	60a3      	str	r3, [r4, #8]
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	6022      	str	r2, [r4, #0]
 80035ca:	701e      	strb	r6, [r3, #0]
 80035cc:	6963      	ldr	r3, [r4, #20]
 80035ce:	3001      	adds	r0, #1
 80035d0:	4283      	cmp	r3, r0
 80035d2:	d004      	beq.n	80035de <__swbuf_r+0x62>
 80035d4:	89a3      	ldrh	r3, [r4, #12]
 80035d6:	07db      	lsls	r3, r3, #31
 80035d8:	d506      	bpl.n	80035e8 <__swbuf_r+0x6c>
 80035da:	2e0a      	cmp	r6, #10
 80035dc:	d104      	bne.n	80035e8 <__swbuf_r+0x6c>
 80035de:	4621      	mov	r1, r4
 80035e0:	4628      	mov	r0, r5
 80035e2:	f000 f911 	bl	8003808 <_fflush_r>
 80035e6:	b988      	cbnz	r0, 800360c <__swbuf_r+0x90>
 80035e8:	4638      	mov	r0, r7
 80035ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035ec:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <__swbuf_r+0x9c>)
 80035ee:	429c      	cmp	r4, r3
 80035f0:	d101      	bne.n	80035f6 <__swbuf_r+0x7a>
 80035f2:	68ac      	ldr	r4, [r5, #8]
 80035f4:	e7cf      	b.n	8003596 <__swbuf_r+0x1a>
 80035f6:	4b09      	ldr	r3, [pc, #36]	; (800361c <__swbuf_r+0xa0>)
 80035f8:	429c      	cmp	r4, r3
 80035fa:	bf08      	it	eq
 80035fc:	68ec      	ldreq	r4, [r5, #12]
 80035fe:	e7ca      	b.n	8003596 <__swbuf_r+0x1a>
 8003600:	4621      	mov	r1, r4
 8003602:	4628      	mov	r0, r5
 8003604:	f000 f80c 	bl	8003620 <__swsetup_r>
 8003608:	2800      	cmp	r0, #0
 800360a:	d0cb      	beq.n	80035a4 <__swbuf_r+0x28>
 800360c:	f04f 37ff 	mov.w	r7, #4294967295
 8003610:	e7ea      	b.n	80035e8 <__swbuf_r+0x6c>
 8003612:	bf00      	nop
 8003614:	080044fc 	.word	0x080044fc
 8003618:	0800451c 	.word	0x0800451c
 800361c:	080044dc 	.word	0x080044dc

08003620 <__swsetup_r>:
 8003620:	4b32      	ldr	r3, [pc, #200]	; (80036ec <__swsetup_r+0xcc>)
 8003622:	b570      	push	{r4, r5, r6, lr}
 8003624:	681d      	ldr	r5, [r3, #0]
 8003626:	4606      	mov	r6, r0
 8003628:	460c      	mov	r4, r1
 800362a:	b125      	cbz	r5, 8003636 <__swsetup_r+0x16>
 800362c:	69ab      	ldr	r3, [r5, #24]
 800362e:	b913      	cbnz	r3, 8003636 <__swsetup_r+0x16>
 8003630:	4628      	mov	r0, r5
 8003632:	f000 f97d 	bl	8003930 <__sinit>
 8003636:	4b2e      	ldr	r3, [pc, #184]	; (80036f0 <__swsetup_r+0xd0>)
 8003638:	429c      	cmp	r4, r3
 800363a:	d10f      	bne.n	800365c <__swsetup_r+0x3c>
 800363c:	686c      	ldr	r4, [r5, #4]
 800363e:	89a3      	ldrh	r3, [r4, #12]
 8003640:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003644:	0719      	lsls	r1, r3, #28
 8003646:	d42c      	bmi.n	80036a2 <__swsetup_r+0x82>
 8003648:	06dd      	lsls	r5, r3, #27
 800364a:	d411      	bmi.n	8003670 <__swsetup_r+0x50>
 800364c:	2309      	movs	r3, #9
 800364e:	6033      	str	r3, [r6, #0]
 8003650:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003654:	81a3      	strh	r3, [r4, #12]
 8003656:	f04f 30ff 	mov.w	r0, #4294967295
 800365a:	e03e      	b.n	80036da <__swsetup_r+0xba>
 800365c:	4b25      	ldr	r3, [pc, #148]	; (80036f4 <__swsetup_r+0xd4>)
 800365e:	429c      	cmp	r4, r3
 8003660:	d101      	bne.n	8003666 <__swsetup_r+0x46>
 8003662:	68ac      	ldr	r4, [r5, #8]
 8003664:	e7eb      	b.n	800363e <__swsetup_r+0x1e>
 8003666:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <__swsetup_r+0xd8>)
 8003668:	429c      	cmp	r4, r3
 800366a:	bf08      	it	eq
 800366c:	68ec      	ldreq	r4, [r5, #12]
 800366e:	e7e6      	b.n	800363e <__swsetup_r+0x1e>
 8003670:	0758      	lsls	r0, r3, #29
 8003672:	d512      	bpl.n	800369a <__swsetup_r+0x7a>
 8003674:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003676:	b141      	cbz	r1, 800368a <__swsetup_r+0x6a>
 8003678:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800367c:	4299      	cmp	r1, r3
 800367e:	d002      	beq.n	8003686 <__swsetup_r+0x66>
 8003680:	4630      	mov	r0, r6
 8003682:	f000 fa5b 	bl	8003b3c <_free_r>
 8003686:	2300      	movs	r3, #0
 8003688:	6363      	str	r3, [r4, #52]	; 0x34
 800368a:	89a3      	ldrh	r3, [r4, #12]
 800368c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003690:	81a3      	strh	r3, [r4, #12]
 8003692:	2300      	movs	r3, #0
 8003694:	6063      	str	r3, [r4, #4]
 8003696:	6923      	ldr	r3, [r4, #16]
 8003698:	6023      	str	r3, [r4, #0]
 800369a:	89a3      	ldrh	r3, [r4, #12]
 800369c:	f043 0308 	orr.w	r3, r3, #8
 80036a0:	81a3      	strh	r3, [r4, #12]
 80036a2:	6923      	ldr	r3, [r4, #16]
 80036a4:	b94b      	cbnz	r3, 80036ba <__swsetup_r+0x9a>
 80036a6:	89a3      	ldrh	r3, [r4, #12]
 80036a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b0:	d003      	beq.n	80036ba <__swsetup_r+0x9a>
 80036b2:	4621      	mov	r1, r4
 80036b4:	4630      	mov	r0, r6
 80036b6:	f000 fa01 	bl	8003abc <__smakebuf_r>
 80036ba:	89a0      	ldrh	r0, [r4, #12]
 80036bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036c0:	f010 0301 	ands.w	r3, r0, #1
 80036c4:	d00a      	beq.n	80036dc <__swsetup_r+0xbc>
 80036c6:	2300      	movs	r3, #0
 80036c8:	60a3      	str	r3, [r4, #8]
 80036ca:	6963      	ldr	r3, [r4, #20]
 80036cc:	425b      	negs	r3, r3
 80036ce:	61a3      	str	r3, [r4, #24]
 80036d0:	6923      	ldr	r3, [r4, #16]
 80036d2:	b943      	cbnz	r3, 80036e6 <__swsetup_r+0xc6>
 80036d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80036d8:	d1ba      	bne.n	8003650 <__swsetup_r+0x30>
 80036da:	bd70      	pop	{r4, r5, r6, pc}
 80036dc:	0781      	lsls	r1, r0, #30
 80036de:	bf58      	it	pl
 80036e0:	6963      	ldrpl	r3, [r4, #20]
 80036e2:	60a3      	str	r3, [r4, #8]
 80036e4:	e7f4      	b.n	80036d0 <__swsetup_r+0xb0>
 80036e6:	2000      	movs	r0, #0
 80036e8:	e7f7      	b.n	80036da <__swsetup_r+0xba>
 80036ea:	bf00      	nop
 80036ec:	2000000c 	.word	0x2000000c
 80036f0:	080044fc 	.word	0x080044fc
 80036f4:	0800451c 	.word	0x0800451c
 80036f8:	080044dc 	.word	0x080044dc

080036fc <__sflush_r>:
 80036fc:	898a      	ldrh	r2, [r1, #12]
 80036fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003702:	4605      	mov	r5, r0
 8003704:	0710      	lsls	r0, r2, #28
 8003706:	460c      	mov	r4, r1
 8003708:	d458      	bmi.n	80037bc <__sflush_r+0xc0>
 800370a:	684b      	ldr	r3, [r1, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	dc05      	bgt.n	800371c <__sflush_r+0x20>
 8003710:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	dc02      	bgt.n	800371c <__sflush_r+0x20>
 8003716:	2000      	movs	r0, #0
 8003718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800371c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800371e:	2e00      	cmp	r6, #0
 8003720:	d0f9      	beq.n	8003716 <__sflush_r+0x1a>
 8003722:	2300      	movs	r3, #0
 8003724:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003728:	682f      	ldr	r7, [r5, #0]
 800372a:	602b      	str	r3, [r5, #0]
 800372c:	d032      	beq.n	8003794 <__sflush_r+0x98>
 800372e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003730:	89a3      	ldrh	r3, [r4, #12]
 8003732:	075a      	lsls	r2, r3, #29
 8003734:	d505      	bpl.n	8003742 <__sflush_r+0x46>
 8003736:	6863      	ldr	r3, [r4, #4]
 8003738:	1ac0      	subs	r0, r0, r3
 800373a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800373c:	b10b      	cbz	r3, 8003742 <__sflush_r+0x46>
 800373e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003740:	1ac0      	subs	r0, r0, r3
 8003742:	2300      	movs	r3, #0
 8003744:	4602      	mov	r2, r0
 8003746:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003748:	6a21      	ldr	r1, [r4, #32]
 800374a:	4628      	mov	r0, r5
 800374c:	47b0      	blx	r6
 800374e:	1c43      	adds	r3, r0, #1
 8003750:	89a3      	ldrh	r3, [r4, #12]
 8003752:	d106      	bne.n	8003762 <__sflush_r+0x66>
 8003754:	6829      	ldr	r1, [r5, #0]
 8003756:	291d      	cmp	r1, #29
 8003758:	d82c      	bhi.n	80037b4 <__sflush_r+0xb8>
 800375a:	4a2a      	ldr	r2, [pc, #168]	; (8003804 <__sflush_r+0x108>)
 800375c:	40ca      	lsrs	r2, r1
 800375e:	07d6      	lsls	r6, r2, #31
 8003760:	d528      	bpl.n	80037b4 <__sflush_r+0xb8>
 8003762:	2200      	movs	r2, #0
 8003764:	6062      	str	r2, [r4, #4]
 8003766:	04d9      	lsls	r1, r3, #19
 8003768:	6922      	ldr	r2, [r4, #16]
 800376a:	6022      	str	r2, [r4, #0]
 800376c:	d504      	bpl.n	8003778 <__sflush_r+0x7c>
 800376e:	1c42      	adds	r2, r0, #1
 8003770:	d101      	bne.n	8003776 <__sflush_r+0x7a>
 8003772:	682b      	ldr	r3, [r5, #0]
 8003774:	b903      	cbnz	r3, 8003778 <__sflush_r+0x7c>
 8003776:	6560      	str	r0, [r4, #84]	; 0x54
 8003778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800377a:	602f      	str	r7, [r5, #0]
 800377c:	2900      	cmp	r1, #0
 800377e:	d0ca      	beq.n	8003716 <__sflush_r+0x1a>
 8003780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003784:	4299      	cmp	r1, r3
 8003786:	d002      	beq.n	800378e <__sflush_r+0x92>
 8003788:	4628      	mov	r0, r5
 800378a:	f000 f9d7 	bl	8003b3c <_free_r>
 800378e:	2000      	movs	r0, #0
 8003790:	6360      	str	r0, [r4, #52]	; 0x34
 8003792:	e7c1      	b.n	8003718 <__sflush_r+0x1c>
 8003794:	6a21      	ldr	r1, [r4, #32]
 8003796:	2301      	movs	r3, #1
 8003798:	4628      	mov	r0, r5
 800379a:	47b0      	blx	r6
 800379c:	1c41      	adds	r1, r0, #1
 800379e:	d1c7      	bne.n	8003730 <__sflush_r+0x34>
 80037a0:	682b      	ldr	r3, [r5, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0c4      	beq.n	8003730 <__sflush_r+0x34>
 80037a6:	2b1d      	cmp	r3, #29
 80037a8:	d001      	beq.n	80037ae <__sflush_r+0xb2>
 80037aa:	2b16      	cmp	r3, #22
 80037ac:	d101      	bne.n	80037b2 <__sflush_r+0xb6>
 80037ae:	602f      	str	r7, [r5, #0]
 80037b0:	e7b1      	b.n	8003716 <__sflush_r+0x1a>
 80037b2:	89a3      	ldrh	r3, [r4, #12]
 80037b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037b8:	81a3      	strh	r3, [r4, #12]
 80037ba:	e7ad      	b.n	8003718 <__sflush_r+0x1c>
 80037bc:	690f      	ldr	r7, [r1, #16]
 80037be:	2f00      	cmp	r7, #0
 80037c0:	d0a9      	beq.n	8003716 <__sflush_r+0x1a>
 80037c2:	0793      	lsls	r3, r2, #30
 80037c4:	680e      	ldr	r6, [r1, #0]
 80037c6:	bf08      	it	eq
 80037c8:	694b      	ldreq	r3, [r1, #20]
 80037ca:	600f      	str	r7, [r1, #0]
 80037cc:	bf18      	it	ne
 80037ce:	2300      	movne	r3, #0
 80037d0:	eba6 0807 	sub.w	r8, r6, r7
 80037d4:	608b      	str	r3, [r1, #8]
 80037d6:	f1b8 0f00 	cmp.w	r8, #0
 80037da:	dd9c      	ble.n	8003716 <__sflush_r+0x1a>
 80037dc:	6a21      	ldr	r1, [r4, #32]
 80037de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80037e0:	4643      	mov	r3, r8
 80037e2:	463a      	mov	r2, r7
 80037e4:	4628      	mov	r0, r5
 80037e6:	47b0      	blx	r6
 80037e8:	2800      	cmp	r0, #0
 80037ea:	dc06      	bgt.n	80037fa <__sflush_r+0xfe>
 80037ec:	89a3      	ldrh	r3, [r4, #12]
 80037ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037f2:	81a3      	strh	r3, [r4, #12]
 80037f4:	f04f 30ff 	mov.w	r0, #4294967295
 80037f8:	e78e      	b.n	8003718 <__sflush_r+0x1c>
 80037fa:	4407      	add	r7, r0
 80037fc:	eba8 0800 	sub.w	r8, r8, r0
 8003800:	e7e9      	b.n	80037d6 <__sflush_r+0xda>
 8003802:	bf00      	nop
 8003804:	20400001 	.word	0x20400001

08003808 <_fflush_r>:
 8003808:	b538      	push	{r3, r4, r5, lr}
 800380a:	690b      	ldr	r3, [r1, #16]
 800380c:	4605      	mov	r5, r0
 800380e:	460c      	mov	r4, r1
 8003810:	b913      	cbnz	r3, 8003818 <_fflush_r+0x10>
 8003812:	2500      	movs	r5, #0
 8003814:	4628      	mov	r0, r5
 8003816:	bd38      	pop	{r3, r4, r5, pc}
 8003818:	b118      	cbz	r0, 8003822 <_fflush_r+0x1a>
 800381a:	6983      	ldr	r3, [r0, #24]
 800381c:	b90b      	cbnz	r3, 8003822 <_fflush_r+0x1a>
 800381e:	f000 f887 	bl	8003930 <__sinit>
 8003822:	4b14      	ldr	r3, [pc, #80]	; (8003874 <_fflush_r+0x6c>)
 8003824:	429c      	cmp	r4, r3
 8003826:	d11b      	bne.n	8003860 <_fflush_r+0x58>
 8003828:	686c      	ldr	r4, [r5, #4]
 800382a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0ef      	beq.n	8003812 <_fflush_r+0xa>
 8003832:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003834:	07d0      	lsls	r0, r2, #31
 8003836:	d404      	bmi.n	8003842 <_fflush_r+0x3a>
 8003838:	0599      	lsls	r1, r3, #22
 800383a:	d402      	bmi.n	8003842 <_fflush_r+0x3a>
 800383c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800383e:	f000 f915 	bl	8003a6c <__retarget_lock_acquire_recursive>
 8003842:	4628      	mov	r0, r5
 8003844:	4621      	mov	r1, r4
 8003846:	f7ff ff59 	bl	80036fc <__sflush_r>
 800384a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800384c:	07da      	lsls	r2, r3, #31
 800384e:	4605      	mov	r5, r0
 8003850:	d4e0      	bmi.n	8003814 <_fflush_r+0xc>
 8003852:	89a3      	ldrh	r3, [r4, #12]
 8003854:	059b      	lsls	r3, r3, #22
 8003856:	d4dd      	bmi.n	8003814 <_fflush_r+0xc>
 8003858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800385a:	f000 f908 	bl	8003a6e <__retarget_lock_release_recursive>
 800385e:	e7d9      	b.n	8003814 <_fflush_r+0xc>
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <_fflush_r+0x70>)
 8003862:	429c      	cmp	r4, r3
 8003864:	d101      	bne.n	800386a <_fflush_r+0x62>
 8003866:	68ac      	ldr	r4, [r5, #8]
 8003868:	e7df      	b.n	800382a <_fflush_r+0x22>
 800386a:	4b04      	ldr	r3, [pc, #16]	; (800387c <_fflush_r+0x74>)
 800386c:	429c      	cmp	r4, r3
 800386e:	bf08      	it	eq
 8003870:	68ec      	ldreq	r4, [r5, #12]
 8003872:	e7da      	b.n	800382a <_fflush_r+0x22>
 8003874:	080044fc 	.word	0x080044fc
 8003878:	0800451c 	.word	0x0800451c
 800387c:	080044dc 	.word	0x080044dc

08003880 <std>:
 8003880:	2300      	movs	r3, #0
 8003882:	b510      	push	{r4, lr}
 8003884:	4604      	mov	r4, r0
 8003886:	e9c0 3300 	strd	r3, r3, [r0]
 800388a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800388e:	6083      	str	r3, [r0, #8]
 8003890:	8181      	strh	r1, [r0, #12]
 8003892:	6643      	str	r3, [r0, #100]	; 0x64
 8003894:	81c2      	strh	r2, [r0, #14]
 8003896:	6183      	str	r3, [r0, #24]
 8003898:	4619      	mov	r1, r3
 800389a:	2208      	movs	r2, #8
 800389c:	305c      	adds	r0, #92	; 0x5c
 800389e:	f7ff fdd7 	bl	8003450 <memset>
 80038a2:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <std+0x38>)
 80038a4:	6263      	str	r3, [r4, #36]	; 0x24
 80038a6:	4b05      	ldr	r3, [pc, #20]	; (80038bc <std+0x3c>)
 80038a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <std+0x40>)
 80038ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038ae:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <std+0x44>)
 80038b0:	6224      	str	r4, [r4, #32]
 80038b2:	6323      	str	r3, [r4, #48]	; 0x30
 80038b4:	bd10      	pop	{r4, pc}
 80038b6:	bf00      	nop
 80038b8:	080042f9 	.word	0x080042f9
 80038bc:	0800431b 	.word	0x0800431b
 80038c0:	08004353 	.word	0x08004353
 80038c4:	08004377 	.word	0x08004377

080038c8 <_cleanup_r>:
 80038c8:	4901      	ldr	r1, [pc, #4]	; (80038d0 <_cleanup_r+0x8>)
 80038ca:	f000 b8af 	b.w	8003a2c <_fwalk_reent>
 80038ce:	bf00      	nop
 80038d0:	08003809 	.word	0x08003809

080038d4 <__sfmoreglue>:
 80038d4:	b570      	push	{r4, r5, r6, lr}
 80038d6:	2268      	movs	r2, #104	; 0x68
 80038d8:	1e4d      	subs	r5, r1, #1
 80038da:	4355      	muls	r5, r2
 80038dc:	460e      	mov	r6, r1
 80038de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80038e2:	f000 f997 	bl	8003c14 <_malloc_r>
 80038e6:	4604      	mov	r4, r0
 80038e8:	b140      	cbz	r0, 80038fc <__sfmoreglue+0x28>
 80038ea:	2100      	movs	r1, #0
 80038ec:	e9c0 1600 	strd	r1, r6, [r0]
 80038f0:	300c      	adds	r0, #12
 80038f2:	60a0      	str	r0, [r4, #8]
 80038f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80038f8:	f7ff fdaa 	bl	8003450 <memset>
 80038fc:	4620      	mov	r0, r4
 80038fe:	bd70      	pop	{r4, r5, r6, pc}

08003900 <__sfp_lock_acquire>:
 8003900:	4801      	ldr	r0, [pc, #4]	; (8003908 <__sfp_lock_acquire+0x8>)
 8003902:	f000 b8b3 	b.w	8003a6c <__retarget_lock_acquire_recursive>
 8003906:	bf00      	nop
 8003908:	20000111 	.word	0x20000111

0800390c <__sfp_lock_release>:
 800390c:	4801      	ldr	r0, [pc, #4]	; (8003914 <__sfp_lock_release+0x8>)
 800390e:	f000 b8ae 	b.w	8003a6e <__retarget_lock_release_recursive>
 8003912:	bf00      	nop
 8003914:	20000111 	.word	0x20000111

08003918 <__sinit_lock_acquire>:
 8003918:	4801      	ldr	r0, [pc, #4]	; (8003920 <__sinit_lock_acquire+0x8>)
 800391a:	f000 b8a7 	b.w	8003a6c <__retarget_lock_acquire_recursive>
 800391e:	bf00      	nop
 8003920:	20000112 	.word	0x20000112

08003924 <__sinit_lock_release>:
 8003924:	4801      	ldr	r0, [pc, #4]	; (800392c <__sinit_lock_release+0x8>)
 8003926:	f000 b8a2 	b.w	8003a6e <__retarget_lock_release_recursive>
 800392a:	bf00      	nop
 800392c:	20000112 	.word	0x20000112

08003930 <__sinit>:
 8003930:	b510      	push	{r4, lr}
 8003932:	4604      	mov	r4, r0
 8003934:	f7ff fff0 	bl	8003918 <__sinit_lock_acquire>
 8003938:	69a3      	ldr	r3, [r4, #24]
 800393a:	b11b      	cbz	r3, 8003944 <__sinit+0x14>
 800393c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003940:	f7ff bff0 	b.w	8003924 <__sinit_lock_release>
 8003944:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003948:	6523      	str	r3, [r4, #80]	; 0x50
 800394a:	4b13      	ldr	r3, [pc, #76]	; (8003998 <__sinit+0x68>)
 800394c:	4a13      	ldr	r2, [pc, #76]	; (800399c <__sinit+0x6c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	62a2      	str	r2, [r4, #40]	; 0x28
 8003952:	42a3      	cmp	r3, r4
 8003954:	bf04      	itt	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	61a3      	streq	r3, [r4, #24]
 800395a:	4620      	mov	r0, r4
 800395c:	f000 f820 	bl	80039a0 <__sfp>
 8003960:	6060      	str	r0, [r4, #4]
 8003962:	4620      	mov	r0, r4
 8003964:	f000 f81c 	bl	80039a0 <__sfp>
 8003968:	60a0      	str	r0, [r4, #8]
 800396a:	4620      	mov	r0, r4
 800396c:	f000 f818 	bl	80039a0 <__sfp>
 8003970:	2200      	movs	r2, #0
 8003972:	60e0      	str	r0, [r4, #12]
 8003974:	2104      	movs	r1, #4
 8003976:	6860      	ldr	r0, [r4, #4]
 8003978:	f7ff ff82 	bl	8003880 <std>
 800397c:	68a0      	ldr	r0, [r4, #8]
 800397e:	2201      	movs	r2, #1
 8003980:	2109      	movs	r1, #9
 8003982:	f7ff ff7d 	bl	8003880 <std>
 8003986:	68e0      	ldr	r0, [r4, #12]
 8003988:	2202      	movs	r2, #2
 800398a:	2112      	movs	r1, #18
 800398c:	f7ff ff78 	bl	8003880 <std>
 8003990:	2301      	movs	r3, #1
 8003992:	61a3      	str	r3, [r4, #24]
 8003994:	e7d2      	b.n	800393c <__sinit+0xc>
 8003996:	bf00      	nop
 8003998:	080044d8 	.word	0x080044d8
 800399c:	080038c9 	.word	0x080038c9

080039a0 <__sfp>:
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a2:	4607      	mov	r7, r0
 80039a4:	f7ff ffac 	bl	8003900 <__sfp_lock_acquire>
 80039a8:	4b1e      	ldr	r3, [pc, #120]	; (8003a24 <__sfp+0x84>)
 80039aa:	681e      	ldr	r6, [r3, #0]
 80039ac:	69b3      	ldr	r3, [r6, #24]
 80039ae:	b913      	cbnz	r3, 80039b6 <__sfp+0x16>
 80039b0:	4630      	mov	r0, r6
 80039b2:	f7ff ffbd 	bl	8003930 <__sinit>
 80039b6:	3648      	adds	r6, #72	; 0x48
 80039b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80039bc:	3b01      	subs	r3, #1
 80039be:	d503      	bpl.n	80039c8 <__sfp+0x28>
 80039c0:	6833      	ldr	r3, [r6, #0]
 80039c2:	b30b      	cbz	r3, 8003a08 <__sfp+0x68>
 80039c4:	6836      	ldr	r6, [r6, #0]
 80039c6:	e7f7      	b.n	80039b8 <__sfp+0x18>
 80039c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80039cc:	b9d5      	cbnz	r5, 8003a04 <__sfp+0x64>
 80039ce:	4b16      	ldr	r3, [pc, #88]	; (8003a28 <__sfp+0x88>)
 80039d0:	60e3      	str	r3, [r4, #12]
 80039d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80039d6:	6665      	str	r5, [r4, #100]	; 0x64
 80039d8:	f000 f847 	bl	8003a6a <__retarget_lock_init_recursive>
 80039dc:	f7ff ff96 	bl	800390c <__sfp_lock_release>
 80039e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80039e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80039e8:	6025      	str	r5, [r4, #0]
 80039ea:	61a5      	str	r5, [r4, #24]
 80039ec:	2208      	movs	r2, #8
 80039ee:	4629      	mov	r1, r5
 80039f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80039f4:	f7ff fd2c 	bl	8003450 <memset>
 80039f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80039fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a00:	4620      	mov	r0, r4
 8003a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a04:	3468      	adds	r4, #104	; 0x68
 8003a06:	e7d9      	b.n	80039bc <__sfp+0x1c>
 8003a08:	2104      	movs	r1, #4
 8003a0a:	4638      	mov	r0, r7
 8003a0c:	f7ff ff62 	bl	80038d4 <__sfmoreglue>
 8003a10:	4604      	mov	r4, r0
 8003a12:	6030      	str	r0, [r6, #0]
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d1d5      	bne.n	80039c4 <__sfp+0x24>
 8003a18:	f7ff ff78 	bl	800390c <__sfp_lock_release>
 8003a1c:	230c      	movs	r3, #12
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	e7ee      	b.n	8003a00 <__sfp+0x60>
 8003a22:	bf00      	nop
 8003a24:	080044d8 	.word	0x080044d8
 8003a28:	ffff0001 	.word	0xffff0001

08003a2c <_fwalk_reent>:
 8003a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a30:	4606      	mov	r6, r0
 8003a32:	4688      	mov	r8, r1
 8003a34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a38:	2700      	movs	r7, #0
 8003a3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a3e:	f1b9 0901 	subs.w	r9, r9, #1
 8003a42:	d505      	bpl.n	8003a50 <_fwalk_reent+0x24>
 8003a44:	6824      	ldr	r4, [r4, #0]
 8003a46:	2c00      	cmp	r4, #0
 8003a48:	d1f7      	bne.n	8003a3a <_fwalk_reent+0xe>
 8003a4a:	4638      	mov	r0, r7
 8003a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a50:	89ab      	ldrh	r3, [r5, #12]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d907      	bls.n	8003a66 <_fwalk_reent+0x3a>
 8003a56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	d003      	beq.n	8003a66 <_fwalk_reent+0x3a>
 8003a5e:	4629      	mov	r1, r5
 8003a60:	4630      	mov	r0, r6
 8003a62:	47c0      	blx	r8
 8003a64:	4307      	orrs	r7, r0
 8003a66:	3568      	adds	r5, #104	; 0x68
 8003a68:	e7e9      	b.n	8003a3e <_fwalk_reent+0x12>

08003a6a <__retarget_lock_init_recursive>:
 8003a6a:	4770      	bx	lr

08003a6c <__retarget_lock_acquire_recursive>:
 8003a6c:	4770      	bx	lr

08003a6e <__retarget_lock_release_recursive>:
 8003a6e:	4770      	bx	lr

08003a70 <__swhatbuf_r>:
 8003a70:	b570      	push	{r4, r5, r6, lr}
 8003a72:	460e      	mov	r6, r1
 8003a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a78:	2900      	cmp	r1, #0
 8003a7a:	b096      	sub	sp, #88	; 0x58
 8003a7c:	4614      	mov	r4, r2
 8003a7e:	461d      	mov	r5, r3
 8003a80:	da08      	bge.n	8003a94 <__swhatbuf_r+0x24>
 8003a82:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	602a      	str	r2, [r5, #0]
 8003a8a:	061a      	lsls	r2, r3, #24
 8003a8c:	d410      	bmi.n	8003ab0 <__swhatbuf_r+0x40>
 8003a8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a92:	e00e      	b.n	8003ab2 <__swhatbuf_r+0x42>
 8003a94:	466a      	mov	r2, sp
 8003a96:	f000 fc95 	bl	80043c4 <_fstat_r>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	dbf1      	blt.n	8003a82 <__swhatbuf_r+0x12>
 8003a9e:	9a01      	ldr	r2, [sp, #4]
 8003aa0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003aa4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003aa8:	425a      	negs	r2, r3
 8003aaa:	415a      	adcs	r2, r3
 8003aac:	602a      	str	r2, [r5, #0]
 8003aae:	e7ee      	b.n	8003a8e <__swhatbuf_r+0x1e>
 8003ab0:	2340      	movs	r3, #64	; 0x40
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	6023      	str	r3, [r4, #0]
 8003ab6:	b016      	add	sp, #88	; 0x58
 8003ab8:	bd70      	pop	{r4, r5, r6, pc}
	...

08003abc <__smakebuf_r>:
 8003abc:	898b      	ldrh	r3, [r1, #12]
 8003abe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ac0:	079d      	lsls	r5, r3, #30
 8003ac2:	4606      	mov	r6, r0
 8003ac4:	460c      	mov	r4, r1
 8003ac6:	d507      	bpl.n	8003ad8 <__smakebuf_r+0x1c>
 8003ac8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003acc:	6023      	str	r3, [r4, #0]
 8003ace:	6123      	str	r3, [r4, #16]
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	6163      	str	r3, [r4, #20]
 8003ad4:	b002      	add	sp, #8
 8003ad6:	bd70      	pop	{r4, r5, r6, pc}
 8003ad8:	ab01      	add	r3, sp, #4
 8003ada:	466a      	mov	r2, sp
 8003adc:	f7ff ffc8 	bl	8003a70 <__swhatbuf_r>
 8003ae0:	9900      	ldr	r1, [sp, #0]
 8003ae2:	4605      	mov	r5, r0
 8003ae4:	4630      	mov	r0, r6
 8003ae6:	f000 f895 	bl	8003c14 <_malloc_r>
 8003aea:	b948      	cbnz	r0, 8003b00 <__smakebuf_r+0x44>
 8003aec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003af0:	059a      	lsls	r2, r3, #22
 8003af2:	d4ef      	bmi.n	8003ad4 <__smakebuf_r+0x18>
 8003af4:	f023 0303 	bic.w	r3, r3, #3
 8003af8:	f043 0302 	orr.w	r3, r3, #2
 8003afc:	81a3      	strh	r3, [r4, #12]
 8003afe:	e7e3      	b.n	8003ac8 <__smakebuf_r+0xc>
 8003b00:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <__smakebuf_r+0x7c>)
 8003b02:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b04:	89a3      	ldrh	r3, [r4, #12]
 8003b06:	6020      	str	r0, [r4, #0]
 8003b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b0c:	81a3      	strh	r3, [r4, #12]
 8003b0e:	9b00      	ldr	r3, [sp, #0]
 8003b10:	6163      	str	r3, [r4, #20]
 8003b12:	9b01      	ldr	r3, [sp, #4]
 8003b14:	6120      	str	r0, [r4, #16]
 8003b16:	b15b      	cbz	r3, 8003b30 <__smakebuf_r+0x74>
 8003b18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b1c:	4630      	mov	r0, r6
 8003b1e:	f000 fc63 	bl	80043e8 <_isatty_r>
 8003b22:	b128      	cbz	r0, 8003b30 <__smakebuf_r+0x74>
 8003b24:	89a3      	ldrh	r3, [r4, #12]
 8003b26:	f023 0303 	bic.w	r3, r3, #3
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	81a3      	strh	r3, [r4, #12]
 8003b30:	89a0      	ldrh	r0, [r4, #12]
 8003b32:	4305      	orrs	r5, r0
 8003b34:	81a5      	strh	r5, [r4, #12]
 8003b36:	e7cd      	b.n	8003ad4 <__smakebuf_r+0x18>
 8003b38:	080038c9 	.word	0x080038c9

08003b3c <_free_r>:
 8003b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b3e:	2900      	cmp	r1, #0
 8003b40:	d044      	beq.n	8003bcc <_free_r+0x90>
 8003b42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b46:	9001      	str	r0, [sp, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f1a1 0404 	sub.w	r4, r1, #4
 8003b4e:	bfb8      	it	lt
 8003b50:	18e4      	addlt	r4, r4, r3
 8003b52:	f000 fc6b 	bl	800442c <__malloc_lock>
 8003b56:	4a1e      	ldr	r2, [pc, #120]	; (8003bd0 <_free_r+0x94>)
 8003b58:	9801      	ldr	r0, [sp, #4]
 8003b5a:	6813      	ldr	r3, [r2, #0]
 8003b5c:	b933      	cbnz	r3, 8003b6c <_free_r+0x30>
 8003b5e:	6063      	str	r3, [r4, #4]
 8003b60:	6014      	str	r4, [r2, #0]
 8003b62:	b003      	add	sp, #12
 8003b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b68:	f000 bc66 	b.w	8004438 <__malloc_unlock>
 8003b6c:	42a3      	cmp	r3, r4
 8003b6e:	d908      	bls.n	8003b82 <_free_r+0x46>
 8003b70:	6825      	ldr	r5, [r4, #0]
 8003b72:	1961      	adds	r1, r4, r5
 8003b74:	428b      	cmp	r3, r1
 8003b76:	bf01      	itttt	eq
 8003b78:	6819      	ldreq	r1, [r3, #0]
 8003b7a:	685b      	ldreq	r3, [r3, #4]
 8003b7c:	1949      	addeq	r1, r1, r5
 8003b7e:	6021      	streq	r1, [r4, #0]
 8003b80:	e7ed      	b.n	8003b5e <_free_r+0x22>
 8003b82:	461a      	mov	r2, r3
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	b10b      	cbz	r3, 8003b8c <_free_r+0x50>
 8003b88:	42a3      	cmp	r3, r4
 8003b8a:	d9fa      	bls.n	8003b82 <_free_r+0x46>
 8003b8c:	6811      	ldr	r1, [r2, #0]
 8003b8e:	1855      	adds	r5, r2, r1
 8003b90:	42a5      	cmp	r5, r4
 8003b92:	d10b      	bne.n	8003bac <_free_r+0x70>
 8003b94:	6824      	ldr	r4, [r4, #0]
 8003b96:	4421      	add	r1, r4
 8003b98:	1854      	adds	r4, r2, r1
 8003b9a:	42a3      	cmp	r3, r4
 8003b9c:	6011      	str	r1, [r2, #0]
 8003b9e:	d1e0      	bne.n	8003b62 <_free_r+0x26>
 8003ba0:	681c      	ldr	r4, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	6053      	str	r3, [r2, #4]
 8003ba6:	4421      	add	r1, r4
 8003ba8:	6011      	str	r1, [r2, #0]
 8003baa:	e7da      	b.n	8003b62 <_free_r+0x26>
 8003bac:	d902      	bls.n	8003bb4 <_free_r+0x78>
 8003bae:	230c      	movs	r3, #12
 8003bb0:	6003      	str	r3, [r0, #0]
 8003bb2:	e7d6      	b.n	8003b62 <_free_r+0x26>
 8003bb4:	6825      	ldr	r5, [r4, #0]
 8003bb6:	1961      	adds	r1, r4, r5
 8003bb8:	428b      	cmp	r3, r1
 8003bba:	bf04      	itt	eq
 8003bbc:	6819      	ldreq	r1, [r3, #0]
 8003bbe:	685b      	ldreq	r3, [r3, #4]
 8003bc0:	6063      	str	r3, [r4, #4]
 8003bc2:	bf04      	itt	eq
 8003bc4:	1949      	addeq	r1, r1, r5
 8003bc6:	6021      	streq	r1, [r4, #0]
 8003bc8:	6054      	str	r4, [r2, #4]
 8003bca:	e7ca      	b.n	8003b62 <_free_r+0x26>
 8003bcc:	b003      	add	sp, #12
 8003bce:	bd30      	pop	{r4, r5, pc}
 8003bd0:	20000114 	.word	0x20000114

08003bd4 <sbrk_aligned>:
 8003bd4:	b570      	push	{r4, r5, r6, lr}
 8003bd6:	4e0e      	ldr	r6, [pc, #56]	; (8003c10 <sbrk_aligned+0x3c>)
 8003bd8:	460c      	mov	r4, r1
 8003bda:	6831      	ldr	r1, [r6, #0]
 8003bdc:	4605      	mov	r5, r0
 8003bde:	b911      	cbnz	r1, 8003be6 <sbrk_aligned+0x12>
 8003be0:	f000 fb7a 	bl	80042d8 <_sbrk_r>
 8003be4:	6030      	str	r0, [r6, #0]
 8003be6:	4621      	mov	r1, r4
 8003be8:	4628      	mov	r0, r5
 8003bea:	f000 fb75 	bl	80042d8 <_sbrk_r>
 8003bee:	1c43      	adds	r3, r0, #1
 8003bf0:	d00a      	beq.n	8003c08 <sbrk_aligned+0x34>
 8003bf2:	1cc4      	adds	r4, r0, #3
 8003bf4:	f024 0403 	bic.w	r4, r4, #3
 8003bf8:	42a0      	cmp	r0, r4
 8003bfa:	d007      	beq.n	8003c0c <sbrk_aligned+0x38>
 8003bfc:	1a21      	subs	r1, r4, r0
 8003bfe:	4628      	mov	r0, r5
 8003c00:	f000 fb6a 	bl	80042d8 <_sbrk_r>
 8003c04:	3001      	adds	r0, #1
 8003c06:	d101      	bne.n	8003c0c <sbrk_aligned+0x38>
 8003c08:	f04f 34ff 	mov.w	r4, #4294967295
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	bd70      	pop	{r4, r5, r6, pc}
 8003c10:	20000118 	.word	0x20000118

08003c14 <_malloc_r>:
 8003c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c18:	1ccd      	adds	r5, r1, #3
 8003c1a:	f025 0503 	bic.w	r5, r5, #3
 8003c1e:	3508      	adds	r5, #8
 8003c20:	2d0c      	cmp	r5, #12
 8003c22:	bf38      	it	cc
 8003c24:	250c      	movcc	r5, #12
 8003c26:	2d00      	cmp	r5, #0
 8003c28:	4607      	mov	r7, r0
 8003c2a:	db01      	blt.n	8003c30 <_malloc_r+0x1c>
 8003c2c:	42a9      	cmp	r1, r5
 8003c2e:	d905      	bls.n	8003c3c <_malloc_r+0x28>
 8003c30:	230c      	movs	r3, #12
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	2600      	movs	r6, #0
 8003c36:	4630      	mov	r0, r6
 8003c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c3c:	4e2e      	ldr	r6, [pc, #184]	; (8003cf8 <_malloc_r+0xe4>)
 8003c3e:	f000 fbf5 	bl	800442c <__malloc_lock>
 8003c42:	6833      	ldr	r3, [r6, #0]
 8003c44:	461c      	mov	r4, r3
 8003c46:	bb34      	cbnz	r4, 8003c96 <_malloc_r+0x82>
 8003c48:	4629      	mov	r1, r5
 8003c4a:	4638      	mov	r0, r7
 8003c4c:	f7ff ffc2 	bl	8003bd4 <sbrk_aligned>
 8003c50:	1c43      	adds	r3, r0, #1
 8003c52:	4604      	mov	r4, r0
 8003c54:	d14d      	bne.n	8003cf2 <_malloc_r+0xde>
 8003c56:	6834      	ldr	r4, [r6, #0]
 8003c58:	4626      	mov	r6, r4
 8003c5a:	2e00      	cmp	r6, #0
 8003c5c:	d140      	bne.n	8003ce0 <_malloc_r+0xcc>
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	4631      	mov	r1, r6
 8003c62:	4638      	mov	r0, r7
 8003c64:	eb04 0803 	add.w	r8, r4, r3
 8003c68:	f000 fb36 	bl	80042d8 <_sbrk_r>
 8003c6c:	4580      	cmp	r8, r0
 8003c6e:	d13a      	bne.n	8003ce6 <_malloc_r+0xd2>
 8003c70:	6821      	ldr	r1, [r4, #0]
 8003c72:	3503      	adds	r5, #3
 8003c74:	1a6d      	subs	r5, r5, r1
 8003c76:	f025 0503 	bic.w	r5, r5, #3
 8003c7a:	3508      	adds	r5, #8
 8003c7c:	2d0c      	cmp	r5, #12
 8003c7e:	bf38      	it	cc
 8003c80:	250c      	movcc	r5, #12
 8003c82:	4629      	mov	r1, r5
 8003c84:	4638      	mov	r0, r7
 8003c86:	f7ff ffa5 	bl	8003bd4 <sbrk_aligned>
 8003c8a:	3001      	adds	r0, #1
 8003c8c:	d02b      	beq.n	8003ce6 <_malloc_r+0xd2>
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	442b      	add	r3, r5
 8003c92:	6023      	str	r3, [r4, #0]
 8003c94:	e00e      	b.n	8003cb4 <_malloc_r+0xa0>
 8003c96:	6822      	ldr	r2, [r4, #0]
 8003c98:	1b52      	subs	r2, r2, r5
 8003c9a:	d41e      	bmi.n	8003cda <_malloc_r+0xc6>
 8003c9c:	2a0b      	cmp	r2, #11
 8003c9e:	d916      	bls.n	8003cce <_malloc_r+0xba>
 8003ca0:	1961      	adds	r1, r4, r5
 8003ca2:	42a3      	cmp	r3, r4
 8003ca4:	6025      	str	r5, [r4, #0]
 8003ca6:	bf18      	it	ne
 8003ca8:	6059      	strne	r1, [r3, #4]
 8003caa:	6863      	ldr	r3, [r4, #4]
 8003cac:	bf08      	it	eq
 8003cae:	6031      	streq	r1, [r6, #0]
 8003cb0:	5162      	str	r2, [r4, r5]
 8003cb2:	604b      	str	r3, [r1, #4]
 8003cb4:	4638      	mov	r0, r7
 8003cb6:	f104 060b 	add.w	r6, r4, #11
 8003cba:	f000 fbbd 	bl	8004438 <__malloc_unlock>
 8003cbe:	f026 0607 	bic.w	r6, r6, #7
 8003cc2:	1d23      	adds	r3, r4, #4
 8003cc4:	1af2      	subs	r2, r6, r3
 8003cc6:	d0b6      	beq.n	8003c36 <_malloc_r+0x22>
 8003cc8:	1b9b      	subs	r3, r3, r6
 8003cca:	50a3      	str	r3, [r4, r2]
 8003ccc:	e7b3      	b.n	8003c36 <_malloc_r+0x22>
 8003cce:	6862      	ldr	r2, [r4, #4]
 8003cd0:	42a3      	cmp	r3, r4
 8003cd2:	bf0c      	ite	eq
 8003cd4:	6032      	streq	r2, [r6, #0]
 8003cd6:	605a      	strne	r2, [r3, #4]
 8003cd8:	e7ec      	b.n	8003cb4 <_malloc_r+0xa0>
 8003cda:	4623      	mov	r3, r4
 8003cdc:	6864      	ldr	r4, [r4, #4]
 8003cde:	e7b2      	b.n	8003c46 <_malloc_r+0x32>
 8003ce0:	4634      	mov	r4, r6
 8003ce2:	6876      	ldr	r6, [r6, #4]
 8003ce4:	e7b9      	b.n	8003c5a <_malloc_r+0x46>
 8003ce6:	230c      	movs	r3, #12
 8003ce8:	603b      	str	r3, [r7, #0]
 8003cea:	4638      	mov	r0, r7
 8003cec:	f000 fba4 	bl	8004438 <__malloc_unlock>
 8003cf0:	e7a1      	b.n	8003c36 <_malloc_r+0x22>
 8003cf2:	6025      	str	r5, [r4, #0]
 8003cf4:	e7de      	b.n	8003cb4 <_malloc_r+0xa0>
 8003cf6:	bf00      	nop
 8003cf8:	20000114 	.word	0x20000114

08003cfc <__sfputc_r>:
 8003cfc:	6893      	ldr	r3, [r2, #8]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	b410      	push	{r4}
 8003d04:	6093      	str	r3, [r2, #8]
 8003d06:	da08      	bge.n	8003d1a <__sfputc_r+0x1e>
 8003d08:	6994      	ldr	r4, [r2, #24]
 8003d0a:	42a3      	cmp	r3, r4
 8003d0c:	db01      	blt.n	8003d12 <__sfputc_r+0x16>
 8003d0e:	290a      	cmp	r1, #10
 8003d10:	d103      	bne.n	8003d1a <__sfputc_r+0x1e>
 8003d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d16:	f7ff bc31 	b.w	800357c <__swbuf_r>
 8003d1a:	6813      	ldr	r3, [r2, #0]
 8003d1c:	1c58      	adds	r0, r3, #1
 8003d1e:	6010      	str	r0, [r2, #0]
 8003d20:	7019      	strb	r1, [r3, #0]
 8003d22:	4608      	mov	r0, r1
 8003d24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <__sfputs_r>:
 8003d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2c:	4606      	mov	r6, r0
 8003d2e:	460f      	mov	r7, r1
 8003d30:	4614      	mov	r4, r2
 8003d32:	18d5      	adds	r5, r2, r3
 8003d34:	42ac      	cmp	r4, r5
 8003d36:	d101      	bne.n	8003d3c <__sfputs_r+0x12>
 8003d38:	2000      	movs	r0, #0
 8003d3a:	e007      	b.n	8003d4c <__sfputs_r+0x22>
 8003d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d40:	463a      	mov	r2, r7
 8003d42:	4630      	mov	r0, r6
 8003d44:	f7ff ffda 	bl	8003cfc <__sfputc_r>
 8003d48:	1c43      	adds	r3, r0, #1
 8003d4a:	d1f3      	bne.n	8003d34 <__sfputs_r+0xa>
 8003d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d50 <_vfiprintf_r>:
 8003d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d54:	460d      	mov	r5, r1
 8003d56:	b09d      	sub	sp, #116	; 0x74
 8003d58:	4614      	mov	r4, r2
 8003d5a:	4698      	mov	r8, r3
 8003d5c:	4606      	mov	r6, r0
 8003d5e:	b118      	cbz	r0, 8003d68 <_vfiprintf_r+0x18>
 8003d60:	6983      	ldr	r3, [r0, #24]
 8003d62:	b90b      	cbnz	r3, 8003d68 <_vfiprintf_r+0x18>
 8003d64:	f7ff fde4 	bl	8003930 <__sinit>
 8003d68:	4b89      	ldr	r3, [pc, #548]	; (8003f90 <_vfiprintf_r+0x240>)
 8003d6a:	429d      	cmp	r5, r3
 8003d6c:	d11b      	bne.n	8003da6 <_vfiprintf_r+0x56>
 8003d6e:	6875      	ldr	r5, [r6, #4]
 8003d70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d72:	07d9      	lsls	r1, r3, #31
 8003d74:	d405      	bmi.n	8003d82 <_vfiprintf_r+0x32>
 8003d76:	89ab      	ldrh	r3, [r5, #12]
 8003d78:	059a      	lsls	r2, r3, #22
 8003d7a:	d402      	bmi.n	8003d82 <_vfiprintf_r+0x32>
 8003d7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d7e:	f7ff fe75 	bl	8003a6c <__retarget_lock_acquire_recursive>
 8003d82:	89ab      	ldrh	r3, [r5, #12]
 8003d84:	071b      	lsls	r3, r3, #28
 8003d86:	d501      	bpl.n	8003d8c <_vfiprintf_r+0x3c>
 8003d88:	692b      	ldr	r3, [r5, #16]
 8003d8a:	b9eb      	cbnz	r3, 8003dc8 <_vfiprintf_r+0x78>
 8003d8c:	4629      	mov	r1, r5
 8003d8e:	4630      	mov	r0, r6
 8003d90:	f7ff fc46 	bl	8003620 <__swsetup_r>
 8003d94:	b1c0      	cbz	r0, 8003dc8 <_vfiprintf_r+0x78>
 8003d96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d98:	07dc      	lsls	r4, r3, #31
 8003d9a:	d50e      	bpl.n	8003dba <_vfiprintf_r+0x6a>
 8003d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003da0:	b01d      	add	sp, #116	; 0x74
 8003da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003da6:	4b7b      	ldr	r3, [pc, #492]	; (8003f94 <_vfiprintf_r+0x244>)
 8003da8:	429d      	cmp	r5, r3
 8003daa:	d101      	bne.n	8003db0 <_vfiprintf_r+0x60>
 8003dac:	68b5      	ldr	r5, [r6, #8]
 8003dae:	e7df      	b.n	8003d70 <_vfiprintf_r+0x20>
 8003db0:	4b79      	ldr	r3, [pc, #484]	; (8003f98 <_vfiprintf_r+0x248>)
 8003db2:	429d      	cmp	r5, r3
 8003db4:	bf08      	it	eq
 8003db6:	68f5      	ldreq	r5, [r6, #12]
 8003db8:	e7da      	b.n	8003d70 <_vfiprintf_r+0x20>
 8003dba:	89ab      	ldrh	r3, [r5, #12]
 8003dbc:	0598      	lsls	r0, r3, #22
 8003dbe:	d4ed      	bmi.n	8003d9c <_vfiprintf_r+0x4c>
 8003dc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003dc2:	f7ff fe54 	bl	8003a6e <__retarget_lock_release_recursive>
 8003dc6:	e7e9      	b.n	8003d9c <_vfiprintf_r+0x4c>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	9309      	str	r3, [sp, #36]	; 0x24
 8003dcc:	2320      	movs	r3, #32
 8003dce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003dd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dd6:	2330      	movs	r3, #48	; 0x30
 8003dd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003f9c <_vfiprintf_r+0x24c>
 8003ddc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003de0:	f04f 0901 	mov.w	r9, #1
 8003de4:	4623      	mov	r3, r4
 8003de6:	469a      	mov	sl, r3
 8003de8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dec:	b10a      	cbz	r2, 8003df2 <_vfiprintf_r+0xa2>
 8003dee:	2a25      	cmp	r2, #37	; 0x25
 8003df0:	d1f9      	bne.n	8003de6 <_vfiprintf_r+0x96>
 8003df2:	ebba 0b04 	subs.w	fp, sl, r4
 8003df6:	d00b      	beq.n	8003e10 <_vfiprintf_r+0xc0>
 8003df8:	465b      	mov	r3, fp
 8003dfa:	4622      	mov	r2, r4
 8003dfc:	4629      	mov	r1, r5
 8003dfe:	4630      	mov	r0, r6
 8003e00:	f7ff ff93 	bl	8003d2a <__sfputs_r>
 8003e04:	3001      	adds	r0, #1
 8003e06:	f000 80aa 	beq.w	8003f5e <_vfiprintf_r+0x20e>
 8003e0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e0c:	445a      	add	r2, fp
 8003e0e:	9209      	str	r2, [sp, #36]	; 0x24
 8003e10:	f89a 3000 	ldrb.w	r3, [sl]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 80a2 	beq.w	8003f5e <_vfiprintf_r+0x20e>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e24:	f10a 0a01 	add.w	sl, sl, #1
 8003e28:	9304      	str	r3, [sp, #16]
 8003e2a:	9307      	str	r3, [sp, #28]
 8003e2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e30:	931a      	str	r3, [sp, #104]	; 0x68
 8003e32:	4654      	mov	r4, sl
 8003e34:	2205      	movs	r2, #5
 8003e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e3a:	4858      	ldr	r0, [pc, #352]	; (8003f9c <_vfiprintf_r+0x24c>)
 8003e3c:	f7fc f9d8 	bl	80001f0 <memchr>
 8003e40:	9a04      	ldr	r2, [sp, #16]
 8003e42:	b9d8      	cbnz	r0, 8003e7c <_vfiprintf_r+0x12c>
 8003e44:	06d1      	lsls	r1, r2, #27
 8003e46:	bf44      	itt	mi
 8003e48:	2320      	movmi	r3, #32
 8003e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e4e:	0713      	lsls	r3, r2, #28
 8003e50:	bf44      	itt	mi
 8003e52:	232b      	movmi	r3, #43	; 0x2b
 8003e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e58:	f89a 3000 	ldrb.w	r3, [sl]
 8003e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e5e:	d015      	beq.n	8003e8c <_vfiprintf_r+0x13c>
 8003e60:	9a07      	ldr	r2, [sp, #28]
 8003e62:	4654      	mov	r4, sl
 8003e64:	2000      	movs	r0, #0
 8003e66:	f04f 0c0a 	mov.w	ip, #10
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e70:	3b30      	subs	r3, #48	; 0x30
 8003e72:	2b09      	cmp	r3, #9
 8003e74:	d94e      	bls.n	8003f14 <_vfiprintf_r+0x1c4>
 8003e76:	b1b0      	cbz	r0, 8003ea6 <_vfiprintf_r+0x156>
 8003e78:	9207      	str	r2, [sp, #28]
 8003e7a:	e014      	b.n	8003ea6 <_vfiprintf_r+0x156>
 8003e7c:	eba0 0308 	sub.w	r3, r0, r8
 8003e80:	fa09 f303 	lsl.w	r3, r9, r3
 8003e84:	4313      	orrs	r3, r2
 8003e86:	9304      	str	r3, [sp, #16]
 8003e88:	46a2      	mov	sl, r4
 8003e8a:	e7d2      	b.n	8003e32 <_vfiprintf_r+0xe2>
 8003e8c:	9b03      	ldr	r3, [sp, #12]
 8003e8e:	1d19      	adds	r1, r3, #4
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	9103      	str	r1, [sp, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	bfbb      	ittet	lt
 8003e98:	425b      	neglt	r3, r3
 8003e9a:	f042 0202 	orrlt.w	r2, r2, #2
 8003e9e:	9307      	strge	r3, [sp, #28]
 8003ea0:	9307      	strlt	r3, [sp, #28]
 8003ea2:	bfb8      	it	lt
 8003ea4:	9204      	strlt	r2, [sp, #16]
 8003ea6:	7823      	ldrb	r3, [r4, #0]
 8003ea8:	2b2e      	cmp	r3, #46	; 0x2e
 8003eaa:	d10c      	bne.n	8003ec6 <_vfiprintf_r+0x176>
 8003eac:	7863      	ldrb	r3, [r4, #1]
 8003eae:	2b2a      	cmp	r3, #42	; 0x2a
 8003eb0:	d135      	bne.n	8003f1e <_vfiprintf_r+0x1ce>
 8003eb2:	9b03      	ldr	r3, [sp, #12]
 8003eb4:	1d1a      	adds	r2, r3, #4
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	9203      	str	r2, [sp, #12]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	bfb8      	it	lt
 8003ebe:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ec2:	3402      	adds	r4, #2
 8003ec4:	9305      	str	r3, [sp, #20]
 8003ec6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003fac <_vfiprintf_r+0x25c>
 8003eca:	7821      	ldrb	r1, [r4, #0]
 8003ecc:	2203      	movs	r2, #3
 8003ece:	4650      	mov	r0, sl
 8003ed0:	f7fc f98e 	bl	80001f0 <memchr>
 8003ed4:	b140      	cbz	r0, 8003ee8 <_vfiprintf_r+0x198>
 8003ed6:	2340      	movs	r3, #64	; 0x40
 8003ed8:	eba0 000a 	sub.w	r0, r0, sl
 8003edc:	fa03 f000 	lsl.w	r0, r3, r0
 8003ee0:	9b04      	ldr	r3, [sp, #16]
 8003ee2:	4303      	orrs	r3, r0
 8003ee4:	3401      	adds	r4, #1
 8003ee6:	9304      	str	r3, [sp, #16]
 8003ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eec:	482c      	ldr	r0, [pc, #176]	; (8003fa0 <_vfiprintf_r+0x250>)
 8003eee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ef2:	2206      	movs	r2, #6
 8003ef4:	f7fc f97c 	bl	80001f0 <memchr>
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d03f      	beq.n	8003f7c <_vfiprintf_r+0x22c>
 8003efc:	4b29      	ldr	r3, [pc, #164]	; (8003fa4 <_vfiprintf_r+0x254>)
 8003efe:	bb1b      	cbnz	r3, 8003f48 <_vfiprintf_r+0x1f8>
 8003f00:	9b03      	ldr	r3, [sp, #12]
 8003f02:	3307      	adds	r3, #7
 8003f04:	f023 0307 	bic.w	r3, r3, #7
 8003f08:	3308      	adds	r3, #8
 8003f0a:	9303      	str	r3, [sp, #12]
 8003f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f0e:	443b      	add	r3, r7
 8003f10:	9309      	str	r3, [sp, #36]	; 0x24
 8003f12:	e767      	b.n	8003de4 <_vfiprintf_r+0x94>
 8003f14:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f18:	460c      	mov	r4, r1
 8003f1a:	2001      	movs	r0, #1
 8003f1c:	e7a5      	b.n	8003e6a <_vfiprintf_r+0x11a>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	3401      	adds	r4, #1
 8003f22:	9305      	str	r3, [sp, #20]
 8003f24:	4619      	mov	r1, r3
 8003f26:	f04f 0c0a 	mov.w	ip, #10
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f30:	3a30      	subs	r2, #48	; 0x30
 8003f32:	2a09      	cmp	r2, #9
 8003f34:	d903      	bls.n	8003f3e <_vfiprintf_r+0x1ee>
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0c5      	beq.n	8003ec6 <_vfiprintf_r+0x176>
 8003f3a:	9105      	str	r1, [sp, #20]
 8003f3c:	e7c3      	b.n	8003ec6 <_vfiprintf_r+0x176>
 8003f3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f42:	4604      	mov	r4, r0
 8003f44:	2301      	movs	r3, #1
 8003f46:	e7f0      	b.n	8003f2a <_vfiprintf_r+0x1da>
 8003f48:	ab03      	add	r3, sp, #12
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	462a      	mov	r2, r5
 8003f4e:	4b16      	ldr	r3, [pc, #88]	; (8003fa8 <_vfiprintf_r+0x258>)
 8003f50:	a904      	add	r1, sp, #16
 8003f52:	4630      	mov	r0, r6
 8003f54:	f3af 8000 	nop.w
 8003f58:	4607      	mov	r7, r0
 8003f5a:	1c78      	adds	r0, r7, #1
 8003f5c:	d1d6      	bne.n	8003f0c <_vfiprintf_r+0x1bc>
 8003f5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f60:	07d9      	lsls	r1, r3, #31
 8003f62:	d405      	bmi.n	8003f70 <_vfiprintf_r+0x220>
 8003f64:	89ab      	ldrh	r3, [r5, #12]
 8003f66:	059a      	lsls	r2, r3, #22
 8003f68:	d402      	bmi.n	8003f70 <_vfiprintf_r+0x220>
 8003f6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f6c:	f7ff fd7f 	bl	8003a6e <__retarget_lock_release_recursive>
 8003f70:	89ab      	ldrh	r3, [r5, #12]
 8003f72:	065b      	lsls	r3, r3, #25
 8003f74:	f53f af12 	bmi.w	8003d9c <_vfiprintf_r+0x4c>
 8003f78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f7a:	e711      	b.n	8003da0 <_vfiprintf_r+0x50>
 8003f7c:	ab03      	add	r3, sp, #12
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	462a      	mov	r2, r5
 8003f82:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <_vfiprintf_r+0x258>)
 8003f84:	a904      	add	r1, sp, #16
 8003f86:	4630      	mov	r0, r6
 8003f88:	f000 f880 	bl	800408c <_printf_i>
 8003f8c:	e7e4      	b.n	8003f58 <_vfiprintf_r+0x208>
 8003f8e:	bf00      	nop
 8003f90:	080044fc 	.word	0x080044fc
 8003f94:	0800451c 	.word	0x0800451c
 8003f98:	080044dc 	.word	0x080044dc
 8003f9c:	0800453c 	.word	0x0800453c
 8003fa0:	08004546 	.word	0x08004546
 8003fa4:	00000000 	.word	0x00000000
 8003fa8:	08003d2b 	.word	0x08003d2b
 8003fac:	08004542 	.word	0x08004542

08003fb0 <_printf_common>:
 8003fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb4:	4616      	mov	r6, r2
 8003fb6:	4699      	mov	r9, r3
 8003fb8:	688a      	ldr	r2, [r1, #8]
 8003fba:	690b      	ldr	r3, [r1, #16]
 8003fbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	bfb8      	it	lt
 8003fc4:	4613      	movlt	r3, r2
 8003fc6:	6033      	str	r3, [r6, #0]
 8003fc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fcc:	4607      	mov	r7, r0
 8003fce:	460c      	mov	r4, r1
 8003fd0:	b10a      	cbz	r2, 8003fd6 <_printf_common+0x26>
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	6033      	str	r3, [r6, #0]
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	0699      	lsls	r1, r3, #26
 8003fda:	bf42      	ittt	mi
 8003fdc:	6833      	ldrmi	r3, [r6, #0]
 8003fde:	3302      	addmi	r3, #2
 8003fe0:	6033      	strmi	r3, [r6, #0]
 8003fe2:	6825      	ldr	r5, [r4, #0]
 8003fe4:	f015 0506 	ands.w	r5, r5, #6
 8003fe8:	d106      	bne.n	8003ff8 <_printf_common+0x48>
 8003fea:	f104 0a19 	add.w	sl, r4, #25
 8003fee:	68e3      	ldr	r3, [r4, #12]
 8003ff0:	6832      	ldr	r2, [r6, #0]
 8003ff2:	1a9b      	subs	r3, r3, r2
 8003ff4:	42ab      	cmp	r3, r5
 8003ff6:	dc26      	bgt.n	8004046 <_printf_common+0x96>
 8003ff8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ffc:	1e13      	subs	r3, r2, #0
 8003ffe:	6822      	ldr	r2, [r4, #0]
 8004000:	bf18      	it	ne
 8004002:	2301      	movne	r3, #1
 8004004:	0692      	lsls	r2, r2, #26
 8004006:	d42b      	bmi.n	8004060 <_printf_common+0xb0>
 8004008:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800400c:	4649      	mov	r1, r9
 800400e:	4638      	mov	r0, r7
 8004010:	47c0      	blx	r8
 8004012:	3001      	adds	r0, #1
 8004014:	d01e      	beq.n	8004054 <_printf_common+0xa4>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	68e5      	ldr	r5, [r4, #12]
 800401a:	6832      	ldr	r2, [r6, #0]
 800401c:	f003 0306 	and.w	r3, r3, #6
 8004020:	2b04      	cmp	r3, #4
 8004022:	bf08      	it	eq
 8004024:	1aad      	subeq	r5, r5, r2
 8004026:	68a3      	ldr	r3, [r4, #8]
 8004028:	6922      	ldr	r2, [r4, #16]
 800402a:	bf0c      	ite	eq
 800402c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004030:	2500      	movne	r5, #0
 8004032:	4293      	cmp	r3, r2
 8004034:	bfc4      	itt	gt
 8004036:	1a9b      	subgt	r3, r3, r2
 8004038:	18ed      	addgt	r5, r5, r3
 800403a:	2600      	movs	r6, #0
 800403c:	341a      	adds	r4, #26
 800403e:	42b5      	cmp	r5, r6
 8004040:	d11a      	bne.n	8004078 <_printf_common+0xc8>
 8004042:	2000      	movs	r0, #0
 8004044:	e008      	b.n	8004058 <_printf_common+0xa8>
 8004046:	2301      	movs	r3, #1
 8004048:	4652      	mov	r2, sl
 800404a:	4649      	mov	r1, r9
 800404c:	4638      	mov	r0, r7
 800404e:	47c0      	blx	r8
 8004050:	3001      	adds	r0, #1
 8004052:	d103      	bne.n	800405c <_printf_common+0xac>
 8004054:	f04f 30ff 	mov.w	r0, #4294967295
 8004058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800405c:	3501      	adds	r5, #1
 800405e:	e7c6      	b.n	8003fee <_printf_common+0x3e>
 8004060:	18e1      	adds	r1, r4, r3
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	2030      	movs	r0, #48	; 0x30
 8004066:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800406a:	4422      	add	r2, r4
 800406c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004070:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004074:	3302      	adds	r3, #2
 8004076:	e7c7      	b.n	8004008 <_printf_common+0x58>
 8004078:	2301      	movs	r3, #1
 800407a:	4622      	mov	r2, r4
 800407c:	4649      	mov	r1, r9
 800407e:	4638      	mov	r0, r7
 8004080:	47c0      	blx	r8
 8004082:	3001      	adds	r0, #1
 8004084:	d0e6      	beq.n	8004054 <_printf_common+0xa4>
 8004086:	3601      	adds	r6, #1
 8004088:	e7d9      	b.n	800403e <_printf_common+0x8e>
	...

0800408c <_printf_i>:
 800408c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004090:	7e0f      	ldrb	r7, [r1, #24]
 8004092:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004094:	2f78      	cmp	r7, #120	; 0x78
 8004096:	4691      	mov	r9, r2
 8004098:	4680      	mov	r8, r0
 800409a:	460c      	mov	r4, r1
 800409c:	469a      	mov	sl, r3
 800409e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040a2:	d807      	bhi.n	80040b4 <_printf_i+0x28>
 80040a4:	2f62      	cmp	r7, #98	; 0x62
 80040a6:	d80a      	bhi.n	80040be <_printf_i+0x32>
 80040a8:	2f00      	cmp	r7, #0
 80040aa:	f000 80d8 	beq.w	800425e <_printf_i+0x1d2>
 80040ae:	2f58      	cmp	r7, #88	; 0x58
 80040b0:	f000 80a3 	beq.w	80041fa <_printf_i+0x16e>
 80040b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040bc:	e03a      	b.n	8004134 <_printf_i+0xa8>
 80040be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040c2:	2b15      	cmp	r3, #21
 80040c4:	d8f6      	bhi.n	80040b4 <_printf_i+0x28>
 80040c6:	a101      	add	r1, pc, #4	; (adr r1, 80040cc <_printf_i+0x40>)
 80040c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040cc:	08004125 	.word	0x08004125
 80040d0:	08004139 	.word	0x08004139
 80040d4:	080040b5 	.word	0x080040b5
 80040d8:	080040b5 	.word	0x080040b5
 80040dc:	080040b5 	.word	0x080040b5
 80040e0:	080040b5 	.word	0x080040b5
 80040e4:	08004139 	.word	0x08004139
 80040e8:	080040b5 	.word	0x080040b5
 80040ec:	080040b5 	.word	0x080040b5
 80040f0:	080040b5 	.word	0x080040b5
 80040f4:	080040b5 	.word	0x080040b5
 80040f8:	08004245 	.word	0x08004245
 80040fc:	08004169 	.word	0x08004169
 8004100:	08004227 	.word	0x08004227
 8004104:	080040b5 	.word	0x080040b5
 8004108:	080040b5 	.word	0x080040b5
 800410c:	08004267 	.word	0x08004267
 8004110:	080040b5 	.word	0x080040b5
 8004114:	08004169 	.word	0x08004169
 8004118:	080040b5 	.word	0x080040b5
 800411c:	080040b5 	.word	0x080040b5
 8004120:	0800422f 	.word	0x0800422f
 8004124:	682b      	ldr	r3, [r5, #0]
 8004126:	1d1a      	adds	r2, r3, #4
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	602a      	str	r2, [r5, #0]
 800412c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004134:	2301      	movs	r3, #1
 8004136:	e0a3      	b.n	8004280 <_printf_i+0x1f4>
 8004138:	6820      	ldr	r0, [r4, #0]
 800413a:	6829      	ldr	r1, [r5, #0]
 800413c:	0606      	lsls	r6, r0, #24
 800413e:	f101 0304 	add.w	r3, r1, #4
 8004142:	d50a      	bpl.n	800415a <_printf_i+0xce>
 8004144:	680e      	ldr	r6, [r1, #0]
 8004146:	602b      	str	r3, [r5, #0]
 8004148:	2e00      	cmp	r6, #0
 800414a:	da03      	bge.n	8004154 <_printf_i+0xc8>
 800414c:	232d      	movs	r3, #45	; 0x2d
 800414e:	4276      	negs	r6, r6
 8004150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004154:	485e      	ldr	r0, [pc, #376]	; (80042d0 <_printf_i+0x244>)
 8004156:	230a      	movs	r3, #10
 8004158:	e019      	b.n	800418e <_printf_i+0x102>
 800415a:	680e      	ldr	r6, [r1, #0]
 800415c:	602b      	str	r3, [r5, #0]
 800415e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004162:	bf18      	it	ne
 8004164:	b236      	sxthne	r6, r6
 8004166:	e7ef      	b.n	8004148 <_printf_i+0xbc>
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	6820      	ldr	r0, [r4, #0]
 800416c:	1d19      	adds	r1, r3, #4
 800416e:	6029      	str	r1, [r5, #0]
 8004170:	0601      	lsls	r1, r0, #24
 8004172:	d501      	bpl.n	8004178 <_printf_i+0xec>
 8004174:	681e      	ldr	r6, [r3, #0]
 8004176:	e002      	b.n	800417e <_printf_i+0xf2>
 8004178:	0646      	lsls	r6, r0, #25
 800417a:	d5fb      	bpl.n	8004174 <_printf_i+0xe8>
 800417c:	881e      	ldrh	r6, [r3, #0]
 800417e:	4854      	ldr	r0, [pc, #336]	; (80042d0 <_printf_i+0x244>)
 8004180:	2f6f      	cmp	r7, #111	; 0x6f
 8004182:	bf0c      	ite	eq
 8004184:	2308      	moveq	r3, #8
 8004186:	230a      	movne	r3, #10
 8004188:	2100      	movs	r1, #0
 800418a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800418e:	6865      	ldr	r5, [r4, #4]
 8004190:	60a5      	str	r5, [r4, #8]
 8004192:	2d00      	cmp	r5, #0
 8004194:	bfa2      	ittt	ge
 8004196:	6821      	ldrge	r1, [r4, #0]
 8004198:	f021 0104 	bicge.w	r1, r1, #4
 800419c:	6021      	strge	r1, [r4, #0]
 800419e:	b90e      	cbnz	r6, 80041a4 <_printf_i+0x118>
 80041a0:	2d00      	cmp	r5, #0
 80041a2:	d04d      	beq.n	8004240 <_printf_i+0x1b4>
 80041a4:	4615      	mov	r5, r2
 80041a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80041aa:	fb03 6711 	mls	r7, r3, r1, r6
 80041ae:	5dc7      	ldrb	r7, [r0, r7]
 80041b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041b4:	4637      	mov	r7, r6
 80041b6:	42bb      	cmp	r3, r7
 80041b8:	460e      	mov	r6, r1
 80041ba:	d9f4      	bls.n	80041a6 <_printf_i+0x11a>
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d10b      	bne.n	80041d8 <_printf_i+0x14c>
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	07de      	lsls	r6, r3, #31
 80041c4:	d508      	bpl.n	80041d8 <_printf_i+0x14c>
 80041c6:	6923      	ldr	r3, [r4, #16]
 80041c8:	6861      	ldr	r1, [r4, #4]
 80041ca:	4299      	cmp	r1, r3
 80041cc:	bfde      	ittt	le
 80041ce:	2330      	movle	r3, #48	; 0x30
 80041d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041d8:	1b52      	subs	r2, r2, r5
 80041da:	6122      	str	r2, [r4, #16]
 80041dc:	f8cd a000 	str.w	sl, [sp]
 80041e0:	464b      	mov	r3, r9
 80041e2:	aa03      	add	r2, sp, #12
 80041e4:	4621      	mov	r1, r4
 80041e6:	4640      	mov	r0, r8
 80041e8:	f7ff fee2 	bl	8003fb0 <_printf_common>
 80041ec:	3001      	adds	r0, #1
 80041ee:	d14c      	bne.n	800428a <_printf_i+0x1fe>
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295
 80041f4:	b004      	add	sp, #16
 80041f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041fa:	4835      	ldr	r0, [pc, #212]	; (80042d0 <_printf_i+0x244>)
 80041fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004200:	6829      	ldr	r1, [r5, #0]
 8004202:	6823      	ldr	r3, [r4, #0]
 8004204:	f851 6b04 	ldr.w	r6, [r1], #4
 8004208:	6029      	str	r1, [r5, #0]
 800420a:	061d      	lsls	r5, r3, #24
 800420c:	d514      	bpl.n	8004238 <_printf_i+0x1ac>
 800420e:	07df      	lsls	r7, r3, #31
 8004210:	bf44      	itt	mi
 8004212:	f043 0320 	orrmi.w	r3, r3, #32
 8004216:	6023      	strmi	r3, [r4, #0]
 8004218:	b91e      	cbnz	r6, 8004222 <_printf_i+0x196>
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	f023 0320 	bic.w	r3, r3, #32
 8004220:	6023      	str	r3, [r4, #0]
 8004222:	2310      	movs	r3, #16
 8004224:	e7b0      	b.n	8004188 <_printf_i+0xfc>
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	f043 0320 	orr.w	r3, r3, #32
 800422c:	6023      	str	r3, [r4, #0]
 800422e:	2378      	movs	r3, #120	; 0x78
 8004230:	4828      	ldr	r0, [pc, #160]	; (80042d4 <_printf_i+0x248>)
 8004232:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004236:	e7e3      	b.n	8004200 <_printf_i+0x174>
 8004238:	0659      	lsls	r1, r3, #25
 800423a:	bf48      	it	mi
 800423c:	b2b6      	uxthmi	r6, r6
 800423e:	e7e6      	b.n	800420e <_printf_i+0x182>
 8004240:	4615      	mov	r5, r2
 8004242:	e7bb      	b.n	80041bc <_printf_i+0x130>
 8004244:	682b      	ldr	r3, [r5, #0]
 8004246:	6826      	ldr	r6, [r4, #0]
 8004248:	6961      	ldr	r1, [r4, #20]
 800424a:	1d18      	adds	r0, r3, #4
 800424c:	6028      	str	r0, [r5, #0]
 800424e:	0635      	lsls	r5, r6, #24
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	d501      	bpl.n	8004258 <_printf_i+0x1cc>
 8004254:	6019      	str	r1, [r3, #0]
 8004256:	e002      	b.n	800425e <_printf_i+0x1d2>
 8004258:	0670      	lsls	r0, r6, #25
 800425a:	d5fb      	bpl.n	8004254 <_printf_i+0x1c8>
 800425c:	8019      	strh	r1, [r3, #0]
 800425e:	2300      	movs	r3, #0
 8004260:	6123      	str	r3, [r4, #16]
 8004262:	4615      	mov	r5, r2
 8004264:	e7ba      	b.n	80041dc <_printf_i+0x150>
 8004266:	682b      	ldr	r3, [r5, #0]
 8004268:	1d1a      	adds	r2, r3, #4
 800426a:	602a      	str	r2, [r5, #0]
 800426c:	681d      	ldr	r5, [r3, #0]
 800426e:	6862      	ldr	r2, [r4, #4]
 8004270:	2100      	movs	r1, #0
 8004272:	4628      	mov	r0, r5
 8004274:	f7fb ffbc 	bl	80001f0 <memchr>
 8004278:	b108      	cbz	r0, 800427e <_printf_i+0x1f2>
 800427a:	1b40      	subs	r0, r0, r5
 800427c:	6060      	str	r0, [r4, #4]
 800427e:	6863      	ldr	r3, [r4, #4]
 8004280:	6123      	str	r3, [r4, #16]
 8004282:	2300      	movs	r3, #0
 8004284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004288:	e7a8      	b.n	80041dc <_printf_i+0x150>
 800428a:	6923      	ldr	r3, [r4, #16]
 800428c:	462a      	mov	r2, r5
 800428e:	4649      	mov	r1, r9
 8004290:	4640      	mov	r0, r8
 8004292:	47d0      	blx	sl
 8004294:	3001      	adds	r0, #1
 8004296:	d0ab      	beq.n	80041f0 <_printf_i+0x164>
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	079b      	lsls	r3, r3, #30
 800429c:	d413      	bmi.n	80042c6 <_printf_i+0x23a>
 800429e:	68e0      	ldr	r0, [r4, #12]
 80042a0:	9b03      	ldr	r3, [sp, #12]
 80042a2:	4298      	cmp	r0, r3
 80042a4:	bfb8      	it	lt
 80042a6:	4618      	movlt	r0, r3
 80042a8:	e7a4      	b.n	80041f4 <_printf_i+0x168>
 80042aa:	2301      	movs	r3, #1
 80042ac:	4632      	mov	r2, r6
 80042ae:	4649      	mov	r1, r9
 80042b0:	4640      	mov	r0, r8
 80042b2:	47d0      	blx	sl
 80042b4:	3001      	adds	r0, #1
 80042b6:	d09b      	beq.n	80041f0 <_printf_i+0x164>
 80042b8:	3501      	adds	r5, #1
 80042ba:	68e3      	ldr	r3, [r4, #12]
 80042bc:	9903      	ldr	r1, [sp, #12]
 80042be:	1a5b      	subs	r3, r3, r1
 80042c0:	42ab      	cmp	r3, r5
 80042c2:	dcf2      	bgt.n	80042aa <_printf_i+0x21e>
 80042c4:	e7eb      	b.n	800429e <_printf_i+0x212>
 80042c6:	2500      	movs	r5, #0
 80042c8:	f104 0619 	add.w	r6, r4, #25
 80042cc:	e7f5      	b.n	80042ba <_printf_i+0x22e>
 80042ce:	bf00      	nop
 80042d0:	0800454d 	.word	0x0800454d
 80042d4:	0800455e 	.word	0x0800455e

080042d8 <_sbrk_r>:
 80042d8:	b538      	push	{r3, r4, r5, lr}
 80042da:	4d06      	ldr	r5, [pc, #24]	; (80042f4 <_sbrk_r+0x1c>)
 80042dc:	2300      	movs	r3, #0
 80042de:	4604      	mov	r4, r0
 80042e0:	4608      	mov	r0, r1
 80042e2:	602b      	str	r3, [r5, #0]
 80042e4:	f7fc fc24 	bl	8000b30 <_sbrk>
 80042e8:	1c43      	adds	r3, r0, #1
 80042ea:	d102      	bne.n	80042f2 <_sbrk_r+0x1a>
 80042ec:	682b      	ldr	r3, [r5, #0]
 80042ee:	b103      	cbz	r3, 80042f2 <_sbrk_r+0x1a>
 80042f0:	6023      	str	r3, [r4, #0]
 80042f2:	bd38      	pop	{r3, r4, r5, pc}
 80042f4:	2000011c 	.word	0x2000011c

080042f8 <__sread>:
 80042f8:	b510      	push	{r4, lr}
 80042fa:	460c      	mov	r4, r1
 80042fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004300:	f000 f8a0 	bl	8004444 <_read_r>
 8004304:	2800      	cmp	r0, #0
 8004306:	bfab      	itete	ge
 8004308:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800430a:	89a3      	ldrhlt	r3, [r4, #12]
 800430c:	181b      	addge	r3, r3, r0
 800430e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004312:	bfac      	ite	ge
 8004314:	6563      	strge	r3, [r4, #84]	; 0x54
 8004316:	81a3      	strhlt	r3, [r4, #12]
 8004318:	bd10      	pop	{r4, pc}

0800431a <__swrite>:
 800431a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800431e:	461f      	mov	r7, r3
 8004320:	898b      	ldrh	r3, [r1, #12]
 8004322:	05db      	lsls	r3, r3, #23
 8004324:	4605      	mov	r5, r0
 8004326:	460c      	mov	r4, r1
 8004328:	4616      	mov	r6, r2
 800432a:	d505      	bpl.n	8004338 <__swrite+0x1e>
 800432c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004330:	2302      	movs	r3, #2
 8004332:	2200      	movs	r2, #0
 8004334:	f000 f868 	bl	8004408 <_lseek_r>
 8004338:	89a3      	ldrh	r3, [r4, #12]
 800433a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800433e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004342:	81a3      	strh	r3, [r4, #12]
 8004344:	4632      	mov	r2, r6
 8004346:	463b      	mov	r3, r7
 8004348:	4628      	mov	r0, r5
 800434a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800434e:	f000 b817 	b.w	8004380 <_write_r>

08004352 <__sseek>:
 8004352:	b510      	push	{r4, lr}
 8004354:	460c      	mov	r4, r1
 8004356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800435a:	f000 f855 	bl	8004408 <_lseek_r>
 800435e:	1c43      	adds	r3, r0, #1
 8004360:	89a3      	ldrh	r3, [r4, #12]
 8004362:	bf15      	itete	ne
 8004364:	6560      	strne	r0, [r4, #84]	; 0x54
 8004366:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800436a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800436e:	81a3      	strheq	r3, [r4, #12]
 8004370:	bf18      	it	ne
 8004372:	81a3      	strhne	r3, [r4, #12]
 8004374:	bd10      	pop	{r4, pc}

08004376 <__sclose>:
 8004376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800437a:	f000 b813 	b.w	80043a4 <_close_r>
	...

08004380 <_write_r>:
 8004380:	b538      	push	{r3, r4, r5, lr}
 8004382:	4d07      	ldr	r5, [pc, #28]	; (80043a0 <_write_r+0x20>)
 8004384:	4604      	mov	r4, r0
 8004386:	4608      	mov	r0, r1
 8004388:	4611      	mov	r1, r2
 800438a:	2200      	movs	r2, #0
 800438c:	602a      	str	r2, [r5, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	f7fc fb7d 	bl	8000a8e <_write>
 8004394:	1c43      	adds	r3, r0, #1
 8004396:	d102      	bne.n	800439e <_write_r+0x1e>
 8004398:	682b      	ldr	r3, [r5, #0]
 800439a:	b103      	cbz	r3, 800439e <_write_r+0x1e>
 800439c:	6023      	str	r3, [r4, #0]
 800439e:	bd38      	pop	{r3, r4, r5, pc}
 80043a0:	2000011c 	.word	0x2000011c

080043a4 <_close_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	4d06      	ldr	r5, [pc, #24]	; (80043c0 <_close_r+0x1c>)
 80043a8:	2300      	movs	r3, #0
 80043aa:	4604      	mov	r4, r0
 80043ac:	4608      	mov	r0, r1
 80043ae:	602b      	str	r3, [r5, #0]
 80043b0:	f7fc fb89 	bl	8000ac6 <_close>
 80043b4:	1c43      	adds	r3, r0, #1
 80043b6:	d102      	bne.n	80043be <_close_r+0x1a>
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	b103      	cbz	r3, 80043be <_close_r+0x1a>
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	bd38      	pop	{r3, r4, r5, pc}
 80043c0:	2000011c 	.word	0x2000011c

080043c4 <_fstat_r>:
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	4d07      	ldr	r5, [pc, #28]	; (80043e4 <_fstat_r+0x20>)
 80043c8:	2300      	movs	r3, #0
 80043ca:	4604      	mov	r4, r0
 80043cc:	4608      	mov	r0, r1
 80043ce:	4611      	mov	r1, r2
 80043d0:	602b      	str	r3, [r5, #0]
 80043d2:	f7fc fb84 	bl	8000ade <_fstat>
 80043d6:	1c43      	adds	r3, r0, #1
 80043d8:	d102      	bne.n	80043e0 <_fstat_r+0x1c>
 80043da:	682b      	ldr	r3, [r5, #0]
 80043dc:	b103      	cbz	r3, 80043e0 <_fstat_r+0x1c>
 80043de:	6023      	str	r3, [r4, #0]
 80043e0:	bd38      	pop	{r3, r4, r5, pc}
 80043e2:	bf00      	nop
 80043e4:	2000011c 	.word	0x2000011c

080043e8 <_isatty_r>:
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	4d06      	ldr	r5, [pc, #24]	; (8004404 <_isatty_r+0x1c>)
 80043ec:	2300      	movs	r3, #0
 80043ee:	4604      	mov	r4, r0
 80043f0:	4608      	mov	r0, r1
 80043f2:	602b      	str	r3, [r5, #0]
 80043f4:	f7fc fb83 	bl	8000afe <_isatty>
 80043f8:	1c43      	adds	r3, r0, #1
 80043fa:	d102      	bne.n	8004402 <_isatty_r+0x1a>
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	b103      	cbz	r3, 8004402 <_isatty_r+0x1a>
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	bd38      	pop	{r3, r4, r5, pc}
 8004404:	2000011c 	.word	0x2000011c

08004408 <_lseek_r>:
 8004408:	b538      	push	{r3, r4, r5, lr}
 800440a:	4d07      	ldr	r5, [pc, #28]	; (8004428 <_lseek_r+0x20>)
 800440c:	4604      	mov	r4, r0
 800440e:	4608      	mov	r0, r1
 8004410:	4611      	mov	r1, r2
 8004412:	2200      	movs	r2, #0
 8004414:	602a      	str	r2, [r5, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	f7fc fb7c 	bl	8000b14 <_lseek>
 800441c:	1c43      	adds	r3, r0, #1
 800441e:	d102      	bne.n	8004426 <_lseek_r+0x1e>
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	b103      	cbz	r3, 8004426 <_lseek_r+0x1e>
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	bd38      	pop	{r3, r4, r5, pc}
 8004428:	2000011c 	.word	0x2000011c

0800442c <__malloc_lock>:
 800442c:	4801      	ldr	r0, [pc, #4]	; (8004434 <__malloc_lock+0x8>)
 800442e:	f7ff bb1d 	b.w	8003a6c <__retarget_lock_acquire_recursive>
 8004432:	bf00      	nop
 8004434:	20000110 	.word	0x20000110

08004438 <__malloc_unlock>:
 8004438:	4801      	ldr	r0, [pc, #4]	; (8004440 <__malloc_unlock+0x8>)
 800443a:	f7ff bb18 	b.w	8003a6e <__retarget_lock_release_recursive>
 800443e:	bf00      	nop
 8004440:	20000110 	.word	0x20000110

08004444 <_read_r>:
 8004444:	b538      	push	{r3, r4, r5, lr}
 8004446:	4d07      	ldr	r5, [pc, #28]	; (8004464 <_read_r+0x20>)
 8004448:	4604      	mov	r4, r0
 800444a:	4608      	mov	r0, r1
 800444c:	4611      	mov	r1, r2
 800444e:	2200      	movs	r2, #0
 8004450:	602a      	str	r2, [r5, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	f7fc fafe 	bl	8000a54 <_read>
 8004458:	1c43      	adds	r3, r0, #1
 800445a:	d102      	bne.n	8004462 <_read_r+0x1e>
 800445c:	682b      	ldr	r3, [r5, #0]
 800445e:	b103      	cbz	r3, 8004462 <_read_r+0x1e>
 8004460:	6023      	str	r3, [r4, #0]
 8004462:	bd38      	pop	{r3, r4, r5, pc}
 8004464:	2000011c 	.word	0x2000011c

08004468 <_init>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	bf00      	nop
 800446c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446e:	bc08      	pop	{r3}
 8004470:	469e      	mov	lr, r3
 8004472:	4770      	bx	lr

08004474 <_fini>:
 8004474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004476:	bf00      	nop
 8004478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447a:	bc08      	pop	{r3}
 800447c:	469e      	mov	lr, r3
 800447e:	4770      	bx	lr
