
22_06_10_Userbutton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008190  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08008340  08008340  00018340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008508  08008508  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08008508  08008508  00018508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008510  08008510  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008510  08008510  00018510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008514  08008514  00018514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          000002ac  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000330  20000330  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017716  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000335d  00000000  00000000  000377ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  0003ab28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001250  00000000  00000000  0003bed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ef6  00000000  00000000  0003d128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a0f1  00000000  00000000  0006501e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0ad8  00000000  00000000  0007f10f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016fbe7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005be4  00000000  00000000  0016fc38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008328 	.word	0x08008328

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08008328 	.word	0x08008328

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	463b      	mov	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b6:	4b21      	ldr	r3, [pc, #132]	; (800063c <MX_ADC1_Init+0x98>)
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_ADC1_Init+0x98>)
 80005be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <MX_ADC1_Init+0x98>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_ADC1_Init+0x98>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_ADC1_Init+0x98>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_ADC1_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <MX_ADC1_Init+0x98>)
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <MX_ADC1_Init+0xa0>)
 80005e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_ADC1_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_ADC1_Init+0x98>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_ADC1_Init+0x98>)
 8000600:	2201      	movs	r2, #1
 8000602:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <MX_ADC1_Init+0x98>)
 8000606:	f001 fdb3 	bl	8002170 <HAL_ADC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000610:	f001 f936 	bl	8001880 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000614:	2303      	movs	r3, #3
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_ADC1_Init+0x98>)
 8000626:	f001 fec7 	bl	80023b8 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000630:	f001 f926 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200000a0 	.word	0x200000a0
 8000640:	40012000 	.word	0x40012000
 8000644:	0f000001 	.word	0x0f000001

08000648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <HAL_ADC_MspInit+0x7c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d127      	bne.n	80006ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6453      	str	r3, [r2, #68]	; 0x44
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006a2:	2308      	movs	r3, #8
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <HAL_ADC_MspInit+0x84>)
 80006b6:	f002 fa51 	bl	8002b5c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000

080006d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <MX_GPIO_Init+0xd4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a2d      	ldr	r2, [pc, #180]	; (80007a4 <MX_GPIO_Init+0xd4>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <MX_GPIO_Init+0xd4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a26      	ldr	r2, [pc, #152]	; (80007a4 <MX_GPIO_Init+0xd4>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_GPIO_Init+0xd4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800075c:	4812      	ldr	r0, [pc, #72]	; (80007a8 <MX_GPIO_Init+0xd8>)
 800075e:	f002 fbc1 	bl	8002ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000768:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800076c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_GPIO_Init+0xdc>)
 800077a:	f002 f9ef 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 800077e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_GPIO_Init+0xd8>)
 8000798:	f002 f9e0 	bl	8002b5c <HAL_GPIO_Init>

}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020400 	.word	0x40020400
 80007ac:	40020800 	.word	0x40020800

080007b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_I2C1_Init+0x78>)
 80007b6:	4a1d      	ldr	r2, [pc, #116]	; (800082c <MX_I2C1_Init+0x7c>)
 80007b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_I2C1_Init+0x78>)
 80007bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80007c0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_I2C1_Init+0x78>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_I2C1_Init+0x78>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_I2C1_Init+0x78>)
 80007d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_I2C1_Init+0x78>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2C1_Init+0x78>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_I2C1_Init+0x78>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_I2C1_Init+0x78>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ee:	480e      	ldr	r0, [pc, #56]	; (8000828 <MX_I2C1_Init+0x78>)
 80007f0:	f002 fbaa 	bl	8002f48 <HAL_I2C_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80007fa:	f001 f841 	bl	8001880 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007fe:	2100      	movs	r1, #0
 8000800:	4809      	ldr	r0, [pc, #36]	; (8000828 <MX_I2C1_Init+0x78>)
 8000802:	f003 f91a 	bl	8003a3a <HAL_I2CEx_ConfigAnalogFilter>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 800080c:	f001 f838 	bl	8001880 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000810:	2100      	movs	r1, #0
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_I2C1_Init+0x78>)
 8000814:	f003 f94d 	bl	8003ab2 <HAL_I2CEx_ConfigDigitalFilter>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 800081e:	f001 f82f 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200000e8 	.word	0x200000e8
 800082c:	40005400 	.word	0x40005400

08000830 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a19      	ldr	r2, [pc, #100]	; (80008b4 <HAL_I2C_MspInit+0x84>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d12c      	bne.n	80008ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800086e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000874:	2312      	movs	r3, #18
 8000876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000878:	2301      	movs	r3, #1
 800087a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000880:	2304      	movs	r3, #4
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	480c      	ldr	r0, [pc, #48]	; (80008bc <HAL_I2C_MspInit+0x8c>)
 800088c:	f002 f966 	bl	8002b5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 800089a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800089e:	6413      	str	r3, [r2, #64]	; 0x40
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	; 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40005400 	.word	0x40005400
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020400 	.word	0x40020400

080008c0 <__io_putchar>:
void BicycleSong();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ch, 1, 100);
 80008c8:	6879      	ldr	r1, [r7, #4]
 80008ca:	2364      	movs	r3, #100	; 0x64
 80008cc:	2201      	movs	r2, #1
 80008ce:	4804      	ldr	r0, [pc, #16]	; (80008e0 <__io_putchar+0x20>)
 80008d0:	f005 fb1d 	bl	8005f0e <HAL_UART_Transmit>
	return ch;
 80008d4:	687b      	ldr	r3, [r7, #4]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200002d8 	.word	0x200002d8

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b5b0      	push	{r4, r5, r7, lr}
 80008e6:	b08e      	sub	sp, #56	; 0x38
 80008e8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	int location = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t adc_point = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f4:	f001 fba6 	bl	8002044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f8:	f000 f99e 	bl	8000c38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fc:	f7ff fee8 	bl	80006d0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000900:	f000 ffc4 	bl	800188c <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000904:	f001 face 	bl	8001ea4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000908:	f001 f9e0 	bl	8001ccc <MX_TIM3_Init>
  MX_ADC1_Init();
 800090c:	f7ff fe4a 	bl	80005a4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000910:	f001 fa9e 	bl	8001e50 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000914:	f7ff ff4c 	bl	80007b0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000918:	f001 f962 	bl	8001be0 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800091c:	f000 f9fe 	bl	8000d1c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */


   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000920:	2100      	movs	r1, #0
 8000922:	48af      	ldr	r0, [pc, #700]	; (8000be0 <main+0x2fc>)
 8000924:	f004 fb84 	bl	8005030 <HAL_TIM_PWM_Start>
	init();
 8000928:	f000 fbdb 	bl	80010e2 <init>
	HAL_TIM_Base_Init(&htim3);
 800092c:	48ad      	ldr	r0, [pc, #692]	; (8000be4 <main+0x300>)
 800092e:	f004 fa65 	bl	8004dfc <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim3);
 8000932:	48ac      	ldr	r0, [pc, #688]	; (8000be4 <main+0x300>)
 8000934:	f004 fab2 	bl	8004e9c <HAL_TIM_Base_Start_IT>

	at.f = 0;
 8000938:	4bab      	ldr	r3, [pc, #684]	; (8000be8 <main+0x304>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
	at.h = 12;
 800093e:	4baa      	ldr	r3, [pc, #680]	; (8000be8 <main+0x304>)
 8000940:	220c      	movs	r2, #12
 8000942:	705a      	strb	r2, [r3, #1]
	at.m = 30;
 8000944:	4ba8      	ldr	r3, [pc, #672]	; (8000be8 <main+0x304>)
 8000946:	221e      	movs	r2, #30
 8000948:	709a      	strb	r2, [r3, #2]
	at.s = 30;
 800094a:	4ba7      	ldr	r3, [pc, #668]	; (8000be8 <main+0x304>)
 800094c:	221e      	movs	r2, #30
 800094e:	70da      	strb	r2, [r3, #3]


	sTime.Hours = 12;
 8000950:	4ba6      	ldr	r3, [pc, #664]	; (8000bec <main+0x308>)
 8000952:	220c      	movs	r2, #12
 8000954:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 0;
 8000956:	4ba5      	ldr	r3, [pc, #660]	; (8000bec <main+0x308>)
 8000958:	2200      	movs	r2, #0
 800095a:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0;
 800095c:	4ba3      	ldr	r3, [pc, #652]	; (8000bec <main+0x308>)
 800095e:	2200      	movs	r2, #0
 8000960:	709a      	strb	r2, [r3, #2]
	sTime.TimeFormat = 0;
 8000962:	4ba2      	ldr	r3, [pc, #648]	; (8000bec <main+0x308>)
 8000964:	2200      	movs	r2, #0
 8000966:	70da      	strb	r2, [r3, #3]

	sDate.Year = 22;
 8000968:	4ba1      	ldr	r3, [pc, #644]	; (8000bf0 <main+0x30c>)
 800096a:	2216      	movs	r2, #22
 800096c:	70da      	strb	r2, [r3, #3]
	sDate.Month = 6;
 800096e:	4ba0      	ldr	r3, [pc, #640]	; (8000bf0 <main+0x30c>)
 8000970:	2206      	movs	r2, #6
 8000972:	705a      	strb	r2, [r3, #1]
	sDate.Date = 20;
 8000974:	4b9e      	ldr	r3, [pc, #632]	; (8000bf0 <main+0x30c>)
 8000976:	2214      	movs	r2, #20
 8000978:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800097a:	2200      	movs	r2, #0
 800097c:	499b      	ldr	r1, [pc, #620]	; (8000bec <main+0x308>)
 800097e:	489d      	ldr	r0, [pc, #628]	; (8000bf4 <main+0x310>)
 8000980:	f003 ffb4 	bl	80048ec <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000984:	2200      	movs	r2, #0
 8000986:	499a      	ldr	r1, [pc, #616]	; (8000bf0 <main+0x30c>)
 8000988:	489a      	ldr	r0, [pc, #616]	; (8000bf4 <main+0x310>)
 800098a:	f004 f8a7 	bl	8004adc <HAL_RTC_SetDate>
	memset(buf, 0, sizeof(buf));
 800098e:	2219      	movs	r2, #25
 8000990:	2100      	movs	r1, #0
 8000992:	4899      	ldr	r0, [pc, #612]	; (8000bf8 <main+0x314>)
 8000994:	f006 faac 	bl	8006ef0 <memset>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		char alarmOnOff[2][2] = {"A", " "};
 8000998:	4b98      	ldr	r3, [pc, #608]	; (8000bfc <main+0x318>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	61fb      	str	r3, [r7, #28]
		char flag1buf[25];
		//clock
		if (flag == 0) {
 800099e:	4b98      	ldr	r3, [pc, #608]	; (8000c00 <main+0x31c>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d150      	bne.n	8000a48 <main+0x164>
			//********************** cursor ****************************************
			bufferState();
 80009a6:	f000 f9cd 	bl	8000d44 <bufferState>
			//********************* Display ** LINE 1 ******************************
			sprintf(flag1buf, " %s   LCD Clock  ", alarmOnOff[alarmMode]);
 80009aa:	4b96      	ldr	r3, [pc, #600]	; (8000c04 <main+0x320>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f107 021c 	add.w	r2, r7, #28
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	441a      	add	r2, r3
 80009b6:	463b      	mov	r3, r7
 80009b8:	4993      	ldr	r1, [pc, #588]	; (8000c08 <main+0x324>)
 80009ba:	4618      	mov	r0, r3
 80009bc:	f006 fb62 	bl	8007084 <siprintf>
			LCD_SendCommand(LCD_ADDR, 0b10000000);
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	204e      	movs	r0, #78	; 0x4e
 80009c4:	f000 fb32 	bl	800102c <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, flag1buf);
 80009c8:	463b      	mov	r3, r7
 80009ca:	4619      	mov	r1, r3
 80009cc:	204e      	movs	r0, #78	; 0x4e
 80009ce:	f000 fb6e 	bl	80010ae <LCD_SendString>
			//********************* Display ** LINE 2 ******************************
			location = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
			while (flag == 0) {
 80009d6:	e032      	b.n	8000a3e <main+0x15a>
				HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80009d8:	2200      	movs	r2, #0
 80009da:	4984      	ldr	r1, [pc, #528]	; (8000bec <main+0x308>)
 80009dc:	4885      	ldr	r0, [pc, #532]	; (8000bf4 <main+0x310>)
 80009de:	f004 f81f 	bl	8004a20 <HAL_RTC_GetTime>
				HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80009e2:	2200      	movs	r2, #0
 80009e4:	4982      	ldr	r1, [pc, #520]	; (8000bf0 <main+0x30c>)
 80009e6:	4883      	ldr	r0, [pc, #524]	; (8000bf4 <main+0x310>)
 80009e8:	f004 f8fc 	bl	8004be4 <HAL_RTC_GetDate>
				HAL_UART_Transmit(&huart3, (uint8_t*) buf, sizeof(buf), 2000);
 80009ec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009f0:	2219      	movs	r2, #25
 80009f2:	4981      	ldr	r1, [pc, #516]	; (8000bf8 <main+0x314>)
 80009f4:	4885      	ldr	r0, [pc, #532]	; (8000c0c <main+0x328>)
 80009f6:	f005 fa8a 	bl	8005f0e <HAL_UART_Transmit>
				sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 80009fa:	4b7c      	ldr	r3, [pc, #496]	; (8000bec <main+0x308>)
 80009fc:	78db      	ldrb	r3, [r3, #3]
 80009fe:	461a      	mov	r2, r3
 8000a00:	4613      	mov	r3, r2
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	4413      	add	r3, r2
 8000a06:	4a82      	ldr	r2, [pc, #520]	; (8000c10 <main+0x32c>)
 8000a08:	441a      	add	r2, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000a0a:	4b78      	ldr	r3, [pc, #480]	; (8000bec <main+0x308>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
				sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000a0e:	4618      	mov	r0, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000a10:	4b76      	ldr	r3, [pc, #472]	; (8000bec <main+0x308>)
 8000a12:	785b      	ldrb	r3, [r3, #1]
				sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000a14:	4619      	mov	r1, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000a16:	4b75      	ldr	r3, [pc, #468]	; (8000bec <main+0x308>)
 8000a18:	789b      	ldrb	r3, [r3, #2]
				sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	9100      	str	r1, [sp, #0]
 8000a1e:	4603      	mov	r3, r0
 8000a20:	497c      	ldr	r1, [pc, #496]	; (8000c14 <main+0x330>)
 8000a22:	4875      	ldr	r0, [pc, #468]	; (8000bf8 <main+0x314>)
 8000a24:	f006 fb2e 	bl	8007084 <siprintf>
				printf("\r\n");
 8000a28:	487b      	ldr	r0, [pc, #492]	; (8000c18 <main+0x334>)
 8000a2a:	f006 faef 	bl	800700c <puts>
				LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000a2e:	21c0      	movs	r1, #192	; 0xc0
 8000a30:	204e      	movs	r0, #78	; 0x4e
 8000a32:	f000 fafb 	bl	800102c <LCD_SendCommand>
				LCD_SendString(LCD_ADDR, buf);
 8000a36:	4970      	ldr	r1, [pc, #448]	; (8000bf8 <main+0x314>)
 8000a38:	204e      	movs	r0, #78	; 0x4e
 8000a3a:	f000 fb38 	bl	80010ae <LCD_SendString>
			while (flag == 0) {
 8000a3e:	4b70      	ldr	r3, [pc, #448]	; (8000c00 <main+0x31c>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d0c8      	beq.n	80009d8 <main+0xf4>
 8000a46:	e7a7      	b.n	8000998 <main+0xb4>
			//**********************************************************************
			}
		}
		//set Time
		else if (flag == 1) {
 8000a48:	4b6d      	ldr	r3, [pc, #436]	; (8000c00 <main+0x31c>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d159      	bne.n	8000b04 <main+0x220>
			//********************* Display ** LINE 1 ******************************
			sprintf(flag1buf, " %s   Set Time   ", alarmOnOff[alarmMode]);
 8000a50:	4b6c      	ldr	r3, [pc, #432]	; (8000c04 <main+0x320>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f107 021c 	add.w	r2, r7, #28
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	441a      	add	r2, r3
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	496f      	ldr	r1, [pc, #444]	; (8000c1c <main+0x338>)
 8000a60:	4618      	mov	r0, r3
 8000a62:	f006 fb0f 	bl	8007084 <siprintf>
			LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000a66:	2180      	movs	r1, #128	; 0x80
 8000a68:	204e      	movs	r0, #78	; 0x4e
 8000a6a:	f000 fadf 	bl	800102c <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, flag1buf);
 8000a6e:	463b      	mov	r3, r7
 8000a70:	4619      	mov	r1, r3
 8000a72:	204e      	movs	r0, #78	; 0x4e
 8000a74:	f000 fb1b 	bl	80010ae <LCD_SendString>
			//********************* Display ** LINE 2 ******************************
			sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000a78:	4b5c      	ldr	r3, [pc, #368]	; (8000bec <main+0x308>)
 8000a7a:	78db      	ldrb	r3, [r3, #3]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4613      	mov	r3, r2
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	4413      	add	r3, r2
 8000a84:	4a62      	ldr	r2, [pc, #392]	; (8000c10 <main+0x32c>)
 8000a86:	441a      	add	r2, r3
									sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000a88:	4b58      	ldr	r3, [pc, #352]	; (8000bec <main+0x308>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
			sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000a8c:	4618      	mov	r0, r3
									sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000a8e:	4b57      	ldr	r3, [pc, #348]	; (8000bec <main+0x308>)
 8000a90:	785b      	ldrb	r3, [r3, #1]
			sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000a92:	4619      	mov	r1, r3
									sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000a94:	4b55      	ldr	r3, [pc, #340]	; (8000bec <main+0x308>)
 8000a96:	789b      	ldrb	r3, [r3, #2]
			sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000a98:	9301      	str	r3, [sp, #4]
 8000a9a:	9100      	str	r1, [sp, #0]
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	495d      	ldr	r1, [pc, #372]	; (8000c14 <main+0x330>)
 8000aa0:	4855      	ldr	r0, [pc, #340]	; (8000bf8 <main+0x314>)
 8000aa2:	f006 faef 	bl	8007084 <siprintf>
			LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000aa6:	21c0      	movs	r1, #192	; 0xc0
 8000aa8:	204e      	movs	r0, #78	; 0x4e
 8000aaa:	f000 fabf 	bl	800102c <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, buf);
 8000aae:	4952      	ldr	r1, [pc, #328]	; (8000bf8 <main+0x314>)
 8000ab0:	204e      	movs	r0, #78	; 0x4e
 8000ab2:	f000 fafc 	bl	80010ae <LCD_SendString>
			//********************** cursor ****************************************
			bufferState();
 8000ab6:	f000 f945 	bl	8000d44 <bufferState>
			location = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
			//***********************st 초기화 *******************************************
			st.f = sTime.TimeFormat;
 8000abe:	4b4b      	ldr	r3, [pc, #300]	; (8000bec <main+0x308>)
 8000ac0:	78da      	ldrb	r2, [r3, #3]
 8000ac2:	4b57      	ldr	r3, [pc, #348]	; (8000c20 <main+0x33c>)
 8000ac4:	701a      	strb	r2, [r3, #0]
			st.h = sTime.Hours;
 8000ac6:	4b49      	ldr	r3, [pc, #292]	; (8000bec <main+0x308>)
 8000ac8:	781a      	ldrb	r2, [r3, #0]
 8000aca:	4b55      	ldr	r3, [pc, #340]	; (8000c20 <main+0x33c>)
 8000acc:	705a      	strb	r2, [r3, #1]
			st.m = sTime.Minutes;
 8000ace:	4b47      	ldr	r3, [pc, #284]	; (8000bec <main+0x308>)
 8000ad0:	785a      	ldrb	r2, [r3, #1]
 8000ad2:	4b53      	ldr	r3, [pc, #332]	; (8000c20 <main+0x33c>)
 8000ad4:	709a      	strb	r2, [r3, #2]
			st.s = sTime.Seconds;
 8000ad6:	4b45      	ldr	r3, [pc, #276]	; (8000bec <main+0x308>)
 8000ad8:	789a      	ldrb	r2, [r3, #2]
 8000ada:	4b51      	ldr	r3, [pc, #324]	; (8000c20 <main+0x33c>)
 8000adc:	70da      	strb	r2, [r3, #3]
			//**********************************************************************
			longClick = 0;
 8000ade:	4b51      	ldr	r3, [pc, #324]	; (8000c24 <main+0x340>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
			while (flag == 1) {
 8000ae4:	e009      	b.n	8000afa <main+0x216>
				AdcSwitch(&adc_point, &location);
 8000ae6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000aea:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 fdb9 	bl	8001668 <AdcSwitch>
				SaveSeting();
 8000af6:	f000 fb27 	bl	8001148 <SaveSeting>
			while (flag == 1) {
 8000afa:	4b41      	ldr	r3, [pc, #260]	; (8000c00 <main+0x31c>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d0f1      	beq.n	8000ae6 <main+0x202>
 8000b02:	e749      	b.n	8000998 <main+0xb4>
			}
			//**********************************************************************
		}
		//alarm
		else if (flag == 2) {
 8000b04:	4b3e      	ldr	r3, [pc, #248]	; (8000c00 <main+0x31c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d160      	bne.n	8000bce <main+0x2ea>
			//********************* Display ** LINE 1 ******************************
			sprintf(flag1buf, " %s   alarm      ", alarmOnOff[alarmMode]);
 8000b0c:	4b3d      	ldr	r3, [pc, #244]	; (8000c04 <main+0x320>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f107 021c 	add.w	r2, r7, #28
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	441a      	add	r2, r3
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4943      	ldr	r1, [pc, #268]	; (8000c28 <main+0x344>)
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f006 fab1 	bl	8007084 <siprintf>
			LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000b22:	2180      	movs	r1, #128	; 0x80
 8000b24:	204e      	movs	r0, #78	; 0x4e
 8000b26:	f000 fa81 	bl	800102c <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, flag1buf);
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	204e      	movs	r0, #78	; 0x4e
 8000b30:	f000 fabd 	bl	80010ae <LCD_SendString>
			//********************* Display ** LINE 2 ******************************
			sprintf(buf2, "%s %02d:%02d:%02d %s ", ampm[at.f],
 8000b34:	4b2c      	ldr	r3, [pc, #176]	; (8000be8 <main+0x304>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	4413      	add	r3, r2
 8000b40:	4a33      	ldr	r2, [pc, #204]	; (8000c10 <main+0x32c>)
 8000b42:	441a      	add	r2, r3
									at.h, at.m, at.s, alarmSet[alarmMode]);
 8000b44:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <main+0x304>)
 8000b46:	785b      	ldrb	r3, [r3, #1]
			sprintf(buf2, "%s %02d:%02d:%02d %s ", ampm[at.f],
 8000b48:	461d      	mov	r5, r3
									at.h, at.m, at.s, alarmSet[alarmMode]);
 8000b4a:	4b27      	ldr	r3, [pc, #156]	; (8000be8 <main+0x304>)
 8000b4c:	789b      	ldrb	r3, [r3, #2]
			sprintf(buf2, "%s %02d:%02d:%02d %s ", ampm[at.f],
 8000b4e:	4618      	mov	r0, r3
									at.h, at.m, at.s, alarmSet[alarmMode]);
 8000b50:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <main+0x304>)
 8000b52:	78db      	ldrb	r3, [r3, #3]
			sprintf(buf2, "%s %02d:%02d:%02d %s ", ampm[at.f],
 8000b54:	461c      	mov	r4, r3
									at.h, at.m, at.s, alarmSet[alarmMode]);
 8000b56:	4b2b      	ldr	r3, [pc, #172]	; (8000c04 <main+0x320>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	4933      	ldr	r1, [pc, #204]	; (8000c2c <main+0x348>)
 8000b5e:	440b      	add	r3, r1
			sprintf(buf2, "%s %02d:%02d:%02d %s ", ampm[at.f],
 8000b60:	9302      	str	r3, [sp, #8]
 8000b62:	9401      	str	r4, [sp, #4]
 8000b64:	9000      	str	r0, [sp, #0]
 8000b66:	462b      	mov	r3, r5
 8000b68:	4931      	ldr	r1, [pc, #196]	; (8000c30 <main+0x34c>)
 8000b6a:	4832      	ldr	r0, [pc, #200]	; (8000c34 <main+0x350>)
 8000b6c:	f006 fa8a 	bl	8007084 <siprintf>
			LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000b70:	21c0      	movs	r1, #192	; 0xc0
 8000b72:	204e      	movs	r0, #78	; 0x4e
 8000b74:	f000 fa5a 	bl	800102c <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, buf2);
 8000b78:	492e      	ldr	r1, [pc, #184]	; (8000c34 <main+0x350>)
 8000b7a:	204e      	movs	r0, #78	; 0x4e
 8000b7c:	f000 fa97 	bl	80010ae <LCD_SendString>
			//********************** cursor ****************************************
			bufferState();
 8000b80:	f000 f8e0 	bl	8000d44 <bufferState>
			location = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
			//***********************st 초기화 *******************************************
			st.f = at.f;
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <main+0x304>)
 8000b8a:	781a      	ldrb	r2, [r3, #0]
 8000b8c:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <main+0x33c>)
 8000b8e:	701a      	strb	r2, [r3, #0]
			st.h = at.h;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <main+0x304>)
 8000b92:	785a      	ldrb	r2, [r3, #1]
 8000b94:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <main+0x33c>)
 8000b96:	705a      	strb	r2, [r3, #1]
			st.m = at.m;
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <main+0x304>)
 8000b9a:	789a      	ldrb	r2, [r3, #2]
 8000b9c:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <main+0x33c>)
 8000b9e:	709a      	strb	r2, [r3, #2]
			st.s = at.s;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <main+0x304>)
 8000ba2:	78da      	ldrb	r2, [r3, #3]
 8000ba4:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <main+0x33c>)
 8000ba6:	70da      	strb	r2, [r3, #3]
			//**********************************************************************
			longClick = 0;
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <main+0x340>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
			while (flag == 2) {
 8000bae:	e009      	b.n	8000bc4 <main+0x2e0>
				AdcSwitch(&adc_point, &location);
 8000bb0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000bb4:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 fd54 	bl	8001668 <AdcSwitch>
				SaveAlarm();
 8000bc0:	f000 fa98 	bl	80010f4 <SaveAlarm>
			while (flag == 2) {
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <main+0x31c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d0f1      	beq.n	8000bb0 <main+0x2cc>
 8000bcc:	e6e4      	b.n	8000998 <main+0xb4>
			}
			//**********************************************************************
		} else if (flag > 2)
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <main+0x31c>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	f67f aee0 	bls.w	8000998 <main+0xb4>
			flag = 0;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <main+0x31c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
	while (1) {
 8000bde:	e6db      	b.n	8000998 <main+0xb4>
 8000be0:	20000204 	.word	0x20000204
 8000be4:	2000024c 	.word	0x2000024c
 8000be8:	200001dc 	.word	0x200001dc
 8000bec:	2000016c 	.word	0x2000016c
 8000bf0:	20000180 	.word	0x20000180
 8000bf4:	200001e0 	.word	0x200001e0
 8000bf8:	20000184 	.word	0x20000184
 8000bfc:	080083b0 	.word	0x080083b0
 8000c00:	20000168 	.word	0x20000168
 8000c04:	20000000 	.word	0x20000000
 8000c08:	08008340 	.word	0x08008340
 8000c0c:	200002d8 	.word	0x200002d8
 8000c10:	20000004 	.word	0x20000004
 8000c14:	08008354 	.word	0x08008354
 8000c18:	0800836c 	.word	0x0800836c
 8000c1c:	08008370 	.word	0x08008370
 8000c20:	200001d8 	.word	0x200001d8
 8000c24:	20000160 	.word	0x20000160
 8000c28:	08008384 	.word	0x08008384
 8000c2c:	2000000c 	.word	0x2000000c
 8000c30:	08008398 	.word	0x08008398
 8000c34:	200001bc 	.word	0x200001bc

08000c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b094      	sub	sp, #80	; 0x50
 8000c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	2230      	movs	r2, #48	; 0x30
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f006 f952 	bl	8006ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <SystemClock_Config+0xdc>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	4a2b      	ldr	r2, [pc, #172]	; (8000d14 <SystemClock_Config+0xdc>)
 8000c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6c:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <SystemClock_Config+0xdc>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <SystemClock_Config+0xe0>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a25      	ldr	r2, [pc, #148]	; (8000d18 <SystemClock_Config+0xe0>)
 8000c82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <SystemClock_Config+0xe0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000c94:	2306      	movs	r3, #6
 8000c96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cac:	2308      	movs	r3, #8
 8000cae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000cb0:	23b4      	movs	r3, #180	; 0xb4
 8000cb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cb8:	2304      	movs	r3, #4
 8000cba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbc:	f107 0320 	add.w	r3, r7, #32
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f002 ff85 	bl	8003bd0 <HAL_RCC_OscConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ccc:	f000 fdd8 	bl	8001880 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cd0:	f002 ff2e 	bl	8003b30 <HAL_PWREx_EnableOverDrive>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000cda:	f000 fdd1 	bl	8001880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cde:	230f      	movs	r3, #15
 8000ce0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cf6:	f107 030c 	add.w	r3, r7, #12
 8000cfa:	2105      	movs	r1, #5
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f003 f9df 	bl	80040c0 <HAL_RCC_ClockConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000d08:	f000 fdba 	bl	8001880 <Error_Handler>
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	3750      	adds	r7, #80	; 0x50
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40007000 	.word	0x40007000

08000d1c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	2027      	movs	r0, #39	; 0x27
 8000d26:	f001 fe50 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d2a:	2027      	movs	r0, #39	; 0x27
 8000d2c:	f001 fe69 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	2028      	movs	r0, #40	; 0x28
 8000d36:	f001 fe48 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d3a:	2028      	movs	r0, #40	; 0x28
 8000d3c:	f001 fe61 	bl	8002a02 <HAL_NVIC_EnableIRQ>
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <bufferState>:

/* USER CODE BEGIN 4 */
void bufferState() {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	if (flag == 2 || flag == 1) {
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <bufferState+0x34>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d003      	beq.n	8000d58 <bufferState+0x14>
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <bufferState+0x34>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d108      	bne.n	8000d6a <bufferState+0x26>
		LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000d58:	21c0      	movs	r1, #192	; 0xc0
 8000d5a:	204e      	movs	r0, #78	; 0x4e
 8000d5c:	f000 f966 	bl	800102c <LCD_SendCommand>
		LCD_SendCommand(LCD_ADDR, 0b00001111);
 8000d60:	210f      	movs	r1, #15
 8000d62:	204e      	movs	r0, #78	; 0x4e
 8000d64:	f000 f962 	bl	800102c <LCD_SendCommand>
 8000d68:	e004      	b.n	8000d74 <bufferState+0x30>
	} else
		LCD_SendCommand(LCD_ADDR, 0b00001110);
 8000d6a:	210e      	movs	r1, #14
 8000d6c:	204e      	movs	r0, #78	; 0x4e
 8000d6e:	f000 f95d 	bl	800102c <LCD_SendCommand>
}
 8000d72:	bf00      	nop
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000168 	.word	0x20000168

08000d7c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState pin;

	if (GPIO_Pin == GPIO_PIN_13) {
 8000d86:	88fb      	ldrh	r3, [r7, #6]
 8000d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d8c:	d156      	bne.n	8000e3c <HAL_GPIO_EXTI_Callback+0xc0>
		current_time = HAL_GetTick();
 8000d8e:	f001 f9bf 	bl	8002110 <HAL_GetTick>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b2b      	ldr	r3, [pc, #172]	; (8000e44 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000d98:	601a      	str	r2, [r3, #0]
		time_interval = current_time - last_time;
 8000d9a:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	4a29      	ldr	r2, [pc, #164]	; (8000e4c <HAL_GPIO_EXTI_Callback+0xd0>)
 8000da6:	6013      	str	r3, [r2, #0]
		last_time = current_time;
 8000da8:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a26      	ldr	r2, [pc, #152]	; (8000e48 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000dae:	6013      	str	r3, [r2, #0]

		pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000db0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000db4:	4826      	ldr	r0, [pc, #152]	; (8000e50 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000db6:	f002 f87d 	bl	8002eb4 <HAL_GPIO_ReadPin>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	73fb      	strb	r3, [r7, #15]

		if (time_interval <= 4) {
 8000dbe:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <HAL_GPIO_EXTI_Callback+0xd0>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	dc07      	bgt.n	8000dd6 <HAL_GPIO_EXTI_Callback+0x5a>
			printf("Noise %d, %d\r\n", pin, time_interval);
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	4a20      	ldr	r2, [pc, #128]	; (8000e4c <HAL_GPIO_EXTI_Callback+0xd0>)
 8000dca:	6812      	ldr	r2, [r2, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4821      	ldr	r0, [pc, #132]	; (8000e54 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000dd0:	f006 f896 	bl	8006f00 <iprintf>
 8000dd4:	e00e      	b.n	8000df4 <HAL_GPIO_EXTI_Callback+0x78>
		} else {

			click[1].time = click[0].time;
 8000dd6:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a1f      	ldr	r2, [pc, #124]	; (8000e58 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000ddc:	6093      	str	r3, [r2, #8]
			click[1].level = click[0].level;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000de0:	791a      	ldrb	r2, [r3, #4]
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000de4:	731a      	strb	r2, [r3, #12]

			click[0].time = time_interval;
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <HAL_GPIO_EXTI_Callback+0xd0>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000dec:	6013      	str	r3, [r2, #0]
			click[0].level = pin;
 8000dee:	4a1a      	ldr	r2, [pc, #104]	; (8000e58 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	7113      	strb	r3, [r2, #4]
		}
		if (click[0].level == GPIO_PIN_RESET && click[0].time >= LONG_CLICK_MIN) // long click
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000df6:	791b      	ldrb	r3, [r3, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d10b      	bne.n	8000e14 <HAL_GPIO_EXTI_Callback+0x98>
 8000dfc:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000e04:	db06      	blt.n	8000e14 <HAL_GPIO_EXTI_Callback+0x98>
		{
			printf("\r\nLong Key\r\n");
 8000e06:	4815      	ldr	r0, [pc, #84]	; (8000e5c <HAL_GPIO_EXTI_Callback+0xe0>)
 8000e08:	f006 f900 	bl	800700c <puts>
			longClick = 1;
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	701a      	strb	r2, [r3, #0]
				&& click[1].level == GPIO_PIN_SET) {
			printf("\r\nSelect Key, %d\r\n", click[0].time);
			flag++;
		}
	}
}
 8000e12:	e013      	b.n	8000e3c <HAL_GPIO_EXTI_Callback+0xc0>
		} else if (click[0].level == GPIO_PIN_RESET
 8000e14:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000e16:	791b      	ldrb	r3, [r3, #4]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d10f      	bne.n	8000e3c <HAL_GPIO_EXTI_Callback+0xc0>
				&& click[1].level == GPIO_PIN_SET) {
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000e1e:	7b1b      	ldrb	r3, [r3, #12]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d10b      	bne.n	8000e3c <HAL_GPIO_EXTI_Callback+0xc0>
			printf("\r\nSelect Key, %d\r\n", click[0].time);
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480e      	ldr	r0, [pc, #56]	; (8000e64 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000e2c:	f006 f868 	bl	8006f00 <iprintf>
			flag++;
 8000e30:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <HAL_GPIO_EXTI_Callback+0xec>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	3301      	adds	r3, #1
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_GPIO_EXTI_Callback+0xec>)
 8000e3a:	701a      	strb	r2, [r3, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000154 	.word	0x20000154
 8000e48:	2000015c 	.word	0x2000015c
 8000e4c:	20000158 	.word	0x20000158
 8000e50:	40020800 	.word	0x40020800
 8000e54:	080083b4 	.word	0x080083b4
 8000e58:	2000013c 	.word	0x2000013c
 8000e5c:	080083c4 	.word	0x080083c4
 8000e60:	20000160 	.word	0x20000160
 8000e64:	080083d0 	.word	0x080083d0
 8000e68:	20000168 	.word	0x20000168

08000e6c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d109      	bne.n	8000e92 <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_ADC_Start(&hadc1);
 8000e7e:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e80:	f001 f9ba 	bl	80021f8 <HAL_ADC_Start>
		ADC_value = HAL_ADC_GetValue(&hadc1);
 8000e84:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e86:	f001 fa89 	bl	800239c <HAL_ADC_GetValue>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e90:	601a      	str	r2, [r3, #0]
		//	printf("ADC_value = %d\r\n", ADC_value);

	}
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40000400 	.word	0x40000400
 8000ea0:	200000a0 	.word	0x200000a0
 8000ea4:	20000164 	.word	0x20000164

08000ea8 <I2C_Scan>:

void I2C_Scan() {
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b098      	sub	sp, #96	; 0x60
 8000eac:	af00      	add	r7, sp, #0
	char info[] = "Scanning I2C bus...\r\n";
 8000eae:	4b2e      	ldr	r3, [pc, #184]	; (8000f68 <I2C_Scan+0xc0>)
 8000eb0:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000eb4:	461d      	mov	r5, r3
 8000eb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eba:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ebe:	6020      	str	r0, [r4, #0]
 8000ec0:	3404      	adds	r4, #4
 8000ec2:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) info, strlen(info), HAL_MAX_DELAY);
 8000ec4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff f991 	bl	80001f0 <strlen>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	4824      	ldr	r0, [pc, #144]	; (8000f6c <I2C_Scan+0xc4>)
 8000edc:	f005 f817 	bl	8005f0e <HAL_UART_Transmit>

	HAL_StatusTypeDef res;
	for (uint16_t i = 0; i < 128; i++) {
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000ee6:	e02f      	b.n	8000f48 <I2C_Scan+0xa0>
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000ee8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	b299      	uxth	r1, r3
 8000ef0:	230a      	movs	r3, #10
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	481e      	ldr	r0, [pc, #120]	; (8000f70 <I2C_Scan+0xc8>)
 8000ef6:	f002 fa69 	bl	80033cc <HAL_I2C_IsDeviceReady>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		if (res == HAL_OK) {
 8000f00:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d113      	bne.n	8000f30 <I2C_Scan+0x88>
			char msg[64];
			snprintf(msg, sizeof(msg), "0x%02X", i);
 8000f08:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000f0c:	1d38      	adds	r0, r7, #4
 8000f0e:	4a19      	ldr	r2, [pc, #100]	; (8000f74 <I2C_Scan+0xcc>)
 8000f10:	2140      	movs	r1, #64	; 0x40
 8000f12:	f006 f883 	bl	800701c <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff f969 	bl	80001f0 <strlen>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	1d39      	adds	r1, r7, #4
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
 8000f28:	4810      	ldr	r0, [pc, #64]	; (8000f6c <I2C_Scan+0xc4>)
 8000f2a:	f004 fff0 	bl	8005f0e <HAL_UART_Transmit>
 8000f2e:	e006      	b.n	8000f3e <I2C_Scan+0x96>
			HAL_MAX_DELAY);
		} else {
			HAL_UART_Transmit(&huart2, (uint8_t*) ".", 1, HAL_MAX_DELAY);
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295
 8000f34:	2201      	movs	r2, #1
 8000f36:	4910      	ldr	r1, [pc, #64]	; (8000f78 <I2C_Scan+0xd0>)
 8000f38:	480c      	ldr	r0, [pc, #48]	; (8000f6c <I2C_Scan+0xc4>)
 8000f3a:	f004 ffe8 	bl	8005f0e <HAL_UART_Transmit>
	for (uint16_t i = 0; i < 128; i++) {
 8000f3e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000f42:	3301      	adds	r3, #1
 8000f44:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000f48:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f4e:	d9cb      	bls.n	8000ee8 <I2C_Scan+0x40>
		}
	}

	HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
 8000f54:	2202      	movs	r2, #2
 8000f56:	4909      	ldr	r1, [pc, #36]	; (8000f7c <I2C_Scan+0xd4>)
 8000f58:	4804      	ldr	r0, [pc, #16]	; (8000f6c <I2C_Scan+0xc4>)
 8000f5a:	f004 ffd8 	bl	8005f0e <HAL_UART_Transmit>
}
 8000f5e:	bf00      	nop
 8000f60:	3760      	adds	r7, #96	; 0x60
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bdb0      	pop	{r4, r5, r7, pc}
 8000f66:	bf00      	nop
 8000f68:	080083f4 	.word	0x080083f4
 8000f6c:	20000294 	.word	0x20000294
 8000f70:	200000e8 	.word	0x200000e8
 8000f74:	080083e4 	.word	0x080083e4
 8000f78:	080083ec 	.word	0x080083ec
 8000f7c:	080083f0 	.word	0x080083f0

08000f80 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af02      	add	r7, sp, #8
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	71bb      	strb	r3, [r7, #6]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	b299      	uxth	r1, r3
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4822      	ldr	r0, [pc, #136]	; (8001028 <LCD_SendInternal+0xa8>)
 8000f9e:	f002 fa15 	bl	80033cc <HAL_I2C_IsDeviceReady>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d000      	beq.n	8000fae <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000fac:	e7f1      	b.n	8000f92 <LCD_SendInternal+0x12>
			break;
 8000fae:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	f023 030f 	bic.w	r3, r3, #15
 8000fb6:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	011b      	lsls	r3, r3, #4
 8000fbc:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | BACKLIGHT | PIN_EN;
 8000fbe:	7bba      	ldrb	r2, [r7, #14]
 8000fc0:	797b      	ldrb	r3, [r7, #5]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	f043 030c 	orr.w	r3, r3, #12
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | BACKLIGHT;
 8000fce:	7bba      	ldrb	r2, [r7, #14]
 8000fd0:	797b      	ldrb	r3, [r7, #5]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	f043 0308 	orr.w	r3, r3, #8
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | BACKLIGHT | PIN_EN;
 8000fde:	7b7a      	ldrb	r2, [r7, #13]
 8000fe0:	797b      	ldrb	r3, [r7, #5]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	f043 030c 	orr.w	r3, r3, #12
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | BACKLIGHT;
 8000fee:	7b7a      	ldrb	r2, [r7, #13]
 8000ff0:	797b      	ldrb	r3, [r7, #5]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	f043 0308 	orr.w	r3, r3, #8
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	b299      	uxth	r1, r3
 8001002:	f107 0208 	add.w	r2, r7, #8
 8001006:	f04f 33ff 	mov.w	r3, #4294967295
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2304      	movs	r3, #4
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <LCD_SendInternal+0xa8>)
 8001010:	f002 f8de 	bl	80031d0 <HAL_I2C_Master_Transmit>
 8001014:	4603      	mov	r3, r0
 8001016:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8001018:	2005      	movs	r0, #5
 800101a:	f001 f885 	bl	8002128 <HAL_Delay>
	return res;
 800101e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200000e8 	.word	0x200000e8

0800102c <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	460a      	mov	r2, r1
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	4613      	mov	r3, r2
 800103a:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 800103c:	79b9      	ldrb	r1, [r7, #6]
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2200      	movs	r2, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff9c 	bl	8000f80 <LCD_SendInternal>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	460a      	mov	r2, r1
 800105a:	71fb      	strb	r3, [r7, #7]
 800105c:	4613      	mov	r3, r2
 800105e:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, PIN_RS);
 8001060:	79b9      	ldrb	r1, [r7, #6]
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2201      	movs	r2, #1
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ff8a 	bl	8000f80 <LCD_SendInternal>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0b00110000);
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2130      	movs	r1, #48	; 0x30
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ffd2 	bl	800102c <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0b00000010);
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	2102      	movs	r1, #2
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ffcd 	bl	800102c <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, 0b00001100);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	210c      	movs	r1, #12
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ffc8 	bl	800102c <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, 0b00000001);
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2101      	movs	r1, #1
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ffc3 	bl	800102c <LCD_SendCommand>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	6039      	str	r1, [r7, #0]
 80010b8:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 80010ba:	e009      	b.n	80010d0 <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	781a      	ldrb	r2, [r3, #0]
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ffc3 	bl	8001050 <LCD_SendData>
		str++;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3301      	adds	r3, #1
 80010ce:	603b      	str	r3, [r7, #0]
	while (*str) {
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f1      	bne.n	80010bc <LCD_SendString+0xe>
	}
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <init>:

void init() {
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
	I2C_Scan();
 80010e6:	f7ff fedf 	bl	8000ea8 <I2C_Scan>
	LCD_Init(LCD_ADDR);
 80010ea:	204e      	movs	r0, #78	; 0x4e
 80010ec:	f7ff ffc2 	bl	8001074 <LCD_Init>
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <SaveAlarm>:

void loop() {
	HAL_Delay(100);
}
void SaveAlarm()
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
	/***************** Save 기능 **************************/
	if(longClick == 1)
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <SaveAlarm+0x44>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d115      	bne.n	800112c <SaveAlarm+0x38>
	{
		at.f = st.f;
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <SaveAlarm+0x48>)
 8001102:	781a      	ldrb	r2, [r3, #0]
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <SaveAlarm+0x4c>)
 8001106:	701a      	strb	r2, [r3, #0]
		at.h = st.h;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <SaveAlarm+0x48>)
 800110a:	785a      	ldrb	r2, [r3, #1]
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <SaveAlarm+0x4c>)
 800110e:	705a      	strb	r2, [r3, #1]
		at.m = st.m;
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <SaveAlarm+0x48>)
 8001112:	789a      	ldrb	r2, [r3, #2]
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <SaveAlarm+0x4c>)
 8001116:	709a      	strb	r2, [r3, #2]
		at.s = st.s;
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <SaveAlarm+0x48>)
 800111a:	78da      	ldrb	r2, [r3, #3]
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <SaveAlarm+0x4c>)
 800111e:	70da      	strb	r2, [r3, #3]
		longClick = 0;
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <SaveAlarm+0x44>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
		flag = 0;
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <SaveAlarm+0x50>)
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
	}
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000160 	.word	0x20000160
 800113c:	200001d8 	.word	0x200001d8
 8001140:	200001dc 	.word	0x200001dc
 8001144:	20000168 	.word	0x20000168

08001148 <SaveSeting>:

void SaveSeting()
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0

	/***************** Save 기능 **************************/
	if(longClick == 1)
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <SaveSeting+0x50>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d11f      	bne.n	8001194 <SaveSeting+0x4c>
	{
		sTime.TimeFormat = st.f;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <SaveSeting+0x54>)
 8001156:	781a      	ldrb	r2, [r3, #0]
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <SaveSeting+0x58>)
 800115a:	70da      	strb	r2, [r3, #3]
		sTime.Hours = st.h;
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <SaveSeting+0x54>)
 800115e:	785a      	ldrb	r2, [r3, #1]
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <SaveSeting+0x58>)
 8001162:	701a      	strb	r2, [r3, #0]
		sTime.Minutes = st.m;
 8001164:	4b0d      	ldr	r3, [pc, #52]	; (800119c <SaveSeting+0x54>)
 8001166:	789a      	ldrb	r2, [r3, #2]
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <SaveSeting+0x58>)
 800116a:	705a      	strb	r2, [r3, #1]
		sTime.Seconds = st.s;
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <SaveSeting+0x54>)
 800116e:	78da      	ldrb	r2, [r3, #3]
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <SaveSeting+0x58>)
 8001172:	709a      	strb	r2, [r3, #2]

		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001174:	2200      	movs	r2, #0
 8001176:	490a      	ldr	r1, [pc, #40]	; (80011a0 <SaveSeting+0x58>)
 8001178:	480a      	ldr	r0, [pc, #40]	; (80011a4 <SaveSeting+0x5c>)
 800117a:	f003 fbb7 	bl	80048ec <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800117e:	2200      	movs	r2, #0
 8001180:	4909      	ldr	r1, [pc, #36]	; (80011a8 <SaveSeting+0x60>)
 8001182:	4808      	ldr	r0, [pc, #32]	; (80011a4 <SaveSeting+0x5c>)
 8001184:	f003 fcaa 	bl	8004adc <HAL_RTC_SetDate>

		longClick = 0;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <SaveSeting+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
		flag = 0;
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <SaveSeting+0x64>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
	}
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000160 	.word	0x20000160
 800119c:	200001d8 	.word	0x200001d8
 80011a0:	2000016c 	.word	0x2000016c
 80011a4:	200001e0 	.word	0x200001e0
 80011a8:	20000180 	.word	0x20000180
 80011ac:	20000168 	.word	0x20000168

080011b0 <SetTimeDown>:
void SetTimeDown(const int *location)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af04      	add	r7, sp, #16
 80011b6:	6078      	str	r0, [r7, #4]
	if(*location == 0){
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d110      	bne.n	80011e2 <SetTimeDown+0x32>
		if(st.f == 0)
 80011c0:	4b85      	ldr	r3, [pc, #532]	; (80013d8 <SetTimeDown+0x228>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d103      	bne.n	80011d0 <SetTimeDown+0x20>
			st.f = 1;
 80011c8:	4b83      	ldr	r3, [pc, #524]	; (80013d8 <SetTimeDown+0x228>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
 80011ce:	e095      	b.n	80012fc <SetTimeDown+0x14c>
		else if(st.f == 1)
 80011d0:	4b81      	ldr	r3, [pc, #516]	; (80013d8 <SetTimeDown+0x228>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	f040 8091 	bne.w	80012fc <SetTimeDown+0x14c>
			st.f = 0;
 80011da:	4b7f      	ldr	r3, [pc, #508]	; (80013d8 <SetTimeDown+0x228>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
 80011e0:	e08c      	b.n	80012fc <SetTimeDown+0x14c>
	}
	else if(*location == 4){
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d10e      	bne.n	8001208 <SetTimeDown+0x58>
		if(st.h == 0)
 80011ea:	4b7b      	ldr	r3, [pc, #492]	; (80013d8 <SetTimeDown+0x228>)
 80011ec:	785b      	ldrb	r3, [r3, #1]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d103      	bne.n	80011fa <SetTimeDown+0x4a>
			st.h = 12;
 80011f2:	4b79      	ldr	r3, [pc, #484]	; (80013d8 <SetTimeDown+0x228>)
 80011f4:	220c      	movs	r2, #12
 80011f6:	705a      	strb	r2, [r3, #1]
 80011f8:	e080      	b.n	80012fc <SetTimeDown+0x14c>
		else
			st.h -= 1;
 80011fa:	4b77      	ldr	r3, [pc, #476]	; (80013d8 <SetTimeDown+0x228>)
 80011fc:	785b      	ldrb	r3, [r3, #1]
 80011fe:	3b01      	subs	r3, #1
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4b75      	ldr	r3, [pc, #468]	; (80013d8 <SetTimeDown+0x228>)
 8001204:	705a      	strb	r2, [r3, #1]
 8001206:	e079      	b.n	80012fc <SetTimeDown+0x14c>
	}
	else if(*location == 6){
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b06      	cmp	r3, #6
 800120e:	d111      	bne.n	8001234 <SetTimeDown+0x84>
		if(st.m < 10)
 8001210:	4b71      	ldr	r3, [pc, #452]	; (80013d8 <SetTimeDown+0x228>)
 8001212:	789b      	ldrb	r3, [r3, #2]
 8001214:	2b09      	cmp	r3, #9
 8001216:	d806      	bhi.n	8001226 <SetTimeDown+0x76>
			st.m += 50;
 8001218:	4b6f      	ldr	r3, [pc, #444]	; (80013d8 <SetTimeDown+0x228>)
 800121a:	789b      	ldrb	r3, [r3, #2]
 800121c:	3332      	adds	r3, #50	; 0x32
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b6d      	ldr	r3, [pc, #436]	; (80013d8 <SetTimeDown+0x228>)
 8001222:	709a      	strb	r2, [r3, #2]
 8001224:	e06a      	b.n	80012fc <SetTimeDown+0x14c>
		else
			st.m -= 10;
 8001226:	4b6c      	ldr	r3, [pc, #432]	; (80013d8 <SetTimeDown+0x228>)
 8001228:	789b      	ldrb	r3, [r3, #2]
 800122a:	3b0a      	subs	r3, #10
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b6a      	ldr	r3, [pc, #424]	; (80013d8 <SetTimeDown+0x228>)
 8001230:	709a      	strb	r2, [r3, #2]
 8001232:	e063      	b.n	80012fc <SetTimeDown+0x14c>
	}
	else if(*location == 7){
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b07      	cmp	r3, #7
 800123a:	d11b      	bne.n	8001274 <SetTimeDown+0xc4>
		if(st.m % 10 == 0)
 800123c:	4b66      	ldr	r3, [pc, #408]	; (80013d8 <SetTimeDown+0x228>)
 800123e:	789a      	ldrb	r2, [r3, #2]
 8001240:	4b66      	ldr	r3, [pc, #408]	; (80013dc <SetTimeDown+0x22c>)
 8001242:	fba3 1302 	umull	r1, r3, r3, r2
 8001246:	08d9      	lsrs	r1, r3, #3
 8001248:	460b      	mov	r3, r1
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d106      	bne.n	8001266 <SetTimeDown+0xb6>
			st.m += 9;
 8001258:	4b5f      	ldr	r3, [pc, #380]	; (80013d8 <SetTimeDown+0x228>)
 800125a:	789b      	ldrb	r3, [r3, #2]
 800125c:	3309      	adds	r3, #9
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b5d      	ldr	r3, [pc, #372]	; (80013d8 <SetTimeDown+0x228>)
 8001262:	709a      	strb	r2, [r3, #2]
 8001264:	e04a      	b.n	80012fc <SetTimeDown+0x14c>
		else
			st.m--;
 8001266:	4b5c      	ldr	r3, [pc, #368]	; (80013d8 <SetTimeDown+0x228>)
 8001268:	789b      	ldrb	r3, [r3, #2]
 800126a:	3b01      	subs	r3, #1
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b5a      	ldr	r3, [pc, #360]	; (80013d8 <SetTimeDown+0x228>)
 8001270:	709a      	strb	r2, [r3, #2]
 8001272:	e043      	b.n	80012fc <SetTimeDown+0x14c>
	}
	else if(*location == 9){
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b09      	cmp	r3, #9
 800127a:	d111      	bne.n	80012a0 <SetTimeDown+0xf0>
		if(st.s < 10)
 800127c:	4b56      	ldr	r3, [pc, #344]	; (80013d8 <SetTimeDown+0x228>)
 800127e:	78db      	ldrb	r3, [r3, #3]
 8001280:	2b09      	cmp	r3, #9
 8001282:	d806      	bhi.n	8001292 <SetTimeDown+0xe2>
			st.s += 50;
 8001284:	4b54      	ldr	r3, [pc, #336]	; (80013d8 <SetTimeDown+0x228>)
 8001286:	78db      	ldrb	r3, [r3, #3]
 8001288:	3332      	adds	r3, #50	; 0x32
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b52      	ldr	r3, [pc, #328]	; (80013d8 <SetTimeDown+0x228>)
 800128e:	70da      	strb	r2, [r3, #3]
 8001290:	e034      	b.n	80012fc <SetTimeDown+0x14c>
		else
			st.s -=10;
 8001292:	4b51      	ldr	r3, [pc, #324]	; (80013d8 <SetTimeDown+0x228>)
 8001294:	78db      	ldrb	r3, [r3, #3]
 8001296:	3b0a      	subs	r3, #10
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4b4f      	ldr	r3, [pc, #316]	; (80013d8 <SetTimeDown+0x228>)
 800129c:	70da      	strb	r2, [r3, #3]
 800129e:	e02d      	b.n	80012fc <SetTimeDown+0x14c>
	}else if(*location == 10){
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b0a      	cmp	r3, #10
 80012a6:	d11b      	bne.n	80012e0 <SetTimeDown+0x130>
		if(st.s % 10 == 0)
 80012a8:	4b4b      	ldr	r3, [pc, #300]	; (80013d8 <SetTimeDown+0x228>)
 80012aa:	78da      	ldrb	r2, [r3, #3]
 80012ac:	4b4b      	ldr	r3, [pc, #300]	; (80013dc <SetTimeDown+0x22c>)
 80012ae:	fba3 1302 	umull	r1, r3, r3, r2
 80012b2:	08d9      	lsrs	r1, r3, #3
 80012b4:	460b      	mov	r3, r1
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d106      	bne.n	80012d2 <SetTimeDown+0x122>
			st.s += 9;
 80012c4:	4b44      	ldr	r3, [pc, #272]	; (80013d8 <SetTimeDown+0x228>)
 80012c6:	78db      	ldrb	r3, [r3, #3]
 80012c8:	3309      	adds	r3, #9
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	4b42      	ldr	r3, [pc, #264]	; (80013d8 <SetTimeDown+0x228>)
 80012ce:	70da      	strb	r2, [r3, #3]
 80012d0:	e014      	b.n	80012fc <SetTimeDown+0x14c>
		else
			st.s--;
 80012d2:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <SetTimeDown+0x228>)
 80012d4:	78db      	ldrb	r3, [r3, #3]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <SetTimeDown+0x228>)
 80012dc:	70da      	strb	r2, [r3, #3]
 80012de:	e00d      	b.n	80012fc <SetTimeDown+0x14c>
	} else if (*location == 12 && flag == 2)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b0c      	cmp	r3, #12
 80012e6:	d109      	bne.n	80012fc <SetTimeDown+0x14c>
 80012e8:	4b3d      	ldr	r3, [pc, #244]	; (80013e0 <SetTimeDown+0x230>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d105      	bne.n	80012fc <SetTimeDown+0x14c>
		alarmMode ^= 1;
 80012f0:	4b3c      	ldr	r3, [pc, #240]	; (80013e4 <SetTimeDown+0x234>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f083 0301 	eor.w	r3, r3, #1
 80012f8:	4a3a      	ldr	r2, [pc, #232]	; (80013e4 <SetTimeDown+0x234>)
 80012fa:	6013      	str	r3, [r2, #0]

	char format[3];
	if(st.f == 0)
 80012fc:	4b36      	ldr	r3, [pc, #216]	; (80013d8 <SetTimeDown+0x228>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d109      	bne.n	8001318 <SetTimeDown+0x168>
		strcpy(format, "AM");
 8001304:	4a38      	ldr	r2, [pc, #224]	; (80013e8 <SetTimeDown+0x238>)
 8001306:	f107 0308 	add.w	r3, r7, #8
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	4611      	mov	r1, r2
 800130e:	8019      	strh	r1, [r3, #0]
 8001310:	3302      	adds	r3, #2
 8001312:	0c12      	lsrs	r2, r2, #16
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	e00c      	b.n	8001332 <SetTimeDown+0x182>
	else if(st.f == 1)
 8001318:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <SetTimeDown+0x228>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d108      	bne.n	8001332 <SetTimeDown+0x182>
		strcpy(format, "PM");
 8001320:	4a32      	ldr	r2, [pc, #200]	; (80013ec <SetTimeDown+0x23c>)
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	4611      	mov	r1, r2
 800132a:	8019      	strh	r1, [r3, #0]
 800132c:	3302      	adds	r3, #2
 800132e:	0c12      	lsrs	r2, r2, #16
 8001330:	701a      	strb	r2, [r3, #0]
	/****************** Display *************************************/
	if(flag == 1)
 8001332:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <SetTimeDown+0x230>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d111      	bne.n	800135e <SetTimeDown+0x1ae>
		sprintf(temp, "%s %02d:%02d:%02d     ", format, st.h, st.m, st.s);
 800133a:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <SetTimeDown+0x228>)
 800133c:	785b      	ldrb	r3, [r3, #1]
 800133e:	4618      	mov	r0, r3
 8001340:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <SetTimeDown+0x228>)
 8001342:	789b      	ldrb	r3, [r3, #2]
 8001344:	4619      	mov	r1, r3
 8001346:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <SetTimeDown+0x228>)
 8001348:	78db      	ldrb	r3, [r3, #3]
 800134a:	f107 0208 	add.w	r2, r7, #8
 800134e:	9301      	str	r3, [sp, #4]
 8001350:	9100      	str	r1, [sp, #0]
 8001352:	4603      	mov	r3, r0
 8001354:	4926      	ldr	r1, [pc, #152]	; (80013f0 <SetTimeDown+0x240>)
 8001356:	4827      	ldr	r0, [pc, #156]	; (80013f4 <SetTimeDown+0x244>)
 8001358:	f005 fe94 	bl	8007084 <siprintf>
 800135c:	e01b      	b.n	8001396 <SetTimeDown+0x1e6>
	else if(flag == 2)
 800135e:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <SetTimeDown+0x230>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d117      	bne.n	8001396 <SetTimeDown+0x1e6>
		sprintf(temp, "%s %02d:%02d:%02d %s  ", format, st.h, st.m, st.s, alarmSet[alarmMode]);
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <SetTimeDown+0x228>)
 8001368:	785b      	ldrb	r3, [r3, #1]
 800136a:	461c      	mov	r4, r3
 800136c:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <SetTimeDown+0x228>)
 800136e:	789b      	ldrb	r3, [r3, #2]
 8001370:	4619      	mov	r1, r3
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <SetTimeDown+0x228>)
 8001374:	78db      	ldrb	r3, [r3, #3]
 8001376:	4618      	mov	r0, r3
 8001378:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <SetTimeDown+0x234>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4a1e      	ldr	r2, [pc, #120]	; (80013f8 <SetTimeDown+0x248>)
 8001380:	4413      	add	r3, r2
 8001382:	f107 0208 	add.w	r2, r7, #8
 8001386:	9302      	str	r3, [sp, #8]
 8001388:	9001      	str	r0, [sp, #4]
 800138a:	9100      	str	r1, [sp, #0]
 800138c:	4623      	mov	r3, r4
 800138e:	491b      	ldr	r1, [pc, #108]	; (80013fc <SetTimeDown+0x24c>)
 8001390:	4818      	ldr	r0, [pc, #96]	; (80013f4 <SetTimeDown+0x244>)
 8001392:	f005 fe77 	bl	8007084 <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001396:	21c0      	movs	r1, #192	; 0xc0
 8001398:	204e      	movs	r0, #78	; 0x4e
 800139a:	f7ff fe47 	bl	800102c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, temp);
 800139e:	4915      	ldr	r1, [pc, #84]	; (80013f4 <SetTimeDown+0x244>)
 80013a0:	204e      	movs	r0, #78	; 0x4e
 80013a2:	f7ff fe84 	bl	80010ae <LCD_SendString>


	/***************** SetTime 후 커서 되돌리기 **************************/
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 80013a6:	21c0      	movs	r1, #192	; 0xc0
 80013a8:	204e      	movs	r0, #78	; 0x4e
 80013aa:	f7ff fe3f 	bl	800102c <LCD_SendCommand>
	for(int j = 0; j < *location; j++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	e006      	b.n	80013c2 <SetTimeDown+0x212>
	{
		LCD_SendCommand(LCD_ADDR, 0b00010100);
 80013b4:	2114      	movs	r1, #20
 80013b6:	204e      	movs	r0, #78	; 0x4e
 80013b8:	f7ff fe38 	bl	800102c <LCD_SendCommand>
	for(int j = 0; j < *location; j++)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	3301      	adds	r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	dbf3      	blt.n	80013b4 <SetTimeDown+0x204>
	}

}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd90      	pop	{r4, r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200001d8 	.word	0x200001d8
 80013dc:	cccccccd 	.word	0xcccccccd
 80013e0:	20000168 	.word	0x20000168
 80013e4:	20000000 	.word	0x20000000
 80013e8:	0800840c 	.word	0x0800840c
 80013ec:	08008410 	.word	0x08008410
 80013f0:	08008354 	.word	0x08008354
 80013f4:	200001a0 	.word	0x200001a0
 80013f8:	2000000c 	.word	0x2000000c
 80013fc:	08008414 	.word	0x08008414

08001400 <SetTimeUp>:

void SetTimeUp(const int *location)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af04      	add	r7, sp, #16
 8001406:	6078      	str	r0, [r7, #4]
	if(*location == 3) {}
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b03      	cmp	r3, #3
 800140e:	f000 80aa 	beq.w	8001566 <SetTimeUp+0x166>
	else if(*location == 4){
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b04      	cmp	r3, #4
 8001418:	d10e      	bne.n	8001438 <SetTimeUp+0x38>
		if(st.h == 12)
 800141a:	4b89      	ldr	r3, [pc, #548]	; (8001640 <SetTimeUp+0x240>)
 800141c:	785b      	ldrb	r3, [r3, #1]
 800141e:	2b0c      	cmp	r3, #12
 8001420:	d103      	bne.n	800142a <SetTimeUp+0x2a>
			st.h = 0;
 8001422:	4b87      	ldr	r3, [pc, #540]	; (8001640 <SetTimeUp+0x240>)
 8001424:	2200      	movs	r2, #0
 8001426:	705a      	strb	r2, [r3, #1]
 8001428:	e09d      	b.n	8001566 <SetTimeUp+0x166>
		else
			st.h += 1;
 800142a:	4b85      	ldr	r3, [pc, #532]	; (8001640 <SetTimeUp+0x240>)
 800142c:	785b      	ldrb	r3, [r3, #1]
 800142e:	3301      	adds	r3, #1
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4b83      	ldr	r3, [pc, #524]	; (8001640 <SetTimeUp+0x240>)
 8001434:	705a      	strb	r2, [r3, #1]
 8001436:	e096      	b.n	8001566 <SetTimeUp+0x166>
	} else if(*location == 0){
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d110      	bne.n	8001462 <SetTimeUp+0x62>
		if(st.f == 0)
 8001440:	4b7f      	ldr	r3, [pc, #508]	; (8001640 <SetTimeUp+0x240>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d103      	bne.n	8001450 <SetTimeUp+0x50>
			st.f = 1;
 8001448:	4b7d      	ldr	r3, [pc, #500]	; (8001640 <SetTimeUp+0x240>)
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	e08a      	b.n	8001566 <SetTimeUp+0x166>
		else if(st.f == 1)
 8001450:	4b7b      	ldr	r3, [pc, #492]	; (8001640 <SetTimeUp+0x240>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b01      	cmp	r3, #1
 8001456:	f040 8086 	bne.w	8001566 <SetTimeUp+0x166>
			st.f = 0;
 800145a:	4b79      	ldr	r3, [pc, #484]	; (8001640 <SetTimeUp+0x240>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
 8001460:	e081      	b.n	8001566 <SetTimeUp+0x166>
	}
	else if(*location == 6){
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b06      	cmp	r3, #6
 8001468:	d115      	bne.n	8001496 <SetTimeUp+0x96>
		if(st.m >= 50)
 800146a:	4b75      	ldr	r3, [pc, #468]	; (8001640 <SetTimeUp+0x240>)
 800146c:	789b      	ldrb	r3, [r3, #2]
 800146e:	2b31      	cmp	r3, #49	; 0x31
 8001470:	d906      	bls.n	8001480 <SetTimeUp+0x80>
			st.m -= 50;
 8001472:	4b73      	ldr	r3, [pc, #460]	; (8001640 <SetTimeUp+0x240>)
 8001474:	789b      	ldrb	r3, [r3, #2]
 8001476:	3b32      	subs	r3, #50	; 0x32
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b71      	ldr	r3, [pc, #452]	; (8001640 <SetTimeUp+0x240>)
 800147c:	709a      	strb	r2, [r3, #2]
 800147e:	e072      	b.n	8001566 <SetTimeUp+0x166>
		else if(st.m < 50) {
 8001480:	4b6f      	ldr	r3, [pc, #444]	; (8001640 <SetTimeUp+0x240>)
 8001482:	789b      	ldrb	r3, [r3, #2]
 8001484:	2b31      	cmp	r3, #49	; 0x31
 8001486:	d86e      	bhi.n	8001566 <SetTimeUp+0x166>
			st.m += 10;
 8001488:	4b6d      	ldr	r3, [pc, #436]	; (8001640 <SetTimeUp+0x240>)
 800148a:	789b      	ldrb	r3, [r3, #2]
 800148c:	330a      	adds	r3, #10
 800148e:	b2da      	uxtb	r2, r3
 8001490:	4b6b      	ldr	r3, [pc, #428]	; (8001640 <SetTimeUp+0x240>)
 8001492:	709a      	strb	r2, [r3, #2]
 8001494:	e067      	b.n	8001566 <SetTimeUp+0x166>
		}
	} else if (*location == 7){
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b07      	cmp	r3, #7
 800149c:	d11b      	bne.n	80014d6 <SetTimeUp+0xd6>
		if(st.m % 10 == 9)
 800149e:	4b68      	ldr	r3, [pc, #416]	; (8001640 <SetTimeUp+0x240>)
 80014a0:	789a      	ldrb	r2, [r3, #2]
 80014a2:	4b68      	ldr	r3, [pc, #416]	; (8001644 <SetTimeUp+0x244>)
 80014a4:	fba3 1302 	umull	r1, r3, r3, r2
 80014a8:	08d9      	lsrs	r1, r3, #3
 80014aa:	460b      	mov	r3, r1
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b09      	cmp	r3, #9
 80014b8:	d106      	bne.n	80014c8 <SetTimeUp+0xc8>
			st.m -= 9;
 80014ba:	4b61      	ldr	r3, [pc, #388]	; (8001640 <SetTimeUp+0x240>)
 80014bc:	789b      	ldrb	r3, [r3, #2]
 80014be:	3b09      	subs	r3, #9
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4b5f      	ldr	r3, [pc, #380]	; (8001640 <SetTimeUp+0x240>)
 80014c4:	709a      	strb	r2, [r3, #2]
 80014c6:	e04e      	b.n	8001566 <SetTimeUp+0x166>
		else
			st.m++;
 80014c8:	4b5d      	ldr	r3, [pc, #372]	; (8001640 <SetTimeUp+0x240>)
 80014ca:	789b      	ldrb	r3, [r3, #2]
 80014cc:	3301      	adds	r3, #1
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	4b5b      	ldr	r3, [pc, #364]	; (8001640 <SetTimeUp+0x240>)
 80014d2:	709a      	strb	r2, [r3, #2]
 80014d4:	e047      	b.n	8001566 <SetTimeUp+0x166>
	} else if (*location == 9){
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b09      	cmp	r3, #9
 80014dc:	d115      	bne.n	800150a <SetTimeUp+0x10a>
		if(st.s >= 50)
 80014de:	4b58      	ldr	r3, [pc, #352]	; (8001640 <SetTimeUp+0x240>)
 80014e0:	78db      	ldrb	r3, [r3, #3]
 80014e2:	2b31      	cmp	r3, #49	; 0x31
 80014e4:	d906      	bls.n	80014f4 <SetTimeUp+0xf4>
			st.s -=50;
 80014e6:	4b56      	ldr	r3, [pc, #344]	; (8001640 <SetTimeUp+0x240>)
 80014e8:	78db      	ldrb	r3, [r3, #3]
 80014ea:	3b32      	subs	r3, #50	; 0x32
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4b54      	ldr	r3, [pc, #336]	; (8001640 <SetTimeUp+0x240>)
 80014f0:	70da      	strb	r2, [r3, #3]
 80014f2:	e038      	b.n	8001566 <SetTimeUp+0x166>
		else if(st.s < 50)
 80014f4:	4b52      	ldr	r3, [pc, #328]	; (8001640 <SetTimeUp+0x240>)
 80014f6:	78db      	ldrb	r3, [r3, #3]
 80014f8:	2b31      	cmp	r3, #49	; 0x31
 80014fa:	d834      	bhi.n	8001566 <SetTimeUp+0x166>
			st.s +=10;
 80014fc:	4b50      	ldr	r3, [pc, #320]	; (8001640 <SetTimeUp+0x240>)
 80014fe:	78db      	ldrb	r3, [r3, #3]
 8001500:	330a      	adds	r3, #10
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b4e      	ldr	r3, [pc, #312]	; (8001640 <SetTimeUp+0x240>)
 8001506:	70da      	strb	r2, [r3, #3]
 8001508:	e02d      	b.n	8001566 <SetTimeUp+0x166>
	} else if (*location == 10){
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b0a      	cmp	r3, #10
 8001510:	d11b      	bne.n	800154a <SetTimeUp+0x14a>
		if(st.s % 10 == 9)
 8001512:	4b4b      	ldr	r3, [pc, #300]	; (8001640 <SetTimeUp+0x240>)
 8001514:	78da      	ldrb	r2, [r3, #3]
 8001516:	4b4b      	ldr	r3, [pc, #300]	; (8001644 <SetTimeUp+0x244>)
 8001518:	fba3 1302 	umull	r1, r3, r3, r2
 800151c:	08d9      	lsrs	r1, r3, #3
 800151e:	460b      	mov	r3, r1
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	440b      	add	r3, r1
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b09      	cmp	r3, #9
 800152c:	d106      	bne.n	800153c <SetTimeUp+0x13c>
			st.s -=9;
 800152e:	4b44      	ldr	r3, [pc, #272]	; (8001640 <SetTimeUp+0x240>)
 8001530:	78db      	ldrb	r3, [r3, #3]
 8001532:	3b09      	subs	r3, #9
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4b42      	ldr	r3, [pc, #264]	; (8001640 <SetTimeUp+0x240>)
 8001538:	70da      	strb	r2, [r3, #3]
 800153a:	e014      	b.n	8001566 <SetTimeUp+0x166>
		else
			st.s++;
 800153c:	4b40      	ldr	r3, [pc, #256]	; (8001640 <SetTimeUp+0x240>)
 800153e:	78db      	ldrb	r3, [r3, #3]
 8001540:	3301      	adds	r3, #1
 8001542:	b2da      	uxtb	r2, r3
 8001544:	4b3e      	ldr	r3, [pc, #248]	; (8001640 <SetTimeUp+0x240>)
 8001546:	70da      	strb	r2, [r3, #3]
 8001548:	e00d      	b.n	8001566 <SetTimeUp+0x166>
	} else if (*location == 12 && flag == 2)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b0c      	cmp	r3, #12
 8001550:	d109      	bne.n	8001566 <SetTimeUp+0x166>
 8001552:	4b3d      	ldr	r3, [pc, #244]	; (8001648 <SetTimeUp+0x248>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d105      	bne.n	8001566 <SetTimeUp+0x166>
		alarmMode ^= 1;
 800155a:	4b3c      	ldr	r3, [pc, #240]	; (800164c <SetTimeUp+0x24c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f083 0301 	eor.w	r3, r3, #1
 8001562:	4a3a      	ldr	r2, [pc, #232]	; (800164c <SetTimeUp+0x24c>)
 8001564:	6013      	str	r3, [r2, #0]
	char format[3];
	if(st.f == 0)
 8001566:	4b36      	ldr	r3, [pc, #216]	; (8001640 <SetTimeUp+0x240>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d109      	bne.n	8001582 <SetTimeUp+0x182>
		strcpy(format, "AM");
 800156e:	4a38      	ldr	r2, [pc, #224]	; (8001650 <SetTimeUp+0x250>)
 8001570:	f107 0308 	add.w	r3, r7, #8
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	4611      	mov	r1, r2
 8001578:	8019      	strh	r1, [r3, #0]
 800157a:	3302      	adds	r3, #2
 800157c:	0c12      	lsrs	r2, r2, #16
 800157e:	701a      	strb	r2, [r3, #0]
 8001580:	e00c      	b.n	800159c <SetTimeUp+0x19c>
	else if(st.f == 1)
 8001582:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <SetTimeUp+0x240>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d108      	bne.n	800159c <SetTimeUp+0x19c>
		strcpy(format, "PM");
 800158a:	4a32      	ldr	r2, [pc, #200]	; (8001654 <SetTimeUp+0x254>)
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	4611      	mov	r1, r2
 8001594:	8019      	strh	r1, [r3, #0]
 8001596:	3302      	adds	r3, #2
 8001598:	0c12      	lsrs	r2, r2, #16
 800159a:	701a      	strb	r2, [r3, #0]
	/****************** Display *************************************/
	if(flag == 1)
 800159c:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <SetTimeUp+0x248>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d111      	bne.n	80015c8 <SetTimeUp+0x1c8>
		sprintf(temp, "%s %02d:%02d:%02d Save", format, st.h, st.m, st.s);
 80015a4:	4b26      	ldr	r3, [pc, #152]	; (8001640 <SetTimeUp+0x240>)
 80015a6:	785b      	ldrb	r3, [r3, #1]
 80015a8:	4618      	mov	r0, r3
 80015aa:	4b25      	ldr	r3, [pc, #148]	; (8001640 <SetTimeUp+0x240>)
 80015ac:	789b      	ldrb	r3, [r3, #2]
 80015ae:	4619      	mov	r1, r3
 80015b0:	4b23      	ldr	r3, [pc, #140]	; (8001640 <SetTimeUp+0x240>)
 80015b2:	78db      	ldrb	r3, [r3, #3]
 80015b4:	f107 0208 	add.w	r2, r7, #8
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	9100      	str	r1, [sp, #0]
 80015bc:	4603      	mov	r3, r0
 80015be:	4926      	ldr	r1, [pc, #152]	; (8001658 <SetTimeUp+0x258>)
 80015c0:	4826      	ldr	r0, [pc, #152]	; (800165c <SetTimeUp+0x25c>)
 80015c2:	f005 fd5f 	bl	8007084 <siprintf>
 80015c6:	e01b      	b.n	8001600 <SetTimeUp+0x200>
	else if(flag == 2)
 80015c8:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <SetTimeUp+0x248>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d117      	bne.n	8001600 <SetTimeUp+0x200>
		sprintf(temp, "%s %02d:%02d:%02d %s  ", format, st.h, st.m, st.s, alarmSet[alarmMode]);
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <SetTimeUp+0x240>)
 80015d2:	785b      	ldrb	r3, [r3, #1]
 80015d4:	461c      	mov	r4, r3
 80015d6:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <SetTimeUp+0x240>)
 80015d8:	789b      	ldrb	r3, [r3, #2]
 80015da:	4619      	mov	r1, r3
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <SetTimeUp+0x240>)
 80015de:	78db      	ldrb	r3, [r3, #3]
 80015e0:	4618      	mov	r0, r3
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <SetTimeUp+0x24c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <SetTimeUp+0x260>)
 80015ea:	4413      	add	r3, r2
 80015ec:	f107 0208 	add.w	r2, r7, #8
 80015f0:	9302      	str	r3, [sp, #8]
 80015f2:	9001      	str	r0, [sp, #4]
 80015f4:	9100      	str	r1, [sp, #0]
 80015f6:	4623      	mov	r3, r4
 80015f8:	491a      	ldr	r1, [pc, #104]	; (8001664 <SetTimeUp+0x264>)
 80015fa:	4818      	ldr	r0, [pc, #96]	; (800165c <SetTimeUp+0x25c>)
 80015fc:	f005 fd42 	bl	8007084 <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001600:	21c0      	movs	r1, #192	; 0xc0
 8001602:	204e      	movs	r0, #78	; 0x4e
 8001604:	f7ff fd12 	bl	800102c <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, temp);
 8001608:	4914      	ldr	r1, [pc, #80]	; (800165c <SetTimeUp+0x25c>)
 800160a:	204e      	movs	r0, #78	; 0x4e
 800160c:	f7ff fd4f 	bl	80010ae <LCD_SendString>


	/***************** SetTime 후 커서 되돌리기 **************************/
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001610:	21c0      	movs	r1, #192	; 0xc0
 8001612:	204e      	movs	r0, #78	; 0x4e
 8001614:	f7ff fd0a 	bl	800102c <LCD_SendCommand>
	for(int j = 0; j < *location; j++)
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	e006      	b.n	800162c <SetTimeUp+0x22c>
	{
		LCD_SendCommand(LCD_ADDR, 0b00010100);
 800161e:	2114      	movs	r1, #20
 8001620:	204e      	movs	r0, #78	; 0x4e
 8001622:	f7ff fd03 	bl	800102c <LCD_SendCommand>
	for(int j = 0; j < *location; j++)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3301      	adds	r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	429a      	cmp	r2, r3
 8001634:	dbf3      	blt.n	800161e <SetTimeUp+0x21e>
	}
}
 8001636:	bf00      	nop
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	bd90      	pop	{r4, r7, pc}
 8001640:	200001d8 	.word	0x200001d8
 8001644:	cccccccd 	.word	0xcccccccd
 8001648:	20000168 	.word	0x20000168
 800164c:	20000000 	.word	0x20000000
 8001650:	0800840c 	.word	0x0800840c
 8001654:	08008410 	.word	0x08008410
 8001658:	0800842c 	.word	0x0800842c
 800165c:	200001a0 	.word	0x200001a0
 8001660:	2000000c 	.word	0x2000000c
 8001664:	08008414 	.word	0x08008414

08001668 <AdcSwitch>:


void AdcSwitch(uint8_t *adc_point, int *location)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
	//***************** UP *************************************************
	if ((ADC_value <= UP_KEY_MAX) && (*adc_point != 1)){
 8001672:	4b81      	ldr	r3, [pc, #516]	; (8001878 <AdcSwitch+0x210>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b0f      	cmp	r3, #15
 8001678:	dc0f      	bgt.n	800169a <AdcSwitch+0x32>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d00b      	beq.n	800169a <AdcSwitch+0x32>
		*adc_point = 1;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]
		printf("ADC_value = %d\r\n", ADC_value);
 8001688:	4b7b      	ldr	r3, [pc, #492]	; (8001878 <AdcSwitch+0x210>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	487b      	ldr	r0, [pc, #492]	; (800187c <AdcSwitch+0x214>)
 8001690:	f005 fc36 	bl	8006f00 <iprintf>
		SetTimeUp(location);
 8001694:	6838      	ldr	r0, [r7, #0]
 8001696:	f7ff feb3 	bl	8001400 <SetTimeUp>
	}
	//***************** DOWN ***********************************************
	if ((ADC_value >= DOWN_KEY_MIN && ADC_value <= DOWN_KEY_MAX)
 800169a:	4b77      	ldr	r3, [pc, #476]	; (8001878 <AdcSwitch+0x210>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f240 323d 	movw	r2, #829	; 0x33d
 80016a2:	4293      	cmp	r3, r2
 80016a4:	dd15      	ble.n	80016d2 <AdcSwitch+0x6a>
 80016a6:	4b74      	ldr	r3, [pc, #464]	; (8001878 <AdcSwitch+0x210>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f240 3266 	movw	r2, #870	; 0x366
 80016ae:	4293      	cmp	r3, r2
 80016b0:	dc0f      	bgt.n	80016d2 <AdcSwitch+0x6a>
			&& (*adc_point != 2)) {
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d00b      	beq.n	80016d2 <AdcSwitch+0x6a>
		*adc_point = 2;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2202      	movs	r2, #2
 80016be:	701a      	strb	r2, [r3, #0]
		printf("ADC_value = %d\r\n", ADC_value);
 80016c0:	4b6d      	ldr	r3, [pc, #436]	; (8001878 <AdcSwitch+0x210>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	486d      	ldr	r0, [pc, #436]	; (800187c <AdcSwitch+0x214>)
 80016c8:	f005 fc1a 	bl	8006f00 <iprintf>
		SetTimeDown(location);
 80016cc:	6838      	ldr	r0, [r7, #0]
 80016ce:	f7ff fd6f 	bl	80011b0 <SetTimeDown>
	}
	//****************** LEFT **********************************************
	if ((ADC_value >= LEFT_KEY_MIN && ADC_value <= LEFT_KEY_MAX)
 80016d2:	4b69      	ldr	r3, [pc, #420]	; (8001878 <AdcSwitch+0x210>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f240 7275 	movw	r2, #1909	; 0x775
 80016da:	4293      	cmp	r3, r2
 80016dc:	dd59      	ble.n	8001792 <AdcSwitch+0x12a>
 80016de:	4b66      	ldr	r3, [pc, #408]	; (8001878 <AdcSwitch+0x210>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f5b3 6ff5 	cmp.w	r3, #1960	; 0x7a8
 80016e6:	dc54      	bgt.n	8001792 <AdcSwitch+0x12a>
			&& (*adc_point != 3)) {
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d050      	beq.n	8001792 <AdcSwitch+0x12a>
		printf("ADC_value = %d\r\n", ADC_value);
 80016f0:	4b61      	ldr	r3, [pc, #388]	; (8001878 <AdcSwitch+0x210>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	4861      	ldr	r0, [pc, #388]	; (800187c <AdcSwitch+0x214>)
 80016f8:	f005 fc02 	bl	8006f00 <iprintf>
		*adc_point = 3;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2203      	movs	r2, #3
 8001700:	701a      	strb	r2, [r3, #0]
	//****************** LEFT **********************************************
		if(*location <= 0){
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	dc10      	bgt.n	800172c <AdcSwitch+0xc4>
			for(int r = 0; r < 12; r++){
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	e006      	b.n	800171e <AdcSwitch+0xb6>
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001710:	2114      	movs	r1, #20
 8001712:	204e      	movs	r0, #78	; 0x4e
 8001714:	f7ff fc8a 	bl	800102c <LCD_SendCommand>
			for(int r = 0; r < 12; r++){
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	3301      	adds	r3, #1
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2b0b      	cmp	r3, #11
 8001722:	ddf5      	ble.n	8001710 <AdcSwitch+0xa8>
			}

		*location = 12;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	220c      	movs	r2, #12
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	e032      	b.n	8001792 <AdcSwitch+0x12a>
		}

		else
		{
			if(*location == 4)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b04      	cmp	r3, #4
 8001732:	d110      	bne.n	8001756 <AdcSwitch+0xee>
			{
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001734:	2110      	movs	r1, #16
 8001736:	204e      	movs	r0, #78	; 0x4e
 8001738:	f7ff fc78 	bl	800102c <LCD_SendCommand>
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 800173c:	2110      	movs	r1, #16
 800173e:	204e      	movs	r0, #78	; 0x4e
 8001740:	f7ff fc74 	bl	800102c <LCD_SendCommand>
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001744:	2110      	movs	r1, #16
 8001746:	204e      	movs	r0, #78	; 0x4e
 8001748:	f7ff fc70 	bl	800102c <LCD_SendCommand>
				(*location) -= 3;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	1eda      	subs	r2, r3, #3
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	601a      	str	r2, [r3, #0]
			}
			if(*location == 6 || *location == 9 || *location == 12)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b06      	cmp	r3, #6
 800175c:	d007      	beq.n	800176e <AdcSwitch+0x106>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b09      	cmp	r3, #9
 8001764:	d003      	beq.n	800176e <AdcSwitch+0x106>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b0c      	cmp	r3, #12
 800176c:	d108      	bne.n	8001780 <AdcSwitch+0x118>
			{
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 800176e:	2110      	movs	r1, #16
 8001770:	204e      	movs	r0, #78	; 0x4e
 8001772:	f7ff fc5b 	bl	800102c <LCD_SendCommand>
				(*location) -= 1;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	1e5a      	subs	r2, r3, #1
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	601a      	str	r2, [r3, #0]
			}
			LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001780:	2110      	movs	r1, #16
 8001782:	204e      	movs	r0, #78	; 0x4e
 8001784:	f7ff fc52 	bl	800102c <LCD_SendCommand>
			(*location)--;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	1e5a      	subs	r2, r3, #1
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	601a      	str	r2, [r3, #0]
		}
	}
	//***************** RIGHT **********************************************
	if ((ADC_value >= RIGHT_KEY_MIN && ADC_value <= RIGHT_KEY_MAX)
 8001792:	4b39      	ldr	r3, [pc, #228]	; (8001878 <AdcSwitch+0x210>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f640 3267 	movw	r2, #2919	; 0xb67
 800179a:	4293      	cmp	r3, r2
 800179c:	dd5a      	ble.n	8001854 <AdcSwitch+0x1ec>
 800179e:	4b36      	ldr	r3, [pc, #216]	; (8001878 <AdcSwitch+0x210>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f640 32c2 	movw	r2, #3010	; 0xbc2
 80017a6:	4293      	cmp	r3, r2
 80017a8:	dc54      	bgt.n	8001854 <AdcSwitch+0x1ec>
			&& (*adc_point != 4)) {
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d050      	beq.n	8001854 <AdcSwitch+0x1ec>
		printf("ADC_value = %d\r\n", ADC_value);
 80017b2:	4b31      	ldr	r3, [pc, #196]	; (8001878 <AdcSwitch+0x210>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4619      	mov	r1, r3
 80017b8:	4830      	ldr	r0, [pc, #192]	; (800187c <AdcSwitch+0x214>)
 80017ba:	f005 fba1 	bl	8006f00 <iprintf>
		*adc_point = 4;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2204      	movs	r2, #4
 80017c2:	701a      	strb	r2, [r3, #0]
	//***************** RIGHT **********************************************
		if (*location >= 12){
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b0b      	cmp	r3, #11
 80017ca:	dd10      	ble.n	80017ee <AdcSwitch+0x186>
			for(int l = 12; l > 0; l--){
 80017cc:	230c      	movs	r3, #12
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	e006      	b.n	80017e0 <AdcSwitch+0x178>
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 80017d2:	2110      	movs	r1, #16
 80017d4:	204e      	movs	r0, #78	; 0x4e
 80017d6:	f7ff fc29 	bl	800102c <LCD_SendCommand>
			for(int l = 12; l > 0; l--){
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	3b01      	subs	r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	dcf5      	bgt.n	80017d2 <AdcSwitch+0x16a>
			}
			*location = 0;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e032      	b.n	8001854 <AdcSwitch+0x1ec>
		}
		else
		{
			if(*location == 0)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d110      	bne.n	8001818 <AdcSwitch+0x1b0>
			{
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 80017f6:	2114      	movs	r1, #20
 80017f8:	204e      	movs	r0, #78	; 0x4e
 80017fa:	f7ff fc17 	bl	800102c <LCD_SendCommand>
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 80017fe:	2114      	movs	r1, #20
 8001800:	204e      	movs	r0, #78	; 0x4e
 8001802:	f7ff fc13 	bl	800102c <LCD_SendCommand>
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001806:	2114      	movs	r1, #20
 8001808:	204e      	movs	r0, #78	; 0x4e
 800180a:	f7ff fc0f 	bl	800102c <LCD_SendCommand>
				(*location) += 3;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	1cda      	adds	r2, r3, #3
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	601a      	str	r2, [r3, #0]
			}
			if(*location == 4 || *location == 7 || *location == 10)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b04      	cmp	r3, #4
 800181e:	d007      	beq.n	8001830 <AdcSwitch+0x1c8>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b07      	cmp	r3, #7
 8001826:	d003      	beq.n	8001830 <AdcSwitch+0x1c8>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b0a      	cmp	r3, #10
 800182e:	d108      	bne.n	8001842 <AdcSwitch+0x1da>
			{
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001830:	2114      	movs	r1, #20
 8001832:	204e      	movs	r0, #78	; 0x4e
 8001834:	f7ff fbfa 	bl	800102c <LCD_SendCommand>
				(*location) += 1;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	601a      	str	r2, [r3, #0]
			}
			LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001842:	2114      	movs	r1, #20
 8001844:	204e      	movs	r0, #78	; 0x4e
 8001846:	f7ff fbf1 	bl	800102c <LCD_SendCommand>
			(*location)++;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	601a      	str	r2, [r3, #0]
		}
	}
	if (ADC_value > RIGHT_KEY_MAX && *adc_point != 0) {
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <AdcSwitch+0x210>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f640 32c2 	movw	r2, #3010	; 0xbc2
 800185c:	4293      	cmp	r3, r2
 800185e:	dd06      	ble.n	800186e <AdcSwitch+0x206>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <AdcSwitch+0x206>
		*adc_point = 0;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
	}
	//**********************************************************************

}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000164 	.word	0x20000164
 800187c:	08008444 	.word	0x08008444

08001880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001884:	b672      	cpsid	i
}
 8001886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001888:	e7fe      	b.n	8001888 <Error_Handler+0x8>
	...

0800188c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80018a0:	2300      	movs	r3, #0
 80018a2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018a4:	4b25      	ldr	r3, [pc, #148]	; (800193c <MX_RTC_Init+0xb0>)
 80018a6:	4a26      	ldr	r2, [pc, #152]	; (8001940 <MX_RTC_Init+0xb4>)
 80018a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80018aa:	4b24      	ldr	r3, [pc, #144]	; (800193c <MX_RTC_Init+0xb0>)
 80018ac:	2240      	movs	r2, #64	; 0x40
 80018ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80018b0:	4b22      	ldr	r3, [pc, #136]	; (800193c <MX_RTC_Init+0xb0>)
 80018b2:	227f      	movs	r2, #127	; 0x7f
 80018b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80018b6:	4b21      	ldr	r3, [pc, #132]	; (800193c <MX_RTC_Init+0xb0>)
 80018b8:	22ff      	movs	r2, #255	; 0xff
 80018ba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018bc:	4b1f      	ldr	r3, [pc, #124]	; (800193c <MX_RTC_Init+0xb0>)
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018c2:	4b1e      	ldr	r3, [pc, #120]	; (800193c <MX_RTC_Init+0xb0>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018c8:	4b1c      	ldr	r3, [pc, #112]	; (800193c <MX_RTC_Init+0xb0>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018ce:	481b      	ldr	r0, [pc, #108]	; (800193c <MX_RTC_Init+0xb0>)
 80018d0:	f002 ff96 	bl	8004800 <HAL_RTC_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80018da:	f7ff ffd1 	bl	8001880 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 80018de:	2301      	movs	r3, #1
 80018e0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80018ea:	2300      	movs	r3, #0
 80018ec:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	2200      	movs	r2, #0
 80018fa:	4619      	mov	r1, r3
 80018fc:	480f      	ldr	r0, [pc, #60]	; (800193c <MX_RTC_Init+0xb0>)
 80018fe:	f002 fff5 	bl	80048ec <HAL_RTC_SetTime>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8001908:	f7ff ffba 	bl	8001880 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800190c:	2301      	movs	r3, #1
 800190e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001910:	2301      	movs	r3, #1
 8001912:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001914:	2301      	movs	r3, #1
 8001916:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800191c:	463b      	mov	r3, r7
 800191e:	2200      	movs	r2, #0
 8001920:	4619      	mov	r1, r3
 8001922:	4806      	ldr	r0, [pc, #24]	; (800193c <MX_RTC_Init+0xb0>)
 8001924:	f003 f8da 	bl	8004adc <HAL_RTC_SetDate>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 800192e:	f7ff ffa7 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200001e0 	.word	0x200001e0
 8001940:	40002800 	.word	0x40002800

08001944 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08e      	sub	sp, #56	; 0x38
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800194c:	f107 0308 	add.w	r3, r7, #8
 8001950:	2230      	movs	r2, #48	; 0x30
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f005 facb 	bl	8006ef0 <memset>
  if(rtcHandle->Instance==RTC)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a0c      	ldr	r2, [pc, #48]	; (8001990 <HAL_RTC_MspInit+0x4c>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d111      	bne.n	8001988 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001964:	2320      	movs	r3, #32
 8001966:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800196c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800196e:	f107 0308 	add.w	r3, r7, #8
 8001972:	4618      	mov	r0, r3
 8001974:	f002 fd84 	bl	8004480 <HAL_RCCEx_PeriphCLKConfig>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800197e:	f7ff ff7f 	bl	8001880 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001982:	4b04      	ldr	r3, [pc, #16]	; (8001994 <HAL_RTC_MspInit+0x50>)
 8001984:	2201      	movs	r2, #1
 8001986:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001988:	bf00      	nop
 800198a:	3738      	adds	r7, #56	; 0x38
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40002800 	.word	0x40002800
 8001994:	42470e3c 	.word	0x42470e3c

08001998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <HAL_MspInit+0x4c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	4a0f      	ldr	r2, [pc, #60]	; (80019e4 <HAL_MspInit+0x4c>)
 80019a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ac:	6453      	str	r3, [r2, #68]	; 0x44
 80019ae:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <HAL_MspInit+0x4c>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_MspInit+0x4c>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <HAL_MspInit+0x4c>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_MspInit+0x4c>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <NMI_Handler+0x4>

080019ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <HardFault_Handler+0x4>

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <MemManage_Handler+0x4>

080019fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <BusFault_Handler+0x4>

08001a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <UsageFault_Handler+0x4>

08001a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a34:	f000 fb58 	bl	80020e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <TIM3_IRQHandler+0x10>)
 8001a42:	f003 fbbd 	bl	80051c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000024c 	.word	0x2000024c

08001a50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <USART3_IRQHandler+0x10>)
 8001a56:	f004 faed 	bl	8006034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200002d8 	.word	0x200002d8

08001a64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a6c:	f001 fa54 	bl	8002f18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	e00a      	b.n	8001a9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a86:	f3af 8000 	nop.w
 8001a8a:	4601      	mov	r1, r0
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	60ba      	str	r2, [r7, #8]
 8001a92:	b2ca      	uxtb	r2, r1
 8001a94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dbf0      	blt.n	8001a86 <_read+0x12>
	}

return len;
 8001aa4:	687b      	ldr	r3, [r7, #4]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	e009      	b.n	8001ad4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	60ba      	str	r2, [r7, #8]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fef9 	bl	80008c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dbf1      	blt.n	8001ac0 <_write+0x12>
	}
	return len;
 8001adc:	687b      	ldr	r3, [r7, #4]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <_close>:

int _close(int file)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
	return -1;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b0e:	605a      	str	r2, [r3, #4]
	return 0;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <_isatty>:

int _isatty(int file)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
	return 1;
 8001b26:	2301      	movs	r3, #1
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b58:	4a14      	ldr	r2, [pc, #80]	; (8001bac <_sbrk+0x5c>)
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <_sbrk+0x60>)
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <_sbrk+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <_sbrk+0x64>)
 8001b6e:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <_sbrk+0x68>)
 8001b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d207      	bcs.n	8001b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b80:	f005 f98c 	bl	8006e9c <__errno>
 8001b84:	4603      	mov	r3, r0
 8001b86:	220c      	movs	r2, #12
 8001b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8e:	e009      	b.n	8001ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <_sbrk+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <_sbrk+0x64>)
 8001ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20030000 	.word	0x20030000
 8001bb0:	00000400 	.word	0x00000400
 8001bb4:	20000200 	.word	0x20000200
 8001bb8:	20000330 	.word	0x20000330

08001bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <SystemInit+0x20>)
 8001bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <SystemInit+0x20>)
 8001bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08e      	sub	sp, #56	; 0x38
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001be6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
 8001bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf4:	f107 0320 	add.w	r3, r7, #32
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
 8001c0c:	615a      	str	r2, [r3, #20]
 8001c0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c10:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001c12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8001c18:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001c1a:	22b3      	movs	r2, #179	; 0xb3
 8001c1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001c1e:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001c20:	2210      	movs	r2, #16
 8001c22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001c24:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001c26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2c:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c32:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c38:	4823      	ldr	r0, [pc, #140]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001c3a:	f003 f8df 	bl	8004dfc <HAL_TIM_Base_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c44:	f7ff fe1c 	bl	8001880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c52:	4619      	mov	r1, r3
 8001c54:	481c      	ldr	r0, [pc, #112]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001c56:	f003 fc7d 	bl	8005554 <HAL_TIM_ConfigClockSource>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001c60:	f7ff fe0e 	bl	8001880 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c64:	4818      	ldr	r0, [pc, #96]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001c66:	f003 f989 	bl	8004f7c <HAL_TIM_PWM_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001c70:	f7ff fe06 	bl	8001880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c74:	2300      	movs	r3, #0
 8001c76:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c7c:	f107 0320 	add.w	r3, r7, #32
 8001c80:	4619      	mov	r1, r3
 8001c82:	4811      	ldr	r0, [pc, #68]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001c84:	f004 f866 	bl	8005d54 <HAL_TIMEx_MasterConfigSynchronization>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001c8e:	f7ff fdf7 	bl	8001880 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c92:	2360      	movs	r3, #96	; 0x60
 8001c94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4807      	ldr	r0, [pc, #28]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001caa:	f003 fb91 	bl	80053d0 <HAL_TIM_PWM_ConfigChannel>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001cb4:	f7ff fde4 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cb8:	4803      	ldr	r0, [pc, #12]	; (8001cc8 <MX_TIM2_Init+0xe8>)
 8001cba:	f000 f891 	bl	8001de0 <HAL_TIM_MspPostInit>

}
 8001cbe:	bf00      	nop
 8001cc0:	3738      	adds	r7, #56	; 0x38
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000204 	.word	0x20000204

08001ccc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd2:	f107 0308 	add.w	r3, r7, #8
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce0:	463b      	mov	r3, r7
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <MX_TIM3_Init+0x94>)
 8001cea:	4a1e      	ldr	r2, [pc, #120]	; (8001d64 <MX_TIM3_Init+0x98>)
 8001cec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 8001cee:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <MX_TIM3_Init+0x94>)
 8001cf0:	f242 7210 	movw	r2, #10000	; 0x2710
 8001cf4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <MX_TIM3_Init+0x94>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 900;
 8001cfc:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <MX_TIM3_Init+0x94>)
 8001cfe:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001d02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d04:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <MX_TIM3_Init+0x94>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <MX_TIM3_Init+0x94>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d10:	4813      	ldr	r0, [pc, #76]	; (8001d60 <MX_TIM3_Init+0x94>)
 8001d12:	f003 f873 	bl	8004dfc <HAL_TIM_Base_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001d1c:	f7ff fdb0 	bl	8001880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d26:	f107 0308 	add.w	r3, r7, #8
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	480c      	ldr	r0, [pc, #48]	; (8001d60 <MX_TIM3_Init+0x94>)
 8001d2e:	f003 fc11 	bl	8005554 <HAL_TIM_ConfigClockSource>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001d38:	f7ff fda2 	bl	8001880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d44:	463b      	mov	r3, r7
 8001d46:	4619      	mov	r1, r3
 8001d48:	4805      	ldr	r0, [pc, #20]	; (8001d60 <MX_TIM3_Init+0x94>)
 8001d4a:	f004 f803 	bl	8005d54 <HAL_TIMEx_MasterConfigSynchronization>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001d54:	f7ff fd94 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d58:	bf00      	nop
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	2000024c 	.word	0x2000024c
 8001d64:	40000400 	.word	0x40000400

08001d68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d78:	d10e      	bne.n	8001d98 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <HAL_TIM_Base_MspInit+0x70>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a15      	ldr	r2, [pc, #84]	; (8001dd8 <HAL_TIM_Base_MspInit+0x70>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <HAL_TIM_Base_MspInit+0x70>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d96:	e01a      	b.n	8001dce <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM3)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0f      	ldr	r2, [pc, #60]	; (8001ddc <HAL_TIM_Base_MspInit+0x74>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d115      	bne.n	8001dce <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <HAL_TIM_Base_MspInit+0x70>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <HAL_TIM_Base_MspInit+0x70>)
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	6413      	str	r3, [r2, #64]	; 0x40
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_TIM_Base_MspInit+0x70>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	201d      	movs	r0, #29
 8001dc4:	f000 fe01 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dc8:	201d      	movs	r0, #29
 8001dca:	f000 fe1a 	bl	8002a02 <HAL_NVIC_EnableIRQ>
}
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40000400 	.word	0x40000400

08001de0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 030c 	add.w	r3, r7, #12
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e00:	d11d      	bne.n	8001e3e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <HAL_TIM_MspPostInit+0x68>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a0f      	ldr	r2, [pc, #60]	; (8001e48 <HAL_TIM_MspPostInit+0x68>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <HAL_TIM_MspPostInit+0x68>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 030c 	add.w	r3, r7, #12
 8001e36:	4619      	mov	r1, r3
 8001e38:	4804      	ldr	r0, [pc, #16]	; (8001e4c <HAL_TIM_MspPostInit+0x6c>)
 8001e3a:	f000 fe8f 	bl	8002b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e3e:	bf00      	nop
 8001e40:	3720      	adds	r7, #32
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40020000 	.word	0x40020000

08001e50 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <MX_USART2_UART_Init+0x50>)
 8001e58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e76:	220c      	movs	r2, #12
 8001e78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e86:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e88:	f003 fff4 	bl	8005e74 <HAL_UART_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e92:	f7ff fcf5 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000294 	.word	0x20000294
 8001ea0:	40004400 	.word	0x40004400

08001ea4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <MX_USART3_UART_Init+0x50>)
 8001eac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001eca:	220c      	movs	r2, #12
 8001ecc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <MX_USART3_UART_Init+0x4c>)
 8001edc:	f003 ffca 	bl	8005e74 <HAL_UART_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ee6:	f7ff fccb 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200002d8 	.word	0x200002d8
 8001ef4:	40004800 	.word	0x40004800

08001ef8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08c      	sub	sp, #48	; 0x30
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a32      	ldr	r2, [pc, #200]	; (8001fe0 <HAL_UART_MspInit+0xe8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d12c      	bne.n	8001f74 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
 8001f1e:	4b31      	ldr	r3, [pc, #196]	; (8001fe4 <HAL_UART_MspInit+0xec>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a30      	ldr	r2, [pc, #192]	; (8001fe4 <HAL_UART_MspInit+0xec>)
 8001f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2a:	4b2e      	ldr	r3, [pc, #184]	; (8001fe4 <HAL_UART_MspInit+0xec>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	4b2a      	ldr	r3, [pc, #168]	; (8001fe4 <HAL_UART_MspInit+0xec>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a29      	ldr	r2, [pc, #164]	; (8001fe4 <HAL_UART_MspInit+0xec>)
 8001f40:	f043 0308 	orr.w	r3, r3, #8
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <HAL_UART_MspInit+0xec>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001f52:	2360      	movs	r3, #96	; 0x60
 8001f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f62:	2307      	movs	r3, #7
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f66:	f107 031c 	add.w	r3, r7, #28
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	481e      	ldr	r0, [pc, #120]	; (8001fe8 <HAL_UART_MspInit+0xf0>)
 8001f6e:	f000 fdf5 	bl	8002b5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f72:	e031      	b.n	8001fd8 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a1c      	ldr	r2, [pc, #112]	; (8001fec <HAL_UART_MspInit+0xf4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d12c      	bne.n	8001fd8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <HAL_UART_MspInit+0xec>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <HAL_UART_MspInit+0xec>)
 8001f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <HAL_UART_MspInit+0xec>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <HAL_UART_MspInit+0xec>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <HAL_UART_MspInit+0xec>)
 8001fa4:	f043 0308 	orr.w	r3, r3, #8
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <HAL_UART_MspInit+0xec>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fc8:	2307      	movs	r3, #7
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fcc:	f107 031c 	add.w	r3, r7, #28
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <HAL_UART_MspInit+0xf0>)
 8001fd4:	f000 fdc2 	bl	8002b5c <HAL_GPIO_Init>
}
 8001fd8:	bf00      	nop
 8001fda:	3730      	adds	r7, #48	; 0x30
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40004400 	.word	0x40004400
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40020c00 	.word	0x40020c00
 8001fec:	40004800 	.word	0x40004800

08001ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002028 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ff4:	480d      	ldr	r0, [pc, #52]	; (800202c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ff6:	490e      	ldr	r1, [pc, #56]	; (8002030 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ff8:	4a0e      	ldr	r2, [pc, #56]	; (8002034 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ffc:	e002      	b.n	8002004 <LoopCopyDataInit>

08001ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002002:	3304      	adds	r3, #4

08002004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002008:	d3f9      	bcc.n	8001ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800200a:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800200c:	4c0b      	ldr	r4, [pc, #44]	; (800203c <LoopFillZerobss+0x26>)
  movs r3, #0
 800200e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002010:	e001      	b.n	8002016 <LoopFillZerobss>

08002012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002014:	3204      	adds	r2, #4

08002016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002018:	d3fb      	bcc.n	8002012 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800201a:	f7ff fdcf 	bl	8001bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800201e:	f004 ff43 	bl	8006ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002022:	f7fe fc5f 	bl	80008e4 <main>
  bx  lr    
 8002026:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002028:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800202c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002030:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002034:	08008518 	.word	0x08008518
  ldr r2, =_sbss
 8002038:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800203c:	20000330 	.word	0x20000330

08002040 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002040:	e7fe      	b.n	8002040 <ADC_IRQHandler>
	...

08002044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002048:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <HAL_Init+0x40>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0d      	ldr	r2, [pc, #52]	; (8002084 <HAL_Init+0x40>)
 800204e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002052:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_Init+0x40>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <HAL_Init+0x40>)
 800205a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800205e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002060:	4b08      	ldr	r3, [pc, #32]	; (8002084 <HAL_Init+0x40>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a07      	ldr	r2, [pc, #28]	; (8002084 <HAL_Init+0x40>)
 8002066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800206c:	2003      	movs	r0, #3
 800206e:	f000 fca1 	bl	80029b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002072:	200f      	movs	r0, #15
 8002074:	f000 f808 	bl	8002088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002078:	f7ff fc8e 	bl	8001998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40023c00 	.word	0x40023c00

08002088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_InitTick+0x54>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_InitTick+0x58>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	4619      	mov	r1, r3
 800209a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800209e:	fbb3 f3f1 	udiv	r3, r3, r1
 80020a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 fcb9 	bl	8002a1e <HAL_SYSTICK_Config>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00e      	b.n	80020d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b0f      	cmp	r3, #15
 80020ba:	d80a      	bhi.n	80020d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020bc:	2200      	movs	r2, #0
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	f000 fc81 	bl	80029ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c8:	4a06      	ldr	r2, [pc, #24]	; (80020e4 <HAL_InitTick+0x5c>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e000      	b.n	80020d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000014 	.word	0x20000014
 80020e0:	2000001c 	.word	0x2000001c
 80020e4:	20000018 	.word	0x20000018

080020e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_IncTick+0x20>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_IncTick+0x24>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	4a04      	ldr	r2, [pc, #16]	; (800210c <HAL_IncTick+0x24>)
 80020fa:	6013      	str	r3, [r2, #0]
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	2000001c 	.word	0x2000001c
 800210c:	2000031c 	.word	0x2000031c

08002110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return uwTick;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_GetTick+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	2000031c 	.word	0x2000031c

08002128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002130:	f7ff ffee 	bl	8002110 <HAL_GetTick>
 8002134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002140:	d005      	beq.n	800214e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_Delay+0x44>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800214e:	bf00      	nop
 8002150:	f7ff ffde 	bl	8002110 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	429a      	cmp	r2, r3
 800215e:	d8f7      	bhi.n	8002150 <HAL_Delay+0x28>
  {
  }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	2000001c 	.word	0x2000001c

08002170 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e033      	b.n	80021ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7fe fa5a 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d118      	bne.n	80021e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021b6:	f023 0302 	bic.w	r3, r3, #2
 80021ba:	f043 0202 	orr.w	r2, r3, #2
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 fa2a 	bl	800261c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f023 0303 	bic.w	r3, r3, #3
 80021d6:	f043 0201 	orr.w	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40
 80021de:	e001      	b.n	80021e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_ADC_Start+0x1a>
 800220e:	2302      	movs	r3, #2
 8002210:	e0b2      	b.n	8002378 <HAL_ADC_Start+0x180>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d018      	beq.n	800225a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002238:	4b52      	ldr	r3, [pc, #328]	; (8002384 <HAL_ADC_Start+0x18c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a52      	ldr	r2, [pc, #328]	; (8002388 <HAL_ADC_Start+0x190>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	0c9a      	lsrs	r2, r3, #18
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800224c:	e002      	b.n	8002254 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	3b01      	subs	r3, #1
 8002252:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f9      	bne.n	800224e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b01      	cmp	r3, #1
 8002266:	d17a      	bne.n	800235e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002270:	f023 0301 	bic.w	r3, r3, #1
 8002274:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002286:	2b00      	cmp	r3, #0
 8002288:	d007      	beq.n	800229a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002292:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a6:	d106      	bne.n	80022b6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ac:	f023 0206 	bic.w	r2, r3, #6
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	645a      	str	r2, [r3, #68]	; 0x44
 80022b4:	e002      	b.n	80022bc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022c4:	4b31      	ldr	r3, [pc, #196]	; (800238c <HAL_ADC_Start+0x194>)
 80022c6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80022d0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d12a      	bne.n	8002334 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a2b      	ldr	r2, [pc, #172]	; (8002390 <HAL_ADC_Start+0x198>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d015      	beq.n	8002314 <HAL_ADC_Start+0x11c>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a29      	ldr	r2, [pc, #164]	; (8002394 <HAL_ADC_Start+0x19c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d105      	bne.n	80022fe <HAL_ADC_Start+0x106>
 80022f2:	4b26      	ldr	r3, [pc, #152]	; (800238c <HAL_ADC_Start+0x194>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a25      	ldr	r2, [pc, #148]	; (8002398 <HAL_ADC_Start+0x1a0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d136      	bne.n	8002376 <HAL_ADC_Start+0x17e>
 8002308:	4b20      	ldr	r3, [pc, #128]	; (800238c <HAL_ADC_Start+0x194>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b00      	cmp	r3, #0
 8002312:	d130      	bne.n	8002376 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d129      	bne.n	8002376 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002330:	609a      	str	r2, [r3, #8]
 8002332:	e020      	b.n	8002376 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a15      	ldr	r2, [pc, #84]	; (8002390 <HAL_ADC_Start+0x198>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d11b      	bne.n	8002376 <HAL_ADC_Start+0x17e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d114      	bne.n	8002376 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	e00b      	b.n	8002376 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f043 0210 	orr.w	r2, r3, #16
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f043 0201 	orr.w	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	20000014 	.word	0x20000014
 8002388:	431bde83 	.word	0x431bde83
 800238c:	40012300 	.word	0x40012300
 8002390:	40012000 	.word	0x40012000
 8002394:	40012100 	.word	0x40012100
 8002398:	40012200 	.word	0x40012200

0800239c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x1c>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e113      	b.n	80025fc <HAL_ADC_ConfigChannel+0x244>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b09      	cmp	r3, #9
 80023e2:	d925      	bls.n	8002430 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68d9      	ldr	r1, [r3, #12]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	4613      	mov	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	4413      	add	r3, r2
 80023f8:	3b1e      	subs	r3, #30
 80023fa:	2207      	movs	r2, #7
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43da      	mvns	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	400a      	ands	r2, r1
 8002408:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68d9      	ldr	r1, [r3, #12]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	b29b      	uxth	r3, r3
 800241a:	4618      	mov	r0, r3
 800241c:	4603      	mov	r3, r0
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	4403      	add	r3, r0
 8002422:	3b1e      	subs	r3, #30
 8002424:	409a      	lsls	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	e022      	b.n	8002476 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6919      	ldr	r1, [r3, #16]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	4613      	mov	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4413      	add	r3, r2
 8002444:	2207      	movs	r2, #7
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	400a      	ands	r2, r1
 8002452:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6919      	ldr	r1, [r3, #16]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	4618      	mov	r0, r3
 8002466:	4603      	mov	r3, r0
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4403      	add	r3, r0
 800246c:	409a      	lsls	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b06      	cmp	r3, #6
 800247c:	d824      	bhi.n	80024c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	3b05      	subs	r3, #5
 8002490:	221f      	movs	r2, #31
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	400a      	ands	r2, r1
 800249e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	4618      	mov	r0, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	3b05      	subs	r3, #5
 80024ba:	fa00 f203 	lsl.w	r2, r0, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	635a      	str	r2, [r3, #52]	; 0x34
 80024c6:	e04c      	b.n	8002562 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b0c      	cmp	r3, #12
 80024ce:	d824      	bhi.n	800251a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	3b23      	subs	r3, #35	; 0x23
 80024e2:	221f      	movs	r2, #31
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43da      	mvns	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	400a      	ands	r2, r1
 80024f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	4618      	mov	r0, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	3b23      	subs	r3, #35	; 0x23
 800250c:	fa00 f203 	lsl.w	r2, r0, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	631a      	str	r2, [r3, #48]	; 0x30
 8002518:	e023      	b.n	8002562 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	3b41      	subs	r3, #65	; 0x41
 800252c:	221f      	movs	r2, #31
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43da      	mvns	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	400a      	ands	r2, r1
 800253a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	b29b      	uxth	r3, r3
 8002548:	4618      	mov	r0, r3
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	3b41      	subs	r3, #65	; 0x41
 8002556:	fa00 f203 	lsl.w	r2, r0, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002562:	4b29      	ldr	r3, [pc, #164]	; (8002608 <HAL_ADC_ConfigChannel+0x250>)
 8002564:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a28      	ldr	r2, [pc, #160]	; (800260c <HAL_ADC_ConfigChannel+0x254>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d10f      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x1d8>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b12      	cmp	r3, #18
 8002576:	d10b      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1d      	ldr	r2, [pc, #116]	; (800260c <HAL_ADC_ConfigChannel+0x254>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d12b      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x23a>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a1c      	ldr	r2, [pc, #112]	; (8002610 <HAL_ADC_ConfigChannel+0x258>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d003      	beq.n	80025ac <HAL_ADC_ConfigChannel+0x1f4>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b11      	cmp	r3, #17
 80025aa:	d122      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a11      	ldr	r2, [pc, #68]	; (8002610 <HAL_ADC_ConfigChannel+0x258>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d111      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <HAL_ADC_ConfigChannel+0x25c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a11      	ldr	r2, [pc, #68]	; (8002618 <HAL_ADC_ConfigChannel+0x260>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	0c9a      	lsrs	r2, r3, #18
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025e4:	e002      	b.n	80025ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f9      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	40012300 	.word	0x40012300
 800260c:	40012000 	.word	0x40012000
 8002610:	10000012 	.word	0x10000012
 8002614:	20000014 	.word	0x20000014
 8002618:	431bde83 	.word	0x431bde83

0800261c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002624:	4b79      	ldr	r3, [pc, #484]	; (800280c <ADC_Init+0x1f0>)
 8002626:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	431a      	orrs	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002650:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6859      	ldr	r1, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	021a      	lsls	r2, r3, #8
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002674:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6859      	ldr	r1, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002696:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6899      	ldr	r1, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ae:	4a58      	ldr	r2, [pc, #352]	; (8002810 <ADC_Init+0x1f4>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d022      	beq.n	80026fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6899      	ldr	r1, [r3, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6899      	ldr	r1, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	e00f      	b.n	800271a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002708:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002718:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0202 	bic.w	r2, r2, #2
 8002728:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6899      	ldr	r1, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	7e1b      	ldrb	r3, [r3, #24]
 8002734:	005a      	lsls	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d01b      	beq.n	8002780 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002756:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002766:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6859      	ldr	r1, [r3, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	3b01      	subs	r3, #1
 8002774:	035a      	lsls	r2, r3, #13
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	e007      	b.n	8002790 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800278e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800279e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	051a      	lsls	r2, r3, #20
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6899      	ldr	r1, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027d2:	025a      	lsls	r2, r3, #9
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6899      	ldr	r1, [r3, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	029a      	lsls	r2, r3, #10
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	609a      	str	r2, [r3, #8]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	40012300 	.word	0x40012300
 8002810:	0f000001 	.word	0x0f000001

08002814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002830:	4013      	ands	r3, r2
 8002832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800283c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002846:	4a04      	ldr	r2, [pc, #16]	; (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	60d3      	str	r3, [r2, #12]
}
 800284c:	bf00      	nop
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <__NVIC_GetPriorityGrouping+0x18>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	0a1b      	lsrs	r3, r3, #8
 8002866:	f003 0307 	and.w	r3, r3, #7
}
 800286a:	4618      	mov	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	2b00      	cmp	r3, #0
 8002888:	db0b      	blt.n	80028a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	f003 021f 	and.w	r2, r3, #31
 8002890:	4907      	ldr	r1, [pc, #28]	; (80028b0 <__NVIC_EnableIRQ+0x38>)
 8002892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	2001      	movs	r0, #1
 800289a:	fa00 f202 	lsl.w	r2, r0, r2
 800289e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	e000e100 	.word	0xe000e100

080028b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	6039      	str	r1, [r7, #0]
 80028be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	db0a      	blt.n	80028de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	490c      	ldr	r1, [pc, #48]	; (8002900 <__NVIC_SetPriority+0x4c>)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	0112      	lsls	r2, r2, #4
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	440b      	add	r3, r1
 80028d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028dc:	e00a      	b.n	80028f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	4908      	ldr	r1, [pc, #32]	; (8002904 <__NVIC_SetPriority+0x50>)
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	3b04      	subs	r3, #4
 80028ec:	0112      	lsls	r2, r2, #4
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	440b      	add	r3, r1
 80028f2:	761a      	strb	r2, [r3, #24]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000e100 	.word	0xe000e100
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002908:	b480      	push	{r7}
 800290a:	b089      	sub	sp, #36	; 0x24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f1c3 0307 	rsb	r3, r3, #7
 8002922:	2b04      	cmp	r3, #4
 8002924:	bf28      	it	cs
 8002926:	2304      	movcs	r3, #4
 8002928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3304      	adds	r3, #4
 800292e:	2b06      	cmp	r3, #6
 8002930:	d902      	bls.n	8002938 <NVIC_EncodePriority+0x30>
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3b03      	subs	r3, #3
 8002936:	e000      	b.n	800293a <NVIC_EncodePriority+0x32>
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800293c:	f04f 32ff 	mov.w	r2, #4294967295
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43da      	mvns	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	401a      	ands	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002950:	f04f 31ff 	mov.w	r1, #4294967295
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	43d9      	mvns	r1, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002960:	4313      	orrs	r3, r2
         );
}
 8002962:	4618      	mov	r0, r3
 8002964:	3724      	adds	r7, #36	; 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3b01      	subs	r3, #1
 800297c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002980:	d301      	bcc.n	8002986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002982:	2301      	movs	r3, #1
 8002984:	e00f      	b.n	80029a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002986:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <SysTick_Config+0x40>)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3b01      	subs	r3, #1
 800298c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298e:	210f      	movs	r1, #15
 8002990:	f04f 30ff 	mov.w	r0, #4294967295
 8002994:	f7ff ff8e 	bl	80028b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <SysTick_Config+0x40>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299e:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <SysTick_Config+0x40>)
 80029a0:	2207      	movs	r2, #7
 80029a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	e000e010 	.word	0xe000e010

080029b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ff29 	bl	8002814 <__NVIC_SetPriorityGrouping>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b086      	sub	sp, #24
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029dc:	f7ff ff3e 	bl	800285c <__NVIC_GetPriorityGrouping>
 80029e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	6978      	ldr	r0, [r7, #20]
 80029e8:	f7ff ff8e 	bl	8002908 <NVIC_EncodePriority>
 80029ec:	4602      	mov	r2, r0
 80029ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff5d 	bl	80028b4 <__NVIC_SetPriority>
}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff31 	bl	8002878 <__NVIC_EnableIRQ>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ffa2 	bl	8002970 <SysTick_Config>
 8002a2c:	4603      	mov	r3, r0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a42:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a44:	f7ff fb64 	bl	8002110 <HAL_GetTick>
 8002a48:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d008      	beq.n	8002a68 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2280      	movs	r2, #128	; 0x80
 8002a5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e052      	b.n	8002b0e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0216 	bic.w	r2, r2, #22
 8002a76:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a86:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d103      	bne.n	8002a98 <HAL_DMA_Abort+0x62>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d007      	beq.n	8002aa8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0208 	bic.w	r2, r2, #8
 8002aa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0201 	bic.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ab8:	e013      	b.n	8002ae2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aba:	f7ff fb29 	bl	8002110 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d90c      	bls.n	8002ae2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2220      	movs	r2, #32
 8002acc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e015      	b.n	8002b0e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1e4      	bne.n	8002aba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af4:	223f      	movs	r2, #63	; 0x3f
 8002af6:	409a      	lsls	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d004      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2280      	movs	r2, #128	; 0x80
 8002b2e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e00c      	b.n	8002b4e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2205      	movs	r2, #5
 8002b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b089      	sub	sp, #36	; 0x24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	e177      	b.n	8002e68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b78:	2201      	movs	r2, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	f040 8166 	bne.w	8002e62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d005      	beq.n	8002bae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d130      	bne.n	8002c10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	2203      	movs	r2, #3
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002be4:	2201      	movs	r2, #1
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 0201 	and.w	r2, r3, #1
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d017      	beq.n	8002c4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	2203      	movs	r2, #3
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d123      	bne.n	8002ca0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	08da      	lsrs	r2, r3, #3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3208      	adds	r2, #8
 8002c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	220f      	movs	r2, #15
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	08da      	lsrs	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3208      	adds	r2, #8
 8002c9a:	69b9      	ldr	r1, [r7, #24]
 8002c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2203      	movs	r2, #3
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0203 	and.w	r2, r3, #3
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80c0 	beq.w	8002e62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	4b66      	ldr	r3, [pc, #408]	; (8002e80 <HAL_GPIO_Init+0x324>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	4a65      	ldr	r2, [pc, #404]	; (8002e80 <HAL_GPIO_Init+0x324>)
 8002cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf2:	4b63      	ldr	r3, [pc, #396]	; (8002e80 <HAL_GPIO_Init+0x324>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cfe:	4a61      	ldr	r2, [pc, #388]	; (8002e84 <HAL_GPIO_Init+0x328>)
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	089b      	lsrs	r3, r3, #2
 8002d04:	3302      	adds	r3, #2
 8002d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	220f      	movs	r2, #15
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a58      	ldr	r2, [pc, #352]	; (8002e88 <HAL_GPIO_Init+0x32c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d037      	beq.n	8002d9a <HAL_GPIO_Init+0x23e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a57      	ldr	r2, [pc, #348]	; (8002e8c <HAL_GPIO_Init+0x330>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d031      	beq.n	8002d96 <HAL_GPIO_Init+0x23a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a56      	ldr	r2, [pc, #344]	; (8002e90 <HAL_GPIO_Init+0x334>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d02b      	beq.n	8002d92 <HAL_GPIO_Init+0x236>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a55      	ldr	r2, [pc, #340]	; (8002e94 <HAL_GPIO_Init+0x338>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d025      	beq.n	8002d8e <HAL_GPIO_Init+0x232>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a54      	ldr	r2, [pc, #336]	; (8002e98 <HAL_GPIO_Init+0x33c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d01f      	beq.n	8002d8a <HAL_GPIO_Init+0x22e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a53      	ldr	r2, [pc, #332]	; (8002e9c <HAL_GPIO_Init+0x340>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d019      	beq.n	8002d86 <HAL_GPIO_Init+0x22a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a52      	ldr	r2, [pc, #328]	; (8002ea0 <HAL_GPIO_Init+0x344>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d013      	beq.n	8002d82 <HAL_GPIO_Init+0x226>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a51      	ldr	r2, [pc, #324]	; (8002ea4 <HAL_GPIO_Init+0x348>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00d      	beq.n	8002d7e <HAL_GPIO_Init+0x222>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a50      	ldr	r2, [pc, #320]	; (8002ea8 <HAL_GPIO_Init+0x34c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d007      	beq.n	8002d7a <HAL_GPIO_Init+0x21e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a4f      	ldr	r2, [pc, #316]	; (8002eac <HAL_GPIO_Init+0x350>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d101      	bne.n	8002d76 <HAL_GPIO_Init+0x21a>
 8002d72:	2309      	movs	r3, #9
 8002d74:	e012      	b.n	8002d9c <HAL_GPIO_Init+0x240>
 8002d76:	230a      	movs	r3, #10
 8002d78:	e010      	b.n	8002d9c <HAL_GPIO_Init+0x240>
 8002d7a:	2308      	movs	r3, #8
 8002d7c:	e00e      	b.n	8002d9c <HAL_GPIO_Init+0x240>
 8002d7e:	2307      	movs	r3, #7
 8002d80:	e00c      	b.n	8002d9c <HAL_GPIO_Init+0x240>
 8002d82:	2306      	movs	r3, #6
 8002d84:	e00a      	b.n	8002d9c <HAL_GPIO_Init+0x240>
 8002d86:	2305      	movs	r3, #5
 8002d88:	e008      	b.n	8002d9c <HAL_GPIO_Init+0x240>
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	e006      	b.n	8002d9c <HAL_GPIO_Init+0x240>
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e004      	b.n	8002d9c <HAL_GPIO_Init+0x240>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e002      	b.n	8002d9c <HAL_GPIO_Init+0x240>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <HAL_GPIO_Init+0x240>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	69fa      	ldr	r2, [r7, #28]
 8002d9e:	f002 0203 	and.w	r2, r2, #3
 8002da2:	0092      	lsls	r2, r2, #2
 8002da4:	4093      	lsls	r3, r2
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dac:	4935      	ldr	r1, [pc, #212]	; (8002e84 <HAL_GPIO_Init+0x328>)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	089b      	lsrs	r3, r3, #2
 8002db2:	3302      	adds	r3, #2
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dba:	4b3d      	ldr	r3, [pc, #244]	; (8002eb0 <HAL_GPIO_Init+0x354>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dde:	4a34      	ldr	r2, [pc, #208]	; (8002eb0 <HAL_GPIO_Init+0x354>)
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002de4:	4b32      	ldr	r3, [pc, #200]	; (8002eb0 <HAL_GPIO_Init+0x354>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e08:	4a29      	ldr	r2, [pc, #164]	; (8002eb0 <HAL_GPIO_Init+0x354>)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e0e:	4b28      	ldr	r3, [pc, #160]	; (8002eb0 <HAL_GPIO_Init+0x354>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	43db      	mvns	r3, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e32:	4a1f      	ldr	r2, [pc, #124]	; (8002eb0 <HAL_GPIO_Init+0x354>)
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e38:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <HAL_GPIO_Init+0x354>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e5c:	4a14      	ldr	r2, [pc, #80]	; (8002eb0 <HAL_GPIO_Init+0x354>)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3301      	adds	r3, #1
 8002e66:	61fb      	str	r3, [r7, #28]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	2b0f      	cmp	r3, #15
 8002e6c:	f67f ae84 	bls.w	8002b78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	3724      	adds	r7, #36	; 0x24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40013800 	.word	0x40013800
 8002e88:	40020000 	.word	0x40020000
 8002e8c:	40020400 	.word	0x40020400
 8002e90:	40020800 	.word	0x40020800
 8002e94:	40020c00 	.word	0x40020c00
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40021400 	.word	0x40021400
 8002ea0:	40021800 	.word	0x40021800
 8002ea4:	40021c00 	.word	0x40021c00
 8002ea8:	40022000 	.word	0x40022000
 8002eac:	40022400 	.word	0x40022400
 8002eb0:	40013c00 	.word	0x40013c00

08002eb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	887b      	ldrh	r3, [r7, #2]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
 8002ed0:	e001      	b.n	8002ed6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	807b      	strh	r3, [r7, #2]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ef4:	787b      	ldrb	r3, [r7, #1]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002efa:	887a      	ldrh	r2, [r7, #2]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f00:	e003      	b.n	8002f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f02:	887b      	ldrh	r3, [r7, #2]
 8002f04:	041a      	lsls	r2, r3, #16
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	619a      	str	r2, [r3, #24]
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
	...

08002f18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f24:	695a      	ldr	r2, [r3, #20]
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d006      	beq.n	8002f3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f2e:	4a05      	ldr	r2, [pc, #20]	; (8002f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f30:	88fb      	ldrh	r3, [r7, #6]
 8002f32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fd ff20 	bl	8000d7c <HAL_GPIO_EXTI_Callback>
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40013c00 	.word	0x40013c00

08002f48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e12b      	b.n	80031b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fd fc5e 	bl	8000830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2224      	movs	r2, #36	; 0x24
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0201 	bic.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002faa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fac:	f001 fa40 	bl	8004430 <HAL_RCC_GetPCLK1Freq>
 8002fb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	4a81      	ldr	r2, [pc, #516]	; (80031bc <HAL_I2C_Init+0x274>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d807      	bhi.n	8002fcc <HAL_I2C_Init+0x84>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4a80      	ldr	r2, [pc, #512]	; (80031c0 <HAL_I2C_Init+0x278>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	bf94      	ite	ls
 8002fc4:	2301      	movls	r3, #1
 8002fc6:	2300      	movhi	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	e006      	b.n	8002fda <HAL_I2C_Init+0x92>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4a7d      	ldr	r2, [pc, #500]	; (80031c4 <HAL_I2C_Init+0x27c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	bf94      	ite	ls
 8002fd4:	2301      	movls	r3, #1
 8002fd6:	2300      	movhi	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e0e7      	b.n	80031b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4a78      	ldr	r2, [pc, #480]	; (80031c8 <HAL_I2C_Init+0x280>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	0c9b      	lsrs	r3, r3, #18
 8002fec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	4a6a      	ldr	r2, [pc, #424]	; (80031bc <HAL_I2C_Init+0x274>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d802      	bhi.n	800301c <HAL_I2C_Init+0xd4>
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	3301      	adds	r3, #1
 800301a:	e009      	b.n	8003030 <HAL_I2C_Init+0xe8>
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003022:	fb02 f303 	mul.w	r3, r2, r3
 8003026:	4a69      	ldr	r2, [pc, #420]	; (80031cc <HAL_I2C_Init+0x284>)
 8003028:	fba2 2303 	umull	r2, r3, r2, r3
 800302c:	099b      	lsrs	r3, r3, #6
 800302e:	3301      	adds	r3, #1
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	430b      	orrs	r3, r1
 8003036:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003042:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	495c      	ldr	r1, [pc, #368]	; (80031bc <HAL_I2C_Init+0x274>)
 800304c:	428b      	cmp	r3, r1
 800304e:	d819      	bhi.n	8003084 <HAL_I2C_Init+0x13c>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	1e59      	subs	r1, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	fbb1 f3f3 	udiv	r3, r1, r3
 800305e:	1c59      	adds	r1, r3, #1
 8003060:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003064:	400b      	ands	r3, r1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <HAL_I2C_Init+0x138>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1e59      	subs	r1, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	fbb1 f3f3 	udiv	r3, r1, r3
 8003078:	3301      	adds	r3, #1
 800307a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800307e:	e051      	b.n	8003124 <HAL_I2C_Init+0x1dc>
 8003080:	2304      	movs	r3, #4
 8003082:	e04f      	b.n	8003124 <HAL_I2C_Init+0x1dc>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d111      	bne.n	80030b0 <HAL_I2C_Init+0x168>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1e58      	subs	r0, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6859      	ldr	r1, [r3, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	440b      	add	r3, r1
 800309a:	fbb0 f3f3 	udiv	r3, r0, r3
 800309e:	3301      	adds	r3, #1
 80030a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf0c      	ite	eq
 80030a8:	2301      	moveq	r3, #1
 80030aa:	2300      	movne	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	e012      	b.n	80030d6 <HAL_I2C_Init+0x18e>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1e58      	subs	r0, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	0099      	lsls	r1, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c6:	3301      	adds	r3, #1
 80030c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bf0c      	ite	eq
 80030d0:	2301      	moveq	r3, #1
 80030d2:	2300      	movne	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_I2C_Init+0x196>
 80030da:	2301      	movs	r3, #1
 80030dc:	e022      	b.n	8003124 <HAL_I2C_Init+0x1dc>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10e      	bne.n	8003104 <HAL_I2C_Init+0x1bc>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1e58      	subs	r0, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6859      	ldr	r1, [r3, #4]
 80030ee:	460b      	mov	r3, r1
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	440b      	add	r3, r1
 80030f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f8:	3301      	adds	r3, #1
 80030fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003102:	e00f      	b.n	8003124 <HAL_I2C_Init+0x1dc>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1e58      	subs	r0, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	0099      	lsls	r1, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	fbb0 f3f3 	udiv	r3, r0, r3
 800311a:	3301      	adds	r3, #1
 800311c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003120:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	6809      	ldr	r1, [r1, #0]
 8003128:	4313      	orrs	r3, r2
 800312a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69da      	ldr	r2, [r3, #28]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003152:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6911      	ldr	r1, [r2, #16]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68d2      	ldr	r2, [r2, #12]
 800315e:	4311      	orrs	r1, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	430b      	orrs	r3, r1
 8003166:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695a      	ldr	r2, [r3, #20]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	000186a0 	.word	0x000186a0
 80031c0:	001e847f 	.word	0x001e847f
 80031c4:	003d08ff 	.word	0x003d08ff
 80031c8:	431bde83 	.word	0x431bde83
 80031cc:	10624dd3 	.word	0x10624dd3

080031d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	461a      	mov	r2, r3
 80031dc:	460b      	mov	r3, r1
 80031de:	817b      	strh	r3, [r7, #10]
 80031e0:	4613      	mov	r3, r2
 80031e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031e4:	f7fe ff94 	bl	8002110 <HAL_GetTick>
 80031e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b20      	cmp	r3, #32
 80031f4:	f040 80e0 	bne.w	80033b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	2319      	movs	r3, #25
 80031fe:	2201      	movs	r2, #1
 8003200:	4970      	ldr	r1, [pc, #448]	; (80033c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 fa92 	bl	800372c <I2C_WaitOnFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800320e:	2302      	movs	r3, #2
 8003210:	e0d3      	b.n	80033ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_I2C_Master_Transmit+0x50>
 800321c:	2302      	movs	r3, #2
 800321e:	e0cc      	b.n	80033ba <HAL_I2C_Master_Transmit+0x1ea>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d007      	beq.n	8003246 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 0201 	orr.w	r2, r2, #1
 8003244:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003254:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2221      	movs	r2, #33	; 0x21
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2210      	movs	r2, #16
 8003262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	893a      	ldrh	r2, [r7, #8]
 8003276:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4a50      	ldr	r2, [pc, #320]	; (80033c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003286:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003288:	8979      	ldrh	r1, [r7, #10]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	6a3a      	ldr	r2, [r7, #32]
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f9ca 	bl	8003628 <I2C_MasterRequestWrite>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e08d      	b.n	80033ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800329e:	2300      	movs	r3, #0
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032b4:	e066      	b.n	8003384 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	6a39      	ldr	r1, [r7, #32]
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 fb0c 	bl	80038d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00d      	beq.n	80032e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d107      	bne.n	80032de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e06b      	b.n	80033ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	781a      	ldrb	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b04      	cmp	r3, #4
 800331e:	d11b      	bne.n	8003358 <HAL_I2C_Master_Transmit+0x188>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003324:	2b00      	cmp	r3, #0
 8003326:	d017      	beq.n	8003358 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	781a      	ldrb	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	6a39      	ldr	r1, [r7, #32]
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 fafc 	bl	800395a <I2C_WaitOnBTFFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00d      	beq.n	8003384 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	2b04      	cmp	r3, #4
 800336e:	d107      	bne.n	8003380 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e01a      	b.n	80033ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003388:	2b00      	cmp	r3, #0
 800338a:	d194      	bne.n	80032b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800339a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	e000      	b.n	80033ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80033b8:	2302      	movs	r3, #2
  }
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	00100002 	.word	0x00100002
 80033c8:	ffff0000 	.word	0xffff0000

080033cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08a      	sub	sp, #40	; 0x28
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	607a      	str	r2, [r7, #4]
 80033d6:	603b      	str	r3, [r7, #0]
 80033d8:	460b      	mov	r3, r1
 80033da:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80033dc:	f7fe fe98 	bl	8002110 <HAL_GetTick>
 80033e0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	f040 8111 	bne.w	8003616 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	2319      	movs	r3, #25
 80033fa:	2201      	movs	r2, #1
 80033fc:	4988      	ldr	r1, [pc, #544]	; (8003620 <HAL_I2C_IsDeviceReady+0x254>)
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f994 	bl	800372c <I2C_WaitOnFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800340a:	2302      	movs	r3, #2
 800340c:	e104      	b.n	8003618 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_I2C_IsDeviceReady+0x50>
 8003418:	2302      	movs	r3, #2
 800341a:	e0fd      	b.n	8003618 <HAL_I2C_IsDeviceReady+0x24c>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b01      	cmp	r3, #1
 8003430:	d007      	beq.n	8003442 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 0201 	orr.w	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003450:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2224      	movs	r2, #36	; 0x24
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4a70      	ldr	r2, [pc, #448]	; (8003624 <HAL_I2C_IsDeviceReady+0x258>)
 8003464:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003474:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2200      	movs	r2, #0
 800347e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f952 	bl	800372c <I2C_WaitOnFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00d      	beq.n	80034aa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800349c:	d103      	bne.n	80034a6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e0b6      	b.n	8003618 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034aa:	897b      	ldrh	r3, [r7, #10]
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034b8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80034ba:	f7fe fe29 	bl	8002110 <HAL_GetTick>
 80034be:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	bf0c      	ite	eq
 80034ce:	2301      	moveq	r3, #1
 80034d0:	2300      	movne	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e4:	bf0c      	ite	eq
 80034e6:	2301      	moveq	r3, #1
 80034e8:	2300      	movne	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034ee:	e025      	b.n	800353c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034f0:	f7fe fe0e 	bl	8002110 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d302      	bcc.n	8003506 <HAL_I2C_IsDeviceReady+0x13a>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d103      	bne.n	800350e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	22a0      	movs	r2, #160	; 0xa0
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b02      	cmp	r3, #2
 800351a:	bf0c      	ite	eq
 800351c:	2301      	moveq	r3, #1
 800351e:	2300      	movne	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003532:	bf0c      	ite	eq
 8003534:	2301      	moveq	r3, #1
 8003536:	2300      	movne	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2ba0      	cmp	r3, #160	; 0xa0
 8003546:	d005      	beq.n	8003554 <HAL_I2C_IsDeviceReady+0x188>
 8003548:	7dfb      	ldrb	r3, [r7, #23]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d102      	bne.n	8003554 <HAL_I2C_IsDeviceReady+0x188>
 800354e:	7dbb      	ldrb	r3, [r7, #22]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0cd      	beq.n	80034f0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b02      	cmp	r3, #2
 8003568:	d129      	bne.n	80035be <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003578:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357a:	2300      	movs	r3, #0
 800357c:	613b      	str	r3, [r7, #16]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	2319      	movs	r3, #25
 8003596:	2201      	movs	r2, #1
 8003598:	4921      	ldr	r1, [pc, #132]	; (8003620 <HAL_I2C_IsDeviceReady+0x254>)
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f8c6 	bl	800372c <I2C_WaitOnFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e036      	b.n	8003618 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e02c      	b.n	8003618 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035cc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035d6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	2319      	movs	r3, #25
 80035de:	2201      	movs	r2, #1
 80035e0:	490f      	ldr	r1, [pc, #60]	; (8003620 <HAL_I2C_IsDeviceReady+0x254>)
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f8a2 	bl	800372c <I2C_WaitOnFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e012      	b.n	8003618 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	3301      	adds	r3, #1
 80035f6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	f4ff af32 	bcc.w	8003466 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003616:	2302      	movs	r3, #2
  }
}
 8003618:	4618      	mov	r0, r3
 800361a:	3720      	adds	r7, #32
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	00100002 	.word	0x00100002
 8003624:	ffff0000 	.word	0xffff0000

08003628 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af02      	add	r7, sp, #8
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	460b      	mov	r3, r1
 8003636:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2b08      	cmp	r3, #8
 8003642:	d006      	beq.n	8003652 <I2C_MasterRequestWrite+0x2a>
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d003      	beq.n	8003652 <I2C_MasterRequestWrite+0x2a>
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003650:	d108      	bne.n	8003664 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	e00b      	b.n	800367c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	2b12      	cmp	r3, #18
 800366a:	d107      	bne.n	800367c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800367a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f84f 	bl	800372c <I2C_WaitOnFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00d      	beq.n	80036b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a2:	d103      	bne.n	80036ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e035      	b.n	800371c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036b8:	d108      	bne.n	80036cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036ba:	897b      	ldrh	r3, [r7, #10]
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036c8:	611a      	str	r2, [r3, #16]
 80036ca:	e01b      	b.n	8003704 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036cc:	897b      	ldrh	r3, [r7, #10]
 80036ce:	11db      	asrs	r3, r3, #7
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	f003 0306 	and.w	r3, r3, #6
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	f063 030f 	orn	r3, r3, #15
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	490e      	ldr	r1, [pc, #56]	; (8003724 <I2C_MasterRequestWrite+0xfc>)
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f875 	bl	80037da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e010      	b.n	800371c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036fa:	897b      	ldrh	r3, [r7, #10]
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	4907      	ldr	r1, [pc, #28]	; (8003728 <I2C_MasterRequestWrite+0x100>)
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f865 	bl	80037da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	00010008 	.word	0x00010008
 8003728:	00010002 	.word	0x00010002

0800372c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	603b      	str	r3, [r7, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800373c:	e025      	b.n	800378a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003744:	d021      	beq.n	800378a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003746:	f7fe fce3 	bl	8002110 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d302      	bcc.n	800375c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d116      	bne.n	800378a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f043 0220 	orr.w	r2, r3, #32
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e023      	b.n	80037d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	0c1b      	lsrs	r3, r3, #16
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d10d      	bne.n	80037b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	43da      	mvns	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4013      	ands	r3, r2
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	bf0c      	ite	eq
 80037a6:	2301      	moveq	r3, #1
 80037a8:	2300      	movne	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	461a      	mov	r2, r3
 80037ae:	e00c      	b.n	80037ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	43da      	mvns	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	4013      	ands	r3, r2
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	bf0c      	ite	eq
 80037c2:	2301      	moveq	r3, #1
 80037c4:	2300      	movne	r3, #0
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	461a      	mov	r2, r3
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d0b6      	beq.n	800373e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b084      	sub	sp, #16
 80037de:	af00      	add	r7, sp, #0
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037e8:	e051      	b.n	800388e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f8:	d123      	bne.n	8003842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003808:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003812:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f043 0204 	orr.w	r2, r3, #4
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e046      	b.n	80038d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d021      	beq.n	800388e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384a:	f7fe fc61 	bl	8002110 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	429a      	cmp	r2, r3
 8003858:	d302      	bcc.n	8003860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d116      	bne.n	800388e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f043 0220 	orr.w	r2, r3, #32
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e020      	b.n	80038d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	0c1b      	lsrs	r3, r3, #16
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b01      	cmp	r3, #1
 8003896:	d10c      	bne.n	80038b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	43da      	mvns	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4013      	ands	r3, r2
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	bf14      	ite	ne
 80038aa:	2301      	movne	r3, #1
 80038ac:	2300      	moveq	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	e00b      	b.n	80038ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	43da      	mvns	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	4013      	ands	r3, r2
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	bf14      	ite	ne
 80038c4:	2301      	movne	r3, #1
 80038c6:	2300      	moveq	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d18d      	bne.n	80037ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038e4:	e02d      	b.n	8003942 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f878 	bl	80039dc <I2C_IsAcknowledgeFailed>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e02d      	b.n	8003952 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fc:	d021      	beq.n	8003942 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fe:	f7fe fc07 	bl	8002110 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	429a      	cmp	r2, r3
 800390c:	d302      	bcc.n	8003914 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d116      	bne.n	8003942 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f043 0220 	orr.w	r2, r3, #32
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e007      	b.n	8003952 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394c:	2b80      	cmp	r3, #128	; 0x80
 800394e:	d1ca      	bne.n	80038e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b084      	sub	sp, #16
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003966:	e02d      	b.n	80039c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f837 	bl	80039dc <I2C_IsAcknowledgeFailed>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e02d      	b.n	80039d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397e:	d021      	beq.n	80039c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003980:	f7fe fbc6 	bl	8002110 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	429a      	cmp	r2, r3
 800398e:	d302      	bcc.n	8003996 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d116      	bne.n	80039c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	f043 0220 	orr.w	r2, r3, #32
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e007      	b.n	80039d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d1ca      	bne.n	8003968 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f2:	d11b      	bne.n	8003a2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	f043 0204 	orr.w	r2, r3, #4
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e000      	b.n	8003a2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d129      	bne.n	8003aa4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2224      	movs	r2, #36	; 0x24
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0201 	bic.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0210 	bic.w	r2, r2, #16
 8003a76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e000      	b.n	8003aa6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003aa4:	2302      	movs	r3, #2
  }
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b085      	sub	sp, #20
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003abc:	2300      	movs	r3, #0
 8003abe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d12a      	bne.n	8003b22 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2224      	movs	r2, #36	; 0x24
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0201 	bic.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003aec:	89fb      	ldrh	r3, [r7, #14]
 8003aee:	f023 030f 	bic.w	r3, r3, #15
 8003af2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	89fb      	ldrh	r3, [r7, #14]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	89fa      	ldrh	r2, [r7, #14]
 8003b04:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0201 	orr.w	r2, r2, #1
 8003b14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	e000      	b.n	8003b24 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003b22:	2302      	movs	r3, #2
  }
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	603b      	str	r3, [r7, #0]
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	4a1f      	ldr	r2, [pc, #124]	; (8003bc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b48:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4a:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b56:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b5c:	f7fe fad8 	bl	8002110 <HAL_GetTick>
 8003b60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b62:	e009      	b.n	8003b78 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b64:	f7fe fad4 	bl	8002110 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b72:	d901      	bls.n	8003b78 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e01f      	b.n	8003bb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b78:	4b13      	ldr	r3, [pc, #76]	; (8003bc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b84:	d1ee      	bne.n	8003b64 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b86:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b8c:	f7fe fac0 	bl	8002110 <HAL_GetTick>
 8003b90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b92:	e009      	b.n	8003ba8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b94:	f7fe fabc 	bl	8002110 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ba2:	d901      	bls.n	8003ba8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e007      	b.n	8003bb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ba8:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bb4:	d1ee      	bne.n	8003b94 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	420e0040 	.word	0x420e0040
 8003bc8:	40007000 	.word	0x40007000
 8003bcc:	420e0044 	.word	0x420e0044

08003bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e267      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d075      	beq.n	8003cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bee:	4b88      	ldr	r3, [pc, #544]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d00c      	beq.n	8003c14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfa:	4b85      	ldr	r3, [pc, #532]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d112      	bne.n	8003c2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c06:	4b82      	ldr	r3, [pc, #520]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c12:	d10b      	bne.n	8003c2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c14:	4b7e      	ldr	r3, [pc, #504]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d05b      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x108>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d157      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e242      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c34:	d106      	bne.n	8003c44 <HAL_RCC_OscConfig+0x74>
 8003c36:	4b76      	ldr	r3, [pc, #472]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a75      	ldr	r2, [pc, #468]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e01d      	b.n	8003c80 <HAL_RCC_OscConfig+0xb0>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x98>
 8003c4e:	4b70      	ldr	r3, [pc, #448]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a6f      	ldr	r2, [pc, #444]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b6d      	ldr	r3, [pc, #436]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a6c      	ldr	r2, [pc, #432]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e00b      	b.n	8003c80 <HAL_RCC_OscConfig+0xb0>
 8003c68:	4b69      	ldr	r3, [pc, #420]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a68      	ldr	r2, [pc, #416]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	4b66      	ldr	r3, [pc, #408]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a65      	ldr	r2, [pc, #404]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d013      	beq.n	8003cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c88:	f7fe fa42 	bl	8002110 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c90:	f7fe fa3e 	bl	8002110 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b64      	cmp	r3, #100	; 0x64
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e207      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca2:	4b5b      	ldr	r3, [pc, #364]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0xc0>
 8003cae:	e014      	b.n	8003cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7fe fa2e 	bl	8002110 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb8:	f7fe fa2a 	bl	8002110 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	; 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e1f3      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cca:	4b51      	ldr	r3, [pc, #324]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0xe8>
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d063      	beq.n	8003dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ce6:	4b4a      	ldr	r3, [pc, #296]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00b      	beq.n	8003d0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cf2:	4b47      	ldr	r3, [pc, #284]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d11c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfe:	4b44      	ldr	r3, [pc, #272]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d116      	bne.n	8003d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d0a:	4b41      	ldr	r3, [pc, #260]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d005      	beq.n	8003d22 <HAL_RCC_OscConfig+0x152>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e1c7      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d22:	4b3b      	ldr	r3, [pc, #236]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4937      	ldr	r1, [pc, #220]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d36:	e03a      	b.n	8003dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d020      	beq.n	8003d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d40:	4b34      	ldr	r3, [pc, #208]	; (8003e14 <HAL_RCC_OscConfig+0x244>)
 8003d42:	2201      	movs	r2, #1
 8003d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d46:	f7fe f9e3 	bl	8002110 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d4e:	f7fe f9df 	bl	8002110 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e1a8      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d60:	4b2b      	ldr	r3, [pc, #172]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0f0      	beq.n	8003d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6c:	4b28      	ldr	r3, [pc, #160]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	4925      	ldr	r1, [pc, #148]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	600b      	str	r3, [r1, #0]
 8003d80:	e015      	b.n	8003dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d82:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <HAL_RCC_OscConfig+0x244>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d88:	f7fe f9c2 	bl	8002110 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d90:	f7fe f9be 	bl	8002110 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e187      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da2:	4b1b      	ldr	r3, [pc, #108]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d036      	beq.n	8003e28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d016      	beq.n	8003df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dc2:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <HAL_RCC_OscConfig+0x248>)
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc8:	f7fe f9a2 	bl	8002110 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dd0:	f7fe f99e 	bl	8002110 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e167      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de2:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x200>
 8003dee:	e01b      	b.n	8003e28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df0:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <HAL_RCC_OscConfig+0x248>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df6:	f7fe f98b 	bl	8002110 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dfc:	e00e      	b.n	8003e1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dfe:	f7fe f987 	bl	8002110 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d907      	bls.n	8003e1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e150      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
 8003e10:	40023800 	.word	0x40023800
 8003e14:	42470000 	.word	0x42470000
 8003e18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e1c:	4b88      	ldr	r3, [pc, #544]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1ea      	bne.n	8003dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 8097 	beq.w	8003f64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e36:	2300      	movs	r3, #0
 8003e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e3a:	4b81      	ldr	r3, [pc, #516]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10f      	bne.n	8003e66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e46:	2300      	movs	r3, #0
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	4b7d      	ldr	r3, [pc, #500]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	4a7c      	ldr	r2, [pc, #496]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e54:	6413      	str	r3, [r2, #64]	; 0x40
 8003e56:	4b7a      	ldr	r3, [pc, #488]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	60bb      	str	r3, [r7, #8]
 8003e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e62:	2301      	movs	r3, #1
 8003e64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e66:	4b77      	ldr	r3, [pc, #476]	; (8004044 <HAL_RCC_OscConfig+0x474>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d118      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e72:	4b74      	ldr	r3, [pc, #464]	; (8004044 <HAL_RCC_OscConfig+0x474>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a73      	ldr	r2, [pc, #460]	; (8004044 <HAL_RCC_OscConfig+0x474>)
 8003e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e7e:	f7fe f947 	bl	8002110 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e86:	f7fe f943 	bl	8002110 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e10c      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e98:	4b6a      	ldr	r3, [pc, #424]	; (8004044 <HAL_RCC_OscConfig+0x474>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d106      	bne.n	8003eba <HAL_RCC_OscConfig+0x2ea>
 8003eac:	4b64      	ldr	r3, [pc, #400]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	4a63      	ldr	r2, [pc, #396]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb8:	e01c      	b.n	8003ef4 <HAL_RCC_OscConfig+0x324>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2b05      	cmp	r3, #5
 8003ec0:	d10c      	bne.n	8003edc <HAL_RCC_OscConfig+0x30c>
 8003ec2:	4b5f      	ldr	r3, [pc, #380]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	4a5e      	ldr	r2, [pc, #376]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	f043 0304 	orr.w	r3, r3, #4
 8003ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ece:	4b5c      	ldr	r3, [pc, #368]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	4a5b      	ldr	r2, [pc, #364]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eda:	e00b      	b.n	8003ef4 <HAL_RCC_OscConfig+0x324>
 8003edc:	4b58      	ldr	r3, [pc, #352]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	4a57      	ldr	r2, [pc, #348]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ee2:	f023 0301 	bic.w	r3, r3, #1
 8003ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee8:	4b55      	ldr	r3, [pc, #340]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	4a54      	ldr	r2, [pc, #336]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003eee:	f023 0304 	bic.w	r3, r3, #4
 8003ef2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d015      	beq.n	8003f28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efc:	f7fe f908 	bl	8002110 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f02:	e00a      	b.n	8003f1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f04:	f7fe f904 	bl	8002110 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e0cb      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1a:	4b49      	ldr	r3, [pc, #292]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0ee      	beq.n	8003f04 <HAL_RCC_OscConfig+0x334>
 8003f26:	e014      	b.n	8003f52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f28:	f7fe f8f2 	bl	8002110 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f2e:	e00a      	b.n	8003f46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f30:	f7fe f8ee 	bl	8002110 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e0b5      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f46:	4b3e      	ldr	r3, [pc, #248]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1ee      	bne.n	8003f30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d105      	bne.n	8003f64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f58:	4b39      	ldr	r3, [pc, #228]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	4a38      	ldr	r2, [pc, #224]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 80a1 	beq.w	80040b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f6e:	4b34      	ldr	r3, [pc, #208]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 030c 	and.w	r3, r3, #12
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d05c      	beq.n	8004034 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d141      	bne.n	8004006 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f82:	4b31      	ldr	r3, [pc, #196]	; (8004048 <HAL_RCC_OscConfig+0x478>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7fe f8c2 	bl	8002110 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fe f8be 	bl	8002110 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e087      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa2:	4b27      	ldr	r3, [pc, #156]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69da      	ldr	r2, [r3, #28]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	019b      	lsls	r3, r3, #6
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	085b      	lsrs	r3, r3, #1
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	041b      	lsls	r3, r3, #16
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	061b      	lsls	r3, r3, #24
 8003fd2:	491b      	ldr	r1, [pc, #108]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd8:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <HAL_RCC_OscConfig+0x478>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fde:	f7fe f897 	bl	8002110 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe6:	f7fe f893 	bl	8002110 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e05c      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff8:	4b11      	ldr	r3, [pc, #68]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f0      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x416>
 8004004:	e054      	b.n	80040b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004006:	4b10      	ldr	r3, [pc, #64]	; (8004048 <HAL_RCC_OscConfig+0x478>)
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400c:	f7fe f880 	bl	8002110 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004014:	f7fe f87c 	bl	8002110 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e045      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004026:	4b06      	ldr	r3, [pc, #24]	; (8004040 <HAL_RCC_OscConfig+0x470>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0x444>
 8004032:	e03d      	b.n	80040b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d107      	bne.n	800404c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e038      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
 8004040:	40023800 	.word	0x40023800
 8004044:	40007000 	.word	0x40007000
 8004048:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800404c:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <HAL_RCC_OscConfig+0x4ec>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d028      	beq.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004064:	429a      	cmp	r2, r3
 8004066:	d121      	bne.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004072:	429a      	cmp	r2, r3
 8004074:	d11a      	bne.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800407c:	4013      	ands	r3, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004082:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004084:	4293      	cmp	r3, r2
 8004086:	d111      	bne.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	085b      	lsrs	r3, r3, #1
 8004094:	3b01      	subs	r3, #1
 8004096:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004098:	429a      	cmp	r2, r3
 800409a:	d107      	bne.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800

080040c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0cc      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040d4:	4b68      	ldr	r3, [pc, #416]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d90c      	bls.n	80040fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b65      	ldr	r3, [pc, #404]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ea:	4b63      	ldr	r3, [pc, #396]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0b8      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d020      	beq.n	800414a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004114:	4b59      	ldr	r3, [pc, #356]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	4a58      	ldr	r2, [pc, #352]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800411e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800412c:	4b53      	ldr	r3, [pc, #332]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4a52      	ldr	r2, [pc, #328]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004138:	4b50      	ldr	r3, [pc, #320]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	494d      	ldr	r1, [pc, #308]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	4313      	orrs	r3, r2
 8004148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d044      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d107      	bne.n	800416e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415e:	4b47      	ldr	r3, [pc, #284]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d119      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e07f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d003      	beq.n	800417e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417a:	2b03      	cmp	r3, #3
 800417c:	d107      	bne.n	800418e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417e:	4b3f      	ldr	r3, [pc, #252]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e06f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418e:	4b3b      	ldr	r3, [pc, #236]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e067      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800419e:	4b37      	ldr	r3, [pc, #220]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f023 0203 	bic.w	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4934      	ldr	r1, [pc, #208]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b0:	f7fd ffae 	bl	8002110 <HAL_GetTick>
 80041b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b6:	e00a      	b.n	80041ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b8:	f7fd ffaa 	bl	8002110 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e04f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	4b2b      	ldr	r3, [pc, #172]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 020c 	and.w	r2, r3, #12
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	429a      	cmp	r2, r3
 80041de:	d1eb      	bne.n	80041b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e0:	4b25      	ldr	r3, [pc, #148]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 030f 	and.w	r3, r3, #15
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d20c      	bcs.n	8004208 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b22      	ldr	r3, [pc, #136]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f6:	4b20      	ldr	r3, [pc, #128]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e032      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004214:	4b19      	ldr	r3, [pc, #100]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4916      	ldr	r1, [pc, #88]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004232:	4b12      	ldr	r3, [pc, #72]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	490e      	ldr	r1, [pc, #56]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004246:	f000 f821 	bl	800428c <HAL_RCC_GetSysClockFreq>
 800424a:	4602      	mov	r2, r0
 800424c:	4b0b      	ldr	r3, [pc, #44]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	490a      	ldr	r1, [pc, #40]	; (8004280 <HAL_RCC_ClockConfig+0x1c0>)
 8004258:	5ccb      	ldrb	r3, [r1, r3]
 800425a:	fa22 f303 	lsr.w	r3, r2, r3
 800425e:	4a09      	ldr	r2, [pc, #36]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 8004260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004262:	4b09      	ldr	r3, [pc, #36]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f7fd ff0e 	bl	8002088 <HAL_InitTick>

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40023c00 	.word	0x40023c00
 800427c:	40023800 	.word	0x40023800
 8004280:	08008458 	.word	0x08008458
 8004284:	20000014 	.word	0x20000014
 8004288:	20000018 	.word	0x20000018

0800428c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800428c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004290:	b090      	sub	sp, #64	; 0x40
 8004292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	637b      	str	r3, [r7, #52]	; 0x34
 8004298:	2300      	movs	r3, #0
 800429a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800429c:	2300      	movs	r3, #0
 800429e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042a4:	4b59      	ldr	r3, [pc, #356]	; (800440c <HAL_RCC_GetSysClockFreq+0x180>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 030c 	and.w	r3, r3, #12
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d00d      	beq.n	80042cc <HAL_RCC_GetSysClockFreq+0x40>
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	f200 80a1 	bhi.w	80043f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_RCC_GetSysClockFreq+0x34>
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d003      	beq.n	80042c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80042be:	e09b      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042c0:	4b53      	ldr	r3, [pc, #332]	; (8004410 <HAL_RCC_GetSysClockFreq+0x184>)
 80042c2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80042c4:	e09b      	b.n	80043fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042c6:	4b53      	ldr	r3, [pc, #332]	; (8004414 <HAL_RCC_GetSysClockFreq+0x188>)
 80042c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042ca:	e098      	b.n	80043fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042cc:	4b4f      	ldr	r3, [pc, #316]	; (800440c <HAL_RCC_GetSysClockFreq+0x180>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042d4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042d6:	4b4d      	ldr	r3, [pc, #308]	; (800440c <HAL_RCC_GetSysClockFreq+0x180>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d028      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e2:	4b4a      	ldr	r3, [pc, #296]	; (800440c <HAL_RCC_GetSysClockFreq+0x180>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	099b      	lsrs	r3, r3, #6
 80042e8:	2200      	movs	r2, #0
 80042ea:	623b      	str	r3, [r7, #32]
 80042ec:	627a      	str	r2, [r7, #36]	; 0x24
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80042f4:	2100      	movs	r1, #0
 80042f6:	4b47      	ldr	r3, [pc, #284]	; (8004414 <HAL_RCC_GetSysClockFreq+0x188>)
 80042f8:	fb03 f201 	mul.w	r2, r3, r1
 80042fc:	2300      	movs	r3, #0
 80042fe:	fb00 f303 	mul.w	r3, r0, r3
 8004302:	4413      	add	r3, r2
 8004304:	4a43      	ldr	r2, [pc, #268]	; (8004414 <HAL_RCC_GetSysClockFreq+0x188>)
 8004306:	fba0 1202 	umull	r1, r2, r0, r2
 800430a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800430c:	460a      	mov	r2, r1
 800430e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004312:	4413      	add	r3, r2
 8004314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004318:	2200      	movs	r2, #0
 800431a:	61bb      	str	r3, [r7, #24]
 800431c:	61fa      	str	r2, [r7, #28]
 800431e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004322:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004326:	f7fb ffbb 	bl	80002a0 <__aeabi_uldivmod>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4613      	mov	r3, r2
 8004330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004332:	e053      	b.n	80043dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004334:	4b35      	ldr	r3, [pc, #212]	; (800440c <HAL_RCC_GetSysClockFreq+0x180>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	099b      	lsrs	r3, r3, #6
 800433a:	2200      	movs	r2, #0
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	617a      	str	r2, [r7, #20]
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004346:	f04f 0b00 	mov.w	fp, #0
 800434a:	4652      	mov	r2, sl
 800434c:	465b      	mov	r3, fp
 800434e:	f04f 0000 	mov.w	r0, #0
 8004352:	f04f 0100 	mov.w	r1, #0
 8004356:	0159      	lsls	r1, r3, #5
 8004358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800435c:	0150      	lsls	r0, r2, #5
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	ebb2 080a 	subs.w	r8, r2, sl
 8004366:	eb63 090b 	sbc.w	r9, r3, fp
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004376:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800437a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800437e:	ebb2 0408 	subs.w	r4, r2, r8
 8004382:	eb63 0509 	sbc.w	r5, r3, r9
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	00eb      	lsls	r3, r5, #3
 8004390:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004394:	00e2      	lsls	r2, r4, #3
 8004396:	4614      	mov	r4, r2
 8004398:	461d      	mov	r5, r3
 800439a:	eb14 030a 	adds.w	r3, r4, sl
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	eb45 030b 	adc.w	r3, r5, fp
 80043a4:	607b      	str	r3, [r7, #4]
 80043a6:	f04f 0200 	mov.w	r2, #0
 80043aa:	f04f 0300 	mov.w	r3, #0
 80043ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043b2:	4629      	mov	r1, r5
 80043b4:	028b      	lsls	r3, r1, #10
 80043b6:	4621      	mov	r1, r4
 80043b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043bc:	4621      	mov	r1, r4
 80043be:	028a      	lsls	r2, r1, #10
 80043c0:	4610      	mov	r0, r2
 80043c2:	4619      	mov	r1, r3
 80043c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c6:	2200      	movs	r2, #0
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	60fa      	str	r2, [r7, #12]
 80043cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043d0:	f7fb ff66 	bl	80002a0 <__aeabi_uldivmod>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4613      	mov	r3, r2
 80043da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043dc:	4b0b      	ldr	r3, [pc, #44]	; (800440c <HAL_RCC_GetSysClockFreq+0x180>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	0c1b      	lsrs	r3, r3, #16
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	3301      	adds	r3, #1
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80043ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043f6:	e002      	b.n	80043fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <HAL_RCC_GetSysClockFreq+0x184>)
 80043fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004400:	4618      	mov	r0, r3
 8004402:	3740      	adds	r7, #64	; 0x40
 8004404:	46bd      	mov	sp, r7
 8004406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800440a:	bf00      	nop
 800440c:	40023800 	.word	0x40023800
 8004410:	00f42400 	.word	0x00f42400
 8004414:	017d7840 	.word	0x017d7840

08004418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800441c:	4b03      	ldr	r3, [pc, #12]	; (800442c <HAL_RCC_GetHCLKFreq+0x14>)
 800441e:	681b      	ldr	r3, [r3, #0]
}
 8004420:	4618      	mov	r0, r3
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	20000014 	.word	0x20000014

08004430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004434:	f7ff fff0 	bl	8004418 <HAL_RCC_GetHCLKFreq>
 8004438:	4602      	mov	r2, r0
 800443a:	4b05      	ldr	r3, [pc, #20]	; (8004450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	0a9b      	lsrs	r3, r3, #10
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	4903      	ldr	r1, [pc, #12]	; (8004454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004446:	5ccb      	ldrb	r3, [r1, r3]
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800444c:	4618      	mov	r0, r3
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40023800 	.word	0x40023800
 8004454:	08008468 	.word	0x08008468

08004458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800445c:	f7ff ffdc 	bl	8004418 <HAL_RCC_GetHCLKFreq>
 8004460:	4602      	mov	r2, r0
 8004462:	4b05      	ldr	r3, [pc, #20]	; (8004478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	0b5b      	lsrs	r3, r3, #13
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	4903      	ldr	r1, [pc, #12]	; (800447c <HAL_RCC_GetPCLK2Freq+0x24>)
 800446e:	5ccb      	ldrb	r3, [r1, r3]
 8004470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004474:	4618      	mov	r0, r3
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40023800 	.word	0x40023800
 800447c:	08008468 	.word	0x08008468

08004480 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10b      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d105      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d075      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044b4:	4b91      	ldr	r3, [pc, #580]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044ba:	f7fd fe29 	bl	8002110 <HAL_GetTick>
 80044be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044c2:	f7fd fe25 	bl	8002110 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e189      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044d4:	4b8a      	ldr	r3, [pc, #552]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1f0      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d009      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	019a      	lsls	r2, r3, #6
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	071b      	lsls	r3, r3, #28
 80044f8:	4981      	ldr	r1, [pc, #516]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01f      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800450c:	4b7c      	ldr	r3, [pc, #496]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800450e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004512:	0f1b      	lsrs	r3, r3, #28
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	019a      	lsls	r2, r3, #6
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	061b      	lsls	r3, r3, #24
 8004526:	431a      	orrs	r2, r3
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	071b      	lsls	r3, r3, #28
 800452c:	4974      	ldr	r1, [pc, #464]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004534:	4b72      	ldr	r3, [pc, #456]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800453a:	f023 021f 	bic.w	r2, r3, #31
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	3b01      	subs	r3, #1
 8004544:	496e      	ldr	r1, [pc, #440]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00d      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	019a      	lsls	r2, r3, #6
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	061b      	lsls	r3, r3, #24
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	071b      	lsls	r3, r3, #28
 800456c:	4964      	ldr	r1, [pc, #400]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800456e:	4313      	orrs	r3, r2
 8004570:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004574:	4b61      	ldr	r3, [pc, #388]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004576:	2201      	movs	r2, #1
 8004578:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800457a:	f7fd fdc9 	bl	8002110 <HAL_GetTick>
 800457e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004580:	e008      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004582:	f7fd fdc5 	bl	8002110 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e129      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004594:	4b5a      	ldr	r3, [pc, #360]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d105      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d079      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80045b8:	4b52      	ldr	r3, [pc, #328]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045be:	f7fd fda7 	bl	8002110 <HAL_GetTick>
 80045c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045c4:	e008      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80045c6:	f7fd fda3 	bl	8002110 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e107      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045d8:	4b49      	ldr	r3, [pc, #292]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045e4:	d0ef      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d020      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045f2:	4b43      	ldr	r3, [pc, #268]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f8:	0f1b      	lsrs	r3, r3, #28
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	019a      	lsls	r2, r3, #6
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	061b      	lsls	r3, r3, #24
 800460c:	431a      	orrs	r2, r3
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	071b      	lsls	r3, r3, #28
 8004612:	493b      	ldr	r1, [pc, #236]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800461a:	4b39      	ldr	r3, [pc, #228]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800461c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004620:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	3b01      	subs	r3, #1
 800462a:	021b      	lsls	r3, r3, #8
 800462c:	4934      	ldr	r1, [pc, #208]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01e      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004640:	4b2f      	ldr	r3, [pc, #188]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	0e1b      	lsrs	r3, r3, #24
 8004648:	f003 030f 	and.w	r3, r3, #15
 800464c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	019a      	lsls	r2, r3, #6
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	061b      	lsls	r3, r3, #24
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	071b      	lsls	r3, r3, #28
 8004660:	4927      	ldr	r1, [pc, #156]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004668:	4b25      	ldr	r3, [pc, #148]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800466a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800466e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	4922      	ldr	r1, [pc, #136]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800467e:	4b21      	ldr	r3, [pc, #132]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004680:	2201      	movs	r2, #1
 8004682:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004684:	f7fd fd44 	bl	8002110 <HAL_GetTick>
 8004688:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800468a:	e008      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800468c:	f7fd fd40 	bl	8002110 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e0a4      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800469e:	4b18      	ldr	r3, [pc, #96]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046aa:	d1ef      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 808b 	beq.w	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	4b10      	ldr	r3, [pc, #64]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	4a0f      	ldr	r2, [pc, #60]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ca:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80046d6:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a0b      	ldr	r2, [pc, #44]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80046dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046e2:	f7fd fd15 	bl	8002110 <HAL_GetTick>
 80046e6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046e8:	e010      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046ea:	f7fd fd11 	bl	8002110 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d909      	bls.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e075      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80046fc:	42470068 	.word	0x42470068
 8004700:	40023800 	.word	0x40023800
 8004704:	42470070 	.word	0x42470070
 8004708:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800470c:	4b38      	ldr	r3, [pc, #224]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0e8      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004718:	4b36      	ldr	r3, [pc, #216]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800471a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004720:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d02f      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	429a      	cmp	r2, r3
 8004734:	d028      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004736:	4b2f      	ldr	r3, [pc, #188]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800473e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004740:	4b2d      	ldr	r3, [pc, #180]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004742:	2201      	movs	r2, #1
 8004744:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004746:	4b2c      	ldr	r3, [pc, #176]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800474c:	4a29      	ldr	r2, [pc, #164]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004752:	4b28      	ldr	r3, [pc, #160]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b01      	cmp	r3, #1
 800475c:	d114      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800475e:	f7fd fcd7 	bl	8002110 <HAL_GetTick>
 8004762:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004764:	e00a      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004766:	f7fd fcd3 	bl	8002110 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	f241 3288 	movw	r2, #5000	; 0x1388
 8004774:	4293      	cmp	r3, r2
 8004776:	d901      	bls.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e035      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800477c:	4b1d      	ldr	r3, [pc, #116]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800477e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0ee      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004794:	d10d      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004796:	4b17      	ldr	r3, [pc, #92]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80047a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047aa:	4912      	ldr	r1, [pc, #72]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	608b      	str	r3, [r1, #8]
 80047b0:	e005      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80047b2:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	4a0f      	ldr	r2, [pc, #60]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047bc:	6093      	str	r3, [r2, #8]
 80047be:	4b0d      	ldr	r3, [pc, #52]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ca:	490a      	ldr	r1, [pc, #40]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d004      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80047e2:	4b06      	ldr	r3, [pc, #24]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80047e4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40007000 	.word	0x40007000
 80047f4:	40023800 	.word	0x40023800
 80047f8:	42470e40 	.word	0x42470e40
 80047fc:	424711e0 	.word	0x424711e0

08004800 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e066      	b.n	80048e4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	7f5b      	ldrb	r3, [r3, #29]
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d105      	bne.n	800482c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7fd f88c 	bl	8001944 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	22ca      	movs	r2, #202	; 0xca
 8004838:	625a      	str	r2, [r3, #36]	; 0x24
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2253      	movs	r2, #83	; 0x53
 8004840:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fa45 	bl	8004cd2 <RTC_EnterInitMode>
 8004848:	4603      	mov	r3, r0
 800484a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d12c      	bne.n	80048ac <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6812      	ldr	r2, [r2, #0]
 800485c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004864:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6899      	ldr	r1, [r3, #8]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	68d2      	ldr	r2, [r2, #12]
 800488c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6919      	ldr	r1, [r3, #16]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	041a      	lsls	r2, r3, #16
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fa4c 	bl	8004d40 <RTC_ExitInitMode>
 80048a8:	4603      	mov	r3, r0
 80048aa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d113      	bne.n	80048da <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048c0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699a      	ldr	r2, [r3, #24]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	22ff      	movs	r2, #255	; 0xff
 80048e0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80048ec:	b590      	push	{r4, r7, lr}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	7f1b      	ldrb	r3, [r3, #28]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_RTC_SetTime+0x1c>
 8004904:	2302      	movs	r3, #2
 8004906:	e087      	b.n	8004a18 <HAL_RTC_SetTime+0x12c>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2201      	movs	r2, #1
 800490c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2202      	movs	r2, #2
 8004912:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d126      	bne.n	8004968 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	d102      	bne.n	800492e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2200      	movs	r2, #0
 800492c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fa29 	bl	8004d8a <RTC_ByteToBcd2>
 8004938:	4603      	mov	r3, r0
 800493a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	785b      	ldrb	r3, [r3, #1]
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fa22 	bl	8004d8a <RTC_ByteToBcd2>
 8004946:	4603      	mov	r3, r0
 8004948:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800494a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	789b      	ldrb	r3, [r3, #2]
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fa1a 	bl	8004d8a <RTC_ByteToBcd2>
 8004956:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004958:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	78db      	ldrb	r3, [r3, #3]
 8004960:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	e018      	b.n	800499a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004972:	2b00      	cmp	r3, #0
 8004974:	d102      	bne.n	800497c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2200      	movs	r2, #0
 800497a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	785b      	ldrb	r3, [r3, #1]
 8004986:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004988:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800498e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	78db      	ldrb	r3, [r3, #3]
 8004994:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004996:	4313      	orrs	r3, r2
 8004998:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	22ca      	movs	r2, #202	; 0xca
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2253      	movs	r2, #83	; 0x53
 80049a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 f991 	bl	8004cd2 <RTC_EnterInitMode>
 80049b0:	4603      	mov	r3, r0
 80049b2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80049b4:	7cfb      	ldrb	r3, [r7, #19]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d120      	bne.n	80049fc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80049c4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80049c8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049d8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6899      	ldr	r1, [r3, #8]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	431a      	orrs	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f9a4 	bl	8004d40 <RTC_ExitInitMode>
 80049f8:	4603      	mov	r3, r0
 80049fa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80049fc:	7cfb      	ldrb	r3, [r7, #19]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d102      	bne.n	8004a08 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	22ff      	movs	r2, #255	; 0xff
 8004a0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	771a      	strb	r2, [r3, #28]

  return status;
 8004a16:	7cfb      	ldrb	r3, [r7, #19]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	371c      	adds	r7, #28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd90      	pop	{r4, r7, pc}

08004a20 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004a52:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004a56:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	0c1b      	lsrs	r3, r3, #16
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	0a1b      	lsrs	r3, r3, #8
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	0d9b      	lsrs	r3, r3, #22
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d11a      	bne.n	8004ad2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 f98f 	bl	8004dc4 <RTC_Bcd2ToByte>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	785b      	ldrb	r3, [r3, #1]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 f986 	bl	8004dc4 <RTC_Bcd2ToByte>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	461a      	mov	r2, r3
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	789b      	ldrb	r3, [r3, #2]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 f97d 	bl	8004dc4 <RTC_Bcd2ToByte>
 8004aca:	4603      	mov	r3, r0
 8004acc:	461a      	mov	r2, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004adc:	b590      	push	{r4, r7, lr}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	7f1b      	ldrb	r3, [r3, #28]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_RTC_SetDate+0x1c>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e071      	b.n	8004bdc <HAL_RTC_SetDate+0x100>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2201      	movs	r2, #1
 8004afc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2202      	movs	r2, #2
 8004b02:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10e      	bne.n	8004b28 <HAL_RTC_SetDate+0x4c>
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	785b      	ldrb	r3, [r3, #1]
 8004b0e:	f003 0310 	and.w	r3, r3, #16
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d008      	beq.n	8004b28 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	785b      	ldrb	r3, [r3, #1]
 8004b1a:	f023 0310 	bic.w	r3, r3, #16
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	330a      	adds	r3, #10
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d11c      	bne.n	8004b68 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	78db      	ldrb	r3, [r3, #3]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 f929 	bl	8004d8a <RTC_ByteToBcd2>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	785b      	ldrb	r3, [r3, #1]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 f922 	bl	8004d8a <RTC_ByteToBcd2>
 8004b46:	4603      	mov	r3, r0
 8004b48:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b4a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	789b      	ldrb	r3, [r3, #2]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 f91a 	bl	8004d8a <RTC_ByteToBcd2>
 8004b56:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b58:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b62:	4313      	orrs	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	e00e      	b.n	8004b86 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	78db      	ldrb	r3, [r3, #3]
 8004b6c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	785b      	ldrb	r3, [r3, #1]
 8004b72:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004b74:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004b7a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	22ca      	movs	r2, #202	; 0xca
 8004b8c:	625a      	str	r2, [r3, #36]	; 0x24
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2253      	movs	r2, #83	; 0x53
 8004b94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 f89b 	bl	8004cd2 <RTC_EnterInitMode>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004ba0:	7cfb      	ldrb	r3, [r7, #19]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004bb0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004bb4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 f8c2 	bl	8004d40 <RTC_ExitInitMode>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004bc0:	7cfb      	ldrb	r3, [r7, #19]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d102      	bne.n	8004bcc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	22ff      	movs	r2, #255	; 0xff
 8004bd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	771a      	strb	r2, [r3, #28]

  return status;
 8004bda:	7cfb      	ldrb	r3, [r7, #19]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	371c      	adds	r7, #28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd90      	pop	{r4, r7, pc}

08004be4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004bfe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c02:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	0c1b      	lsrs	r3, r3, #16
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	0a1b      	lsrs	r3, r3, #8
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	f003 031f 	and.w	r3, r3, #31
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	0b5b      	lsrs	r3, r3, #13
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d11a      	bne.n	8004c78 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	78db      	ldrb	r3, [r3, #3]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 f8bc 	bl	8004dc4 <RTC_Bcd2ToByte>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	461a      	mov	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	785b      	ldrb	r3, [r3, #1]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 f8b3 	bl	8004dc4 <RTC_Bcd2ToByte>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	461a      	mov	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	789b      	ldrb	r3, [r3, #2]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 f8aa 	bl	8004dc4 <RTC_Bcd2ToByte>
 8004c70:	4603      	mov	r3, r0
 8004c72:	461a      	mov	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c9c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c9e:	f7fd fa37 	bl	8002110 <HAL_GetTick>
 8004ca2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ca4:	e009      	b.n	8004cba <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ca6:	f7fd fa33 	bl	8002110 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cb4:	d901      	bls.n	8004cba <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e007      	b.n	8004cca <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f003 0320 	and.w	r3, r3, #32
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0ee      	beq.n	8004ca6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d122      	bne.n	8004d36 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cfe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d00:	f7fd fa06 	bl	8002110 <HAL_GetTick>
 8004d04:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004d06:	e00c      	b.n	8004d22 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d08:	f7fd fa02 	bl	8002110 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d16:	d904      	bls.n	8004d22 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2204      	movs	r2, #4
 8004d1c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d102      	bne.n	8004d36 <RTC_EnterInitMode+0x64>
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d1e8      	bne.n	8004d08 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d5a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10a      	bne.n	8004d80 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff ff89 	bl	8004c82 <HAL_RTC_WaitForSynchro>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d004      	beq.n	8004d80 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2204      	movs	r2, #4
 8004d7a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b085      	sub	sp, #20
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	4603      	mov	r3, r0
 8004d92:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004d98:	e005      	b.n	8004da6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004da0:	79fb      	ldrb	r3, [r7, #7]
 8004da2:	3b0a      	subs	r3, #10
 8004da4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004da6:	79fb      	ldrb	r3, [r7, #7]
 8004da8:	2b09      	cmp	r3, #9
 8004daa:	d8f6      	bhi.n	8004d9a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	b2db      	uxtb	r3, r3
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	4603      	mov	r3, r0
 8004dcc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004dd2:	79fb      	ldrb	r3, [r7, #7]
 8004dd4:	091b      	lsrs	r3, r3, #4
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	0092      	lsls	r2, r2, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8004de2:	79fb      	ldrb	r3, [r7, #7]
 8004de4:	f003 030f 	and.w	r3, r3, #15
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
 8004dec:	4413      	add	r3, r2
 8004dee:	b2db      	uxtb	r3, r3
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e041      	b.n	8004e92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fc ffa0 	bl	8001d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3304      	adds	r3, #4
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	f000 fc7a 	bl	8005734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d001      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e04e      	b.n	8004f52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0201 	orr.w	r2, r2, #1
 8004eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a23      	ldr	r2, [pc, #140]	; (8004f60 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d022      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x80>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ede:	d01d      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x80>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a1f      	ldr	r2, [pc, #124]	; (8004f64 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d018      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x80>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1e      	ldr	r2, [pc, #120]	; (8004f68 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d013      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x80>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1c      	ldr	r2, [pc, #112]	; (8004f6c <HAL_TIM_Base_Start_IT+0xd0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00e      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x80>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1b      	ldr	r2, [pc, #108]	; (8004f70 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d009      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x80>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a19      	ldr	r2, [pc, #100]	; (8004f74 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d004      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x80>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a18      	ldr	r2, [pc, #96]	; (8004f78 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d111      	bne.n	8004f40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b06      	cmp	r3, #6
 8004f2c:	d010      	beq.n	8004f50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f042 0201 	orr.w	r2, r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3e:	e007      	b.n	8004f50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	40010000 	.word	0x40010000
 8004f64:	40000400 	.word	0x40000400
 8004f68:	40000800 	.word	0x40000800
 8004f6c:	40000c00 	.word	0x40000c00
 8004f70:	40010400 	.word	0x40010400
 8004f74:	40014000 	.word	0x40014000
 8004f78:	40001800 	.word	0x40001800

08004f7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e041      	b.n	8005012 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f839 	bl	800501a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f000 fbba 	bl	8005734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
	...

08005030 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d109      	bne.n	8005054 <HAL_TIM_PWM_Start+0x24>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b01      	cmp	r3, #1
 800504a:	bf14      	ite	ne
 800504c:	2301      	movne	r3, #1
 800504e:	2300      	moveq	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	e022      	b.n	800509a <HAL_TIM_PWM_Start+0x6a>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2b04      	cmp	r3, #4
 8005058:	d109      	bne.n	800506e <HAL_TIM_PWM_Start+0x3e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b01      	cmp	r3, #1
 8005064:	bf14      	ite	ne
 8005066:	2301      	movne	r3, #1
 8005068:	2300      	moveq	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	e015      	b.n	800509a <HAL_TIM_PWM_Start+0x6a>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b08      	cmp	r3, #8
 8005072:	d109      	bne.n	8005088 <HAL_TIM_PWM_Start+0x58>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b01      	cmp	r3, #1
 800507e:	bf14      	ite	ne
 8005080:	2301      	movne	r3, #1
 8005082:	2300      	moveq	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	e008      	b.n	800509a <HAL_TIM_PWM_Start+0x6a>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b01      	cmp	r3, #1
 8005092:	bf14      	ite	ne
 8005094:	2301      	movne	r3, #1
 8005096:	2300      	moveq	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e07c      	b.n	800519c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d104      	bne.n	80050b2 <HAL_TIM_PWM_Start+0x82>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050b0:	e013      	b.n	80050da <HAL_TIM_PWM_Start+0xaa>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d104      	bne.n	80050c2 <HAL_TIM_PWM_Start+0x92>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050c0:	e00b      	b.n	80050da <HAL_TIM_PWM_Start+0xaa>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d104      	bne.n	80050d2 <HAL_TIM_PWM_Start+0xa2>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050d0:	e003      	b.n	80050da <HAL_TIM_PWM_Start+0xaa>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2202      	movs	r2, #2
 80050d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2201      	movs	r2, #1
 80050e0:	6839      	ldr	r1, [r7, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fe10 	bl	8005d08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a2d      	ldr	r2, [pc, #180]	; (80051a4 <HAL_TIM_PWM_Start+0x174>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d004      	beq.n	80050fc <HAL_TIM_PWM_Start+0xcc>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a2c      	ldr	r2, [pc, #176]	; (80051a8 <HAL_TIM_PWM_Start+0x178>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d101      	bne.n	8005100 <HAL_TIM_PWM_Start+0xd0>
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <HAL_TIM_PWM_Start+0xd2>
 8005100:	2300      	movs	r3, #0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d007      	beq.n	8005116 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005114:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a22      	ldr	r2, [pc, #136]	; (80051a4 <HAL_TIM_PWM_Start+0x174>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d022      	beq.n	8005166 <HAL_TIM_PWM_Start+0x136>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005128:	d01d      	beq.n	8005166 <HAL_TIM_PWM_Start+0x136>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a1f      	ldr	r2, [pc, #124]	; (80051ac <HAL_TIM_PWM_Start+0x17c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d018      	beq.n	8005166 <HAL_TIM_PWM_Start+0x136>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a1d      	ldr	r2, [pc, #116]	; (80051b0 <HAL_TIM_PWM_Start+0x180>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d013      	beq.n	8005166 <HAL_TIM_PWM_Start+0x136>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1c      	ldr	r2, [pc, #112]	; (80051b4 <HAL_TIM_PWM_Start+0x184>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d00e      	beq.n	8005166 <HAL_TIM_PWM_Start+0x136>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a16      	ldr	r2, [pc, #88]	; (80051a8 <HAL_TIM_PWM_Start+0x178>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d009      	beq.n	8005166 <HAL_TIM_PWM_Start+0x136>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a18      	ldr	r2, [pc, #96]	; (80051b8 <HAL_TIM_PWM_Start+0x188>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d004      	beq.n	8005166 <HAL_TIM_PWM_Start+0x136>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a16      	ldr	r2, [pc, #88]	; (80051bc <HAL_TIM_PWM_Start+0x18c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d111      	bne.n	800518a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b06      	cmp	r3, #6
 8005176:	d010      	beq.n	800519a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005188:	e007      	b.n	800519a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f042 0201 	orr.w	r2, r2, #1
 8005198:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40010000 	.word	0x40010000
 80051a8:	40010400 	.word	0x40010400
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800
 80051b4:	40000c00 	.word	0x40000c00
 80051b8:	40014000 	.word	0x40014000
 80051bc:	40001800 	.word	0x40001800

080051c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d122      	bne.n	800521c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d11b      	bne.n	800521c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f06f 0202 	mvn.w	r2, #2
 80051ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fa77 	bl	80056f6 <HAL_TIM_IC_CaptureCallback>
 8005208:	e005      	b.n	8005216 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fa69 	bl	80056e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 fa7a 	bl	800570a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f003 0304 	and.w	r3, r3, #4
 8005226:	2b04      	cmp	r3, #4
 8005228:	d122      	bne.n	8005270 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b04      	cmp	r3, #4
 8005236:	d11b      	bne.n	8005270 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f06f 0204 	mvn.w	r2, #4
 8005240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2202      	movs	r2, #2
 8005246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fa4d 	bl	80056f6 <HAL_TIM_IC_CaptureCallback>
 800525c:	e005      	b.n	800526a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fa3f 	bl	80056e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fa50 	bl	800570a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b08      	cmp	r3, #8
 800527c:	d122      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b08      	cmp	r3, #8
 800528a:	d11b      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0208 	mvn.w	r2, #8
 8005294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2204      	movs	r2, #4
 800529a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fa23 	bl	80056f6 <HAL_TIM_IC_CaptureCallback>
 80052b0:	e005      	b.n	80052be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fa15 	bl	80056e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fa26 	bl	800570a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f003 0310 	and.w	r3, r3, #16
 80052ce:	2b10      	cmp	r3, #16
 80052d0:	d122      	bne.n	8005318 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f003 0310 	and.w	r3, r3, #16
 80052dc:	2b10      	cmp	r3, #16
 80052de:	d11b      	bne.n	8005318 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0210 	mvn.w	r2, #16
 80052e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2208      	movs	r2, #8
 80052ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f9f9 	bl	80056f6 <HAL_TIM_IC_CaptureCallback>
 8005304:	e005      	b.n	8005312 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f9eb 	bl	80056e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f9fc 	bl	800570a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b01      	cmp	r3, #1
 8005324:	d10e      	bne.n	8005344 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b01      	cmp	r3, #1
 8005332:	d107      	bne.n	8005344 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0201 	mvn.w	r2, #1
 800533c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7fb fd94 	bl	8000e6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534e:	2b80      	cmp	r3, #128	; 0x80
 8005350:	d10e      	bne.n	8005370 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535c:	2b80      	cmp	r3, #128	; 0x80
 800535e:	d107      	bne.n	8005370 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fd78 	bl	8005e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537a:	2b40      	cmp	r3, #64	; 0x40
 800537c:	d10e      	bne.n	800539c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005388:	2b40      	cmp	r3, #64	; 0x40
 800538a:	d107      	bne.n	800539c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f9c1 	bl	800571e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d10e      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0320 	and.w	r3, r3, #32
 80053b4:	2b20      	cmp	r3, #32
 80053b6:	d107      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0220 	mvn.w	r2, #32
 80053c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fd42 	bl	8005e4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053c8:	bf00      	nop
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e0ae      	b.n	800554c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b0c      	cmp	r3, #12
 80053fa:	f200 809f 	bhi.w	800553c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053fe:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005404:	08005439 	.word	0x08005439
 8005408:	0800553d 	.word	0x0800553d
 800540c:	0800553d 	.word	0x0800553d
 8005410:	0800553d 	.word	0x0800553d
 8005414:	08005479 	.word	0x08005479
 8005418:	0800553d 	.word	0x0800553d
 800541c:	0800553d 	.word	0x0800553d
 8005420:	0800553d 	.word	0x0800553d
 8005424:	080054bb 	.word	0x080054bb
 8005428:	0800553d 	.word	0x0800553d
 800542c:	0800553d 	.word	0x0800553d
 8005430:	0800553d 	.word	0x0800553d
 8005434:	080054fb 	.word	0x080054fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68b9      	ldr	r1, [r7, #8]
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fa18 	bl	8005874 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699a      	ldr	r2, [r3, #24]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0208 	orr.w	r2, r2, #8
 8005452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0204 	bic.w	r2, r2, #4
 8005462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6999      	ldr	r1, [r3, #24]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	691a      	ldr	r2, [r3, #16]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	619a      	str	r2, [r3, #24]
      break;
 8005476:	e064      	b.n	8005542 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fa68 	bl	8005954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6999      	ldr	r1, [r3, #24]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	021a      	lsls	r2, r3, #8
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	619a      	str	r2, [r3, #24]
      break;
 80054b8:	e043      	b.n	8005542 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fabd 	bl	8005a40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69da      	ldr	r2, [r3, #28]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 0208 	orr.w	r2, r2, #8
 80054d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69da      	ldr	r2, [r3, #28]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0204 	bic.w	r2, r2, #4
 80054e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69d9      	ldr	r1, [r3, #28]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	61da      	str	r2, [r3, #28]
      break;
 80054f8:	e023      	b.n	8005542 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fb11 	bl	8005b28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69da      	ldr	r2, [r3, #28]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69da      	ldr	r2, [r3, #28]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69d9      	ldr	r1, [r3, #28]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	021a      	lsls	r2, r3, #8
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	61da      	str	r2, [r3, #28]
      break;
 800553a:	e002      	b.n	8005542 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	75fb      	strb	r3, [r7, #23]
      break;
 8005540:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800554a:	7dfb      	ldrb	r3, [r7, #23]
}
 800554c:	4618      	mov	r0, r3
 800554e:	3718      	adds	r7, #24
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_TIM_ConfigClockSource+0x1c>
 800556c:	2302      	movs	r3, #2
 800556e:	e0b4      	b.n	80056da <HAL_TIM_ConfigClockSource+0x186>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800558e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005596:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055a8:	d03e      	beq.n	8005628 <HAL_TIM_ConfigClockSource+0xd4>
 80055aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ae:	f200 8087 	bhi.w	80056c0 <HAL_TIM_ConfigClockSource+0x16c>
 80055b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b6:	f000 8086 	beq.w	80056c6 <HAL_TIM_ConfigClockSource+0x172>
 80055ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055be:	d87f      	bhi.n	80056c0 <HAL_TIM_ConfigClockSource+0x16c>
 80055c0:	2b70      	cmp	r3, #112	; 0x70
 80055c2:	d01a      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0xa6>
 80055c4:	2b70      	cmp	r3, #112	; 0x70
 80055c6:	d87b      	bhi.n	80056c0 <HAL_TIM_ConfigClockSource+0x16c>
 80055c8:	2b60      	cmp	r3, #96	; 0x60
 80055ca:	d050      	beq.n	800566e <HAL_TIM_ConfigClockSource+0x11a>
 80055cc:	2b60      	cmp	r3, #96	; 0x60
 80055ce:	d877      	bhi.n	80056c0 <HAL_TIM_ConfigClockSource+0x16c>
 80055d0:	2b50      	cmp	r3, #80	; 0x50
 80055d2:	d03c      	beq.n	800564e <HAL_TIM_ConfigClockSource+0xfa>
 80055d4:	2b50      	cmp	r3, #80	; 0x50
 80055d6:	d873      	bhi.n	80056c0 <HAL_TIM_ConfigClockSource+0x16c>
 80055d8:	2b40      	cmp	r3, #64	; 0x40
 80055da:	d058      	beq.n	800568e <HAL_TIM_ConfigClockSource+0x13a>
 80055dc:	2b40      	cmp	r3, #64	; 0x40
 80055de:	d86f      	bhi.n	80056c0 <HAL_TIM_ConfigClockSource+0x16c>
 80055e0:	2b30      	cmp	r3, #48	; 0x30
 80055e2:	d064      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0x15a>
 80055e4:	2b30      	cmp	r3, #48	; 0x30
 80055e6:	d86b      	bhi.n	80056c0 <HAL_TIM_ConfigClockSource+0x16c>
 80055e8:	2b20      	cmp	r3, #32
 80055ea:	d060      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0x15a>
 80055ec:	2b20      	cmp	r3, #32
 80055ee:	d867      	bhi.n	80056c0 <HAL_TIM_ConfigClockSource+0x16c>
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d05c      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0x15a>
 80055f4:	2b10      	cmp	r3, #16
 80055f6:	d05a      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0x15a>
 80055f8:	e062      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6818      	ldr	r0, [r3, #0]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	6899      	ldr	r1, [r3, #8]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f000 fb5d 	bl	8005cc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800561c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	609a      	str	r2, [r3, #8]
      break;
 8005626:	e04f      	b.n	80056c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6818      	ldr	r0, [r3, #0]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	6899      	ldr	r1, [r3, #8]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f000 fb46 	bl	8005cc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800564a:	609a      	str	r2, [r3, #8]
      break;
 800564c:	e03c      	b.n	80056c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6818      	ldr	r0, [r3, #0]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	6859      	ldr	r1, [r3, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	461a      	mov	r2, r3
 800565c:	f000 faba 	bl	8005bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2150      	movs	r1, #80	; 0x50
 8005666:	4618      	mov	r0, r3
 8005668:	f000 fb13 	bl	8005c92 <TIM_ITRx_SetConfig>
      break;
 800566c:	e02c      	b.n	80056c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6818      	ldr	r0, [r3, #0]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	6859      	ldr	r1, [r3, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	461a      	mov	r2, r3
 800567c:	f000 fad9 	bl	8005c32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2160      	movs	r1, #96	; 0x60
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fb03 	bl	8005c92 <TIM_ITRx_SetConfig>
      break;
 800568c:	e01c      	b.n	80056c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6818      	ldr	r0, [r3, #0]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	6859      	ldr	r1, [r3, #4]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	461a      	mov	r2, r3
 800569c:	f000 fa9a 	bl	8005bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2140      	movs	r1, #64	; 0x40
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 faf3 	bl	8005c92 <TIM_ITRx_SetConfig>
      break;
 80056ac:	e00c      	b.n	80056c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4619      	mov	r1, r3
 80056b8:	4610      	mov	r0, r2
 80056ba:	f000 faea 	bl	8005c92 <TIM_ITRx_SetConfig>
      break;
 80056be:	e003      	b.n	80056c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	73fb      	strb	r3, [r7, #15]
      break;
 80056c4:	e000      	b.n	80056c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056ea:	bf00      	nop
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800571e:	b480      	push	{r7}
 8005720:	b083      	sub	sp, #12
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
	...

08005734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a40      	ldr	r2, [pc, #256]	; (8005848 <TIM_Base_SetConfig+0x114>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d013      	beq.n	8005774 <TIM_Base_SetConfig+0x40>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005752:	d00f      	beq.n	8005774 <TIM_Base_SetConfig+0x40>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a3d      	ldr	r2, [pc, #244]	; (800584c <TIM_Base_SetConfig+0x118>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00b      	beq.n	8005774 <TIM_Base_SetConfig+0x40>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a3c      	ldr	r2, [pc, #240]	; (8005850 <TIM_Base_SetConfig+0x11c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d007      	beq.n	8005774 <TIM_Base_SetConfig+0x40>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a3b      	ldr	r2, [pc, #236]	; (8005854 <TIM_Base_SetConfig+0x120>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d003      	beq.n	8005774 <TIM_Base_SetConfig+0x40>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a3a      	ldr	r2, [pc, #232]	; (8005858 <TIM_Base_SetConfig+0x124>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d108      	bne.n	8005786 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a2f      	ldr	r2, [pc, #188]	; (8005848 <TIM_Base_SetConfig+0x114>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d02b      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005794:	d027      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a2c      	ldr	r2, [pc, #176]	; (800584c <TIM_Base_SetConfig+0x118>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d023      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a2b      	ldr	r2, [pc, #172]	; (8005850 <TIM_Base_SetConfig+0x11c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d01f      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a2a      	ldr	r2, [pc, #168]	; (8005854 <TIM_Base_SetConfig+0x120>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d01b      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a29      	ldr	r2, [pc, #164]	; (8005858 <TIM_Base_SetConfig+0x124>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d017      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a28      	ldr	r2, [pc, #160]	; (800585c <TIM_Base_SetConfig+0x128>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d013      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a27      	ldr	r2, [pc, #156]	; (8005860 <TIM_Base_SetConfig+0x12c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00f      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a26      	ldr	r2, [pc, #152]	; (8005864 <TIM_Base_SetConfig+0x130>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00b      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a25      	ldr	r2, [pc, #148]	; (8005868 <TIM_Base_SetConfig+0x134>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d007      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a24      	ldr	r2, [pc, #144]	; (800586c <TIM_Base_SetConfig+0x138>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d003      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a23      	ldr	r2, [pc, #140]	; (8005870 <TIM_Base_SetConfig+0x13c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d108      	bne.n	80057f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a0a      	ldr	r2, [pc, #40]	; (8005848 <TIM_Base_SetConfig+0x114>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d003      	beq.n	800582c <TIM_Base_SetConfig+0xf8>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a0c      	ldr	r2, [pc, #48]	; (8005858 <TIM_Base_SetConfig+0x124>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d103      	bne.n	8005834 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	615a      	str	r2, [r3, #20]
}
 800583a:	bf00      	nop
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	40010000 	.word	0x40010000
 800584c:	40000400 	.word	0x40000400
 8005850:	40000800 	.word	0x40000800
 8005854:	40000c00 	.word	0x40000c00
 8005858:	40010400 	.word	0x40010400
 800585c:	40014000 	.word	0x40014000
 8005860:	40014400 	.word	0x40014400
 8005864:	40014800 	.word	0x40014800
 8005868:	40001800 	.word	0x40001800
 800586c:	40001c00 	.word	0x40001c00
 8005870:	40002000 	.word	0x40002000

08005874 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f023 0201 	bic.w	r2, r3, #1
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 0303 	bic.w	r3, r3, #3
 80058aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f023 0302 	bic.w	r3, r3, #2
 80058bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a20      	ldr	r2, [pc, #128]	; (800594c <TIM_OC1_SetConfig+0xd8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d003      	beq.n	80058d8 <TIM_OC1_SetConfig+0x64>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a1f      	ldr	r2, [pc, #124]	; (8005950 <TIM_OC1_SetConfig+0xdc>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d10c      	bne.n	80058f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f023 0308 	bic.w	r3, r3, #8
 80058de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f023 0304 	bic.w	r3, r3, #4
 80058f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a15      	ldr	r2, [pc, #84]	; (800594c <TIM_OC1_SetConfig+0xd8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d003      	beq.n	8005902 <TIM_OC1_SetConfig+0x8e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a14      	ldr	r2, [pc, #80]	; (8005950 <TIM_OC1_SetConfig+0xdc>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d111      	bne.n	8005926 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	4313      	orrs	r3, r2
 800591a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	4313      	orrs	r3, r2
 8005924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	621a      	str	r2, [r3, #32]
}
 8005940:	bf00      	nop
 8005942:	371c      	adds	r7, #28
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	40010000 	.word	0x40010000
 8005950:	40010400 	.word	0x40010400

08005954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	f023 0210 	bic.w	r2, r3, #16
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800598a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	021b      	lsls	r3, r3, #8
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 0320 	bic.w	r3, r3, #32
 800599e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a22      	ldr	r2, [pc, #136]	; (8005a38 <TIM_OC2_SetConfig+0xe4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_OC2_SetConfig+0x68>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a21      	ldr	r2, [pc, #132]	; (8005a3c <TIM_OC2_SetConfig+0xe8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d10d      	bne.n	80059d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a17      	ldr	r2, [pc, #92]	; (8005a38 <TIM_OC2_SetConfig+0xe4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d003      	beq.n	80059e8 <TIM_OC2_SetConfig+0x94>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a16      	ldr	r2, [pc, #88]	; (8005a3c <TIM_OC2_SetConfig+0xe8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d113      	bne.n	8005a10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40010400 	.word	0x40010400

08005a40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0303 	bic.w	r3, r3, #3
 8005a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	021b      	lsls	r3, r3, #8
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a21      	ldr	r2, [pc, #132]	; (8005b20 <TIM_OC3_SetConfig+0xe0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d003      	beq.n	8005aa6 <TIM_OC3_SetConfig+0x66>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a20      	ldr	r2, [pc, #128]	; (8005b24 <TIM_OC3_SetConfig+0xe4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d10d      	bne.n	8005ac2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a16      	ldr	r2, [pc, #88]	; (8005b20 <TIM_OC3_SetConfig+0xe0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <TIM_OC3_SetConfig+0x92>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a15      	ldr	r2, [pc, #84]	; (8005b24 <TIM_OC3_SetConfig+0xe4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d113      	bne.n	8005afa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	621a      	str	r2, [r3, #32]
}
 8005b14:	bf00      	nop
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	40010000 	.word	0x40010000
 8005b24:	40010400 	.word	0x40010400

08005b28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	031b      	lsls	r3, r3, #12
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a12      	ldr	r2, [pc, #72]	; (8005bcc <TIM_OC4_SetConfig+0xa4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d003      	beq.n	8005b90 <TIM_OC4_SetConfig+0x68>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a11      	ldr	r2, [pc, #68]	; (8005bd0 <TIM_OC4_SetConfig+0xa8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d109      	bne.n	8005ba4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	019b      	lsls	r3, r3, #6
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40010400 	.word	0x40010400

08005bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f023 0201 	bic.w	r2, r3, #1
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f023 030a 	bic.w	r3, r3, #10
 8005c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	621a      	str	r2, [r3, #32]
}
 8005c26:	bf00      	nop
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b087      	sub	sp, #28
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	f023 0210 	bic.w	r2, r3, #16
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	031b      	lsls	r3, r3, #12
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	621a      	str	r2, [r3, #32]
}
 8005c86:	bf00      	nop
 8005c88:	371c      	adds	r7, #28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b085      	sub	sp, #20
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f043 0307 	orr.w	r3, r3, #7
 8005cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	609a      	str	r2, [r3, #8]
}
 8005cbc:	bf00      	nop
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	021a      	lsls	r2, r3, #8
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	431a      	orrs	r2, r3
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	609a      	str	r2, [r3, #8]
}
 8005cfc:	bf00      	nop
 8005cfe:	371c      	adds	r7, #28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f003 031f 	and.w	r3, r3, #31
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a1a      	ldr	r2, [r3, #32]
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	401a      	ands	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a1a      	ldr	r2, [r3, #32]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f003 031f 	and.w	r3, r3, #31
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d40:	431a      	orrs	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	621a      	str	r2, [r3, #32]
}
 8005d46:	bf00      	nop
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
	...

08005d54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d101      	bne.n	8005d6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e05a      	b.n	8005e22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2202      	movs	r2, #2
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a21      	ldr	r2, [pc, #132]	; (8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d022      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db8:	d01d      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a1d      	ldr	r2, [pc, #116]	; (8005e34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d018      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a1b      	ldr	r2, [pc, #108]	; (8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d013      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a1a      	ldr	r2, [pc, #104]	; (8005e3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00e      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a18      	ldr	r2, [pc, #96]	; (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d009      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a17      	ldr	r2, [pc, #92]	; (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d004      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a15      	ldr	r2, [pc, #84]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d10c      	bne.n	8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	40010000 	.word	0x40010000
 8005e34:	40000400 	.word	0x40000400
 8005e38:	40000800 	.word	0x40000800
 8005e3c:	40000c00 	.word	0x40000c00
 8005e40:	40010400 	.word	0x40010400
 8005e44:	40014000 	.word	0x40014000
 8005e48:	40001800 	.word	0x40001800

08005e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e03f      	b.n	8005f06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d106      	bne.n	8005ea0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7fc f82c 	bl	8001ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2224      	movs	r2, #36	; 0x24
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fd7b 	bl	80069b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691a      	ldr	r2, [r3, #16]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ecc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	695a      	ldr	r2, [r3, #20]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005edc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005eec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b08a      	sub	sp, #40	; 0x28
 8005f12:	af02      	add	r7, sp, #8
 8005f14:	60f8      	str	r0, [r7, #12]
 8005f16:	60b9      	str	r1, [r7, #8]
 8005f18:	603b      	str	r3, [r7, #0]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b20      	cmp	r3, #32
 8005f2c:	d17c      	bne.n	8006028 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <HAL_UART_Transmit+0x2c>
 8005f34:	88fb      	ldrh	r3, [r7, #6]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e075      	b.n	800602a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d101      	bne.n	8005f4c <HAL_UART_Transmit+0x3e>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	e06e      	b.n	800602a <HAL_UART_Transmit+0x11c>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2221      	movs	r2, #33	; 0x21
 8005f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f62:	f7fc f8d5 	bl	8002110 <HAL_GetTick>
 8005f66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	88fa      	ldrh	r2, [r7, #6]
 8005f6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	88fa      	ldrh	r2, [r7, #6]
 8005f72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7c:	d108      	bne.n	8005f90 <HAL_UART_Transmit+0x82>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d104      	bne.n	8005f90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	61bb      	str	r3, [r7, #24]
 8005f8e:	e003      	b.n	8005f98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f94:	2300      	movs	r3, #0
 8005f96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005fa0:	e02a      	b.n	8005ff8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2180      	movs	r1, #128	; 0x80
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 faf9 	bl	80065a4 <UART_WaitOnFlagUntilTimeout>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e036      	b.n	800602a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10b      	bne.n	8005fda <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	3302      	adds	r3, #2
 8005fd6:	61bb      	str	r3, [r7, #24]
 8005fd8:	e007      	b.n	8005fea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	781a      	ldrb	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1cf      	bne.n	8005fa2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	2200      	movs	r2, #0
 800600a:	2140      	movs	r1, #64	; 0x40
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 fac9 	bl	80065a4 <UART_WaitOnFlagUntilTimeout>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e006      	b.n	800602a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2220      	movs	r2, #32
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006024:	2300      	movs	r3, #0
 8006026:	e000      	b.n	800602a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006028:	2302      	movs	r3, #2
  }
}
 800602a:	4618      	mov	r0, r3
 800602c:	3720      	adds	r7, #32
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
	...

08006034 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b0ba      	sub	sp, #232	; 0xe8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800605a:	2300      	movs	r3, #0
 800605c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006060:	2300      	movs	r3, #0
 8006062:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800606a:	f003 030f 	and.w	r3, r3, #15
 800606e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10f      	bne.n	800609a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800607a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800607e:	f003 0320 	and.w	r3, r3, #32
 8006082:	2b00      	cmp	r3, #0
 8006084:	d009      	beq.n	800609a <HAL_UART_IRQHandler+0x66>
 8006086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fbd3 	bl	800683e <UART_Receive_IT>
      return;
 8006098:	e256      	b.n	8006548 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800609a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f000 80de 	beq.w	8006260 <HAL_UART_IRQHandler+0x22c>
 80060a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d106      	bne.n	80060be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 80d1 	beq.w	8006260 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00b      	beq.n	80060e2 <HAL_UART_IRQHandler+0xae>
 80060ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	f043 0201 	orr.w	r2, r3, #1
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e6:	f003 0304 	and.w	r3, r3, #4
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00b      	beq.n	8006106 <HAL_UART_IRQHandler+0xd2>
 80060ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d005      	beq.n	8006106 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fe:	f043 0202 	orr.w	r2, r3, #2
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00b      	beq.n	800612a <HAL_UART_IRQHandler+0xf6>
 8006112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d005      	beq.n	800612a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	f043 0204 	orr.w	r2, r3, #4
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800612a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612e:	f003 0308 	and.w	r3, r3, #8
 8006132:	2b00      	cmp	r3, #0
 8006134:	d011      	beq.n	800615a <HAL_UART_IRQHandler+0x126>
 8006136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800613a:	f003 0320 	and.w	r3, r3, #32
 800613e:	2b00      	cmp	r3, #0
 8006140:	d105      	bne.n	800614e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d005      	beq.n	800615a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	f043 0208 	orr.w	r2, r3, #8
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 81ed 	beq.w	800653e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006168:	f003 0320 	and.w	r3, r3, #32
 800616c:	2b00      	cmp	r3, #0
 800616e:	d008      	beq.n	8006182 <HAL_UART_IRQHandler+0x14e>
 8006170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006174:	f003 0320 	and.w	r3, r3, #32
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fb5e 	bl	800683e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618c:	2b40      	cmp	r3, #64	; 0x40
 800618e:	bf0c      	ite	eq
 8006190:	2301      	moveq	r3, #1
 8006192:	2300      	movne	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	f003 0308 	and.w	r3, r3, #8
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d103      	bne.n	80061ae <HAL_UART_IRQHandler+0x17a>
 80061a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d04f      	beq.n	800624e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fa66 	bl	8006680 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061be:	2b40      	cmp	r3, #64	; 0x40
 80061c0:	d141      	bne.n	8006246 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3314      	adds	r3, #20
 80061c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061d0:	e853 3f00 	ldrex	r3, [r3]
 80061d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3314      	adds	r3, #20
 80061ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80061ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80061f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80061fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1d9      	bne.n	80061c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	2b00      	cmp	r3, #0
 8006214:	d013      	beq.n	800623e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621a:	4a7d      	ldr	r2, [pc, #500]	; (8006410 <HAL_UART_IRQHandler+0x3dc>)
 800621c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006222:	4618      	mov	r0, r3
 8006224:	f7fc fc77 	bl	8002b16 <HAL_DMA_Abort_IT>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d016      	beq.n	800625c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006238:	4610      	mov	r0, r2
 800623a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800623c:	e00e      	b.n	800625c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f99a 	bl	8006578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006244:	e00a      	b.n	800625c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f996 	bl	8006578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800624c:	e006      	b.n	800625c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f992 	bl	8006578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800625a:	e170      	b.n	800653e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800625c:	bf00      	nop
    return;
 800625e:	e16e      	b.n	800653e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006264:	2b01      	cmp	r3, #1
 8006266:	f040 814a 	bne.w	80064fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800626a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800626e:	f003 0310 	and.w	r3, r3, #16
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 8143 	beq.w	80064fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800627c:	f003 0310 	and.w	r3, r3, #16
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 813c 	beq.w	80064fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006286:	2300      	movs	r3, #0
 8006288:	60bb      	str	r3, [r7, #8]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	60bb      	str	r3, [r7, #8]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	60bb      	str	r3, [r7, #8]
 800629a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a6:	2b40      	cmp	r3, #64	; 0x40
 80062a8:	f040 80b4 	bne.w	8006414 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 8140 	beq.w	8006542 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062ca:	429a      	cmp	r2, r3
 80062cc:	f080 8139 	bcs.w	8006542 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062e2:	f000 8088 	beq.w	80063f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	330c      	adds	r3, #12
 80062ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80062fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006304:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	330c      	adds	r3, #12
 800630e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006312:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006316:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800631e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006322:	e841 2300 	strex	r3, r2, [r1]
 8006326:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800632a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1d9      	bne.n	80062e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3314      	adds	r3, #20
 8006338:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006342:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006344:	f023 0301 	bic.w	r3, r3, #1
 8006348:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3314      	adds	r3, #20
 8006352:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006356:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800635a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800635e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006362:	e841 2300 	strex	r3, r2, [r1]
 8006366:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1e1      	bne.n	8006332 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3314      	adds	r3, #20
 8006374:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006376:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800637e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3314      	adds	r3, #20
 800638e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006392:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006394:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006398:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e3      	bne.n	800636e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2220      	movs	r2, #32
 80063aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	330c      	adds	r3, #12
 80063ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063be:	e853 3f00 	ldrex	r3, [r3]
 80063c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063c6:	f023 0310 	bic.w	r3, r3, #16
 80063ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	330c      	adds	r3, #12
 80063d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80063d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80063da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063e0:	e841 2300 	strex	r3, r2, [r1]
 80063e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1e3      	bne.n	80063b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fc fb20 	bl	8002a36 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063fe:	b29b      	uxth	r3, r3
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	b29b      	uxth	r3, r3
 8006404:	4619      	mov	r1, r3
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f8c0 	bl	800658c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800640c:	e099      	b.n	8006542 <HAL_UART_IRQHandler+0x50e>
 800640e:	bf00      	nop
 8006410:	08006747 	.word	0x08006747
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800641c:	b29b      	uxth	r3, r3
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006428:	b29b      	uxth	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 808b 	beq.w	8006546 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 8086 	beq.w	8006546 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	330c      	adds	r3, #12
 8006440:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006444:	e853 3f00 	ldrex	r3, [r3]
 8006448:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800644a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006450:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	330c      	adds	r3, #12
 800645a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800645e:	647a      	str	r2, [r7, #68]	; 0x44
 8006460:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006464:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800646c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e3      	bne.n	800643a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3314      	adds	r3, #20
 8006478:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	623b      	str	r3, [r7, #32]
   return(result);
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	f023 0301 	bic.w	r3, r3, #1
 8006488:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3314      	adds	r3, #20
 8006492:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006496:	633a      	str	r2, [r7, #48]	; 0x30
 8006498:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800649c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1e3      	bne.n	8006472 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	330c      	adds	r3, #12
 80064be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	e853 3f00 	ldrex	r3, [r3]
 80064c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0310 	bic.w	r3, r3, #16
 80064ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	330c      	adds	r3, #12
 80064d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80064dc:	61fa      	str	r2, [r7, #28]
 80064de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	69b9      	ldr	r1, [r7, #24]
 80064e2:	69fa      	ldr	r2, [r7, #28]
 80064e4:	e841 2300 	strex	r3, r2, [r1]
 80064e8:	617b      	str	r3, [r7, #20]
   return(result);
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e3      	bne.n	80064b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064f4:	4619      	mov	r1, r3
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f848 	bl	800658c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064fc:	e023      	b.n	8006546 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006506:	2b00      	cmp	r3, #0
 8006508:	d009      	beq.n	800651e <HAL_UART_IRQHandler+0x4ea>
 800650a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800650e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f929 	bl	800676e <UART_Transmit_IT>
    return;
 800651c:	e014      	b.n	8006548 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800651e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00e      	beq.n	8006548 <HAL_UART_IRQHandler+0x514>
 800652a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800652e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006532:	2b00      	cmp	r3, #0
 8006534:	d008      	beq.n	8006548 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f969 	bl	800680e <UART_EndTransmit_IT>
    return;
 800653c:	e004      	b.n	8006548 <HAL_UART_IRQHandler+0x514>
    return;
 800653e:	bf00      	nop
 8006540:	e002      	b.n	8006548 <HAL_UART_IRQHandler+0x514>
      return;
 8006542:	bf00      	nop
 8006544:	e000      	b.n	8006548 <HAL_UART_IRQHandler+0x514>
      return;
 8006546:	bf00      	nop
  }
}
 8006548:	37e8      	adds	r7, #232	; 0xe8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop

08006550 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	460b      	mov	r3, r1
 8006596:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b090      	sub	sp, #64	; 0x40
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	603b      	str	r3, [r7, #0]
 80065b0:	4613      	mov	r3, r2
 80065b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065b4:	e050      	b.n	8006658 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065bc:	d04c      	beq.n	8006658 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d007      	beq.n	80065d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80065c4:	f7fb fda4 	bl	8002110 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d241      	bcs.n	8006658 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	330c      	adds	r3, #12
 80065da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	e853 3f00 	ldrex	r3, [r3]
 80065e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	330c      	adds	r3, #12
 80065f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065f4:	637a      	str	r2, [r7, #52]	; 0x34
 80065f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065fc:	e841 2300 	strex	r3, r2, [r1]
 8006600:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1e5      	bne.n	80065d4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3314      	adds	r3, #20
 800660e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	e853 3f00 	ldrex	r3, [r3]
 8006616:	613b      	str	r3, [r7, #16]
   return(result);
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f023 0301 	bic.w	r3, r3, #1
 800661e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3314      	adds	r3, #20
 8006626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006628:	623a      	str	r2, [r7, #32]
 800662a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662c:	69f9      	ldr	r1, [r7, #28]
 800662e:	6a3a      	ldr	r2, [r7, #32]
 8006630:	e841 2300 	strex	r3, r2, [r1]
 8006634:	61bb      	str	r3, [r7, #24]
   return(result);
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e5      	bne.n	8006608 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2220      	movs	r2, #32
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2220      	movs	r2, #32
 8006648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e00f      	b.n	8006678 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	4013      	ands	r3, r2
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	429a      	cmp	r2, r3
 8006666:	bf0c      	ite	eq
 8006668:	2301      	moveq	r3, #1
 800666a:	2300      	movne	r3, #0
 800666c:	b2db      	uxtb	r3, r3
 800666e:	461a      	mov	r2, r3
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	429a      	cmp	r2, r3
 8006674:	d09f      	beq.n	80065b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3740      	adds	r7, #64	; 0x40
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006680:	b480      	push	{r7}
 8006682:	b095      	sub	sp, #84	; 0x54
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	330c      	adds	r3, #12
 800668e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006692:	e853 3f00 	ldrex	r3, [r3]
 8006696:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800669e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	330c      	adds	r3, #12
 80066a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066a8:	643a      	str	r2, [r7, #64]	; 0x40
 80066aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066b0:	e841 2300 	strex	r3, r2, [r1]
 80066b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e5      	bne.n	8006688 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3314      	adds	r3, #20
 80066c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c4:	6a3b      	ldr	r3, [r7, #32]
 80066c6:	e853 3f00 	ldrex	r3, [r3]
 80066ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	f023 0301 	bic.w	r3, r3, #1
 80066d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3314      	adds	r3, #20
 80066da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066e4:	e841 2300 	strex	r3, r2, [r1]
 80066e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1e5      	bne.n	80066bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d119      	bne.n	800672c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	330c      	adds	r3, #12
 80066fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	e853 3f00 	ldrex	r3, [r3]
 8006706:	60bb      	str	r3, [r7, #8]
   return(result);
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f023 0310 	bic.w	r3, r3, #16
 800670e:	647b      	str	r3, [r7, #68]	; 0x44
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	330c      	adds	r3, #12
 8006716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006718:	61ba      	str	r2, [r7, #24]
 800671a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671c:	6979      	ldr	r1, [r7, #20]
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	e841 2300 	strex	r3, r2, [r1]
 8006724:	613b      	str	r3, [r7, #16]
   return(result);
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1e5      	bne.n	80066f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2220      	movs	r2, #32
 8006730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	631a      	str	r2, [r3, #48]	; 0x30
}
 800673a:	bf00      	nop
 800673c:	3754      	adds	r7, #84	; 0x54
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006752:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f7ff ff09 	bl	8006578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006766:	bf00      	nop
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800676e:	b480      	push	{r7}
 8006770:	b085      	sub	sp, #20
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b21      	cmp	r3, #33	; 0x21
 8006780:	d13e      	bne.n	8006800 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800678a:	d114      	bne.n	80067b6 <UART_Transmit_IT+0x48>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d110      	bne.n	80067b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	1c9a      	adds	r2, r3, #2
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	621a      	str	r2, [r3, #32]
 80067b4:	e008      	b.n	80067c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	1c59      	adds	r1, r3, #1
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	6211      	str	r1, [r2, #32]
 80067c0:	781a      	ldrb	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	3b01      	subs	r3, #1
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	4619      	mov	r1, r3
 80067d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10f      	bne.n	80067fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68da      	ldr	r2, [r3, #12]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68da      	ldr	r2, [r3, #12]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	e000      	b.n	8006802 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006800:	2302      	movs	r3, #2
  }
}
 8006802:	4618      	mov	r0, r3
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b082      	sub	sp, #8
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68da      	ldr	r2, [r3, #12]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006824:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7ff fe8e 	bl	8006550 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b08c      	sub	sp, #48	; 0x30
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b22      	cmp	r3, #34	; 0x22
 8006850:	f040 80ab 	bne.w	80069aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800685c:	d117      	bne.n	800688e <UART_Receive_IT+0x50>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d113      	bne.n	800688e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006866:	2300      	movs	r3, #0
 8006868:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	b29b      	uxth	r3, r3
 8006878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800687c:	b29a      	uxth	r2, r3
 800687e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006880:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006886:	1c9a      	adds	r2, r3, #2
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	629a      	str	r2, [r3, #40]	; 0x28
 800688c:	e026      	b.n	80068dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006892:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006894:	2300      	movs	r3, #0
 8006896:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068a0:	d007      	beq.n	80068b2 <UART_Receive_IT+0x74>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10a      	bne.n	80068c0 <UART_Receive_IT+0x82>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d106      	bne.n	80068c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068bc:	701a      	strb	r2, [r3, #0]
 80068be:	e008      	b.n	80068d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	4619      	mov	r1, r3
 80068ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d15a      	bne.n	80069a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0220 	bic.w	r2, r2, #32
 80068fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68da      	ldr	r2, [r3, #12]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800690e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695a      	ldr	r2, [r3, #20]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0201 	bic.w	r2, r2, #1
 800691e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2220      	movs	r2, #32
 8006924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692c:	2b01      	cmp	r3, #1
 800692e:	d135      	bne.n	800699c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	330c      	adds	r3, #12
 800693c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	613b      	str	r3, [r7, #16]
   return(result);
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f023 0310 	bic.w	r3, r3, #16
 800694c:	627b      	str	r3, [r7, #36]	; 0x24
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	330c      	adds	r3, #12
 8006954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006956:	623a      	str	r2, [r7, #32]
 8006958:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	69f9      	ldr	r1, [r7, #28]
 800695c:	6a3a      	ldr	r2, [r7, #32]
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	61bb      	str	r3, [r7, #24]
   return(result);
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e5      	bne.n	8006936 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0310 	and.w	r3, r3, #16
 8006974:	2b10      	cmp	r3, #16
 8006976:	d10a      	bne.n	800698e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006978:	2300      	movs	r3, #0
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006992:	4619      	mov	r1, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7ff fdf9 	bl	800658c <HAL_UARTEx_RxEventCallback>
 800699a:	e002      	b.n	80069a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff fde1 	bl	8006564 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069a2:	2300      	movs	r3, #0
 80069a4:	e002      	b.n	80069ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	e000      	b.n	80069ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80069aa:	2302      	movs	r3, #2
  }
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3730      	adds	r7, #48	; 0x30
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069b8:	b0c0      	sub	sp, #256	; 0x100
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80069cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d0:	68d9      	ldr	r1, [r3, #12]
 80069d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	ea40 0301 	orr.w	r3, r0, r1
 80069dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	431a      	orrs	r2, r3
 80069ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	431a      	orrs	r2, r3
 80069f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a0c:	f021 010c 	bic.w	r1, r1, #12
 8006a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a1a:	430b      	orrs	r3, r1
 8006a1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a2e:	6999      	ldr	r1, [r3, #24]
 8006a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	ea40 0301 	orr.w	r3, r0, r1
 8006a3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	4b8f      	ldr	r3, [pc, #572]	; (8006c80 <UART_SetConfig+0x2cc>)
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d005      	beq.n	8006a54 <UART_SetConfig+0xa0>
 8006a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	4b8d      	ldr	r3, [pc, #564]	; (8006c84 <UART_SetConfig+0x2d0>)
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d104      	bne.n	8006a5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a54:	f7fd fd00 	bl	8004458 <HAL_RCC_GetPCLK2Freq>
 8006a58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a5c:	e003      	b.n	8006a66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a5e:	f7fd fce7 	bl	8004430 <HAL_RCC_GetPCLK1Freq>
 8006a62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a70:	f040 810c 	bne.w	8006c8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006a86:	4622      	mov	r2, r4
 8006a88:	462b      	mov	r3, r5
 8006a8a:	1891      	adds	r1, r2, r2
 8006a8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a8e:	415b      	adcs	r3, r3
 8006a90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a96:	4621      	mov	r1, r4
 8006a98:	eb12 0801 	adds.w	r8, r2, r1
 8006a9c:	4629      	mov	r1, r5
 8006a9e:	eb43 0901 	adc.w	r9, r3, r1
 8006aa2:	f04f 0200 	mov.w	r2, #0
 8006aa6:	f04f 0300 	mov.w	r3, #0
 8006aaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006aae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ab2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ab6:	4690      	mov	r8, r2
 8006ab8:	4699      	mov	r9, r3
 8006aba:	4623      	mov	r3, r4
 8006abc:	eb18 0303 	adds.w	r3, r8, r3
 8006ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ac4:	462b      	mov	r3, r5
 8006ac6:	eb49 0303 	adc.w	r3, r9, r3
 8006aca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ada:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ade:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	18db      	adds	r3, r3, r3
 8006ae6:	653b      	str	r3, [r7, #80]	; 0x50
 8006ae8:	4613      	mov	r3, r2
 8006aea:	eb42 0303 	adc.w	r3, r2, r3
 8006aee:	657b      	str	r3, [r7, #84]	; 0x54
 8006af0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006af4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006af8:	f7f9 fbd2 	bl	80002a0 <__aeabi_uldivmod>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4b61      	ldr	r3, [pc, #388]	; (8006c88 <UART_SetConfig+0x2d4>)
 8006b02:	fba3 2302 	umull	r2, r3, r3, r2
 8006b06:	095b      	lsrs	r3, r3, #5
 8006b08:	011c      	lsls	r4, r3, #4
 8006b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006b1c:	4642      	mov	r2, r8
 8006b1e:	464b      	mov	r3, r9
 8006b20:	1891      	adds	r1, r2, r2
 8006b22:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b24:	415b      	adcs	r3, r3
 8006b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b2c:	4641      	mov	r1, r8
 8006b2e:	eb12 0a01 	adds.w	sl, r2, r1
 8006b32:	4649      	mov	r1, r9
 8006b34:	eb43 0b01 	adc.w	fp, r3, r1
 8006b38:	f04f 0200 	mov.w	r2, #0
 8006b3c:	f04f 0300 	mov.w	r3, #0
 8006b40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b4c:	4692      	mov	sl, r2
 8006b4e:	469b      	mov	fp, r3
 8006b50:	4643      	mov	r3, r8
 8006b52:	eb1a 0303 	adds.w	r3, sl, r3
 8006b56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b5a:	464b      	mov	r3, r9
 8006b5c:	eb4b 0303 	adc.w	r3, fp, r3
 8006b60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b78:	460b      	mov	r3, r1
 8006b7a:	18db      	adds	r3, r3, r3
 8006b7c:	643b      	str	r3, [r7, #64]	; 0x40
 8006b7e:	4613      	mov	r3, r2
 8006b80:	eb42 0303 	adc.w	r3, r2, r3
 8006b84:	647b      	str	r3, [r7, #68]	; 0x44
 8006b86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b8e:	f7f9 fb87 	bl	80002a0 <__aeabi_uldivmod>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4611      	mov	r1, r2
 8006b98:	4b3b      	ldr	r3, [pc, #236]	; (8006c88 <UART_SetConfig+0x2d4>)
 8006b9a:	fba3 2301 	umull	r2, r3, r3, r1
 8006b9e:	095b      	lsrs	r3, r3, #5
 8006ba0:	2264      	movs	r2, #100	; 0x64
 8006ba2:	fb02 f303 	mul.w	r3, r2, r3
 8006ba6:	1acb      	subs	r3, r1, r3
 8006ba8:	00db      	lsls	r3, r3, #3
 8006baa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006bae:	4b36      	ldr	r3, [pc, #216]	; (8006c88 <UART_SetConfig+0x2d4>)
 8006bb0:	fba3 2302 	umull	r2, r3, r3, r2
 8006bb4:	095b      	lsrs	r3, r3, #5
 8006bb6:	005b      	lsls	r3, r3, #1
 8006bb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bbc:	441c      	add	r4, r3
 8006bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006bcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006bd0:	4642      	mov	r2, r8
 8006bd2:	464b      	mov	r3, r9
 8006bd4:	1891      	adds	r1, r2, r2
 8006bd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006bd8:	415b      	adcs	r3, r3
 8006bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006be0:	4641      	mov	r1, r8
 8006be2:	1851      	adds	r1, r2, r1
 8006be4:	6339      	str	r1, [r7, #48]	; 0x30
 8006be6:	4649      	mov	r1, r9
 8006be8:	414b      	adcs	r3, r1
 8006bea:	637b      	str	r3, [r7, #52]	; 0x34
 8006bec:	f04f 0200 	mov.w	r2, #0
 8006bf0:	f04f 0300 	mov.w	r3, #0
 8006bf4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006bf8:	4659      	mov	r1, fp
 8006bfa:	00cb      	lsls	r3, r1, #3
 8006bfc:	4651      	mov	r1, sl
 8006bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c02:	4651      	mov	r1, sl
 8006c04:	00ca      	lsls	r2, r1, #3
 8006c06:	4610      	mov	r0, r2
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	4642      	mov	r2, r8
 8006c0e:	189b      	adds	r3, r3, r2
 8006c10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c14:	464b      	mov	r3, r9
 8006c16:	460a      	mov	r2, r1
 8006c18:	eb42 0303 	adc.w	r3, r2, r3
 8006c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c34:	460b      	mov	r3, r1
 8006c36:	18db      	adds	r3, r3, r3
 8006c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	eb42 0303 	adc.w	r3, r2, r3
 8006c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c4a:	f7f9 fb29 	bl	80002a0 <__aeabi_uldivmod>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4b0d      	ldr	r3, [pc, #52]	; (8006c88 <UART_SetConfig+0x2d4>)
 8006c54:	fba3 1302 	umull	r1, r3, r3, r2
 8006c58:	095b      	lsrs	r3, r3, #5
 8006c5a:	2164      	movs	r1, #100	; 0x64
 8006c5c:	fb01 f303 	mul.w	r3, r1, r3
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	3332      	adds	r3, #50	; 0x32
 8006c66:	4a08      	ldr	r2, [pc, #32]	; (8006c88 <UART_SetConfig+0x2d4>)
 8006c68:	fba2 2303 	umull	r2, r3, r2, r3
 8006c6c:	095b      	lsrs	r3, r3, #5
 8006c6e:	f003 0207 	and.w	r2, r3, #7
 8006c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4422      	add	r2, r4
 8006c7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c7c:	e105      	b.n	8006e8a <UART_SetConfig+0x4d6>
 8006c7e:	bf00      	nop
 8006c80:	40011000 	.word	0x40011000
 8006c84:	40011400 	.word	0x40011400
 8006c88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c90:	2200      	movs	r2, #0
 8006c92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006c9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006c9e:	4642      	mov	r2, r8
 8006ca0:	464b      	mov	r3, r9
 8006ca2:	1891      	adds	r1, r2, r2
 8006ca4:	6239      	str	r1, [r7, #32]
 8006ca6:	415b      	adcs	r3, r3
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8006caa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cae:	4641      	mov	r1, r8
 8006cb0:	1854      	adds	r4, r2, r1
 8006cb2:	4649      	mov	r1, r9
 8006cb4:	eb43 0501 	adc.w	r5, r3, r1
 8006cb8:	f04f 0200 	mov.w	r2, #0
 8006cbc:	f04f 0300 	mov.w	r3, #0
 8006cc0:	00eb      	lsls	r3, r5, #3
 8006cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cc6:	00e2      	lsls	r2, r4, #3
 8006cc8:	4614      	mov	r4, r2
 8006cca:	461d      	mov	r5, r3
 8006ccc:	4643      	mov	r3, r8
 8006cce:	18e3      	adds	r3, r4, r3
 8006cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cd4:	464b      	mov	r3, r9
 8006cd6:	eb45 0303 	adc.w	r3, r5, r3
 8006cda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006cea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006cee:	f04f 0200 	mov.w	r2, #0
 8006cf2:	f04f 0300 	mov.w	r3, #0
 8006cf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	008b      	lsls	r3, r1, #2
 8006cfe:	4621      	mov	r1, r4
 8006d00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d04:	4621      	mov	r1, r4
 8006d06:	008a      	lsls	r2, r1, #2
 8006d08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006d0c:	f7f9 fac8 	bl	80002a0 <__aeabi_uldivmod>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4b60      	ldr	r3, [pc, #384]	; (8006e98 <UART_SetConfig+0x4e4>)
 8006d16:	fba3 2302 	umull	r2, r3, r3, r2
 8006d1a:	095b      	lsrs	r3, r3, #5
 8006d1c:	011c      	lsls	r4, r3, #4
 8006d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d22:	2200      	movs	r2, #0
 8006d24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d30:	4642      	mov	r2, r8
 8006d32:	464b      	mov	r3, r9
 8006d34:	1891      	adds	r1, r2, r2
 8006d36:	61b9      	str	r1, [r7, #24]
 8006d38:	415b      	adcs	r3, r3
 8006d3a:	61fb      	str	r3, [r7, #28]
 8006d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d40:	4641      	mov	r1, r8
 8006d42:	1851      	adds	r1, r2, r1
 8006d44:	6139      	str	r1, [r7, #16]
 8006d46:	4649      	mov	r1, r9
 8006d48:	414b      	adcs	r3, r1
 8006d4a:	617b      	str	r3, [r7, #20]
 8006d4c:	f04f 0200 	mov.w	r2, #0
 8006d50:	f04f 0300 	mov.w	r3, #0
 8006d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d58:	4659      	mov	r1, fp
 8006d5a:	00cb      	lsls	r3, r1, #3
 8006d5c:	4651      	mov	r1, sl
 8006d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d62:	4651      	mov	r1, sl
 8006d64:	00ca      	lsls	r2, r1, #3
 8006d66:	4610      	mov	r0, r2
 8006d68:	4619      	mov	r1, r3
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4642      	mov	r2, r8
 8006d6e:	189b      	adds	r3, r3, r2
 8006d70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d74:	464b      	mov	r3, r9
 8006d76:	460a      	mov	r2, r1
 8006d78:	eb42 0303 	adc.w	r3, r2, r3
 8006d7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006d8c:	f04f 0200 	mov.w	r2, #0
 8006d90:	f04f 0300 	mov.w	r3, #0
 8006d94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006d98:	4649      	mov	r1, r9
 8006d9a:	008b      	lsls	r3, r1, #2
 8006d9c:	4641      	mov	r1, r8
 8006d9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006da2:	4641      	mov	r1, r8
 8006da4:	008a      	lsls	r2, r1, #2
 8006da6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006daa:	f7f9 fa79 	bl	80002a0 <__aeabi_uldivmod>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	4b39      	ldr	r3, [pc, #228]	; (8006e98 <UART_SetConfig+0x4e4>)
 8006db4:	fba3 1302 	umull	r1, r3, r3, r2
 8006db8:	095b      	lsrs	r3, r3, #5
 8006dba:	2164      	movs	r1, #100	; 0x64
 8006dbc:	fb01 f303 	mul.w	r3, r1, r3
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	011b      	lsls	r3, r3, #4
 8006dc4:	3332      	adds	r3, #50	; 0x32
 8006dc6:	4a34      	ldr	r2, [pc, #208]	; (8006e98 <UART_SetConfig+0x4e4>)
 8006dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dcc:	095b      	lsrs	r3, r3, #5
 8006dce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dd2:	441c      	add	r4, r3
 8006dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dd8:	2200      	movs	r2, #0
 8006dda:	673b      	str	r3, [r7, #112]	; 0x70
 8006ddc:	677a      	str	r2, [r7, #116]	; 0x74
 8006dde:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006de2:	4642      	mov	r2, r8
 8006de4:	464b      	mov	r3, r9
 8006de6:	1891      	adds	r1, r2, r2
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	415b      	adcs	r3, r3
 8006dec:	60fb      	str	r3, [r7, #12]
 8006dee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006df2:	4641      	mov	r1, r8
 8006df4:	1851      	adds	r1, r2, r1
 8006df6:	6039      	str	r1, [r7, #0]
 8006df8:	4649      	mov	r1, r9
 8006dfa:	414b      	adcs	r3, r1
 8006dfc:	607b      	str	r3, [r7, #4]
 8006dfe:	f04f 0200 	mov.w	r2, #0
 8006e02:	f04f 0300 	mov.w	r3, #0
 8006e06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e0a:	4659      	mov	r1, fp
 8006e0c:	00cb      	lsls	r3, r1, #3
 8006e0e:	4651      	mov	r1, sl
 8006e10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e14:	4651      	mov	r1, sl
 8006e16:	00ca      	lsls	r2, r1, #3
 8006e18:	4610      	mov	r0, r2
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	4642      	mov	r2, r8
 8006e20:	189b      	adds	r3, r3, r2
 8006e22:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e24:	464b      	mov	r3, r9
 8006e26:	460a      	mov	r2, r1
 8006e28:	eb42 0303 	adc.w	r3, r2, r3
 8006e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	663b      	str	r3, [r7, #96]	; 0x60
 8006e38:	667a      	str	r2, [r7, #100]	; 0x64
 8006e3a:	f04f 0200 	mov.w	r2, #0
 8006e3e:	f04f 0300 	mov.w	r3, #0
 8006e42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e46:	4649      	mov	r1, r9
 8006e48:	008b      	lsls	r3, r1, #2
 8006e4a:	4641      	mov	r1, r8
 8006e4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e50:	4641      	mov	r1, r8
 8006e52:	008a      	lsls	r2, r1, #2
 8006e54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e58:	f7f9 fa22 	bl	80002a0 <__aeabi_uldivmod>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4b0d      	ldr	r3, [pc, #52]	; (8006e98 <UART_SetConfig+0x4e4>)
 8006e62:	fba3 1302 	umull	r1, r3, r3, r2
 8006e66:	095b      	lsrs	r3, r3, #5
 8006e68:	2164      	movs	r1, #100	; 0x64
 8006e6a:	fb01 f303 	mul.w	r3, r1, r3
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	011b      	lsls	r3, r3, #4
 8006e72:	3332      	adds	r3, #50	; 0x32
 8006e74:	4a08      	ldr	r2, [pc, #32]	; (8006e98 <UART_SetConfig+0x4e4>)
 8006e76:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7a:	095b      	lsrs	r3, r3, #5
 8006e7c:	f003 020f 	and.w	r2, r3, #15
 8006e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4422      	add	r2, r4
 8006e88:	609a      	str	r2, [r3, #8]
}
 8006e8a:	bf00      	nop
 8006e8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006e90:	46bd      	mov	sp, r7
 8006e92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e96:	bf00      	nop
 8006e98:	51eb851f 	.word	0x51eb851f

08006e9c <__errno>:
 8006e9c:	4b01      	ldr	r3, [pc, #4]	; (8006ea4 <__errno+0x8>)
 8006e9e:	6818      	ldr	r0, [r3, #0]
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	20000020 	.word	0x20000020

08006ea8 <__libc_init_array>:
 8006ea8:	b570      	push	{r4, r5, r6, lr}
 8006eaa:	4d0d      	ldr	r5, [pc, #52]	; (8006ee0 <__libc_init_array+0x38>)
 8006eac:	4c0d      	ldr	r4, [pc, #52]	; (8006ee4 <__libc_init_array+0x3c>)
 8006eae:	1b64      	subs	r4, r4, r5
 8006eb0:	10a4      	asrs	r4, r4, #2
 8006eb2:	2600      	movs	r6, #0
 8006eb4:	42a6      	cmp	r6, r4
 8006eb6:	d109      	bne.n	8006ecc <__libc_init_array+0x24>
 8006eb8:	4d0b      	ldr	r5, [pc, #44]	; (8006ee8 <__libc_init_array+0x40>)
 8006eba:	4c0c      	ldr	r4, [pc, #48]	; (8006eec <__libc_init_array+0x44>)
 8006ebc:	f001 fa34 	bl	8008328 <_init>
 8006ec0:	1b64      	subs	r4, r4, r5
 8006ec2:	10a4      	asrs	r4, r4, #2
 8006ec4:	2600      	movs	r6, #0
 8006ec6:	42a6      	cmp	r6, r4
 8006ec8:	d105      	bne.n	8006ed6 <__libc_init_array+0x2e>
 8006eca:	bd70      	pop	{r4, r5, r6, pc}
 8006ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed0:	4798      	blx	r3
 8006ed2:	3601      	adds	r6, #1
 8006ed4:	e7ee      	b.n	8006eb4 <__libc_init_array+0xc>
 8006ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eda:	4798      	blx	r3
 8006edc:	3601      	adds	r6, #1
 8006ede:	e7f2      	b.n	8006ec6 <__libc_init_array+0x1e>
 8006ee0:	08008510 	.word	0x08008510
 8006ee4:	08008510 	.word	0x08008510
 8006ee8:	08008510 	.word	0x08008510
 8006eec:	08008514 	.word	0x08008514

08006ef0 <memset>:
 8006ef0:	4402      	add	r2, r0
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d100      	bne.n	8006efa <memset+0xa>
 8006ef8:	4770      	bx	lr
 8006efa:	f803 1b01 	strb.w	r1, [r3], #1
 8006efe:	e7f9      	b.n	8006ef4 <memset+0x4>

08006f00 <iprintf>:
 8006f00:	b40f      	push	{r0, r1, r2, r3}
 8006f02:	4b0a      	ldr	r3, [pc, #40]	; (8006f2c <iprintf+0x2c>)
 8006f04:	b513      	push	{r0, r1, r4, lr}
 8006f06:	681c      	ldr	r4, [r3, #0]
 8006f08:	b124      	cbz	r4, 8006f14 <iprintf+0x14>
 8006f0a:	69a3      	ldr	r3, [r4, #24]
 8006f0c:	b913      	cbnz	r3, 8006f14 <iprintf+0x14>
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 fab2 	bl	8007478 <__sinit>
 8006f14:	ab05      	add	r3, sp, #20
 8006f16:	9a04      	ldr	r2, [sp, #16]
 8006f18:	68a1      	ldr	r1, [r4, #8]
 8006f1a:	9301      	str	r3, [sp, #4]
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f000 fe17 	bl	8007b50 <_vfiprintf_r>
 8006f22:	b002      	add	sp, #8
 8006f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f28:	b004      	add	sp, #16
 8006f2a:	4770      	bx	lr
 8006f2c:	20000020 	.word	0x20000020

08006f30 <_puts_r>:
 8006f30:	b570      	push	{r4, r5, r6, lr}
 8006f32:	460e      	mov	r6, r1
 8006f34:	4605      	mov	r5, r0
 8006f36:	b118      	cbz	r0, 8006f40 <_puts_r+0x10>
 8006f38:	6983      	ldr	r3, [r0, #24]
 8006f3a:	b90b      	cbnz	r3, 8006f40 <_puts_r+0x10>
 8006f3c:	f000 fa9c 	bl	8007478 <__sinit>
 8006f40:	69ab      	ldr	r3, [r5, #24]
 8006f42:	68ac      	ldr	r4, [r5, #8]
 8006f44:	b913      	cbnz	r3, 8006f4c <_puts_r+0x1c>
 8006f46:	4628      	mov	r0, r5
 8006f48:	f000 fa96 	bl	8007478 <__sinit>
 8006f4c:	4b2c      	ldr	r3, [pc, #176]	; (8007000 <_puts_r+0xd0>)
 8006f4e:	429c      	cmp	r4, r3
 8006f50:	d120      	bne.n	8006f94 <_puts_r+0x64>
 8006f52:	686c      	ldr	r4, [r5, #4]
 8006f54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f56:	07db      	lsls	r3, r3, #31
 8006f58:	d405      	bmi.n	8006f66 <_puts_r+0x36>
 8006f5a:	89a3      	ldrh	r3, [r4, #12]
 8006f5c:	0598      	lsls	r0, r3, #22
 8006f5e:	d402      	bmi.n	8006f66 <_puts_r+0x36>
 8006f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f62:	f000 fb27 	bl	80075b4 <__retarget_lock_acquire_recursive>
 8006f66:	89a3      	ldrh	r3, [r4, #12]
 8006f68:	0719      	lsls	r1, r3, #28
 8006f6a:	d51d      	bpl.n	8006fa8 <_puts_r+0x78>
 8006f6c:	6923      	ldr	r3, [r4, #16]
 8006f6e:	b1db      	cbz	r3, 8006fa8 <_puts_r+0x78>
 8006f70:	3e01      	subs	r6, #1
 8006f72:	68a3      	ldr	r3, [r4, #8]
 8006f74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	60a3      	str	r3, [r4, #8]
 8006f7c:	bb39      	cbnz	r1, 8006fce <_puts_r+0x9e>
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	da38      	bge.n	8006ff4 <_puts_r+0xc4>
 8006f82:	4622      	mov	r2, r4
 8006f84:	210a      	movs	r1, #10
 8006f86:	4628      	mov	r0, r5
 8006f88:	f000 f89c 	bl	80070c4 <__swbuf_r>
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	d011      	beq.n	8006fb4 <_puts_r+0x84>
 8006f90:	250a      	movs	r5, #10
 8006f92:	e011      	b.n	8006fb8 <_puts_r+0x88>
 8006f94:	4b1b      	ldr	r3, [pc, #108]	; (8007004 <_puts_r+0xd4>)
 8006f96:	429c      	cmp	r4, r3
 8006f98:	d101      	bne.n	8006f9e <_puts_r+0x6e>
 8006f9a:	68ac      	ldr	r4, [r5, #8]
 8006f9c:	e7da      	b.n	8006f54 <_puts_r+0x24>
 8006f9e:	4b1a      	ldr	r3, [pc, #104]	; (8007008 <_puts_r+0xd8>)
 8006fa0:	429c      	cmp	r4, r3
 8006fa2:	bf08      	it	eq
 8006fa4:	68ec      	ldreq	r4, [r5, #12]
 8006fa6:	e7d5      	b.n	8006f54 <_puts_r+0x24>
 8006fa8:	4621      	mov	r1, r4
 8006faa:	4628      	mov	r0, r5
 8006fac:	f000 f8dc 	bl	8007168 <__swsetup_r>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d0dd      	beq.n	8006f70 <_puts_r+0x40>
 8006fb4:	f04f 35ff 	mov.w	r5, #4294967295
 8006fb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fba:	07da      	lsls	r2, r3, #31
 8006fbc:	d405      	bmi.n	8006fca <_puts_r+0x9a>
 8006fbe:	89a3      	ldrh	r3, [r4, #12]
 8006fc0:	059b      	lsls	r3, r3, #22
 8006fc2:	d402      	bmi.n	8006fca <_puts_r+0x9a>
 8006fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fc6:	f000 faf6 	bl	80075b6 <__retarget_lock_release_recursive>
 8006fca:	4628      	mov	r0, r5
 8006fcc:	bd70      	pop	{r4, r5, r6, pc}
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	da04      	bge.n	8006fdc <_puts_r+0xac>
 8006fd2:	69a2      	ldr	r2, [r4, #24]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	dc06      	bgt.n	8006fe6 <_puts_r+0xb6>
 8006fd8:	290a      	cmp	r1, #10
 8006fda:	d004      	beq.n	8006fe6 <_puts_r+0xb6>
 8006fdc:	6823      	ldr	r3, [r4, #0]
 8006fde:	1c5a      	adds	r2, r3, #1
 8006fe0:	6022      	str	r2, [r4, #0]
 8006fe2:	7019      	strb	r1, [r3, #0]
 8006fe4:	e7c5      	b.n	8006f72 <_puts_r+0x42>
 8006fe6:	4622      	mov	r2, r4
 8006fe8:	4628      	mov	r0, r5
 8006fea:	f000 f86b 	bl	80070c4 <__swbuf_r>
 8006fee:	3001      	adds	r0, #1
 8006ff0:	d1bf      	bne.n	8006f72 <_puts_r+0x42>
 8006ff2:	e7df      	b.n	8006fb4 <_puts_r+0x84>
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	250a      	movs	r5, #10
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	6022      	str	r2, [r4, #0]
 8006ffc:	701d      	strb	r5, [r3, #0]
 8006ffe:	e7db      	b.n	8006fb8 <_puts_r+0x88>
 8007000:	08008494 	.word	0x08008494
 8007004:	080084b4 	.word	0x080084b4
 8007008:	08008474 	.word	0x08008474

0800700c <puts>:
 800700c:	4b02      	ldr	r3, [pc, #8]	; (8007018 <puts+0xc>)
 800700e:	4601      	mov	r1, r0
 8007010:	6818      	ldr	r0, [r3, #0]
 8007012:	f7ff bf8d 	b.w	8006f30 <_puts_r>
 8007016:	bf00      	nop
 8007018:	20000020 	.word	0x20000020

0800701c <sniprintf>:
 800701c:	b40c      	push	{r2, r3}
 800701e:	b530      	push	{r4, r5, lr}
 8007020:	4b17      	ldr	r3, [pc, #92]	; (8007080 <sniprintf+0x64>)
 8007022:	1e0c      	subs	r4, r1, #0
 8007024:	681d      	ldr	r5, [r3, #0]
 8007026:	b09d      	sub	sp, #116	; 0x74
 8007028:	da08      	bge.n	800703c <sniprintf+0x20>
 800702a:	238b      	movs	r3, #139	; 0x8b
 800702c:	602b      	str	r3, [r5, #0]
 800702e:	f04f 30ff 	mov.w	r0, #4294967295
 8007032:	b01d      	add	sp, #116	; 0x74
 8007034:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007038:	b002      	add	sp, #8
 800703a:	4770      	bx	lr
 800703c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007040:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007044:	bf14      	ite	ne
 8007046:	f104 33ff 	addne.w	r3, r4, #4294967295
 800704a:	4623      	moveq	r3, r4
 800704c:	9304      	str	r3, [sp, #16]
 800704e:	9307      	str	r3, [sp, #28]
 8007050:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007054:	9002      	str	r0, [sp, #8]
 8007056:	9006      	str	r0, [sp, #24]
 8007058:	f8ad 3016 	strh.w	r3, [sp, #22]
 800705c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800705e:	ab21      	add	r3, sp, #132	; 0x84
 8007060:	a902      	add	r1, sp, #8
 8007062:	4628      	mov	r0, r5
 8007064:	9301      	str	r3, [sp, #4]
 8007066:	f000 fc49 	bl	80078fc <_svfiprintf_r>
 800706a:	1c43      	adds	r3, r0, #1
 800706c:	bfbc      	itt	lt
 800706e:	238b      	movlt	r3, #139	; 0x8b
 8007070:	602b      	strlt	r3, [r5, #0]
 8007072:	2c00      	cmp	r4, #0
 8007074:	d0dd      	beq.n	8007032 <sniprintf+0x16>
 8007076:	9b02      	ldr	r3, [sp, #8]
 8007078:	2200      	movs	r2, #0
 800707a:	701a      	strb	r2, [r3, #0]
 800707c:	e7d9      	b.n	8007032 <sniprintf+0x16>
 800707e:	bf00      	nop
 8007080:	20000020 	.word	0x20000020

08007084 <siprintf>:
 8007084:	b40e      	push	{r1, r2, r3}
 8007086:	b500      	push	{lr}
 8007088:	b09c      	sub	sp, #112	; 0x70
 800708a:	ab1d      	add	r3, sp, #116	; 0x74
 800708c:	9002      	str	r0, [sp, #8]
 800708e:	9006      	str	r0, [sp, #24]
 8007090:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007094:	4809      	ldr	r0, [pc, #36]	; (80070bc <siprintf+0x38>)
 8007096:	9107      	str	r1, [sp, #28]
 8007098:	9104      	str	r1, [sp, #16]
 800709a:	4909      	ldr	r1, [pc, #36]	; (80070c0 <siprintf+0x3c>)
 800709c:	f853 2b04 	ldr.w	r2, [r3], #4
 80070a0:	9105      	str	r1, [sp, #20]
 80070a2:	6800      	ldr	r0, [r0, #0]
 80070a4:	9301      	str	r3, [sp, #4]
 80070a6:	a902      	add	r1, sp, #8
 80070a8:	f000 fc28 	bl	80078fc <_svfiprintf_r>
 80070ac:	9b02      	ldr	r3, [sp, #8]
 80070ae:	2200      	movs	r2, #0
 80070b0:	701a      	strb	r2, [r3, #0]
 80070b2:	b01c      	add	sp, #112	; 0x70
 80070b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80070b8:	b003      	add	sp, #12
 80070ba:	4770      	bx	lr
 80070bc:	20000020 	.word	0x20000020
 80070c0:	ffff0208 	.word	0xffff0208

080070c4 <__swbuf_r>:
 80070c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c6:	460e      	mov	r6, r1
 80070c8:	4614      	mov	r4, r2
 80070ca:	4605      	mov	r5, r0
 80070cc:	b118      	cbz	r0, 80070d6 <__swbuf_r+0x12>
 80070ce:	6983      	ldr	r3, [r0, #24]
 80070d0:	b90b      	cbnz	r3, 80070d6 <__swbuf_r+0x12>
 80070d2:	f000 f9d1 	bl	8007478 <__sinit>
 80070d6:	4b21      	ldr	r3, [pc, #132]	; (800715c <__swbuf_r+0x98>)
 80070d8:	429c      	cmp	r4, r3
 80070da:	d12b      	bne.n	8007134 <__swbuf_r+0x70>
 80070dc:	686c      	ldr	r4, [r5, #4]
 80070de:	69a3      	ldr	r3, [r4, #24]
 80070e0:	60a3      	str	r3, [r4, #8]
 80070e2:	89a3      	ldrh	r3, [r4, #12]
 80070e4:	071a      	lsls	r2, r3, #28
 80070e6:	d52f      	bpl.n	8007148 <__swbuf_r+0x84>
 80070e8:	6923      	ldr	r3, [r4, #16]
 80070ea:	b36b      	cbz	r3, 8007148 <__swbuf_r+0x84>
 80070ec:	6923      	ldr	r3, [r4, #16]
 80070ee:	6820      	ldr	r0, [r4, #0]
 80070f0:	1ac0      	subs	r0, r0, r3
 80070f2:	6963      	ldr	r3, [r4, #20]
 80070f4:	b2f6      	uxtb	r6, r6
 80070f6:	4283      	cmp	r3, r0
 80070f8:	4637      	mov	r7, r6
 80070fa:	dc04      	bgt.n	8007106 <__swbuf_r+0x42>
 80070fc:	4621      	mov	r1, r4
 80070fe:	4628      	mov	r0, r5
 8007100:	f000 f926 	bl	8007350 <_fflush_r>
 8007104:	bb30      	cbnz	r0, 8007154 <__swbuf_r+0x90>
 8007106:	68a3      	ldr	r3, [r4, #8]
 8007108:	3b01      	subs	r3, #1
 800710a:	60a3      	str	r3, [r4, #8]
 800710c:	6823      	ldr	r3, [r4, #0]
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	6022      	str	r2, [r4, #0]
 8007112:	701e      	strb	r6, [r3, #0]
 8007114:	6963      	ldr	r3, [r4, #20]
 8007116:	3001      	adds	r0, #1
 8007118:	4283      	cmp	r3, r0
 800711a:	d004      	beq.n	8007126 <__swbuf_r+0x62>
 800711c:	89a3      	ldrh	r3, [r4, #12]
 800711e:	07db      	lsls	r3, r3, #31
 8007120:	d506      	bpl.n	8007130 <__swbuf_r+0x6c>
 8007122:	2e0a      	cmp	r6, #10
 8007124:	d104      	bne.n	8007130 <__swbuf_r+0x6c>
 8007126:	4621      	mov	r1, r4
 8007128:	4628      	mov	r0, r5
 800712a:	f000 f911 	bl	8007350 <_fflush_r>
 800712e:	b988      	cbnz	r0, 8007154 <__swbuf_r+0x90>
 8007130:	4638      	mov	r0, r7
 8007132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007134:	4b0a      	ldr	r3, [pc, #40]	; (8007160 <__swbuf_r+0x9c>)
 8007136:	429c      	cmp	r4, r3
 8007138:	d101      	bne.n	800713e <__swbuf_r+0x7a>
 800713a:	68ac      	ldr	r4, [r5, #8]
 800713c:	e7cf      	b.n	80070de <__swbuf_r+0x1a>
 800713e:	4b09      	ldr	r3, [pc, #36]	; (8007164 <__swbuf_r+0xa0>)
 8007140:	429c      	cmp	r4, r3
 8007142:	bf08      	it	eq
 8007144:	68ec      	ldreq	r4, [r5, #12]
 8007146:	e7ca      	b.n	80070de <__swbuf_r+0x1a>
 8007148:	4621      	mov	r1, r4
 800714a:	4628      	mov	r0, r5
 800714c:	f000 f80c 	bl	8007168 <__swsetup_r>
 8007150:	2800      	cmp	r0, #0
 8007152:	d0cb      	beq.n	80070ec <__swbuf_r+0x28>
 8007154:	f04f 37ff 	mov.w	r7, #4294967295
 8007158:	e7ea      	b.n	8007130 <__swbuf_r+0x6c>
 800715a:	bf00      	nop
 800715c:	08008494 	.word	0x08008494
 8007160:	080084b4 	.word	0x080084b4
 8007164:	08008474 	.word	0x08008474

08007168 <__swsetup_r>:
 8007168:	4b32      	ldr	r3, [pc, #200]	; (8007234 <__swsetup_r+0xcc>)
 800716a:	b570      	push	{r4, r5, r6, lr}
 800716c:	681d      	ldr	r5, [r3, #0]
 800716e:	4606      	mov	r6, r0
 8007170:	460c      	mov	r4, r1
 8007172:	b125      	cbz	r5, 800717e <__swsetup_r+0x16>
 8007174:	69ab      	ldr	r3, [r5, #24]
 8007176:	b913      	cbnz	r3, 800717e <__swsetup_r+0x16>
 8007178:	4628      	mov	r0, r5
 800717a:	f000 f97d 	bl	8007478 <__sinit>
 800717e:	4b2e      	ldr	r3, [pc, #184]	; (8007238 <__swsetup_r+0xd0>)
 8007180:	429c      	cmp	r4, r3
 8007182:	d10f      	bne.n	80071a4 <__swsetup_r+0x3c>
 8007184:	686c      	ldr	r4, [r5, #4]
 8007186:	89a3      	ldrh	r3, [r4, #12]
 8007188:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800718c:	0719      	lsls	r1, r3, #28
 800718e:	d42c      	bmi.n	80071ea <__swsetup_r+0x82>
 8007190:	06dd      	lsls	r5, r3, #27
 8007192:	d411      	bmi.n	80071b8 <__swsetup_r+0x50>
 8007194:	2309      	movs	r3, #9
 8007196:	6033      	str	r3, [r6, #0]
 8007198:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800719c:	81a3      	strh	r3, [r4, #12]
 800719e:	f04f 30ff 	mov.w	r0, #4294967295
 80071a2:	e03e      	b.n	8007222 <__swsetup_r+0xba>
 80071a4:	4b25      	ldr	r3, [pc, #148]	; (800723c <__swsetup_r+0xd4>)
 80071a6:	429c      	cmp	r4, r3
 80071a8:	d101      	bne.n	80071ae <__swsetup_r+0x46>
 80071aa:	68ac      	ldr	r4, [r5, #8]
 80071ac:	e7eb      	b.n	8007186 <__swsetup_r+0x1e>
 80071ae:	4b24      	ldr	r3, [pc, #144]	; (8007240 <__swsetup_r+0xd8>)
 80071b0:	429c      	cmp	r4, r3
 80071b2:	bf08      	it	eq
 80071b4:	68ec      	ldreq	r4, [r5, #12]
 80071b6:	e7e6      	b.n	8007186 <__swsetup_r+0x1e>
 80071b8:	0758      	lsls	r0, r3, #29
 80071ba:	d512      	bpl.n	80071e2 <__swsetup_r+0x7a>
 80071bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071be:	b141      	cbz	r1, 80071d2 <__swsetup_r+0x6a>
 80071c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071c4:	4299      	cmp	r1, r3
 80071c6:	d002      	beq.n	80071ce <__swsetup_r+0x66>
 80071c8:	4630      	mov	r0, r6
 80071ca:	f000 fa5b 	bl	8007684 <_free_r>
 80071ce:	2300      	movs	r3, #0
 80071d0:	6363      	str	r3, [r4, #52]	; 0x34
 80071d2:	89a3      	ldrh	r3, [r4, #12]
 80071d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071d8:	81a3      	strh	r3, [r4, #12]
 80071da:	2300      	movs	r3, #0
 80071dc:	6063      	str	r3, [r4, #4]
 80071de:	6923      	ldr	r3, [r4, #16]
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	89a3      	ldrh	r3, [r4, #12]
 80071e4:	f043 0308 	orr.w	r3, r3, #8
 80071e8:	81a3      	strh	r3, [r4, #12]
 80071ea:	6923      	ldr	r3, [r4, #16]
 80071ec:	b94b      	cbnz	r3, 8007202 <__swsetup_r+0x9a>
 80071ee:	89a3      	ldrh	r3, [r4, #12]
 80071f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80071f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071f8:	d003      	beq.n	8007202 <__swsetup_r+0x9a>
 80071fa:	4621      	mov	r1, r4
 80071fc:	4630      	mov	r0, r6
 80071fe:	f000 fa01 	bl	8007604 <__smakebuf_r>
 8007202:	89a0      	ldrh	r0, [r4, #12]
 8007204:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007208:	f010 0301 	ands.w	r3, r0, #1
 800720c:	d00a      	beq.n	8007224 <__swsetup_r+0xbc>
 800720e:	2300      	movs	r3, #0
 8007210:	60a3      	str	r3, [r4, #8]
 8007212:	6963      	ldr	r3, [r4, #20]
 8007214:	425b      	negs	r3, r3
 8007216:	61a3      	str	r3, [r4, #24]
 8007218:	6923      	ldr	r3, [r4, #16]
 800721a:	b943      	cbnz	r3, 800722e <__swsetup_r+0xc6>
 800721c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007220:	d1ba      	bne.n	8007198 <__swsetup_r+0x30>
 8007222:	bd70      	pop	{r4, r5, r6, pc}
 8007224:	0781      	lsls	r1, r0, #30
 8007226:	bf58      	it	pl
 8007228:	6963      	ldrpl	r3, [r4, #20]
 800722a:	60a3      	str	r3, [r4, #8]
 800722c:	e7f4      	b.n	8007218 <__swsetup_r+0xb0>
 800722e:	2000      	movs	r0, #0
 8007230:	e7f7      	b.n	8007222 <__swsetup_r+0xba>
 8007232:	bf00      	nop
 8007234:	20000020 	.word	0x20000020
 8007238:	08008494 	.word	0x08008494
 800723c:	080084b4 	.word	0x080084b4
 8007240:	08008474 	.word	0x08008474

08007244 <__sflush_r>:
 8007244:	898a      	ldrh	r2, [r1, #12]
 8007246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800724a:	4605      	mov	r5, r0
 800724c:	0710      	lsls	r0, r2, #28
 800724e:	460c      	mov	r4, r1
 8007250:	d458      	bmi.n	8007304 <__sflush_r+0xc0>
 8007252:	684b      	ldr	r3, [r1, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	dc05      	bgt.n	8007264 <__sflush_r+0x20>
 8007258:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800725a:	2b00      	cmp	r3, #0
 800725c:	dc02      	bgt.n	8007264 <__sflush_r+0x20>
 800725e:	2000      	movs	r0, #0
 8007260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007266:	2e00      	cmp	r6, #0
 8007268:	d0f9      	beq.n	800725e <__sflush_r+0x1a>
 800726a:	2300      	movs	r3, #0
 800726c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007270:	682f      	ldr	r7, [r5, #0]
 8007272:	602b      	str	r3, [r5, #0]
 8007274:	d032      	beq.n	80072dc <__sflush_r+0x98>
 8007276:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007278:	89a3      	ldrh	r3, [r4, #12]
 800727a:	075a      	lsls	r2, r3, #29
 800727c:	d505      	bpl.n	800728a <__sflush_r+0x46>
 800727e:	6863      	ldr	r3, [r4, #4]
 8007280:	1ac0      	subs	r0, r0, r3
 8007282:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007284:	b10b      	cbz	r3, 800728a <__sflush_r+0x46>
 8007286:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007288:	1ac0      	subs	r0, r0, r3
 800728a:	2300      	movs	r3, #0
 800728c:	4602      	mov	r2, r0
 800728e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007290:	6a21      	ldr	r1, [r4, #32]
 8007292:	4628      	mov	r0, r5
 8007294:	47b0      	blx	r6
 8007296:	1c43      	adds	r3, r0, #1
 8007298:	89a3      	ldrh	r3, [r4, #12]
 800729a:	d106      	bne.n	80072aa <__sflush_r+0x66>
 800729c:	6829      	ldr	r1, [r5, #0]
 800729e:	291d      	cmp	r1, #29
 80072a0:	d82c      	bhi.n	80072fc <__sflush_r+0xb8>
 80072a2:	4a2a      	ldr	r2, [pc, #168]	; (800734c <__sflush_r+0x108>)
 80072a4:	40ca      	lsrs	r2, r1
 80072a6:	07d6      	lsls	r6, r2, #31
 80072a8:	d528      	bpl.n	80072fc <__sflush_r+0xb8>
 80072aa:	2200      	movs	r2, #0
 80072ac:	6062      	str	r2, [r4, #4]
 80072ae:	04d9      	lsls	r1, r3, #19
 80072b0:	6922      	ldr	r2, [r4, #16]
 80072b2:	6022      	str	r2, [r4, #0]
 80072b4:	d504      	bpl.n	80072c0 <__sflush_r+0x7c>
 80072b6:	1c42      	adds	r2, r0, #1
 80072b8:	d101      	bne.n	80072be <__sflush_r+0x7a>
 80072ba:	682b      	ldr	r3, [r5, #0]
 80072bc:	b903      	cbnz	r3, 80072c0 <__sflush_r+0x7c>
 80072be:	6560      	str	r0, [r4, #84]	; 0x54
 80072c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072c2:	602f      	str	r7, [r5, #0]
 80072c4:	2900      	cmp	r1, #0
 80072c6:	d0ca      	beq.n	800725e <__sflush_r+0x1a>
 80072c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072cc:	4299      	cmp	r1, r3
 80072ce:	d002      	beq.n	80072d6 <__sflush_r+0x92>
 80072d0:	4628      	mov	r0, r5
 80072d2:	f000 f9d7 	bl	8007684 <_free_r>
 80072d6:	2000      	movs	r0, #0
 80072d8:	6360      	str	r0, [r4, #52]	; 0x34
 80072da:	e7c1      	b.n	8007260 <__sflush_r+0x1c>
 80072dc:	6a21      	ldr	r1, [r4, #32]
 80072de:	2301      	movs	r3, #1
 80072e0:	4628      	mov	r0, r5
 80072e2:	47b0      	blx	r6
 80072e4:	1c41      	adds	r1, r0, #1
 80072e6:	d1c7      	bne.n	8007278 <__sflush_r+0x34>
 80072e8:	682b      	ldr	r3, [r5, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0c4      	beq.n	8007278 <__sflush_r+0x34>
 80072ee:	2b1d      	cmp	r3, #29
 80072f0:	d001      	beq.n	80072f6 <__sflush_r+0xb2>
 80072f2:	2b16      	cmp	r3, #22
 80072f4:	d101      	bne.n	80072fa <__sflush_r+0xb6>
 80072f6:	602f      	str	r7, [r5, #0]
 80072f8:	e7b1      	b.n	800725e <__sflush_r+0x1a>
 80072fa:	89a3      	ldrh	r3, [r4, #12]
 80072fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007300:	81a3      	strh	r3, [r4, #12]
 8007302:	e7ad      	b.n	8007260 <__sflush_r+0x1c>
 8007304:	690f      	ldr	r7, [r1, #16]
 8007306:	2f00      	cmp	r7, #0
 8007308:	d0a9      	beq.n	800725e <__sflush_r+0x1a>
 800730a:	0793      	lsls	r3, r2, #30
 800730c:	680e      	ldr	r6, [r1, #0]
 800730e:	bf08      	it	eq
 8007310:	694b      	ldreq	r3, [r1, #20]
 8007312:	600f      	str	r7, [r1, #0]
 8007314:	bf18      	it	ne
 8007316:	2300      	movne	r3, #0
 8007318:	eba6 0807 	sub.w	r8, r6, r7
 800731c:	608b      	str	r3, [r1, #8]
 800731e:	f1b8 0f00 	cmp.w	r8, #0
 8007322:	dd9c      	ble.n	800725e <__sflush_r+0x1a>
 8007324:	6a21      	ldr	r1, [r4, #32]
 8007326:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007328:	4643      	mov	r3, r8
 800732a:	463a      	mov	r2, r7
 800732c:	4628      	mov	r0, r5
 800732e:	47b0      	blx	r6
 8007330:	2800      	cmp	r0, #0
 8007332:	dc06      	bgt.n	8007342 <__sflush_r+0xfe>
 8007334:	89a3      	ldrh	r3, [r4, #12]
 8007336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800733a:	81a3      	strh	r3, [r4, #12]
 800733c:	f04f 30ff 	mov.w	r0, #4294967295
 8007340:	e78e      	b.n	8007260 <__sflush_r+0x1c>
 8007342:	4407      	add	r7, r0
 8007344:	eba8 0800 	sub.w	r8, r8, r0
 8007348:	e7e9      	b.n	800731e <__sflush_r+0xda>
 800734a:	bf00      	nop
 800734c:	20400001 	.word	0x20400001

08007350 <_fflush_r>:
 8007350:	b538      	push	{r3, r4, r5, lr}
 8007352:	690b      	ldr	r3, [r1, #16]
 8007354:	4605      	mov	r5, r0
 8007356:	460c      	mov	r4, r1
 8007358:	b913      	cbnz	r3, 8007360 <_fflush_r+0x10>
 800735a:	2500      	movs	r5, #0
 800735c:	4628      	mov	r0, r5
 800735e:	bd38      	pop	{r3, r4, r5, pc}
 8007360:	b118      	cbz	r0, 800736a <_fflush_r+0x1a>
 8007362:	6983      	ldr	r3, [r0, #24]
 8007364:	b90b      	cbnz	r3, 800736a <_fflush_r+0x1a>
 8007366:	f000 f887 	bl	8007478 <__sinit>
 800736a:	4b14      	ldr	r3, [pc, #80]	; (80073bc <_fflush_r+0x6c>)
 800736c:	429c      	cmp	r4, r3
 800736e:	d11b      	bne.n	80073a8 <_fflush_r+0x58>
 8007370:	686c      	ldr	r4, [r5, #4]
 8007372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0ef      	beq.n	800735a <_fflush_r+0xa>
 800737a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800737c:	07d0      	lsls	r0, r2, #31
 800737e:	d404      	bmi.n	800738a <_fflush_r+0x3a>
 8007380:	0599      	lsls	r1, r3, #22
 8007382:	d402      	bmi.n	800738a <_fflush_r+0x3a>
 8007384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007386:	f000 f915 	bl	80075b4 <__retarget_lock_acquire_recursive>
 800738a:	4628      	mov	r0, r5
 800738c:	4621      	mov	r1, r4
 800738e:	f7ff ff59 	bl	8007244 <__sflush_r>
 8007392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007394:	07da      	lsls	r2, r3, #31
 8007396:	4605      	mov	r5, r0
 8007398:	d4e0      	bmi.n	800735c <_fflush_r+0xc>
 800739a:	89a3      	ldrh	r3, [r4, #12]
 800739c:	059b      	lsls	r3, r3, #22
 800739e:	d4dd      	bmi.n	800735c <_fflush_r+0xc>
 80073a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073a2:	f000 f908 	bl	80075b6 <__retarget_lock_release_recursive>
 80073a6:	e7d9      	b.n	800735c <_fflush_r+0xc>
 80073a8:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <_fflush_r+0x70>)
 80073aa:	429c      	cmp	r4, r3
 80073ac:	d101      	bne.n	80073b2 <_fflush_r+0x62>
 80073ae:	68ac      	ldr	r4, [r5, #8]
 80073b0:	e7df      	b.n	8007372 <_fflush_r+0x22>
 80073b2:	4b04      	ldr	r3, [pc, #16]	; (80073c4 <_fflush_r+0x74>)
 80073b4:	429c      	cmp	r4, r3
 80073b6:	bf08      	it	eq
 80073b8:	68ec      	ldreq	r4, [r5, #12]
 80073ba:	e7da      	b.n	8007372 <_fflush_r+0x22>
 80073bc:	08008494 	.word	0x08008494
 80073c0:	080084b4 	.word	0x080084b4
 80073c4:	08008474 	.word	0x08008474

080073c8 <std>:
 80073c8:	2300      	movs	r3, #0
 80073ca:	b510      	push	{r4, lr}
 80073cc:	4604      	mov	r4, r0
 80073ce:	e9c0 3300 	strd	r3, r3, [r0]
 80073d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073d6:	6083      	str	r3, [r0, #8]
 80073d8:	8181      	strh	r1, [r0, #12]
 80073da:	6643      	str	r3, [r0, #100]	; 0x64
 80073dc:	81c2      	strh	r2, [r0, #14]
 80073de:	6183      	str	r3, [r0, #24]
 80073e0:	4619      	mov	r1, r3
 80073e2:	2208      	movs	r2, #8
 80073e4:	305c      	adds	r0, #92	; 0x5c
 80073e6:	f7ff fd83 	bl	8006ef0 <memset>
 80073ea:	4b05      	ldr	r3, [pc, #20]	; (8007400 <std+0x38>)
 80073ec:	6263      	str	r3, [r4, #36]	; 0x24
 80073ee:	4b05      	ldr	r3, [pc, #20]	; (8007404 <std+0x3c>)
 80073f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80073f2:	4b05      	ldr	r3, [pc, #20]	; (8007408 <std+0x40>)
 80073f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073f6:	4b05      	ldr	r3, [pc, #20]	; (800740c <std+0x44>)
 80073f8:	6224      	str	r4, [r4, #32]
 80073fa:	6323      	str	r3, [r4, #48]	; 0x30
 80073fc:	bd10      	pop	{r4, pc}
 80073fe:	bf00      	nop
 8007400:	080080f9 	.word	0x080080f9
 8007404:	0800811b 	.word	0x0800811b
 8007408:	08008153 	.word	0x08008153
 800740c:	08008177 	.word	0x08008177

08007410 <_cleanup_r>:
 8007410:	4901      	ldr	r1, [pc, #4]	; (8007418 <_cleanup_r+0x8>)
 8007412:	f000 b8af 	b.w	8007574 <_fwalk_reent>
 8007416:	bf00      	nop
 8007418:	08007351 	.word	0x08007351

0800741c <__sfmoreglue>:
 800741c:	b570      	push	{r4, r5, r6, lr}
 800741e:	2268      	movs	r2, #104	; 0x68
 8007420:	1e4d      	subs	r5, r1, #1
 8007422:	4355      	muls	r5, r2
 8007424:	460e      	mov	r6, r1
 8007426:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800742a:	f000 f997 	bl	800775c <_malloc_r>
 800742e:	4604      	mov	r4, r0
 8007430:	b140      	cbz	r0, 8007444 <__sfmoreglue+0x28>
 8007432:	2100      	movs	r1, #0
 8007434:	e9c0 1600 	strd	r1, r6, [r0]
 8007438:	300c      	adds	r0, #12
 800743a:	60a0      	str	r0, [r4, #8]
 800743c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007440:	f7ff fd56 	bl	8006ef0 <memset>
 8007444:	4620      	mov	r0, r4
 8007446:	bd70      	pop	{r4, r5, r6, pc}

08007448 <__sfp_lock_acquire>:
 8007448:	4801      	ldr	r0, [pc, #4]	; (8007450 <__sfp_lock_acquire+0x8>)
 800744a:	f000 b8b3 	b.w	80075b4 <__retarget_lock_acquire_recursive>
 800744e:	bf00      	nop
 8007450:	20000321 	.word	0x20000321

08007454 <__sfp_lock_release>:
 8007454:	4801      	ldr	r0, [pc, #4]	; (800745c <__sfp_lock_release+0x8>)
 8007456:	f000 b8ae 	b.w	80075b6 <__retarget_lock_release_recursive>
 800745a:	bf00      	nop
 800745c:	20000321 	.word	0x20000321

08007460 <__sinit_lock_acquire>:
 8007460:	4801      	ldr	r0, [pc, #4]	; (8007468 <__sinit_lock_acquire+0x8>)
 8007462:	f000 b8a7 	b.w	80075b4 <__retarget_lock_acquire_recursive>
 8007466:	bf00      	nop
 8007468:	20000322 	.word	0x20000322

0800746c <__sinit_lock_release>:
 800746c:	4801      	ldr	r0, [pc, #4]	; (8007474 <__sinit_lock_release+0x8>)
 800746e:	f000 b8a2 	b.w	80075b6 <__retarget_lock_release_recursive>
 8007472:	bf00      	nop
 8007474:	20000322 	.word	0x20000322

08007478 <__sinit>:
 8007478:	b510      	push	{r4, lr}
 800747a:	4604      	mov	r4, r0
 800747c:	f7ff fff0 	bl	8007460 <__sinit_lock_acquire>
 8007480:	69a3      	ldr	r3, [r4, #24]
 8007482:	b11b      	cbz	r3, 800748c <__sinit+0x14>
 8007484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007488:	f7ff bff0 	b.w	800746c <__sinit_lock_release>
 800748c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007490:	6523      	str	r3, [r4, #80]	; 0x50
 8007492:	4b13      	ldr	r3, [pc, #76]	; (80074e0 <__sinit+0x68>)
 8007494:	4a13      	ldr	r2, [pc, #76]	; (80074e4 <__sinit+0x6c>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	62a2      	str	r2, [r4, #40]	; 0x28
 800749a:	42a3      	cmp	r3, r4
 800749c:	bf04      	itt	eq
 800749e:	2301      	moveq	r3, #1
 80074a0:	61a3      	streq	r3, [r4, #24]
 80074a2:	4620      	mov	r0, r4
 80074a4:	f000 f820 	bl	80074e8 <__sfp>
 80074a8:	6060      	str	r0, [r4, #4]
 80074aa:	4620      	mov	r0, r4
 80074ac:	f000 f81c 	bl	80074e8 <__sfp>
 80074b0:	60a0      	str	r0, [r4, #8]
 80074b2:	4620      	mov	r0, r4
 80074b4:	f000 f818 	bl	80074e8 <__sfp>
 80074b8:	2200      	movs	r2, #0
 80074ba:	60e0      	str	r0, [r4, #12]
 80074bc:	2104      	movs	r1, #4
 80074be:	6860      	ldr	r0, [r4, #4]
 80074c0:	f7ff ff82 	bl	80073c8 <std>
 80074c4:	68a0      	ldr	r0, [r4, #8]
 80074c6:	2201      	movs	r2, #1
 80074c8:	2109      	movs	r1, #9
 80074ca:	f7ff ff7d 	bl	80073c8 <std>
 80074ce:	68e0      	ldr	r0, [r4, #12]
 80074d0:	2202      	movs	r2, #2
 80074d2:	2112      	movs	r1, #18
 80074d4:	f7ff ff78 	bl	80073c8 <std>
 80074d8:	2301      	movs	r3, #1
 80074da:	61a3      	str	r3, [r4, #24]
 80074dc:	e7d2      	b.n	8007484 <__sinit+0xc>
 80074de:	bf00      	nop
 80074e0:	08008470 	.word	0x08008470
 80074e4:	08007411 	.word	0x08007411

080074e8 <__sfp>:
 80074e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ea:	4607      	mov	r7, r0
 80074ec:	f7ff ffac 	bl	8007448 <__sfp_lock_acquire>
 80074f0:	4b1e      	ldr	r3, [pc, #120]	; (800756c <__sfp+0x84>)
 80074f2:	681e      	ldr	r6, [r3, #0]
 80074f4:	69b3      	ldr	r3, [r6, #24]
 80074f6:	b913      	cbnz	r3, 80074fe <__sfp+0x16>
 80074f8:	4630      	mov	r0, r6
 80074fa:	f7ff ffbd 	bl	8007478 <__sinit>
 80074fe:	3648      	adds	r6, #72	; 0x48
 8007500:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007504:	3b01      	subs	r3, #1
 8007506:	d503      	bpl.n	8007510 <__sfp+0x28>
 8007508:	6833      	ldr	r3, [r6, #0]
 800750a:	b30b      	cbz	r3, 8007550 <__sfp+0x68>
 800750c:	6836      	ldr	r6, [r6, #0]
 800750e:	e7f7      	b.n	8007500 <__sfp+0x18>
 8007510:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007514:	b9d5      	cbnz	r5, 800754c <__sfp+0x64>
 8007516:	4b16      	ldr	r3, [pc, #88]	; (8007570 <__sfp+0x88>)
 8007518:	60e3      	str	r3, [r4, #12]
 800751a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800751e:	6665      	str	r5, [r4, #100]	; 0x64
 8007520:	f000 f847 	bl	80075b2 <__retarget_lock_init_recursive>
 8007524:	f7ff ff96 	bl	8007454 <__sfp_lock_release>
 8007528:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800752c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007530:	6025      	str	r5, [r4, #0]
 8007532:	61a5      	str	r5, [r4, #24]
 8007534:	2208      	movs	r2, #8
 8007536:	4629      	mov	r1, r5
 8007538:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800753c:	f7ff fcd8 	bl	8006ef0 <memset>
 8007540:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007544:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007548:	4620      	mov	r0, r4
 800754a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800754c:	3468      	adds	r4, #104	; 0x68
 800754e:	e7d9      	b.n	8007504 <__sfp+0x1c>
 8007550:	2104      	movs	r1, #4
 8007552:	4638      	mov	r0, r7
 8007554:	f7ff ff62 	bl	800741c <__sfmoreglue>
 8007558:	4604      	mov	r4, r0
 800755a:	6030      	str	r0, [r6, #0]
 800755c:	2800      	cmp	r0, #0
 800755e:	d1d5      	bne.n	800750c <__sfp+0x24>
 8007560:	f7ff ff78 	bl	8007454 <__sfp_lock_release>
 8007564:	230c      	movs	r3, #12
 8007566:	603b      	str	r3, [r7, #0]
 8007568:	e7ee      	b.n	8007548 <__sfp+0x60>
 800756a:	bf00      	nop
 800756c:	08008470 	.word	0x08008470
 8007570:	ffff0001 	.word	0xffff0001

08007574 <_fwalk_reent>:
 8007574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007578:	4606      	mov	r6, r0
 800757a:	4688      	mov	r8, r1
 800757c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007580:	2700      	movs	r7, #0
 8007582:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007586:	f1b9 0901 	subs.w	r9, r9, #1
 800758a:	d505      	bpl.n	8007598 <_fwalk_reent+0x24>
 800758c:	6824      	ldr	r4, [r4, #0]
 800758e:	2c00      	cmp	r4, #0
 8007590:	d1f7      	bne.n	8007582 <_fwalk_reent+0xe>
 8007592:	4638      	mov	r0, r7
 8007594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007598:	89ab      	ldrh	r3, [r5, #12]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d907      	bls.n	80075ae <_fwalk_reent+0x3a>
 800759e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075a2:	3301      	adds	r3, #1
 80075a4:	d003      	beq.n	80075ae <_fwalk_reent+0x3a>
 80075a6:	4629      	mov	r1, r5
 80075a8:	4630      	mov	r0, r6
 80075aa:	47c0      	blx	r8
 80075ac:	4307      	orrs	r7, r0
 80075ae:	3568      	adds	r5, #104	; 0x68
 80075b0:	e7e9      	b.n	8007586 <_fwalk_reent+0x12>

080075b2 <__retarget_lock_init_recursive>:
 80075b2:	4770      	bx	lr

080075b4 <__retarget_lock_acquire_recursive>:
 80075b4:	4770      	bx	lr

080075b6 <__retarget_lock_release_recursive>:
 80075b6:	4770      	bx	lr

080075b8 <__swhatbuf_r>:
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	460e      	mov	r6, r1
 80075bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c0:	2900      	cmp	r1, #0
 80075c2:	b096      	sub	sp, #88	; 0x58
 80075c4:	4614      	mov	r4, r2
 80075c6:	461d      	mov	r5, r3
 80075c8:	da08      	bge.n	80075dc <__swhatbuf_r+0x24>
 80075ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	602a      	str	r2, [r5, #0]
 80075d2:	061a      	lsls	r2, r3, #24
 80075d4:	d410      	bmi.n	80075f8 <__swhatbuf_r+0x40>
 80075d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075da:	e00e      	b.n	80075fa <__swhatbuf_r+0x42>
 80075dc:	466a      	mov	r2, sp
 80075de:	f000 fdf1 	bl	80081c4 <_fstat_r>
 80075e2:	2800      	cmp	r0, #0
 80075e4:	dbf1      	blt.n	80075ca <__swhatbuf_r+0x12>
 80075e6:	9a01      	ldr	r2, [sp, #4]
 80075e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80075ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80075f0:	425a      	negs	r2, r3
 80075f2:	415a      	adcs	r2, r3
 80075f4:	602a      	str	r2, [r5, #0]
 80075f6:	e7ee      	b.n	80075d6 <__swhatbuf_r+0x1e>
 80075f8:	2340      	movs	r3, #64	; 0x40
 80075fa:	2000      	movs	r0, #0
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	b016      	add	sp, #88	; 0x58
 8007600:	bd70      	pop	{r4, r5, r6, pc}
	...

08007604 <__smakebuf_r>:
 8007604:	898b      	ldrh	r3, [r1, #12]
 8007606:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007608:	079d      	lsls	r5, r3, #30
 800760a:	4606      	mov	r6, r0
 800760c:	460c      	mov	r4, r1
 800760e:	d507      	bpl.n	8007620 <__smakebuf_r+0x1c>
 8007610:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007614:	6023      	str	r3, [r4, #0]
 8007616:	6123      	str	r3, [r4, #16]
 8007618:	2301      	movs	r3, #1
 800761a:	6163      	str	r3, [r4, #20]
 800761c:	b002      	add	sp, #8
 800761e:	bd70      	pop	{r4, r5, r6, pc}
 8007620:	ab01      	add	r3, sp, #4
 8007622:	466a      	mov	r2, sp
 8007624:	f7ff ffc8 	bl	80075b8 <__swhatbuf_r>
 8007628:	9900      	ldr	r1, [sp, #0]
 800762a:	4605      	mov	r5, r0
 800762c:	4630      	mov	r0, r6
 800762e:	f000 f895 	bl	800775c <_malloc_r>
 8007632:	b948      	cbnz	r0, 8007648 <__smakebuf_r+0x44>
 8007634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007638:	059a      	lsls	r2, r3, #22
 800763a:	d4ef      	bmi.n	800761c <__smakebuf_r+0x18>
 800763c:	f023 0303 	bic.w	r3, r3, #3
 8007640:	f043 0302 	orr.w	r3, r3, #2
 8007644:	81a3      	strh	r3, [r4, #12]
 8007646:	e7e3      	b.n	8007610 <__smakebuf_r+0xc>
 8007648:	4b0d      	ldr	r3, [pc, #52]	; (8007680 <__smakebuf_r+0x7c>)
 800764a:	62b3      	str	r3, [r6, #40]	; 0x28
 800764c:	89a3      	ldrh	r3, [r4, #12]
 800764e:	6020      	str	r0, [r4, #0]
 8007650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007654:	81a3      	strh	r3, [r4, #12]
 8007656:	9b00      	ldr	r3, [sp, #0]
 8007658:	6163      	str	r3, [r4, #20]
 800765a:	9b01      	ldr	r3, [sp, #4]
 800765c:	6120      	str	r0, [r4, #16]
 800765e:	b15b      	cbz	r3, 8007678 <__smakebuf_r+0x74>
 8007660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007664:	4630      	mov	r0, r6
 8007666:	f000 fdbf 	bl	80081e8 <_isatty_r>
 800766a:	b128      	cbz	r0, 8007678 <__smakebuf_r+0x74>
 800766c:	89a3      	ldrh	r3, [r4, #12]
 800766e:	f023 0303 	bic.w	r3, r3, #3
 8007672:	f043 0301 	orr.w	r3, r3, #1
 8007676:	81a3      	strh	r3, [r4, #12]
 8007678:	89a0      	ldrh	r0, [r4, #12]
 800767a:	4305      	orrs	r5, r0
 800767c:	81a5      	strh	r5, [r4, #12]
 800767e:	e7cd      	b.n	800761c <__smakebuf_r+0x18>
 8007680:	08007411 	.word	0x08007411

08007684 <_free_r>:
 8007684:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007686:	2900      	cmp	r1, #0
 8007688:	d044      	beq.n	8007714 <_free_r+0x90>
 800768a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800768e:	9001      	str	r0, [sp, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	f1a1 0404 	sub.w	r4, r1, #4
 8007696:	bfb8      	it	lt
 8007698:	18e4      	addlt	r4, r4, r3
 800769a:	f000 fdef 	bl	800827c <__malloc_lock>
 800769e:	4a1e      	ldr	r2, [pc, #120]	; (8007718 <_free_r+0x94>)
 80076a0:	9801      	ldr	r0, [sp, #4]
 80076a2:	6813      	ldr	r3, [r2, #0]
 80076a4:	b933      	cbnz	r3, 80076b4 <_free_r+0x30>
 80076a6:	6063      	str	r3, [r4, #4]
 80076a8:	6014      	str	r4, [r2, #0]
 80076aa:	b003      	add	sp, #12
 80076ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076b0:	f000 bdea 	b.w	8008288 <__malloc_unlock>
 80076b4:	42a3      	cmp	r3, r4
 80076b6:	d908      	bls.n	80076ca <_free_r+0x46>
 80076b8:	6825      	ldr	r5, [r4, #0]
 80076ba:	1961      	adds	r1, r4, r5
 80076bc:	428b      	cmp	r3, r1
 80076be:	bf01      	itttt	eq
 80076c0:	6819      	ldreq	r1, [r3, #0]
 80076c2:	685b      	ldreq	r3, [r3, #4]
 80076c4:	1949      	addeq	r1, r1, r5
 80076c6:	6021      	streq	r1, [r4, #0]
 80076c8:	e7ed      	b.n	80076a6 <_free_r+0x22>
 80076ca:	461a      	mov	r2, r3
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	b10b      	cbz	r3, 80076d4 <_free_r+0x50>
 80076d0:	42a3      	cmp	r3, r4
 80076d2:	d9fa      	bls.n	80076ca <_free_r+0x46>
 80076d4:	6811      	ldr	r1, [r2, #0]
 80076d6:	1855      	adds	r5, r2, r1
 80076d8:	42a5      	cmp	r5, r4
 80076da:	d10b      	bne.n	80076f4 <_free_r+0x70>
 80076dc:	6824      	ldr	r4, [r4, #0]
 80076de:	4421      	add	r1, r4
 80076e0:	1854      	adds	r4, r2, r1
 80076e2:	42a3      	cmp	r3, r4
 80076e4:	6011      	str	r1, [r2, #0]
 80076e6:	d1e0      	bne.n	80076aa <_free_r+0x26>
 80076e8:	681c      	ldr	r4, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	6053      	str	r3, [r2, #4]
 80076ee:	4421      	add	r1, r4
 80076f0:	6011      	str	r1, [r2, #0]
 80076f2:	e7da      	b.n	80076aa <_free_r+0x26>
 80076f4:	d902      	bls.n	80076fc <_free_r+0x78>
 80076f6:	230c      	movs	r3, #12
 80076f8:	6003      	str	r3, [r0, #0]
 80076fa:	e7d6      	b.n	80076aa <_free_r+0x26>
 80076fc:	6825      	ldr	r5, [r4, #0]
 80076fe:	1961      	adds	r1, r4, r5
 8007700:	428b      	cmp	r3, r1
 8007702:	bf04      	itt	eq
 8007704:	6819      	ldreq	r1, [r3, #0]
 8007706:	685b      	ldreq	r3, [r3, #4]
 8007708:	6063      	str	r3, [r4, #4]
 800770a:	bf04      	itt	eq
 800770c:	1949      	addeq	r1, r1, r5
 800770e:	6021      	streq	r1, [r4, #0]
 8007710:	6054      	str	r4, [r2, #4]
 8007712:	e7ca      	b.n	80076aa <_free_r+0x26>
 8007714:	b003      	add	sp, #12
 8007716:	bd30      	pop	{r4, r5, pc}
 8007718:	20000324 	.word	0x20000324

0800771c <sbrk_aligned>:
 800771c:	b570      	push	{r4, r5, r6, lr}
 800771e:	4e0e      	ldr	r6, [pc, #56]	; (8007758 <sbrk_aligned+0x3c>)
 8007720:	460c      	mov	r4, r1
 8007722:	6831      	ldr	r1, [r6, #0]
 8007724:	4605      	mov	r5, r0
 8007726:	b911      	cbnz	r1, 800772e <sbrk_aligned+0x12>
 8007728:	f000 fcd6 	bl	80080d8 <_sbrk_r>
 800772c:	6030      	str	r0, [r6, #0]
 800772e:	4621      	mov	r1, r4
 8007730:	4628      	mov	r0, r5
 8007732:	f000 fcd1 	bl	80080d8 <_sbrk_r>
 8007736:	1c43      	adds	r3, r0, #1
 8007738:	d00a      	beq.n	8007750 <sbrk_aligned+0x34>
 800773a:	1cc4      	adds	r4, r0, #3
 800773c:	f024 0403 	bic.w	r4, r4, #3
 8007740:	42a0      	cmp	r0, r4
 8007742:	d007      	beq.n	8007754 <sbrk_aligned+0x38>
 8007744:	1a21      	subs	r1, r4, r0
 8007746:	4628      	mov	r0, r5
 8007748:	f000 fcc6 	bl	80080d8 <_sbrk_r>
 800774c:	3001      	adds	r0, #1
 800774e:	d101      	bne.n	8007754 <sbrk_aligned+0x38>
 8007750:	f04f 34ff 	mov.w	r4, #4294967295
 8007754:	4620      	mov	r0, r4
 8007756:	bd70      	pop	{r4, r5, r6, pc}
 8007758:	20000328 	.word	0x20000328

0800775c <_malloc_r>:
 800775c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007760:	1ccd      	adds	r5, r1, #3
 8007762:	f025 0503 	bic.w	r5, r5, #3
 8007766:	3508      	adds	r5, #8
 8007768:	2d0c      	cmp	r5, #12
 800776a:	bf38      	it	cc
 800776c:	250c      	movcc	r5, #12
 800776e:	2d00      	cmp	r5, #0
 8007770:	4607      	mov	r7, r0
 8007772:	db01      	blt.n	8007778 <_malloc_r+0x1c>
 8007774:	42a9      	cmp	r1, r5
 8007776:	d905      	bls.n	8007784 <_malloc_r+0x28>
 8007778:	230c      	movs	r3, #12
 800777a:	603b      	str	r3, [r7, #0]
 800777c:	2600      	movs	r6, #0
 800777e:	4630      	mov	r0, r6
 8007780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007784:	4e2e      	ldr	r6, [pc, #184]	; (8007840 <_malloc_r+0xe4>)
 8007786:	f000 fd79 	bl	800827c <__malloc_lock>
 800778a:	6833      	ldr	r3, [r6, #0]
 800778c:	461c      	mov	r4, r3
 800778e:	bb34      	cbnz	r4, 80077de <_malloc_r+0x82>
 8007790:	4629      	mov	r1, r5
 8007792:	4638      	mov	r0, r7
 8007794:	f7ff ffc2 	bl	800771c <sbrk_aligned>
 8007798:	1c43      	adds	r3, r0, #1
 800779a:	4604      	mov	r4, r0
 800779c:	d14d      	bne.n	800783a <_malloc_r+0xde>
 800779e:	6834      	ldr	r4, [r6, #0]
 80077a0:	4626      	mov	r6, r4
 80077a2:	2e00      	cmp	r6, #0
 80077a4:	d140      	bne.n	8007828 <_malloc_r+0xcc>
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	4631      	mov	r1, r6
 80077aa:	4638      	mov	r0, r7
 80077ac:	eb04 0803 	add.w	r8, r4, r3
 80077b0:	f000 fc92 	bl	80080d8 <_sbrk_r>
 80077b4:	4580      	cmp	r8, r0
 80077b6:	d13a      	bne.n	800782e <_malloc_r+0xd2>
 80077b8:	6821      	ldr	r1, [r4, #0]
 80077ba:	3503      	adds	r5, #3
 80077bc:	1a6d      	subs	r5, r5, r1
 80077be:	f025 0503 	bic.w	r5, r5, #3
 80077c2:	3508      	adds	r5, #8
 80077c4:	2d0c      	cmp	r5, #12
 80077c6:	bf38      	it	cc
 80077c8:	250c      	movcc	r5, #12
 80077ca:	4629      	mov	r1, r5
 80077cc:	4638      	mov	r0, r7
 80077ce:	f7ff ffa5 	bl	800771c <sbrk_aligned>
 80077d2:	3001      	adds	r0, #1
 80077d4:	d02b      	beq.n	800782e <_malloc_r+0xd2>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	442b      	add	r3, r5
 80077da:	6023      	str	r3, [r4, #0]
 80077dc:	e00e      	b.n	80077fc <_malloc_r+0xa0>
 80077de:	6822      	ldr	r2, [r4, #0]
 80077e0:	1b52      	subs	r2, r2, r5
 80077e2:	d41e      	bmi.n	8007822 <_malloc_r+0xc6>
 80077e4:	2a0b      	cmp	r2, #11
 80077e6:	d916      	bls.n	8007816 <_malloc_r+0xba>
 80077e8:	1961      	adds	r1, r4, r5
 80077ea:	42a3      	cmp	r3, r4
 80077ec:	6025      	str	r5, [r4, #0]
 80077ee:	bf18      	it	ne
 80077f0:	6059      	strne	r1, [r3, #4]
 80077f2:	6863      	ldr	r3, [r4, #4]
 80077f4:	bf08      	it	eq
 80077f6:	6031      	streq	r1, [r6, #0]
 80077f8:	5162      	str	r2, [r4, r5]
 80077fa:	604b      	str	r3, [r1, #4]
 80077fc:	4638      	mov	r0, r7
 80077fe:	f104 060b 	add.w	r6, r4, #11
 8007802:	f000 fd41 	bl	8008288 <__malloc_unlock>
 8007806:	f026 0607 	bic.w	r6, r6, #7
 800780a:	1d23      	adds	r3, r4, #4
 800780c:	1af2      	subs	r2, r6, r3
 800780e:	d0b6      	beq.n	800777e <_malloc_r+0x22>
 8007810:	1b9b      	subs	r3, r3, r6
 8007812:	50a3      	str	r3, [r4, r2]
 8007814:	e7b3      	b.n	800777e <_malloc_r+0x22>
 8007816:	6862      	ldr	r2, [r4, #4]
 8007818:	42a3      	cmp	r3, r4
 800781a:	bf0c      	ite	eq
 800781c:	6032      	streq	r2, [r6, #0]
 800781e:	605a      	strne	r2, [r3, #4]
 8007820:	e7ec      	b.n	80077fc <_malloc_r+0xa0>
 8007822:	4623      	mov	r3, r4
 8007824:	6864      	ldr	r4, [r4, #4]
 8007826:	e7b2      	b.n	800778e <_malloc_r+0x32>
 8007828:	4634      	mov	r4, r6
 800782a:	6876      	ldr	r6, [r6, #4]
 800782c:	e7b9      	b.n	80077a2 <_malloc_r+0x46>
 800782e:	230c      	movs	r3, #12
 8007830:	603b      	str	r3, [r7, #0]
 8007832:	4638      	mov	r0, r7
 8007834:	f000 fd28 	bl	8008288 <__malloc_unlock>
 8007838:	e7a1      	b.n	800777e <_malloc_r+0x22>
 800783a:	6025      	str	r5, [r4, #0]
 800783c:	e7de      	b.n	80077fc <_malloc_r+0xa0>
 800783e:	bf00      	nop
 8007840:	20000324 	.word	0x20000324

08007844 <__ssputs_r>:
 8007844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007848:	688e      	ldr	r6, [r1, #8]
 800784a:	429e      	cmp	r6, r3
 800784c:	4682      	mov	sl, r0
 800784e:	460c      	mov	r4, r1
 8007850:	4690      	mov	r8, r2
 8007852:	461f      	mov	r7, r3
 8007854:	d838      	bhi.n	80078c8 <__ssputs_r+0x84>
 8007856:	898a      	ldrh	r2, [r1, #12]
 8007858:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800785c:	d032      	beq.n	80078c4 <__ssputs_r+0x80>
 800785e:	6825      	ldr	r5, [r4, #0]
 8007860:	6909      	ldr	r1, [r1, #16]
 8007862:	eba5 0901 	sub.w	r9, r5, r1
 8007866:	6965      	ldr	r5, [r4, #20]
 8007868:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800786c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007870:	3301      	adds	r3, #1
 8007872:	444b      	add	r3, r9
 8007874:	106d      	asrs	r5, r5, #1
 8007876:	429d      	cmp	r5, r3
 8007878:	bf38      	it	cc
 800787a:	461d      	movcc	r5, r3
 800787c:	0553      	lsls	r3, r2, #21
 800787e:	d531      	bpl.n	80078e4 <__ssputs_r+0xa0>
 8007880:	4629      	mov	r1, r5
 8007882:	f7ff ff6b 	bl	800775c <_malloc_r>
 8007886:	4606      	mov	r6, r0
 8007888:	b950      	cbnz	r0, 80078a0 <__ssputs_r+0x5c>
 800788a:	230c      	movs	r3, #12
 800788c:	f8ca 3000 	str.w	r3, [sl]
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007896:	81a3      	strh	r3, [r4, #12]
 8007898:	f04f 30ff 	mov.w	r0, #4294967295
 800789c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a0:	6921      	ldr	r1, [r4, #16]
 80078a2:	464a      	mov	r2, r9
 80078a4:	f000 fcc2 	bl	800822c <memcpy>
 80078a8:	89a3      	ldrh	r3, [r4, #12]
 80078aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078b2:	81a3      	strh	r3, [r4, #12]
 80078b4:	6126      	str	r6, [r4, #16]
 80078b6:	6165      	str	r5, [r4, #20]
 80078b8:	444e      	add	r6, r9
 80078ba:	eba5 0509 	sub.w	r5, r5, r9
 80078be:	6026      	str	r6, [r4, #0]
 80078c0:	60a5      	str	r5, [r4, #8]
 80078c2:	463e      	mov	r6, r7
 80078c4:	42be      	cmp	r6, r7
 80078c6:	d900      	bls.n	80078ca <__ssputs_r+0x86>
 80078c8:	463e      	mov	r6, r7
 80078ca:	6820      	ldr	r0, [r4, #0]
 80078cc:	4632      	mov	r2, r6
 80078ce:	4641      	mov	r1, r8
 80078d0:	f000 fcba 	bl	8008248 <memmove>
 80078d4:	68a3      	ldr	r3, [r4, #8]
 80078d6:	1b9b      	subs	r3, r3, r6
 80078d8:	60a3      	str	r3, [r4, #8]
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	4433      	add	r3, r6
 80078de:	6023      	str	r3, [r4, #0]
 80078e0:	2000      	movs	r0, #0
 80078e2:	e7db      	b.n	800789c <__ssputs_r+0x58>
 80078e4:	462a      	mov	r2, r5
 80078e6:	f000 fcd5 	bl	8008294 <_realloc_r>
 80078ea:	4606      	mov	r6, r0
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d1e1      	bne.n	80078b4 <__ssputs_r+0x70>
 80078f0:	6921      	ldr	r1, [r4, #16]
 80078f2:	4650      	mov	r0, sl
 80078f4:	f7ff fec6 	bl	8007684 <_free_r>
 80078f8:	e7c7      	b.n	800788a <__ssputs_r+0x46>
	...

080078fc <_svfiprintf_r>:
 80078fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007900:	4698      	mov	r8, r3
 8007902:	898b      	ldrh	r3, [r1, #12]
 8007904:	061b      	lsls	r3, r3, #24
 8007906:	b09d      	sub	sp, #116	; 0x74
 8007908:	4607      	mov	r7, r0
 800790a:	460d      	mov	r5, r1
 800790c:	4614      	mov	r4, r2
 800790e:	d50e      	bpl.n	800792e <_svfiprintf_r+0x32>
 8007910:	690b      	ldr	r3, [r1, #16]
 8007912:	b963      	cbnz	r3, 800792e <_svfiprintf_r+0x32>
 8007914:	2140      	movs	r1, #64	; 0x40
 8007916:	f7ff ff21 	bl	800775c <_malloc_r>
 800791a:	6028      	str	r0, [r5, #0]
 800791c:	6128      	str	r0, [r5, #16]
 800791e:	b920      	cbnz	r0, 800792a <_svfiprintf_r+0x2e>
 8007920:	230c      	movs	r3, #12
 8007922:	603b      	str	r3, [r7, #0]
 8007924:	f04f 30ff 	mov.w	r0, #4294967295
 8007928:	e0d1      	b.n	8007ace <_svfiprintf_r+0x1d2>
 800792a:	2340      	movs	r3, #64	; 0x40
 800792c:	616b      	str	r3, [r5, #20]
 800792e:	2300      	movs	r3, #0
 8007930:	9309      	str	r3, [sp, #36]	; 0x24
 8007932:	2320      	movs	r3, #32
 8007934:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007938:	f8cd 800c 	str.w	r8, [sp, #12]
 800793c:	2330      	movs	r3, #48	; 0x30
 800793e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007ae8 <_svfiprintf_r+0x1ec>
 8007942:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007946:	f04f 0901 	mov.w	r9, #1
 800794a:	4623      	mov	r3, r4
 800794c:	469a      	mov	sl, r3
 800794e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007952:	b10a      	cbz	r2, 8007958 <_svfiprintf_r+0x5c>
 8007954:	2a25      	cmp	r2, #37	; 0x25
 8007956:	d1f9      	bne.n	800794c <_svfiprintf_r+0x50>
 8007958:	ebba 0b04 	subs.w	fp, sl, r4
 800795c:	d00b      	beq.n	8007976 <_svfiprintf_r+0x7a>
 800795e:	465b      	mov	r3, fp
 8007960:	4622      	mov	r2, r4
 8007962:	4629      	mov	r1, r5
 8007964:	4638      	mov	r0, r7
 8007966:	f7ff ff6d 	bl	8007844 <__ssputs_r>
 800796a:	3001      	adds	r0, #1
 800796c:	f000 80aa 	beq.w	8007ac4 <_svfiprintf_r+0x1c8>
 8007970:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007972:	445a      	add	r2, fp
 8007974:	9209      	str	r2, [sp, #36]	; 0x24
 8007976:	f89a 3000 	ldrb.w	r3, [sl]
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 80a2 	beq.w	8007ac4 <_svfiprintf_r+0x1c8>
 8007980:	2300      	movs	r3, #0
 8007982:	f04f 32ff 	mov.w	r2, #4294967295
 8007986:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800798a:	f10a 0a01 	add.w	sl, sl, #1
 800798e:	9304      	str	r3, [sp, #16]
 8007990:	9307      	str	r3, [sp, #28]
 8007992:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007996:	931a      	str	r3, [sp, #104]	; 0x68
 8007998:	4654      	mov	r4, sl
 800799a:	2205      	movs	r2, #5
 800799c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079a0:	4851      	ldr	r0, [pc, #324]	; (8007ae8 <_svfiprintf_r+0x1ec>)
 80079a2:	f7f8 fc2d 	bl	8000200 <memchr>
 80079a6:	9a04      	ldr	r2, [sp, #16]
 80079a8:	b9d8      	cbnz	r0, 80079e2 <_svfiprintf_r+0xe6>
 80079aa:	06d0      	lsls	r0, r2, #27
 80079ac:	bf44      	itt	mi
 80079ae:	2320      	movmi	r3, #32
 80079b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079b4:	0711      	lsls	r1, r2, #28
 80079b6:	bf44      	itt	mi
 80079b8:	232b      	movmi	r3, #43	; 0x2b
 80079ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079be:	f89a 3000 	ldrb.w	r3, [sl]
 80079c2:	2b2a      	cmp	r3, #42	; 0x2a
 80079c4:	d015      	beq.n	80079f2 <_svfiprintf_r+0xf6>
 80079c6:	9a07      	ldr	r2, [sp, #28]
 80079c8:	4654      	mov	r4, sl
 80079ca:	2000      	movs	r0, #0
 80079cc:	f04f 0c0a 	mov.w	ip, #10
 80079d0:	4621      	mov	r1, r4
 80079d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079d6:	3b30      	subs	r3, #48	; 0x30
 80079d8:	2b09      	cmp	r3, #9
 80079da:	d94e      	bls.n	8007a7a <_svfiprintf_r+0x17e>
 80079dc:	b1b0      	cbz	r0, 8007a0c <_svfiprintf_r+0x110>
 80079de:	9207      	str	r2, [sp, #28]
 80079e0:	e014      	b.n	8007a0c <_svfiprintf_r+0x110>
 80079e2:	eba0 0308 	sub.w	r3, r0, r8
 80079e6:	fa09 f303 	lsl.w	r3, r9, r3
 80079ea:	4313      	orrs	r3, r2
 80079ec:	9304      	str	r3, [sp, #16]
 80079ee:	46a2      	mov	sl, r4
 80079f0:	e7d2      	b.n	8007998 <_svfiprintf_r+0x9c>
 80079f2:	9b03      	ldr	r3, [sp, #12]
 80079f4:	1d19      	adds	r1, r3, #4
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	9103      	str	r1, [sp, #12]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	bfbb      	ittet	lt
 80079fe:	425b      	neglt	r3, r3
 8007a00:	f042 0202 	orrlt.w	r2, r2, #2
 8007a04:	9307      	strge	r3, [sp, #28]
 8007a06:	9307      	strlt	r3, [sp, #28]
 8007a08:	bfb8      	it	lt
 8007a0a:	9204      	strlt	r2, [sp, #16]
 8007a0c:	7823      	ldrb	r3, [r4, #0]
 8007a0e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a10:	d10c      	bne.n	8007a2c <_svfiprintf_r+0x130>
 8007a12:	7863      	ldrb	r3, [r4, #1]
 8007a14:	2b2a      	cmp	r3, #42	; 0x2a
 8007a16:	d135      	bne.n	8007a84 <_svfiprintf_r+0x188>
 8007a18:	9b03      	ldr	r3, [sp, #12]
 8007a1a:	1d1a      	adds	r2, r3, #4
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	9203      	str	r2, [sp, #12]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	bfb8      	it	lt
 8007a24:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a28:	3402      	adds	r4, #2
 8007a2a:	9305      	str	r3, [sp, #20]
 8007a2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007af8 <_svfiprintf_r+0x1fc>
 8007a30:	7821      	ldrb	r1, [r4, #0]
 8007a32:	2203      	movs	r2, #3
 8007a34:	4650      	mov	r0, sl
 8007a36:	f7f8 fbe3 	bl	8000200 <memchr>
 8007a3a:	b140      	cbz	r0, 8007a4e <_svfiprintf_r+0x152>
 8007a3c:	2340      	movs	r3, #64	; 0x40
 8007a3e:	eba0 000a 	sub.w	r0, r0, sl
 8007a42:	fa03 f000 	lsl.w	r0, r3, r0
 8007a46:	9b04      	ldr	r3, [sp, #16]
 8007a48:	4303      	orrs	r3, r0
 8007a4a:	3401      	adds	r4, #1
 8007a4c:	9304      	str	r3, [sp, #16]
 8007a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a52:	4826      	ldr	r0, [pc, #152]	; (8007aec <_svfiprintf_r+0x1f0>)
 8007a54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a58:	2206      	movs	r2, #6
 8007a5a:	f7f8 fbd1 	bl	8000200 <memchr>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	d038      	beq.n	8007ad4 <_svfiprintf_r+0x1d8>
 8007a62:	4b23      	ldr	r3, [pc, #140]	; (8007af0 <_svfiprintf_r+0x1f4>)
 8007a64:	bb1b      	cbnz	r3, 8007aae <_svfiprintf_r+0x1b2>
 8007a66:	9b03      	ldr	r3, [sp, #12]
 8007a68:	3307      	adds	r3, #7
 8007a6a:	f023 0307 	bic.w	r3, r3, #7
 8007a6e:	3308      	adds	r3, #8
 8007a70:	9303      	str	r3, [sp, #12]
 8007a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a74:	4433      	add	r3, r6
 8007a76:	9309      	str	r3, [sp, #36]	; 0x24
 8007a78:	e767      	b.n	800794a <_svfiprintf_r+0x4e>
 8007a7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a7e:	460c      	mov	r4, r1
 8007a80:	2001      	movs	r0, #1
 8007a82:	e7a5      	b.n	80079d0 <_svfiprintf_r+0xd4>
 8007a84:	2300      	movs	r3, #0
 8007a86:	3401      	adds	r4, #1
 8007a88:	9305      	str	r3, [sp, #20]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	f04f 0c0a 	mov.w	ip, #10
 8007a90:	4620      	mov	r0, r4
 8007a92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a96:	3a30      	subs	r2, #48	; 0x30
 8007a98:	2a09      	cmp	r2, #9
 8007a9a:	d903      	bls.n	8007aa4 <_svfiprintf_r+0x1a8>
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0c5      	beq.n	8007a2c <_svfiprintf_r+0x130>
 8007aa0:	9105      	str	r1, [sp, #20]
 8007aa2:	e7c3      	b.n	8007a2c <_svfiprintf_r+0x130>
 8007aa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007aa8:	4604      	mov	r4, r0
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e7f0      	b.n	8007a90 <_svfiprintf_r+0x194>
 8007aae:	ab03      	add	r3, sp, #12
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	462a      	mov	r2, r5
 8007ab4:	4b0f      	ldr	r3, [pc, #60]	; (8007af4 <_svfiprintf_r+0x1f8>)
 8007ab6:	a904      	add	r1, sp, #16
 8007ab8:	4638      	mov	r0, r7
 8007aba:	f3af 8000 	nop.w
 8007abe:	1c42      	adds	r2, r0, #1
 8007ac0:	4606      	mov	r6, r0
 8007ac2:	d1d6      	bne.n	8007a72 <_svfiprintf_r+0x176>
 8007ac4:	89ab      	ldrh	r3, [r5, #12]
 8007ac6:	065b      	lsls	r3, r3, #25
 8007ac8:	f53f af2c 	bmi.w	8007924 <_svfiprintf_r+0x28>
 8007acc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ace:	b01d      	add	sp, #116	; 0x74
 8007ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad4:	ab03      	add	r3, sp, #12
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	462a      	mov	r2, r5
 8007ada:	4b06      	ldr	r3, [pc, #24]	; (8007af4 <_svfiprintf_r+0x1f8>)
 8007adc:	a904      	add	r1, sp, #16
 8007ade:	4638      	mov	r0, r7
 8007ae0:	f000 f9d4 	bl	8007e8c <_printf_i>
 8007ae4:	e7eb      	b.n	8007abe <_svfiprintf_r+0x1c2>
 8007ae6:	bf00      	nop
 8007ae8:	080084d4 	.word	0x080084d4
 8007aec:	080084de 	.word	0x080084de
 8007af0:	00000000 	.word	0x00000000
 8007af4:	08007845 	.word	0x08007845
 8007af8:	080084da 	.word	0x080084da

08007afc <__sfputc_r>:
 8007afc:	6893      	ldr	r3, [r2, #8]
 8007afe:	3b01      	subs	r3, #1
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	b410      	push	{r4}
 8007b04:	6093      	str	r3, [r2, #8]
 8007b06:	da08      	bge.n	8007b1a <__sfputc_r+0x1e>
 8007b08:	6994      	ldr	r4, [r2, #24]
 8007b0a:	42a3      	cmp	r3, r4
 8007b0c:	db01      	blt.n	8007b12 <__sfputc_r+0x16>
 8007b0e:	290a      	cmp	r1, #10
 8007b10:	d103      	bne.n	8007b1a <__sfputc_r+0x1e>
 8007b12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b16:	f7ff bad5 	b.w	80070c4 <__swbuf_r>
 8007b1a:	6813      	ldr	r3, [r2, #0]
 8007b1c:	1c58      	adds	r0, r3, #1
 8007b1e:	6010      	str	r0, [r2, #0]
 8007b20:	7019      	strb	r1, [r3, #0]
 8007b22:	4608      	mov	r0, r1
 8007b24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <__sfputs_r>:
 8007b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2c:	4606      	mov	r6, r0
 8007b2e:	460f      	mov	r7, r1
 8007b30:	4614      	mov	r4, r2
 8007b32:	18d5      	adds	r5, r2, r3
 8007b34:	42ac      	cmp	r4, r5
 8007b36:	d101      	bne.n	8007b3c <__sfputs_r+0x12>
 8007b38:	2000      	movs	r0, #0
 8007b3a:	e007      	b.n	8007b4c <__sfputs_r+0x22>
 8007b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b40:	463a      	mov	r2, r7
 8007b42:	4630      	mov	r0, r6
 8007b44:	f7ff ffda 	bl	8007afc <__sfputc_r>
 8007b48:	1c43      	adds	r3, r0, #1
 8007b4a:	d1f3      	bne.n	8007b34 <__sfputs_r+0xa>
 8007b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b50 <_vfiprintf_r>:
 8007b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b54:	460d      	mov	r5, r1
 8007b56:	b09d      	sub	sp, #116	; 0x74
 8007b58:	4614      	mov	r4, r2
 8007b5a:	4698      	mov	r8, r3
 8007b5c:	4606      	mov	r6, r0
 8007b5e:	b118      	cbz	r0, 8007b68 <_vfiprintf_r+0x18>
 8007b60:	6983      	ldr	r3, [r0, #24]
 8007b62:	b90b      	cbnz	r3, 8007b68 <_vfiprintf_r+0x18>
 8007b64:	f7ff fc88 	bl	8007478 <__sinit>
 8007b68:	4b89      	ldr	r3, [pc, #548]	; (8007d90 <_vfiprintf_r+0x240>)
 8007b6a:	429d      	cmp	r5, r3
 8007b6c:	d11b      	bne.n	8007ba6 <_vfiprintf_r+0x56>
 8007b6e:	6875      	ldr	r5, [r6, #4]
 8007b70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b72:	07d9      	lsls	r1, r3, #31
 8007b74:	d405      	bmi.n	8007b82 <_vfiprintf_r+0x32>
 8007b76:	89ab      	ldrh	r3, [r5, #12]
 8007b78:	059a      	lsls	r2, r3, #22
 8007b7a:	d402      	bmi.n	8007b82 <_vfiprintf_r+0x32>
 8007b7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b7e:	f7ff fd19 	bl	80075b4 <__retarget_lock_acquire_recursive>
 8007b82:	89ab      	ldrh	r3, [r5, #12]
 8007b84:	071b      	lsls	r3, r3, #28
 8007b86:	d501      	bpl.n	8007b8c <_vfiprintf_r+0x3c>
 8007b88:	692b      	ldr	r3, [r5, #16]
 8007b8a:	b9eb      	cbnz	r3, 8007bc8 <_vfiprintf_r+0x78>
 8007b8c:	4629      	mov	r1, r5
 8007b8e:	4630      	mov	r0, r6
 8007b90:	f7ff faea 	bl	8007168 <__swsetup_r>
 8007b94:	b1c0      	cbz	r0, 8007bc8 <_vfiprintf_r+0x78>
 8007b96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b98:	07dc      	lsls	r4, r3, #31
 8007b9a:	d50e      	bpl.n	8007bba <_vfiprintf_r+0x6a>
 8007b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba0:	b01d      	add	sp, #116	; 0x74
 8007ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba6:	4b7b      	ldr	r3, [pc, #492]	; (8007d94 <_vfiprintf_r+0x244>)
 8007ba8:	429d      	cmp	r5, r3
 8007baa:	d101      	bne.n	8007bb0 <_vfiprintf_r+0x60>
 8007bac:	68b5      	ldr	r5, [r6, #8]
 8007bae:	e7df      	b.n	8007b70 <_vfiprintf_r+0x20>
 8007bb0:	4b79      	ldr	r3, [pc, #484]	; (8007d98 <_vfiprintf_r+0x248>)
 8007bb2:	429d      	cmp	r5, r3
 8007bb4:	bf08      	it	eq
 8007bb6:	68f5      	ldreq	r5, [r6, #12]
 8007bb8:	e7da      	b.n	8007b70 <_vfiprintf_r+0x20>
 8007bba:	89ab      	ldrh	r3, [r5, #12]
 8007bbc:	0598      	lsls	r0, r3, #22
 8007bbe:	d4ed      	bmi.n	8007b9c <_vfiprintf_r+0x4c>
 8007bc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bc2:	f7ff fcf8 	bl	80075b6 <__retarget_lock_release_recursive>
 8007bc6:	e7e9      	b.n	8007b9c <_vfiprintf_r+0x4c>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	9309      	str	r3, [sp, #36]	; 0x24
 8007bcc:	2320      	movs	r3, #32
 8007bce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bd6:	2330      	movs	r3, #48	; 0x30
 8007bd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007d9c <_vfiprintf_r+0x24c>
 8007bdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007be0:	f04f 0901 	mov.w	r9, #1
 8007be4:	4623      	mov	r3, r4
 8007be6:	469a      	mov	sl, r3
 8007be8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bec:	b10a      	cbz	r2, 8007bf2 <_vfiprintf_r+0xa2>
 8007bee:	2a25      	cmp	r2, #37	; 0x25
 8007bf0:	d1f9      	bne.n	8007be6 <_vfiprintf_r+0x96>
 8007bf2:	ebba 0b04 	subs.w	fp, sl, r4
 8007bf6:	d00b      	beq.n	8007c10 <_vfiprintf_r+0xc0>
 8007bf8:	465b      	mov	r3, fp
 8007bfa:	4622      	mov	r2, r4
 8007bfc:	4629      	mov	r1, r5
 8007bfe:	4630      	mov	r0, r6
 8007c00:	f7ff ff93 	bl	8007b2a <__sfputs_r>
 8007c04:	3001      	adds	r0, #1
 8007c06:	f000 80aa 	beq.w	8007d5e <_vfiprintf_r+0x20e>
 8007c0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c0c:	445a      	add	r2, fp
 8007c0e:	9209      	str	r2, [sp, #36]	; 0x24
 8007c10:	f89a 3000 	ldrb.w	r3, [sl]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 80a2 	beq.w	8007d5e <_vfiprintf_r+0x20e>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c24:	f10a 0a01 	add.w	sl, sl, #1
 8007c28:	9304      	str	r3, [sp, #16]
 8007c2a:	9307      	str	r3, [sp, #28]
 8007c2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c30:	931a      	str	r3, [sp, #104]	; 0x68
 8007c32:	4654      	mov	r4, sl
 8007c34:	2205      	movs	r2, #5
 8007c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c3a:	4858      	ldr	r0, [pc, #352]	; (8007d9c <_vfiprintf_r+0x24c>)
 8007c3c:	f7f8 fae0 	bl	8000200 <memchr>
 8007c40:	9a04      	ldr	r2, [sp, #16]
 8007c42:	b9d8      	cbnz	r0, 8007c7c <_vfiprintf_r+0x12c>
 8007c44:	06d1      	lsls	r1, r2, #27
 8007c46:	bf44      	itt	mi
 8007c48:	2320      	movmi	r3, #32
 8007c4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c4e:	0713      	lsls	r3, r2, #28
 8007c50:	bf44      	itt	mi
 8007c52:	232b      	movmi	r3, #43	; 0x2b
 8007c54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c58:	f89a 3000 	ldrb.w	r3, [sl]
 8007c5c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c5e:	d015      	beq.n	8007c8c <_vfiprintf_r+0x13c>
 8007c60:	9a07      	ldr	r2, [sp, #28]
 8007c62:	4654      	mov	r4, sl
 8007c64:	2000      	movs	r0, #0
 8007c66:	f04f 0c0a 	mov.w	ip, #10
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c70:	3b30      	subs	r3, #48	; 0x30
 8007c72:	2b09      	cmp	r3, #9
 8007c74:	d94e      	bls.n	8007d14 <_vfiprintf_r+0x1c4>
 8007c76:	b1b0      	cbz	r0, 8007ca6 <_vfiprintf_r+0x156>
 8007c78:	9207      	str	r2, [sp, #28]
 8007c7a:	e014      	b.n	8007ca6 <_vfiprintf_r+0x156>
 8007c7c:	eba0 0308 	sub.w	r3, r0, r8
 8007c80:	fa09 f303 	lsl.w	r3, r9, r3
 8007c84:	4313      	orrs	r3, r2
 8007c86:	9304      	str	r3, [sp, #16]
 8007c88:	46a2      	mov	sl, r4
 8007c8a:	e7d2      	b.n	8007c32 <_vfiprintf_r+0xe2>
 8007c8c:	9b03      	ldr	r3, [sp, #12]
 8007c8e:	1d19      	adds	r1, r3, #4
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	9103      	str	r1, [sp, #12]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	bfbb      	ittet	lt
 8007c98:	425b      	neglt	r3, r3
 8007c9a:	f042 0202 	orrlt.w	r2, r2, #2
 8007c9e:	9307      	strge	r3, [sp, #28]
 8007ca0:	9307      	strlt	r3, [sp, #28]
 8007ca2:	bfb8      	it	lt
 8007ca4:	9204      	strlt	r2, [sp, #16]
 8007ca6:	7823      	ldrb	r3, [r4, #0]
 8007ca8:	2b2e      	cmp	r3, #46	; 0x2e
 8007caa:	d10c      	bne.n	8007cc6 <_vfiprintf_r+0x176>
 8007cac:	7863      	ldrb	r3, [r4, #1]
 8007cae:	2b2a      	cmp	r3, #42	; 0x2a
 8007cb0:	d135      	bne.n	8007d1e <_vfiprintf_r+0x1ce>
 8007cb2:	9b03      	ldr	r3, [sp, #12]
 8007cb4:	1d1a      	adds	r2, r3, #4
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	9203      	str	r2, [sp, #12]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	bfb8      	it	lt
 8007cbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cc2:	3402      	adds	r4, #2
 8007cc4:	9305      	str	r3, [sp, #20]
 8007cc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007dac <_vfiprintf_r+0x25c>
 8007cca:	7821      	ldrb	r1, [r4, #0]
 8007ccc:	2203      	movs	r2, #3
 8007cce:	4650      	mov	r0, sl
 8007cd0:	f7f8 fa96 	bl	8000200 <memchr>
 8007cd4:	b140      	cbz	r0, 8007ce8 <_vfiprintf_r+0x198>
 8007cd6:	2340      	movs	r3, #64	; 0x40
 8007cd8:	eba0 000a 	sub.w	r0, r0, sl
 8007cdc:	fa03 f000 	lsl.w	r0, r3, r0
 8007ce0:	9b04      	ldr	r3, [sp, #16]
 8007ce2:	4303      	orrs	r3, r0
 8007ce4:	3401      	adds	r4, #1
 8007ce6:	9304      	str	r3, [sp, #16]
 8007ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cec:	482c      	ldr	r0, [pc, #176]	; (8007da0 <_vfiprintf_r+0x250>)
 8007cee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cf2:	2206      	movs	r2, #6
 8007cf4:	f7f8 fa84 	bl	8000200 <memchr>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d03f      	beq.n	8007d7c <_vfiprintf_r+0x22c>
 8007cfc:	4b29      	ldr	r3, [pc, #164]	; (8007da4 <_vfiprintf_r+0x254>)
 8007cfe:	bb1b      	cbnz	r3, 8007d48 <_vfiprintf_r+0x1f8>
 8007d00:	9b03      	ldr	r3, [sp, #12]
 8007d02:	3307      	adds	r3, #7
 8007d04:	f023 0307 	bic.w	r3, r3, #7
 8007d08:	3308      	adds	r3, #8
 8007d0a:	9303      	str	r3, [sp, #12]
 8007d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d0e:	443b      	add	r3, r7
 8007d10:	9309      	str	r3, [sp, #36]	; 0x24
 8007d12:	e767      	b.n	8007be4 <_vfiprintf_r+0x94>
 8007d14:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d18:	460c      	mov	r4, r1
 8007d1a:	2001      	movs	r0, #1
 8007d1c:	e7a5      	b.n	8007c6a <_vfiprintf_r+0x11a>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	3401      	adds	r4, #1
 8007d22:	9305      	str	r3, [sp, #20]
 8007d24:	4619      	mov	r1, r3
 8007d26:	f04f 0c0a 	mov.w	ip, #10
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d30:	3a30      	subs	r2, #48	; 0x30
 8007d32:	2a09      	cmp	r2, #9
 8007d34:	d903      	bls.n	8007d3e <_vfiprintf_r+0x1ee>
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d0c5      	beq.n	8007cc6 <_vfiprintf_r+0x176>
 8007d3a:	9105      	str	r1, [sp, #20]
 8007d3c:	e7c3      	b.n	8007cc6 <_vfiprintf_r+0x176>
 8007d3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d42:	4604      	mov	r4, r0
 8007d44:	2301      	movs	r3, #1
 8007d46:	e7f0      	b.n	8007d2a <_vfiprintf_r+0x1da>
 8007d48:	ab03      	add	r3, sp, #12
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	462a      	mov	r2, r5
 8007d4e:	4b16      	ldr	r3, [pc, #88]	; (8007da8 <_vfiprintf_r+0x258>)
 8007d50:	a904      	add	r1, sp, #16
 8007d52:	4630      	mov	r0, r6
 8007d54:	f3af 8000 	nop.w
 8007d58:	4607      	mov	r7, r0
 8007d5a:	1c78      	adds	r0, r7, #1
 8007d5c:	d1d6      	bne.n	8007d0c <_vfiprintf_r+0x1bc>
 8007d5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d60:	07d9      	lsls	r1, r3, #31
 8007d62:	d405      	bmi.n	8007d70 <_vfiprintf_r+0x220>
 8007d64:	89ab      	ldrh	r3, [r5, #12]
 8007d66:	059a      	lsls	r2, r3, #22
 8007d68:	d402      	bmi.n	8007d70 <_vfiprintf_r+0x220>
 8007d6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d6c:	f7ff fc23 	bl	80075b6 <__retarget_lock_release_recursive>
 8007d70:	89ab      	ldrh	r3, [r5, #12]
 8007d72:	065b      	lsls	r3, r3, #25
 8007d74:	f53f af12 	bmi.w	8007b9c <_vfiprintf_r+0x4c>
 8007d78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d7a:	e711      	b.n	8007ba0 <_vfiprintf_r+0x50>
 8007d7c:	ab03      	add	r3, sp, #12
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	462a      	mov	r2, r5
 8007d82:	4b09      	ldr	r3, [pc, #36]	; (8007da8 <_vfiprintf_r+0x258>)
 8007d84:	a904      	add	r1, sp, #16
 8007d86:	4630      	mov	r0, r6
 8007d88:	f000 f880 	bl	8007e8c <_printf_i>
 8007d8c:	e7e4      	b.n	8007d58 <_vfiprintf_r+0x208>
 8007d8e:	bf00      	nop
 8007d90:	08008494 	.word	0x08008494
 8007d94:	080084b4 	.word	0x080084b4
 8007d98:	08008474 	.word	0x08008474
 8007d9c:	080084d4 	.word	0x080084d4
 8007da0:	080084de 	.word	0x080084de
 8007da4:	00000000 	.word	0x00000000
 8007da8:	08007b2b 	.word	0x08007b2b
 8007dac:	080084da 	.word	0x080084da

08007db0 <_printf_common>:
 8007db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007db4:	4616      	mov	r6, r2
 8007db6:	4699      	mov	r9, r3
 8007db8:	688a      	ldr	r2, [r1, #8]
 8007dba:	690b      	ldr	r3, [r1, #16]
 8007dbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	bfb8      	it	lt
 8007dc4:	4613      	movlt	r3, r2
 8007dc6:	6033      	str	r3, [r6, #0]
 8007dc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007dcc:	4607      	mov	r7, r0
 8007dce:	460c      	mov	r4, r1
 8007dd0:	b10a      	cbz	r2, 8007dd6 <_printf_common+0x26>
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	6033      	str	r3, [r6, #0]
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	0699      	lsls	r1, r3, #26
 8007dda:	bf42      	ittt	mi
 8007ddc:	6833      	ldrmi	r3, [r6, #0]
 8007dde:	3302      	addmi	r3, #2
 8007de0:	6033      	strmi	r3, [r6, #0]
 8007de2:	6825      	ldr	r5, [r4, #0]
 8007de4:	f015 0506 	ands.w	r5, r5, #6
 8007de8:	d106      	bne.n	8007df8 <_printf_common+0x48>
 8007dea:	f104 0a19 	add.w	sl, r4, #25
 8007dee:	68e3      	ldr	r3, [r4, #12]
 8007df0:	6832      	ldr	r2, [r6, #0]
 8007df2:	1a9b      	subs	r3, r3, r2
 8007df4:	42ab      	cmp	r3, r5
 8007df6:	dc26      	bgt.n	8007e46 <_printf_common+0x96>
 8007df8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007dfc:	1e13      	subs	r3, r2, #0
 8007dfe:	6822      	ldr	r2, [r4, #0]
 8007e00:	bf18      	it	ne
 8007e02:	2301      	movne	r3, #1
 8007e04:	0692      	lsls	r2, r2, #26
 8007e06:	d42b      	bmi.n	8007e60 <_printf_common+0xb0>
 8007e08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e0c:	4649      	mov	r1, r9
 8007e0e:	4638      	mov	r0, r7
 8007e10:	47c0      	blx	r8
 8007e12:	3001      	adds	r0, #1
 8007e14:	d01e      	beq.n	8007e54 <_printf_common+0xa4>
 8007e16:	6823      	ldr	r3, [r4, #0]
 8007e18:	68e5      	ldr	r5, [r4, #12]
 8007e1a:	6832      	ldr	r2, [r6, #0]
 8007e1c:	f003 0306 	and.w	r3, r3, #6
 8007e20:	2b04      	cmp	r3, #4
 8007e22:	bf08      	it	eq
 8007e24:	1aad      	subeq	r5, r5, r2
 8007e26:	68a3      	ldr	r3, [r4, #8]
 8007e28:	6922      	ldr	r2, [r4, #16]
 8007e2a:	bf0c      	ite	eq
 8007e2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e30:	2500      	movne	r5, #0
 8007e32:	4293      	cmp	r3, r2
 8007e34:	bfc4      	itt	gt
 8007e36:	1a9b      	subgt	r3, r3, r2
 8007e38:	18ed      	addgt	r5, r5, r3
 8007e3a:	2600      	movs	r6, #0
 8007e3c:	341a      	adds	r4, #26
 8007e3e:	42b5      	cmp	r5, r6
 8007e40:	d11a      	bne.n	8007e78 <_printf_common+0xc8>
 8007e42:	2000      	movs	r0, #0
 8007e44:	e008      	b.n	8007e58 <_printf_common+0xa8>
 8007e46:	2301      	movs	r3, #1
 8007e48:	4652      	mov	r2, sl
 8007e4a:	4649      	mov	r1, r9
 8007e4c:	4638      	mov	r0, r7
 8007e4e:	47c0      	blx	r8
 8007e50:	3001      	adds	r0, #1
 8007e52:	d103      	bne.n	8007e5c <_printf_common+0xac>
 8007e54:	f04f 30ff 	mov.w	r0, #4294967295
 8007e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5c:	3501      	adds	r5, #1
 8007e5e:	e7c6      	b.n	8007dee <_printf_common+0x3e>
 8007e60:	18e1      	adds	r1, r4, r3
 8007e62:	1c5a      	adds	r2, r3, #1
 8007e64:	2030      	movs	r0, #48	; 0x30
 8007e66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e6a:	4422      	add	r2, r4
 8007e6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e74:	3302      	adds	r3, #2
 8007e76:	e7c7      	b.n	8007e08 <_printf_common+0x58>
 8007e78:	2301      	movs	r3, #1
 8007e7a:	4622      	mov	r2, r4
 8007e7c:	4649      	mov	r1, r9
 8007e7e:	4638      	mov	r0, r7
 8007e80:	47c0      	blx	r8
 8007e82:	3001      	adds	r0, #1
 8007e84:	d0e6      	beq.n	8007e54 <_printf_common+0xa4>
 8007e86:	3601      	adds	r6, #1
 8007e88:	e7d9      	b.n	8007e3e <_printf_common+0x8e>
	...

08007e8c <_printf_i>:
 8007e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e90:	7e0f      	ldrb	r7, [r1, #24]
 8007e92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e94:	2f78      	cmp	r7, #120	; 0x78
 8007e96:	4691      	mov	r9, r2
 8007e98:	4680      	mov	r8, r0
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	469a      	mov	sl, r3
 8007e9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ea2:	d807      	bhi.n	8007eb4 <_printf_i+0x28>
 8007ea4:	2f62      	cmp	r7, #98	; 0x62
 8007ea6:	d80a      	bhi.n	8007ebe <_printf_i+0x32>
 8007ea8:	2f00      	cmp	r7, #0
 8007eaa:	f000 80d8 	beq.w	800805e <_printf_i+0x1d2>
 8007eae:	2f58      	cmp	r7, #88	; 0x58
 8007eb0:	f000 80a3 	beq.w	8007ffa <_printf_i+0x16e>
 8007eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007eb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ebc:	e03a      	b.n	8007f34 <_printf_i+0xa8>
 8007ebe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ec2:	2b15      	cmp	r3, #21
 8007ec4:	d8f6      	bhi.n	8007eb4 <_printf_i+0x28>
 8007ec6:	a101      	add	r1, pc, #4	; (adr r1, 8007ecc <_printf_i+0x40>)
 8007ec8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ecc:	08007f25 	.word	0x08007f25
 8007ed0:	08007f39 	.word	0x08007f39
 8007ed4:	08007eb5 	.word	0x08007eb5
 8007ed8:	08007eb5 	.word	0x08007eb5
 8007edc:	08007eb5 	.word	0x08007eb5
 8007ee0:	08007eb5 	.word	0x08007eb5
 8007ee4:	08007f39 	.word	0x08007f39
 8007ee8:	08007eb5 	.word	0x08007eb5
 8007eec:	08007eb5 	.word	0x08007eb5
 8007ef0:	08007eb5 	.word	0x08007eb5
 8007ef4:	08007eb5 	.word	0x08007eb5
 8007ef8:	08008045 	.word	0x08008045
 8007efc:	08007f69 	.word	0x08007f69
 8007f00:	08008027 	.word	0x08008027
 8007f04:	08007eb5 	.word	0x08007eb5
 8007f08:	08007eb5 	.word	0x08007eb5
 8007f0c:	08008067 	.word	0x08008067
 8007f10:	08007eb5 	.word	0x08007eb5
 8007f14:	08007f69 	.word	0x08007f69
 8007f18:	08007eb5 	.word	0x08007eb5
 8007f1c:	08007eb5 	.word	0x08007eb5
 8007f20:	0800802f 	.word	0x0800802f
 8007f24:	682b      	ldr	r3, [r5, #0]
 8007f26:	1d1a      	adds	r2, r3, #4
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	602a      	str	r2, [r5, #0]
 8007f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f34:	2301      	movs	r3, #1
 8007f36:	e0a3      	b.n	8008080 <_printf_i+0x1f4>
 8007f38:	6820      	ldr	r0, [r4, #0]
 8007f3a:	6829      	ldr	r1, [r5, #0]
 8007f3c:	0606      	lsls	r6, r0, #24
 8007f3e:	f101 0304 	add.w	r3, r1, #4
 8007f42:	d50a      	bpl.n	8007f5a <_printf_i+0xce>
 8007f44:	680e      	ldr	r6, [r1, #0]
 8007f46:	602b      	str	r3, [r5, #0]
 8007f48:	2e00      	cmp	r6, #0
 8007f4a:	da03      	bge.n	8007f54 <_printf_i+0xc8>
 8007f4c:	232d      	movs	r3, #45	; 0x2d
 8007f4e:	4276      	negs	r6, r6
 8007f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f54:	485e      	ldr	r0, [pc, #376]	; (80080d0 <_printf_i+0x244>)
 8007f56:	230a      	movs	r3, #10
 8007f58:	e019      	b.n	8007f8e <_printf_i+0x102>
 8007f5a:	680e      	ldr	r6, [r1, #0]
 8007f5c:	602b      	str	r3, [r5, #0]
 8007f5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f62:	bf18      	it	ne
 8007f64:	b236      	sxthne	r6, r6
 8007f66:	e7ef      	b.n	8007f48 <_printf_i+0xbc>
 8007f68:	682b      	ldr	r3, [r5, #0]
 8007f6a:	6820      	ldr	r0, [r4, #0]
 8007f6c:	1d19      	adds	r1, r3, #4
 8007f6e:	6029      	str	r1, [r5, #0]
 8007f70:	0601      	lsls	r1, r0, #24
 8007f72:	d501      	bpl.n	8007f78 <_printf_i+0xec>
 8007f74:	681e      	ldr	r6, [r3, #0]
 8007f76:	e002      	b.n	8007f7e <_printf_i+0xf2>
 8007f78:	0646      	lsls	r6, r0, #25
 8007f7a:	d5fb      	bpl.n	8007f74 <_printf_i+0xe8>
 8007f7c:	881e      	ldrh	r6, [r3, #0]
 8007f7e:	4854      	ldr	r0, [pc, #336]	; (80080d0 <_printf_i+0x244>)
 8007f80:	2f6f      	cmp	r7, #111	; 0x6f
 8007f82:	bf0c      	ite	eq
 8007f84:	2308      	moveq	r3, #8
 8007f86:	230a      	movne	r3, #10
 8007f88:	2100      	movs	r1, #0
 8007f8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f8e:	6865      	ldr	r5, [r4, #4]
 8007f90:	60a5      	str	r5, [r4, #8]
 8007f92:	2d00      	cmp	r5, #0
 8007f94:	bfa2      	ittt	ge
 8007f96:	6821      	ldrge	r1, [r4, #0]
 8007f98:	f021 0104 	bicge.w	r1, r1, #4
 8007f9c:	6021      	strge	r1, [r4, #0]
 8007f9e:	b90e      	cbnz	r6, 8007fa4 <_printf_i+0x118>
 8007fa0:	2d00      	cmp	r5, #0
 8007fa2:	d04d      	beq.n	8008040 <_printf_i+0x1b4>
 8007fa4:	4615      	mov	r5, r2
 8007fa6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007faa:	fb03 6711 	mls	r7, r3, r1, r6
 8007fae:	5dc7      	ldrb	r7, [r0, r7]
 8007fb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007fb4:	4637      	mov	r7, r6
 8007fb6:	42bb      	cmp	r3, r7
 8007fb8:	460e      	mov	r6, r1
 8007fba:	d9f4      	bls.n	8007fa6 <_printf_i+0x11a>
 8007fbc:	2b08      	cmp	r3, #8
 8007fbe:	d10b      	bne.n	8007fd8 <_printf_i+0x14c>
 8007fc0:	6823      	ldr	r3, [r4, #0]
 8007fc2:	07de      	lsls	r6, r3, #31
 8007fc4:	d508      	bpl.n	8007fd8 <_printf_i+0x14c>
 8007fc6:	6923      	ldr	r3, [r4, #16]
 8007fc8:	6861      	ldr	r1, [r4, #4]
 8007fca:	4299      	cmp	r1, r3
 8007fcc:	bfde      	ittt	le
 8007fce:	2330      	movle	r3, #48	; 0x30
 8007fd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007fd8:	1b52      	subs	r2, r2, r5
 8007fda:	6122      	str	r2, [r4, #16]
 8007fdc:	f8cd a000 	str.w	sl, [sp]
 8007fe0:	464b      	mov	r3, r9
 8007fe2:	aa03      	add	r2, sp, #12
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	4640      	mov	r0, r8
 8007fe8:	f7ff fee2 	bl	8007db0 <_printf_common>
 8007fec:	3001      	adds	r0, #1
 8007fee:	d14c      	bne.n	800808a <_printf_i+0x1fe>
 8007ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff4:	b004      	add	sp, #16
 8007ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ffa:	4835      	ldr	r0, [pc, #212]	; (80080d0 <_printf_i+0x244>)
 8007ffc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008000:	6829      	ldr	r1, [r5, #0]
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	f851 6b04 	ldr.w	r6, [r1], #4
 8008008:	6029      	str	r1, [r5, #0]
 800800a:	061d      	lsls	r5, r3, #24
 800800c:	d514      	bpl.n	8008038 <_printf_i+0x1ac>
 800800e:	07df      	lsls	r7, r3, #31
 8008010:	bf44      	itt	mi
 8008012:	f043 0320 	orrmi.w	r3, r3, #32
 8008016:	6023      	strmi	r3, [r4, #0]
 8008018:	b91e      	cbnz	r6, 8008022 <_printf_i+0x196>
 800801a:	6823      	ldr	r3, [r4, #0]
 800801c:	f023 0320 	bic.w	r3, r3, #32
 8008020:	6023      	str	r3, [r4, #0]
 8008022:	2310      	movs	r3, #16
 8008024:	e7b0      	b.n	8007f88 <_printf_i+0xfc>
 8008026:	6823      	ldr	r3, [r4, #0]
 8008028:	f043 0320 	orr.w	r3, r3, #32
 800802c:	6023      	str	r3, [r4, #0]
 800802e:	2378      	movs	r3, #120	; 0x78
 8008030:	4828      	ldr	r0, [pc, #160]	; (80080d4 <_printf_i+0x248>)
 8008032:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008036:	e7e3      	b.n	8008000 <_printf_i+0x174>
 8008038:	0659      	lsls	r1, r3, #25
 800803a:	bf48      	it	mi
 800803c:	b2b6      	uxthmi	r6, r6
 800803e:	e7e6      	b.n	800800e <_printf_i+0x182>
 8008040:	4615      	mov	r5, r2
 8008042:	e7bb      	b.n	8007fbc <_printf_i+0x130>
 8008044:	682b      	ldr	r3, [r5, #0]
 8008046:	6826      	ldr	r6, [r4, #0]
 8008048:	6961      	ldr	r1, [r4, #20]
 800804a:	1d18      	adds	r0, r3, #4
 800804c:	6028      	str	r0, [r5, #0]
 800804e:	0635      	lsls	r5, r6, #24
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	d501      	bpl.n	8008058 <_printf_i+0x1cc>
 8008054:	6019      	str	r1, [r3, #0]
 8008056:	e002      	b.n	800805e <_printf_i+0x1d2>
 8008058:	0670      	lsls	r0, r6, #25
 800805a:	d5fb      	bpl.n	8008054 <_printf_i+0x1c8>
 800805c:	8019      	strh	r1, [r3, #0]
 800805e:	2300      	movs	r3, #0
 8008060:	6123      	str	r3, [r4, #16]
 8008062:	4615      	mov	r5, r2
 8008064:	e7ba      	b.n	8007fdc <_printf_i+0x150>
 8008066:	682b      	ldr	r3, [r5, #0]
 8008068:	1d1a      	adds	r2, r3, #4
 800806a:	602a      	str	r2, [r5, #0]
 800806c:	681d      	ldr	r5, [r3, #0]
 800806e:	6862      	ldr	r2, [r4, #4]
 8008070:	2100      	movs	r1, #0
 8008072:	4628      	mov	r0, r5
 8008074:	f7f8 f8c4 	bl	8000200 <memchr>
 8008078:	b108      	cbz	r0, 800807e <_printf_i+0x1f2>
 800807a:	1b40      	subs	r0, r0, r5
 800807c:	6060      	str	r0, [r4, #4]
 800807e:	6863      	ldr	r3, [r4, #4]
 8008080:	6123      	str	r3, [r4, #16]
 8008082:	2300      	movs	r3, #0
 8008084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008088:	e7a8      	b.n	8007fdc <_printf_i+0x150>
 800808a:	6923      	ldr	r3, [r4, #16]
 800808c:	462a      	mov	r2, r5
 800808e:	4649      	mov	r1, r9
 8008090:	4640      	mov	r0, r8
 8008092:	47d0      	blx	sl
 8008094:	3001      	adds	r0, #1
 8008096:	d0ab      	beq.n	8007ff0 <_printf_i+0x164>
 8008098:	6823      	ldr	r3, [r4, #0]
 800809a:	079b      	lsls	r3, r3, #30
 800809c:	d413      	bmi.n	80080c6 <_printf_i+0x23a>
 800809e:	68e0      	ldr	r0, [r4, #12]
 80080a0:	9b03      	ldr	r3, [sp, #12]
 80080a2:	4298      	cmp	r0, r3
 80080a4:	bfb8      	it	lt
 80080a6:	4618      	movlt	r0, r3
 80080a8:	e7a4      	b.n	8007ff4 <_printf_i+0x168>
 80080aa:	2301      	movs	r3, #1
 80080ac:	4632      	mov	r2, r6
 80080ae:	4649      	mov	r1, r9
 80080b0:	4640      	mov	r0, r8
 80080b2:	47d0      	blx	sl
 80080b4:	3001      	adds	r0, #1
 80080b6:	d09b      	beq.n	8007ff0 <_printf_i+0x164>
 80080b8:	3501      	adds	r5, #1
 80080ba:	68e3      	ldr	r3, [r4, #12]
 80080bc:	9903      	ldr	r1, [sp, #12]
 80080be:	1a5b      	subs	r3, r3, r1
 80080c0:	42ab      	cmp	r3, r5
 80080c2:	dcf2      	bgt.n	80080aa <_printf_i+0x21e>
 80080c4:	e7eb      	b.n	800809e <_printf_i+0x212>
 80080c6:	2500      	movs	r5, #0
 80080c8:	f104 0619 	add.w	r6, r4, #25
 80080cc:	e7f5      	b.n	80080ba <_printf_i+0x22e>
 80080ce:	bf00      	nop
 80080d0:	080084e5 	.word	0x080084e5
 80080d4:	080084f6 	.word	0x080084f6

080080d8 <_sbrk_r>:
 80080d8:	b538      	push	{r3, r4, r5, lr}
 80080da:	4d06      	ldr	r5, [pc, #24]	; (80080f4 <_sbrk_r+0x1c>)
 80080dc:	2300      	movs	r3, #0
 80080de:	4604      	mov	r4, r0
 80080e0:	4608      	mov	r0, r1
 80080e2:	602b      	str	r3, [r5, #0]
 80080e4:	f7f9 fd34 	bl	8001b50 <_sbrk>
 80080e8:	1c43      	adds	r3, r0, #1
 80080ea:	d102      	bne.n	80080f2 <_sbrk_r+0x1a>
 80080ec:	682b      	ldr	r3, [r5, #0]
 80080ee:	b103      	cbz	r3, 80080f2 <_sbrk_r+0x1a>
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	bd38      	pop	{r3, r4, r5, pc}
 80080f4:	2000032c 	.word	0x2000032c

080080f8 <__sread>:
 80080f8:	b510      	push	{r4, lr}
 80080fa:	460c      	mov	r4, r1
 80080fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008100:	f000 f8f8 	bl	80082f4 <_read_r>
 8008104:	2800      	cmp	r0, #0
 8008106:	bfab      	itete	ge
 8008108:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800810a:	89a3      	ldrhlt	r3, [r4, #12]
 800810c:	181b      	addge	r3, r3, r0
 800810e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008112:	bfac      	ite	ge
 8008114:	6563      	strge	r3, [r4, #84]	; 0x54
 8008116:	81a3      	strhlt	r3, [r4, #12]
 8008118:	bd10      	pop	{r4, pc}

0800811a <__swrite>:
 800811a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800811e:	461f      	mov	r7, r3
 8008120:	898b      	ldrh	r3, [r1, #12]
 8008122:	05db      	lsls	r3, r3, #23
 8008124:	4605      	mov	r5, r0
 8008126:	460c      	mov	r4, r1
 8008128:	4616      	mov	r6, r2
 800812a:	d505      	bpl.n	8008138 <__swrite+0x1e>
 800812c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008130:	2302      	movs	r3, #2
 8008132:	2200      	movs	r2, #0
 8008134:	f000 f868 	bl	8008208 <_lseek_r>
 8008138:	89a3      	ldrh	r3, [r4, #12]
 800813a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800813e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008142:	81a3      	strh	r3, [r4, #12]
 8008144:	4632      	mov	r2, r6
 8008146:	463b      	mov	r3, r7
 8008148:	4628      	mov	r0, r5
 800814a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800814e:	f000 b817 	b.w	8008180 <_write_r>

08008152 <__sseek>:
 8008152:	b510      	push	{r4, lr}
 8008154:	460c      	mov	r4, r1
 8008156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800815a:	f000 f855 	bl	8008208 <_lseek_r>
 800815e:	1c43      	adds	r3, r0, #1
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	bf15      	itete	ne
 8008164:	6560      	strne	r0, [r4, #84]	; 0x54
 8008166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800816a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800816e:	81a3      	strheq	r3, [r4, #12]
 8008170:	bf18      	it	ne
 8008172:	81a3      	strhne	r3, [r4, #12]
 8008174:	bd10      	pop	{r4, pc}

08008176 <__sclose>:
 8008176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800817a:	f000 b813 	b.w	80081a4 <_close_r>
	...

08008180 <_write_r>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	4d07      	ldr	r5, [pc, #28]	; (80081a0 <_write_r+0x20>)
 8008184:	4604      	mov	r4, r0
 8008186:	4608      	mov	r0, r1
 8008188:	4611      	mov	r1, r2
 800818a:	2200      	movs	r2, #0
 800818c:	602a      	str	r2, [r5, #0]
 800818e:	461a      	mov	r2, r3
 8008190:	f7f9 fc8d 	bl	8001aae <_write>
 8008194:	1c43      	adds	r3, r0, #1
 8008196:	d102      	bne.n	800819e <_write_r+0x1e>
 8008198:	682b      	ldr	r3, [r5, #0]
 800819a:	b103      	cbz	r3, 800819e <_write_r+0x1e>
 800819c:	6023      	str	r3, [r4, #0]
 800819e:	bd38      	pop	{r3, r4, r5, pc}
 80081a0:	2000032c 	.word	0x2000032c

080081a4 <_close_r>:
 80081a4:	b538      	push	{r3, r4, r5, lr}
 80081a6:	4d06      	ldr	r5, [pc, #24]	; (80081c0 <_close_r+0x1c>)
 80081a8:	2300      	movs	r3, #0
 80081aa:	4604      	mov	r4, r0
 80081ac:	4608      	mov	r0, r1
 80081ae:	602b      	str	r3, [r5, #0]
 80081b0:	f7f9 fc99 	bl	8001ae6 <_close>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d102      	bne.n	80081be <_close_r+0x1a>
 80081b8:	682b      	ldr	r3, [r5, #0]
 80081ba:	b103      	cbz	r3, 80081be <_close_r+0x1a>
 80081bc:	6023      	str	r3, [r4, #0]
 80081be:	bd38      	pop	{r3, r4, r5, pc}
 80081c0:	2000032c 	.word	0x2000032c

080081c4 <_fstat_r>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	4d07      	ldr	r5, [pc, #28]	; (80081e4 <_fstat_r+0x20>)
 80081c8:	2300      	movs	r3, #0
 80081ca:	4604      	mov	r4, r0
 80081cc:	4608      	mov	r0, r1
 80081ce:	4611      	mov	r1, r2
 80081d0:	602b      	str	r3, [r5, #0]
 80081d2:	f7f9 fc94 	bl	8001afe <_fstat>
 80081d6:	1c43      	adds	r3, r0, #1
 80081d8:	d102      	bne.n	80081e0 <_fstat_r+0x1c>
 80081da:	682b      	ldr	r3, [r5, #0]
 80081dc:	b103      	cbz	r3, 80081e0 <_fstat_r+0x1c>
 80081de:	6023      	str	r3, [r4, #0]
 80081e0:	bd38      	pop	{r3, r4, r5, pc}
 80081e2:	bf00      	nop
 80081e4:	2000032c 	.word	0x2000032c

080081e8 <_isatty_r>:
 80081e8:	b538      	push	{r3, r4, r5, lr}
 80081ea:	4d06      	ldr	r5, [pc, #24]	; (8008204 <_isatty_r+0x1c>)
 80081ec:	2300      	movs	r3, #0
 80081ee:	4604      	mov	r4, r0
 80081f0:	4608      	mov	r0, r1
 80081f2:	602b      	str	r3, [r5, #0]
 80081f4:	f7f9 fc93 	bl	8001b1e <_isatty>
 80081f8:	1c43      	adds	r3, r0, #1
 80081fa:	d102      	bne.n	8008202 <_isatty_r+0x1a>
 80081fc:	682b      	ldr	r3, [r5, #0]
 80081fe:	b103      	cbz	r3, 8008202 <_isatty_r+0x1a>
 8008200:	6023      	str	r3, [r4, #0]
 8008202:	bd38      	pop	{r3, r4, r5, pc}
 8008204:	2000032c 	.word	0x2000032c

08008208 <_lseek_r>:
 8008208:	b538      	push	{r3, r4, r5, lr}
 800820a:	4d07      	ldr	r5, [pc, #28]	; (8008228 <_lseek_r+0x20>)
 800820c:	4604      	mov	r4, r0
 800820e:	4608      	mov	r0, r1
 8008210:	4611      	mov	r1, r2
 8008212:	2200      	movs	r2, #0
 8008214:	602a      	str	r2, [r5, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	f7f9 fc8c 	bl	8001b34 <_lseek>
 800821c:	1c43      	adds	r3, r0, #1
 800821e:	d102      	bne.n	8008226 <_lseek_r+0x1e>
 8008220:	682b      	ldr	r3, [r5, #0]
 8008222:	b103      	cbz	r3, 8008226 <_lseek_r+0x1e>
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	bd38      	pop	{r3, r4, r5, pc}
 8008228:	2000032c 	.word	0x2000032c

0800822c <memcpy>:
 800822c:	440a      	add	r2, r1
 800822e:	4291      	cmp	r1, r2
 8008230:	f100 33ff 	add.w	r3, r0, #4294967295
 8008234:	d100      	bne.n	8008238 <memcpy+0xc>
 8008236:	4770      	bx	lr
 8008238:	b510      	push	{r4, lr}
 800823a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800823e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008242:	4291      	cmp	r1, r2
 8008244:	d1f9      	bne.n	800823a <memcpy+0xe>
 8008246:	bd10      	pop	{r4, pc}

08008248 <memmove>:
 8008248:	4288      	cmp	r0, r1
 800824a:	b510      	push	{r4, lr}
 800824c:	eb01 0402 	add.w	r4, r1, r2
 8008250:	d902      	bls.n	8008258 <memmove+0x10>
 8008252:	4284      	cmp	r4, r0
 8008254:	4623      	mov	r3, r4
 8008256:	d807      	bhi.n	8008268 <memmove+0x20>
 8008258:	1e43      	subs	r3, r0, #1
 800825a:	42a1      	cmp	r1, r4
 800825c:	d008      	beq.n	8008270 <memmove+0x28>
 800825e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008262:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008266:	e7f8      	b.n	800825a <memmove+0x12>
 8008268:	4402      	add	r2, r0
 800826a:	4601      	mov	r1, r0
 800826c:	428a      	cmp	r2, r1
 800826e:	d100      	bne.n	8008272 <memmove+0x2a>
 8008270:	bd10      	pop	{r4, pc}
 8008272:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008276:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800827a:	e7f7      	b.n	800826c <memmove+0x24>

0800827c <__malloc_lock>:
 800827c:	4801      	ldr	r0, [pc, #4]	; (8008284 <__malloc_lock+0x8>)
 800827e:	f7ff b999 	b.w	80075b4 <__retarget_lock_acquire_recursive>
 8008282:	bf00      	nop
 8008284:	20000320 	.word	0x20000320

08008288 <__malloc_unlock>:
 8008288:	4801      	ldr	r0, [pc, #4]	; (8008290 <__malloc_unlock+0x8>)
 800828a:	f7ff b994 	b.w	80075b6 <__retarget_lock_release_recursive>
 800828e:	bf00      	nop
 8008290:	20000320 	.word	0x20000320

08008294 <_realloc_r>:
 8008294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008298:	4680      	mov	r8, r0
 800829a:	4614      	mov	r4, r2
 800829c:	460e      	mov	r6, r1
 800829e:	b921      	cbnz	r1, 80082aa <_realloc_r+0x16>
 80082a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082a4:	4611      	mov	r1, r2
 80082a6:	f7ff ba59 	b.w	800775c <_malloc_r>
 80082aa:	b92a      	cbnz	r2, 80082b8 <_realloc_r+0x24>
 80082ac:	f7ff f9ea 	bl	8007684 <_free_r>
 80082b0:	4625      	mov	r5, r4
 80082b2:	4628      	mov	r0, r5
 80082b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082b8:	f000 f82e 	bl	8008318 <_malloc_usable_size_r>
 80082bc:	4284      	cmp	r4, r0
 80082be:	4607      	mov	r7, r0
 80082c0:	d802      	bhi.n	80082c8 <_realloc_r+0x34>
 80082c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80082c6:	d812      	bhi.n	80082ee <_realloc_r+0x5a>
 80082c8:	4621      	mov	r1, r4
 80082ca:	4640      	mov	r0, r8
 80082cc:	f7ff fa46 	bl	800775c <_malloc_r>
 80082d0:	4605      	mov	r5, r0
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d0ed      	beq.n	80082b2 <_realloc_r+0x1e>
 80082d6:	42bc      	cmp	r4, r7
 80082d8:	4622      	mov	r2, r4
 80082da:	4631      	mov	r1, r6
 80082dc:	bf28      	it	cs
 80082de:	463a      	movcs	r2, r7
 80082e0:	f7ff ffa4 	bl	800822c <memcpy>
 80082e4:	4631      	mov	r1, r6
 80082e6:	4640      	mov	r0, r8
 80082e8:	f7ff f9cc 	bl	8007684 <_free_r>
 80082ec:	e7e1      	b.n	80082b2 <_realloc_r+0x1e>
 80082ee:	4635      	mov	r5, r6
 80082f0:	e7df      	b.n	80082b2 <_realloc_r+0x1e>
	...

080082f4 <_read_r>:
 80082f4:	b538      	push	{r3, r4, r5, lr}
 80082f6:	4d07      	ldr	r5, [pc, #28]	; (8008314 <_read_r+0x20>)
 80082f8:	4604      	mov	r4, r0
 80082fa:	4608      	mov	r0, r1
 80082fc:	4611      	mov	r1, r2
 80082fe:	2200      	movs	r2, #0
 8008300:	602a      	str	r2, [r5, #0]
 8008302:	461a      	mov	r2, r3
 8008304:	f7f9 fbb6 	bl	8001a74 <_read>
 8008308:	1c43      	adds	r3, r0, #1
 800830a:	d102      	bne.n	8008312 <_read_r+0x1e>
 800830c:	682b      	ldr	r3, [r5, #0]
 800830e:	b103      	cbz	r3, 8008312 <_read_r+0x1e>
 8008310:	6023      	str	r3, [r4, #0]
 8008312:	bd38      	pop	{r3, r4, r5, pc}
 8008314:	2000032c 	.word	0x2000032c

08008318 <_malloc_usable_size_r>:
 8008318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800831c:	1f18      	subs	r0, r3, #4
 800831e:	2b00      	cmp	r3, #0
 8008320:	bfbc      	itt	lt
 8008322:	580b      	ldrlt	r3, [r1, r0]
 8008324:	18c0      	addlt	r0, r0, r3
 8008326:	4770      	bx	lr

08008328 <_init>:
 8008328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832a:	bf00      	nop
 800832c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800832e:	bc08      	pop	{r3}
 8008330:	469e      	mov	lr, r3
 8008332:	4770      	bx	lr

08008334 <_fini>:
 8008334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008336:	bf00      	nop
 8008338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833a:	bc08      	pop	{r3}
 800833c:	469e      	mov	lr, r3
 800833e:	4770      	bx	lr
