
22_06_10_Userbutton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e8c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800603c  0800603c  0001603c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800615c  0800615c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800615c  0800615c  0001615c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006164  08006164  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006164  08006164  00016164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006168  08006168  00016168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800616c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000016c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001dc  200001dc  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001328f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ce2  00000000  00000000  0003332f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001028  00000000  00000000  00036018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ee0  00000000  00000000  00037040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027287  00000000  00000000  00037f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014a25  00000000  00000000  0005f1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee04b  00000000  00000000  00073bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00161c17  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bcc  00000000  00000000  00161c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006024 	.word	0x08006024

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08006024 	.word	0x08006024

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	463b      	mov	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b6:	4b21      	ldr	r3, [pc, #132]	; (800063c <MX_ADC1_Init+0x98>)
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_ADC1_Init+0x98>)
 80005be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <MX_ADC1_Init+0x98>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_ADC1_Init+0x98>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_ADC1_Init+0x98>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_ADC1_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <MX_ADC1_Init+0x98>)
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <MX_ADC1_Init+0xa0>)
 80005e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_ADC1_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_ADC1_Init+0x98>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_ADC1_Init+0x98>)
 8000600:	2201      	movs	r2, #1
 8000602:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <MX_ADC1_Init+0x98>)
 8000606:	f000 fe13 	bl	8001230 <HAL_ADC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000610:	f000 fadc 	bl	8000bcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000614:	2303      	movs	r3, #3
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_ADC1_Init+0x98>)
 8000626:	f000 ff27 	bl	8001478 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000630:	f000 facc 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	2000008c 	.word	0x2000008c
 8000640:	40012000 	.word	0x40012000
 8000644:	0f000001 	.word	0x0f000001

08000648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <HAL_ADC_MspInit+0x7c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d127      	bne.n	80006ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6453      	str	r3, [r2, #68]	; 0x44
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006a2:	2308      	movs	r3, #8
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <HAL_ADC_MspInit+0x84>)
 80006b6:	f001 fab1 	bl	8001c1c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000

080006d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <MX_GPIO_Init+0xd4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a2d      	ldr	r2, [pc, #180]	; (80007a4 <MX_GPIO_Init+0xd4>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <MX_GPIO_Init+0xd4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a26      	ldr	r2, [pc, #152]	; (80007a4 <MX_GPIO_Init+0xd4>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_GPIO_Init+0xd4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800075c:	4812      	ldr	r0, [pc, #72]	; (80007a8 <MX_GPIO_Init+0xd8>)
 800075e:	f001 fc21 	bl	8001fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000768:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800076c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_GPIO_Init+0xdc>)
 800077a:	f001 fa4f 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 800077e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_GPIO_Init+0xd8>)
 8000798:	f001 fa40 	bl	8001c1c <HAL_GPIO_Init>

}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020400 	.word	0x40020400
 80007ac:	40020800 	.word	0x40020800

080007b0 <__io_putchar>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &ch, 1, 100);
 80007b8:	1d39      	adds	r1, r7, #4
 80007ba:	2364      	movs	r3, #100	; 0x64
 80007bc:	2201      	movs	r2, #1
 80007be:	4804      	ldr	r0, [pc, #16]	; (80007d0 <__io_putchar+0x20>)
 80007c0:	f003 fa57 	bl	8003c72 <HAL_UART_Transmit>
	return ch;
 80007c4:	687b      	ldr	r3, [r7, #4]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000184 	.word	0x20000184

080007d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d6:	b0a3      	sub	sp, #140	; 0x8c
 80007d8:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	char temp[100];
	char ampm[2][3] = {"AM", "PM"};
 80007da:	4a44      	ldr	r2, [pc, #272]	; (80008ec <main+0x118>)
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007e2:	6018      	str	r0, [r3, #0]
 80007e4:	3304      	adds	r3, #4
 80007e6:	8019      	strh	r1, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e8:	f000 fcb0 	bl	800114c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ec:	f000 f890 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f0:	f7ff ff6e 	bl	80006d0 <MX_GPIO_Init>
  MX_RTC_Init();
 80007f4:	f000 f9f0 	bl	8000bd8 <MX_RTC_Init>
  MX_USART3_UART_Init();
 80007f8:	f000 fc0c 	bl	8001014 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80007fc:	f000 fb94 	bl	8000f28 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000800:	f7ff fed0 	bl	80005a4 <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000804:	f000 f8f6 	bl	80009f4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Init(&htim3);
 8000808:	4839      	ldr	r0, [pc, #228]	; (80008f0 <main+0x11c>)
 800080a:	f002 fd63 	bl	80032d4 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim3);
 800080e:	4838      	ldr	r0, [pc, #224]	; (80008f0 <main+0x11c>)
 8000810:	f002 fdb0 	bl	8003374 <HAL_TIM_Base_Start_IT>


	sTime.Hours = 12;
 8000814:	4b37      	ldr	r3, [pc, #220]	; (80008f4 <main+0x120>)
 8000816:	220c      	movs	r2, #12
 8000818:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 00;
 800081a:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <main+0x120>)
 800081c:	2200      	movs	r2, #0
 800081e:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 00;
 8000820:	4b34      	ldr	r3, [pc, #208]	; (80008f4 <main+0x120>)
 8000822:	2200      	movs	r2, #0
 8000824:	709a      	strb	r2, [r3, #2]
	sTime.TimeFormat = 0x00U;
 8000826:	4b33      	ldr	r3, [pc, #204]	; (80008f4 <main+0x120>)
 8000828:	2200      	movs	r2, #0
 800082a:	70da      	strb	r2, [r3, #3]

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800082c:	2200      	movs	r2, #0
 800082e:	4931      	ldr	r1, [pc, #196]	; (80008f4 <main+0x120>)
 8000830:	4831      	ldr	r0, [pc, #196]	; (80008f8 <main+0x124>)
 8000832:	f002 fac7 	bl	8002dc4 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000836:	2200      	movs	r2, #0
 8000838:	4930      	ldr	r1, [pc, #192]	; (80008fc <main+0x128>)
 800083a:	482f      	ldr	r0, [pc, #188]	; (80008f8 <main+0x124>)
 800083c:	f002 fbba 	bl	8002fb4 <HAL_RTC_SetDate>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//시계
		if(flag == 0)
 8000840:	4b2f      	ldr	r3, [pc, #188]	; (8000900 <main+0x12c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d13d      	bne.n	80008c4 <main+0xf0>
		{
			//printf("flag0에 들어왔습니다.");
			  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // 날짜 정보 얻어오기
 8000848:	2200      	movs	r2, #0
 800084a:	492c      	ldr	r1, [pc, #176]	; (80008fc <main+0x128>)
 800084c:	482a      	ldr	r0, [pc, #168]	; (80008f8 <main+0x124>)
 800084e:	f002 fc35 	bl	80030bc <HAL_RTC_GetDate>
			  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // 시간 정보 얻어오기
 8000852:	2200      	movs	r2, #0
 8000854:	4927      	ldr	r1, [pc, #156]	; (80008f4 <main+0x120>)
 8000856:	4828      	ldr	r0, [pc, #160]	; (80008f8 <main+0x124>)
 8000858:	f002 fb4e 	bl	8002ef8 <HAL_RTC_GetTime>
			  sprintf(temp,"\r\n20%02d-%02d-%02d %s %02d:%02d:%02d", sDate.Year, sDate.Month,
 800085c:	4b27      	ldr	r3, [pc, #156]	; (80008fc <main+0x128>)
 800085e:	78db      	ldrb	r3, [r3, #3]
 8000860:	461e      	mov	r6, r3
 8000862:	4b26      	ldr	r3, [pc, #152]	; (80008fc <main+0x128>)
 8000864:	785b      	ldrb	r3, [r3, #1]
 8000866:	469c      	mov	ip, r3
			 	         sDate.Date, ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes,
 8000868:	4b24      	ldr	r3, [pc, #144]	; (80008fc <main+0x128>)
 800086a:	789b      	ldrb	r3, [r3, #2]
			  sprintf(temp,"\r\n20%02d-%02d-%02d %s %02d:%02d:%02d", sDate.Year, sDate.Month,
 800086c:	461c      	mov	r4, r3
			 	         sDate.Date, ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes,
 800086e:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <main+0x120>)
 8000870:	78db      	ldrb	r3, [r3, #3]
 8000872:	4619      	mov	r1, r3
 8000874:	1d3a      	adds	r2, r7, #4
 8000876:	460b      	mov	r3, r1
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	440b      	add	r3, r1
 800087c:	4413      	add	r3, r2
 800087e:	4a1d      	ldr	r2, [pc, #116]	; (80008f4 <main+0x120>)
 8000880:	7812      	ldrb	r2, [r2, #0]
			  sprintf(temp,"\r\n20%02d-%02d-%02d %s %02d:%02d:%02d", sDate.Year, sDate.Month,
 8000882:	4611      	mov	r1, r2
			 	         sDate.Date, ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes,
 8000884:	4a1b      	ldr	r2, [pc, #108]	; (80008f4 <main+0x120>)
 8000886:	7852      	ldrb	r2, [r2, #1]
			  sprintf(temp,"\r\n20%02d-%02d-%02d %s %02d:%02d:%02d", sDate.Year, sDate.Month,
 8000888:	4615      	mov	r5, r2
			 	         sTime.Seconds);
 800088a:	4a1a      	ldr	r2, [pc, #104]	; (80008f4 <main+0x120>)
 800088c:	7892      	ldrb	r2, [r2, #2]
			  sprintf(temp,"\r\n20%02d-%02d-%02d %s %02d:%02d:%02d", sDate.Year, sDate.Month,
 800088e:	f107 000c 	add.w	r0, r7, #12
 8000892:	9204      	str	r2, [sp, #16]
 8000894:	9503      	str	r5, [sp, #12]
 8000896:	9102      	str	r1, [sp, #8]
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	9400      	str	r4, [sp, #0]
 800089c:	4663      	mov	r3, ip
 800089e:	4632      	mov	r2, r6
 80008a0:	4918      	ldr	r1, [pc, #96]	; (8000904 <main+0x130>)
 80008a2:	f004 fa6d 	bl	8004d80 <siprintf>
			  HAL_UART_Transmit(&huart3, (uint8_t*)temp, strlen(temp), 1000);
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fca0 	bl	80001f0 <strlen>
 80008b0:	4603      	mov	r3, r0
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	f107 010c 	add.w	r1, r7, #12
 80008b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008bc:	4812      	ldr	r0, [pc, #72]	; (8000908 <main+0x134>)
 80008be:	f003 f9d8 	bl	8003c72 <HAL_UART_Transmit>
 80008c2:	e7bd      	b.n	8000840 <main+0x6c>
		}
		//시간 수정
		else if(flag == 1)
 80008c4:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <main+0x12c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d1b9      	bne.n	8000840 <main+0x6c>
		{
			//printf("flag1에 들어왔습니다.");
			if (ADC_value <= UP_KEY_MAX) {
				//printf("UP\r\n");
			}
			if (ADC_value >= DOWN_KEY_MIN && ADC_value <= DOWN_KEY_MAX) {
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <main+0x138>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f240 323d 	movw	r2, #829	; 0x33d
 80008d4:	4293      	cmp	r3, r2
				//printf("DOWN\r\n");
			}
			if (ADC_value >= LEFT_KEY_MIN && ADC_value <= LEFT_KEY_MAX) {
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <main+0x138>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f240 7275 	movw	r2, #1909	; 0x775
 80008de:	4293      	cmp	r3, r2
				//printf("LEFT\r\n");
			}
			if (ADC_value >= RIGHT_KEY_MIN && ADC_value <= RIGHT_KEY_MAX) {
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <main+0x138>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f640 3267 	movw	r2, #2919	; 0xb67
 80008e8:	4293      	cmp	r3, r2
		if(flag == 0)
 80008ea:	e7a9      	b.n	8000840 <main+0x6c>
 80008ec:	08006064 	.word	0x08006064
 80008f0:	2000013c 	.word	0x2000013c
 80008f4:	20000100 	.word	0x20000100
 80008f8:	20000118 	.word	0x20000118
 80008fc:	20000114 	.word	0x20000114
 8000900:	200000fc 	.word	0x200000fc
 8000904:	0800603c 	.word	0x0800603c
 8000908:	20000184 	.word	0x20000184
 800090c:	200000f8 	.word	0x200000f8

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b094      	sub	sp, #80	; 0x50
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0320 	add.w	r3, r7, #32
 800091a:	2230      	movs	r2, #48	; 0x30
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f004 f998 	bl	8004c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <SystemClock_Config+0xdc>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	4a2b      	ldr	r2, [pc, #172]	; (80009ec <SystemClock_Config+0xdc>)
 800093e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000942:	6413      	str	r3, [r2, #64]	; 0x40
 8000944:	4b29      	ldr	r3, [pc, #164]	; (80009ec <SystemClock_Config+0xdc>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000950:	2300      	movs	r3, #0
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <SystemClock_Config+0xe0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a25      	ldr	r2, [pc, #148]	; (80009f0 <SystemClock_Config+0xe0>)
 800095a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800095e:	6013      	str	r3, [r2, #0]
 8000960:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <SystemClock_Config+0xe0>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800096c:	2306      	movs	r3, #6
 800096e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000970:	2301      	movs	r3, #1
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000974:	2301      	movs	r3, #1
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000978:	2310      	movs	r3, #16
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097c:	2302      	movs	r3, #2
 800097e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000980:	2300      	movs	r3, #0
 8000982:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000984:	2308      	movs	r3, #8
 8000986:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000988:	23b4      	movs	r3, #180	; 0xb4
 800098a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800098c:	2302      	movs	r3, #2
 800098e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000990:	2304      	movs	r3, #4
 8000992:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000994:	f107 0320 	add.w	r3, r7, #32
 8000998:	4618      	mov	r0, r3
 800099a:	f001 fb85 	bl	80020a8 <HAL_RCC_OscConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009a4:	f000 f912 	bl	8000bcc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009a8:	f001 fb2e 	bl	8002008 <HAL_PWREx_EnableOverDrive>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009b2:	f000 f90b 	bl	8000bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b6:	230f      	movs	r3, #15
 80009b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ba:	2302      	movs	r3, #2
 80009bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	2105      	movs	r1, #5
 80009d4:	4618      	mov	r0, r3
 80009d6:	f001 fddf 	bl	8002598 <HAL_RCC_ClockConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80009e0:	f000 f8f4 	bl	8000bcc <Error_Handler>
  }
}
 80009e4:	bf00      	nop
 80009e6:	3750      	adds	r7, #80	; 0x50
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40007000 	.word	0x40007000

080009f4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2100      	movs	r1, #0
 80009fc:	2027      	movs	r0, #39	; 0x27
 80009fe:	f001 f844 	bl	8001a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a02:	2027      	movs	r0, #39	; 0x27
 8000a04:	f001 f85d 	bl	8001ac2 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2028      	movs	r0, #40	; 0x28
 8000a0e:	f001 f83c 	bl	8001a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a12:	2028      	movs	r0, #40	; 0x28
 8000a14:	f001 f855 	bl	8001ac2 <HAL_NVIC_EnableIRQ>
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState pin;
	int i;

	if (GPIO_Pin == GPIO_PIN_13) {
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a2c:	f040 8098 	bne.w	8000b60 <HAL_GPIO_EXTI_Callback+0x144>
		current_time = HAL_GetTick();
 8000a30:	f000 fbf2 	bl	8001218 <HAL_GetTick>
 8000a34:	4603      	mov	r3, r0
 8000a36:	461a      	mov	r2, r3
 8000a38:	4b4b      	ldr	r3, [pc, #300]	; (8000b68 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000a3a:	601a      	str	r2, [r3, #0]
		time_interval = current_time - last_time;
 8000a3c:	4b4a      	ldr	r3, [pc, #296]	; (8000b68 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_GPIO_EXTI_Callback+0x150>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	4a4a      	ldr	r2, [pc, #296]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x154>)
 8000a48:	6013      	str	r3, [r2, #0]
		last_time = current_time;
 8000a4a:	4b47      	ldr	r3, [pc, #284]	; (8000b68 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a47      	ldr	r2, [pc, #284]	; (8000b6c <HAL_GPIO_EXTI_Callback+0x150>)
 8000a50:	6013      	str	r3, [r2, #0]

		pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000a52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a56:	4847      	ldr	r0, [pc, #284]	; (8000b74 <HAL_GPIO_EXTI_Callback+0x158>)
 8000a58:	f001 fa8c 	bl	8001f74 <HAL_GPIO_ReadPin>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	72fb      	strb	r3, [r7, #11]

		if (time_interval <= 0.5) {
 8000a60:	4b43      	ldr	r3, [pc, #268]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x154>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	dc07      	bgt.n	8000a78 <HAL_GPIO_EXTI_Callback+0x5c>
			printf("Noise %d, %d\r\n", pin, time_interval);
 8000a68:	7afb      	ldrb	r3, [r7, #11]
 8000a6a:	4a41      	ldr	r2, [pc, #260]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x154>)
 8000a6c:	6812      	ldr	r2, [r2, #0]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4841      	ldr	r0, [pc, #260]	; (8000b78 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000a72:	f004 f8f7 	bl	8004c64 <iprintf>
 8000a76:	e01e      	b.n	8000ab6 <HAL_GPIO_EXTI_Callback+0x9a>
		} else {
			click[2].time = click[1].time;
 8000a78:	4b40      	ldr	r3, [pc, #256]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	4a3f      	ldr	r2, [pc, #252]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000a7e:	6113      	str	r3, [r2, #16]
			click[2].level = click[1].level;
 8000a80:	4b3e      	ldr	r3, [pc, #248]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000a82:	7b1a      	ldrb	r2, [r3, #12]
 8000a84:	4b3d      	ldr	r3, [pc, #244]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000a86:	751a      	strb	r2, [r3, #20]

			click[1].time = click[0].time;
 8000a88:	4b3c      	ldr	r3, [pc, #240]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a3b      	ldr	r2, [pc, #236]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000a8e:	6093      	str	r3, [r2, #8]
			click[1].level = click[0].level;
 8000a90:	4b3a      	ldr	r3, [pc, #232]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000a92:	791a      	ldrb	r2, [r3, #4]
 8000a94:	4b39      	ldr	r3, [pc, #228]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000a96:	731a      	strb	r2, [r3, #12]

			click[1].time = click[0].time;
 8000a98:	4b38      	ldr	r3, [pc, #224]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a37      	ldr	r2, [pc, #220]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000a9e:	6093      	str	r3, [r2, #8]
			click[1].level = click[0].level;
 8000aa0:	4b36      	ldr	r3, [pc, #216]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000aa2:	791a      	ldrb	r2, [r3, #4]
 8000aa4:	4b35      	ldr	r3, [pc, #212]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000aa6:	731a      	strb	r2, [r3, #12]

			click[0].time = time_interval;
 8000aa8:	4b31      	ldr	r3, [pc, #196]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x154>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a33      	ldr	r2, [pc, #204]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000aae:	6013      	str	r3, [r2, #0]
			click[0].level = pin;
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000ab2:	7afb      	ldrb	r3, [r7, #11]
 8000ab4:	7113      	strb	r3, [r2, #4]
		}
		if (click[2].level == GPIO_PIN_RESET && click[1].level == GPIO_PIN_SET
 8000ab6:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000ab8:	7d1b      	ldrb	r3, [r3, #20]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d122      	bne.n	8000b04 <HAL_GPIO_EXTI_Callback+0xe8>
 8000abe:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000ac0:	7b1b      	ldrb	r3, [r3, #12]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d11e      	bne.n	8000b04 <HAL_GPIO_EXTI_Callback+0xe8>
				&& click[0].level == GPIO_PIN_RESET) {
 8000ac6:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000ac8:	791b      	ldrb	r3, [r3, #4]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d11a      	bne.n	8000b04 <HAL_GPIO_EXTI_Callback+0xe8>
			for (i = 0; i < 3; i++) {
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	e00e      	b.n	8000af2 <HAL_GPIO_EXTI_Callback+0xd6>
				if (click[i].time >= DOUBLE_CLICK_MIN
 8000ad4:	4a29      	ldr	r2, [pc, #164]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000adc:	2b27      	cmp	r3, #39	; 0x27
 8000ade:	dd0b      	ble.n	8000af8 <HAL_GPIO_EXTI_Callback+0xdc>
						&& click[i].time <= DOUBLE_CLICK_MAX) {
 8000ae0:	4a26      	ldr	r2, [pc, #152]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ae8:	2b78      	cmp	r3, #120	; 0x78
 8000aea:	dc05      	bgt.n	8000af8 <HAL_GPIO_EXTI_Callback+0xdc>
			for (i = 0; i < 3; i++) {
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3301      	adds	r3, #1
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	dded      	ble.n	8000ad4 <HAL_GPIO_EXTI_Callback+0xb8>
					continue;
				} else
					break;
			}
			if (i == 3) {
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d102      	bne.n	8000b04 <HAL_GPIO_EXTI_Callback+0xe8>
				printf("Double Click\r\n");
 8000afe:	4820      	ldr	r0, [pc, #128]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x164>)
 8000b00:	f004 f936 	bl	8004d70 <puts>
			}
		}
		if (click[0].level == GPIO_PIN_RESET && click[0].time >= LONG_CLICK_MIN) // long click
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000b06:	791b      	ldrb	r3, [r3, #4]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d115      	bne.n	8000b38 <HAL_GPIO_EXTI_Callback+0x11c>
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b14:	db10      	blt.n	8000b38 <HAL_GPIO_EXTI_Callback+0x11c>
		{
			printf("Long Key\r\n");
 8000b16:	481b      	ldr	r0, [pc, #108]	; (8000b84 <HAL_GPIO_EXTI_Callback+0x168>)
 8000b18:	f004 f92a 	bl	8004d70 <puts>
			flag++;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	3301      	adds	r3, #1
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000b26:	701a      	strb	r2, [r3, #0]
			if(flag == 3){
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b03      	cmp	r3, #3
 8000b2e:	d117      	bne.n	8000b60 <HAL_GPIO_EXTI_Callback+0x144>
				flag =0;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
			if(flag == 3){
 8000b36:	e013      	b.n	8000b60 <HAL_GPIO_EXTI_Callback+0x144>
			}
		} else if (click[0].level
 8000b38:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000b3a:	791b      	ldrb	r3, [r3, #4]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d10f      	bne.n	8000b60 <HAL_GPIO_EXTI_Callback+0x144>
				== GPIO_PIN_RESET&& click[0].time < LONG_CLICK_MIN && click[0].time > DOUBLE_CLICK_MAX) {
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b48:	da0a      	bge.n	8000b60 <HAL_GPIO_EXTI_Callback+0x144>
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b78      	cmp	r3, #120	; 0x78
 8000b50:	dd06      	ble.n	8000b60 <HAL_GPIO_EXTI_Callback+0x144>
			printf("Select Key, %ld\r\n", click[0].time);
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x160>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4619      	mov	r1, r3
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <HAL_GPIO_EXTI_Callback+0x170>)
 8000b5a:	f004 f883 	bl	8004c64 <iprintf>
		}
	}
}
 8000b5e:	e7ff      	b.n	8000b60 <HAL_GPIO_EXTI_Callback+0x144>
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200000ec 	.word	0x200000ec
 8000b6c:	200000f4 	.word	0x200000f4
 8000b70:	200000f0 	.word	0x200000f0
 8000b74:	40020800 	.word	0x40020800
 8000b78:	0800606c 	.word	0x0800606c
 8000b7c:	200000d4 	.word	0x200000d4
 8000b80:	0800607c 	.word	0x0800607c
 8000b84:	0800608c 	.word	0x0800608c
 8000b88:	200000fc 	.word	0x200000fc
 8000b8c:	08006098 	.word	0x08006098

08000b90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d109      	bne.n	8000bb6 <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_ADC_Start(&hadc1);
 8000ba2:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000ba4:	f000 fb88 	bl	80012b8 <HAL_ADC_Start>
		ADC_value = HAL_ADC_GetValue(&hadc1);
 8000ba8:	4806      	ldr	r0, [pc, #24]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000baa:	f000 fc57 	bl	800145c <HAL_ADC_GetValue>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000bb4:	601a      	str	r2, [r3, #0]
	//	printf("ADC_value = %d\r\n", ADC_value);

	}
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40000400 	.word	0x40000400
 8000bc4:	2000008c 	.word	0x2000008c
 8000bc8:	200000f8 	.word	0x200000f8

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bd4:	e7fe      	b.n	8000bd4 <Error_Handler+0x8>
	...

08000bd8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000bec:	2300      	movs	r3, #0
 8000bee:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000bf0:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <MX_RTC_Init+0xac>)
 8000bf2:	4a25      	ldr	r2, [pc, #148]	; (8000c88 <MX_RTC_Init+0xb0>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bf6:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <MX_RTC_Init+0xac>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000bfc:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_RTC_Init+0xac>)
 8000bfe:	227f      	movs	r2, #127	; 0x7f
 8000c00:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <MX_RTC_Init+0xac>)
 8000c04:	22ff      	movs	r2, #255	; 0xff
 8000c06:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c08:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <MX_RTC_Init+0xac>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_RTC_Init+0xac>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_RTC_Init+0xac>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c1a:	481a      	ldr	r0, [pc, #104]	; (8000c84 <MX_RTC_Init+0xac>)
 8000c1c:	f002 f85c 	bl	8002cd8 <HAL_RTC_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000c26:	f7ff ffd1 	bl	8000bcc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2200      	movs	r2, #0
 8000c42:	4619      	mov	r1, r3
 8000c44:	480f      	ldr	r0, [pc, #60]	; (8000c84 <MX_RTC_Init+0xac>)
 8000c46:	f002 f8bd 	bl	8002dc4 <HAL_RTC_SetTime>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000c50:	f7ff ffbc 	bl	8000bcc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c54:	2301      	movs	r3, #1
 8000c56:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000c64:	463b      	mov	r3, r7
 8000c66:	2200      	movs	r2, #0
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <MX_RTC_Init+0xac>)
 8000c6c:	f002 f9a2 	bl	8002fb4 <HAL_RTC_SetDate>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000c76:	f7ff ffa9 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000118 	.word	0x20000118
 8000c88:	40002800 	.word	0x40002800

08000c8c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08e      	sub	sp, #56	; 0x38
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	2230      	movs	r2, #48	; 0x30
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f003 ffd9 	bl	8004c54 <memset>
  if(rtcHandle->Instance==RTC)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a0c      	ldr	r2, [pc, #48]	; (8000cd8 <HAL_RTC_MspInit+0x4c>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d111      	bne.n	8000cd0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cac:	2320      	movs	r3, #32
 8000cae:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 fe4c 	bl	8002958 <HAL_RCCEx_PeriphCLKConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000cc6:	f7ff ff81 	bl	8000bcc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cca:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <HAL_RTC_MspInit+0x50>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	3738      	adds	r7, #56	; 0x38
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40002800 	.word	0x40002800
 8000cdc:	42470e3c 	.word	0x42470e3c

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <NMI_Handler+0x4>

08000d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <MemManage_Handler+0x4>

08000d42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7c:	f000 fa38 	bl	80011f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <TIM3_IRQHandler+0x10>)
 8000d8a:	f002 fb63 	bl	8003454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000013c 	.word	0x2000013c

08000d98 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <USART3_IRQHandler+0x10>)
 8000d9e:	f002 fffb 	bl	8003d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000184 	.word	0x20000184

08000dac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000db0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000db4:	f001 f910 	bl	8001fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	e00a      	b.n	8000de4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dce:	f3af 8000 	nop.w
 8000dd2:	4601      	mov	r1, r0
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	1c5a      	adds	r2, r3, #1
 8000dd8:	60ba      	str	r2, [r7, #8]
 8000dda:	b2ca      	uxtb	r2, r1
 8000ddc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	3301      	adds	r3, #1
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	dbf0      	blt.n	8000dce <_read+0x12>
	}

return len;
 8000dec:	687b      	ldr	r3, [r7, #4]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b086      	sub	sp, #24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	60f8      	str	r0, [r7, #12]
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	e009      	b.n	8000e1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	1c5a      	adds	r2, r3, #1
 8000e0c:	60ba      	str	r2, [r7, #8]
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fccd 	bl	80007b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697a      	ldr	r2, [r7, #20]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	dbf1      	blt.n	8000e08 <_write+0x12>
	}
	return len;
 8000e24:	687b      	ldr	r3, [r7, #4]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <_close>:

int _close(int file)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
	return -1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
 8000e4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e56:	605a      	str	r2, [r3, #4]
	return 0;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <_isatty>:

int _isatty(int file)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
	return 1;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
	return 0;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea0:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <_sbrk+0x5c>)
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <_sbrk+0x60>)
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <_sbrk+0x64>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <_sbrk+0x68>)
 8000eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d207      	bcs.n	8000ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec8:	f003 fe9a 	bl	8004c00 <__errno>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	220c      	movs	r2, #12
 8000ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	e009      	b.n	8000eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <_sbrk+0x64>)
 8000ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eea:	68fb      	ldr	r3, [r7, #12]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20030000 	.word	0x20030000
 8000ef8:	00000400 	.word	0x00000400
 8000efc:	20000138 	.word	0x20000138
 8000f00:	200001e0 	.word	0x200001e0

08000f04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <SystemInit+0x20>)
 8000f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <SystemInit+0x20>)
 8000f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <MX_TIM3_Init+0x94>)
 8000f46:	4a1e      	ldr	r2, [pc, #120]	; (8000fc0 <MX_TIM3_Init+0x98>)
 8000f48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <MX_TIM3_Init+0x94>)
 8000f4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <MX_TIM3_Init+0x94>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 900;
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <MX_TIM3_Init+0x94>)
 8000f5a:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000f5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <MX_TIM3_Init+0x94>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_TIM3_Init+0x94>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f6c:	4813      	ldr	r0, [pc, #76]	; (8000fbc <MX_TIM3_Init+0x94>)
 8000f6e:	f002 f9b1 	bl	80032d4 <HAL_TIM_Base_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000f78:	f7ff fe28 	bl	8000bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	4619      	mov	r1, r3
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <MX_TIM3_Init+0x94>)
 8000f8a:	f002 fb6b 	bl	8003664 <HAL_TIM_ConfigClockSource>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000f94:	f7ff fe1a 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_TIM3_Init+0x94>)
 8000fa6:	f002 fd87 	bl	8003ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000fb0:	f7ff fe0c 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2000013c 	.word	0x2000013c
 8000fc0:	40000400 	.word	0x40000400

08000fc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0e      	ldr	r2, [pc, #56]	; (800100c <HAL_TIM_Base_MspInit+0x48>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d115      	bne.n	8001002 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <HAL_TIM_Base_MspInit+0x4c>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	4a0c      	ldr	r2, [pc, #48]	; (8001010 <HAL_TIM_Base_MspInit+0x4c>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <HAL_TIM_Base_MspInit+0x4c>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	201d      	movs	r0, #29
 8000ff8:	f000 fd47 	bl	8001a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ffc:	201d      	movs	r0, #29
 8000ffe:	f000 fd60 	bl	8001ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40000400 	.word	0x40000400
 8001010:	40023800 	.word	0x40023800

08001014 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_USART3_UART_Init+0x4c>)
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <MX_USART3_UART_Init+0x50>)
 800101c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <MX_USART3_UART_Init+0x4c>)
 8001020:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001024:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_USART3_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_USART3_UART_Init+0x4c>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <MX_USART3_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_USART3_UART_Init+0x4c>)
 800103a:	220c      	movs	r2, #12
 800103c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <MX_USART3_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_USART3_UART_Init+0x4c>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_USART3_UART_Init+0x4c>)
 800104c:	f002 fdc4 	bl	8003bd8 <HAL_UART_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001056:	f7ff fdb9 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000184 	.word	0x20000184
 8001064:	40004800 	.word	0x40004800

08001068 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a19      	ldr	r2, [pc, #100]	; (80010ec <HAL_UART_MspInit+0x84>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d12c      	bne.n	80010e4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <HAL_UART_MspInit+0x88>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a17      	ldr	r2, [pc, #92]	; (80010f0 <HAL_UART_MspInit+0x88>)
 8001094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_UART_MspInit+0x88>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <HAL_UART_MspInit+0x88>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a10      	ldr	r2, [pc, #64]	; (80010f0 <HAL_UART_MspInit+0x88>)
 80010b0:	f043 0308 	orr.w	r3, r3, #8
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <HAL_UART_MspInit+0x88>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010d4:	2307      	movs	r3, #7
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <HAL_UART_MspInit+0x8c>)
 80010e0:	f000 fd9c 	bl	8001c1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40004800 	.word	0x40004800
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020c00 	.word	0x40020c00

080010f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001130 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010fc:	480d      	ldr	r0, [pc, #52]	; (8001134 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010fe:	490e      	ldr	r1, [pc, #56]	; (8001138 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001100:	4a0e      	ldr	r2, [pc, #56]	; (800113c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001104:	e002      	b.n	800110c <LoopCopyDataInit>

08001106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110a:	3304      	adds	r3, #4

0800110c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800110c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001110:	d3f9      	bcc.n	8001106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001112:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001114:	4c0b      	ldr	r4, [pc, #44]	; (8001144 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001118:	e001      	b.n	800111e <LoopFillZerobss>

0800111a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800111c:	3204      	adds	r2, #4

0800111e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001120:	d3fb      	bcc.n	800111a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001122:	f7ff feef 	bl	8000f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001126:	f003 fd71 	bl	8004c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112a:	f7ff fb53 	bl	80007d4 <main>
  bx  lr    
 800112e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001130:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001138:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800113c:	0800616c 	.word	0x0800616c
  ldr r2, =_sbss
 8001140:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001144:	200001dc 	.word	0x200001dc

08001148 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC_IRQHandler>
	...

0800114c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <HAL_Init+0x40>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0d      	ldr	r2, [pc, #52]	; (800118c <HAL_Init+0x40>)
 8001156:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800115a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <HAL_Init+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0a      	ldr	r2, [pc, #40]	; (800118c <HAL_Init+0x40>)
 8001162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001166:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a07      	ldr	r2, [pc, #28]	; (800118c <HAL_Init+0x40>)
 800116e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001172:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001174:	2003      	movs	r0, #3
 8001176:	f000 fc7d 	bl	8001a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800117a:	200f      	movs	r0, #15
 800117c:	f000 f808 	bl	8001190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001180:	f7ff fdae 	bl	8000ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40023c00 	.word	0x40023c00

08001190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_InitTick+0x54>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_InitTick+0x58>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 fc95 	bl	8001ade <HAL_SYSTICK_Config>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00e      	b.n	80011dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b0f      	cmp	r3, #15
 80011c2:	d80a      	bhi.n	80011da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c4:	2200      	movs	r2, #0
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	f000 fc5d 	bl	8001a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d0:	4a06      	ldr	r2, [pc, #24]	; (80011ec <HAL_InitTick+0x5c>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e000      	b.n	80011dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000008 	.word	0x20000008
 80011ec:	20000004 	.word	0x20000004

080011f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x20>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_IncTick+0x24>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <HAL_IncTick+0x24>)
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000008 	.word	0x20000008
 8001214:	200001c8 	.word	0x200001c8

08001218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <HAL_GetTick+0x14>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	200001c8 	.word	0x200001c8

08001230 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e033      	b.n	80012ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	2b00      	cmp	r3, #0
 800124c:	d109      	bne.n	8001262 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff f9fa 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	2b00      	cmp	r3, #0
 800126c:	d118      	bne.n	80012a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001276:	f023 0302 	bic.w	r3, r3, #2
 800127a:	f043 0202 	orr.w	r2, r3, #2
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 fa2a 	bl	80016dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f023 0303 	bic.w	r3, r3, #3
 8001296:	f043 0201 	orr.w	r2, r3, #1
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
 800129e:	e001      	b.n	80012a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d101      	bne.n	80012d2 <HAL_ADC_Start+0x1a>
 80012ce:	2302      	movs	r3, #2
 80012d0:	e0b2      	b.n	8001438 <HAL_ADC_Start+0x180>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d018      	beq.n	800131a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0201 	orr.w	r2, r2, #1
 80012f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012f8:	4b52      	ldr	r3, [pc, #328]	; (8001444 <HAL_ADC_Start+0x18c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a52      	ldr	r2, [pc, #328]	; (8001448 <HAL_ADC_Start+0x190>)
 80012fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001302:	0c9a      	lsrs	r2, r3, #18
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800130c:	e002      	b.n	8001314 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	3b01      	subs	r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f9      	bne.n	800130e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b01      	cmp	r3, #1
 8001326:	d17a      	bne.n	800141e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001330:	f023 0301 	bic.w	r3, r3, #1
 8001334:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001346:	2b00      	cmp	r3, #0
 8001348:	d007      	beq.n	800135a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001352:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001366:	d106      	bne.n	8001376 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136c:	f023 0206 	bic.w	r2, r3, #6
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	645a      	str	r2, [r3, #68]	; 0x44
 8001374:	e002      	b.n	800137c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001384:	4b31      	ldr	r3, [pc, #196]	; (800144c <HAL_ADC_Start+0x194>)
 8001386:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001390:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 031f 	and.w	r3, r3, #31
 800139a:	2b00      	cmp	r3, #0
 800139c:	d12a      	bne.n	80013f4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a2b      	ldr	r2, [pc, #172]	; (8001450 <HAL_ADC_Start+0x198>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d015      	beq.n	80013d4 <HAL_ADC_Start+0x11c>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a29      	ldr	r2, [pc, #164]	; (8001454 <HAL_ADC_Start+0x19c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d105      	bne.n	80013be <HAL_ADC_Start+0x106>
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <HAL_ADC_Start+0x194>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 031f 	and.w	r3, r3, #31
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00a      	beq.n	80013d4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a25      	ldr	r2, [pc, #148]	; (8001458 <HAL_ADC_Start+0x1a0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d136      	bne.n	8001436 <HAL_ADC_Start+0x17e>
 80013c8:	4b20      	ldr	r3, [pc, #128]	; (800144c <HAL_ADC_Start+0x194>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0310 	and.w	r3, r3, #16
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d130      	bne.n	8001436 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d129      	bne.n	8001436 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	e020      	b.n	8001436 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a15      	ldr	r2, [pc, #84]	; (8001450 <HAL_ADC_Start+0x198>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d11b      	bne.n	8001436 <HAL_ADC_Start+0x17e>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d114      	bne.n	8001436 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	e00b      	b.n	8001436 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f043 0210 	orr.w	r2, r3, #16
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f043 0201 	orr.w	r2, r3, #1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	20000000 	.word	0x20000000
 8001448:	431bde83 	.word	0x431bde83
 800144c:	40012300 	.word	0x40012300
 8001450:	40012000 	.word	0x40012000
 8001454:	40012100 	.word	0x40012100
 8001458:	40012200 	.word	0x40012200

0800145c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x1c>
 8001490:	2302      	movs	r3, #2
 8001492:	e113      	b.n	80016bc <HAL_ADC_ConfigChannel+0x244>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b09      	cmp	r3, #9
 80014a2:	d925      	bls.n	80014f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68d9      	ldr	r1, [r3, #12]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	3b1e      	subs	r3, #30
 80014ba:	2207      	movs	r2, #7
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43da      	mvns	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	400a      	ands	r2, r1
 80014c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68d9      	ldr	r1, [r3, #12]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	4603      	mov	r3, r0
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4403      	add	r3, r0
 80014e2:	3b1e      	subs	r3, #30
 80014e4:	409a      	lsls	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	e022      	b.n	8001536 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6919      	ldr	r1, [r3, #16]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	4613      	mov	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	2207      	movs	r2, #7
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	400a      	ands	r2, r1
 8001512:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6919      	ldr	r1, [r3, #16]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	b29b      	uxth	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	4603      	mov	r3, r0
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4403      	add	r3, r0
 800152c:	409a      	lsls	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b06      	cmp	r3, #6
 800153c:	d824      	bhi.n	8001588 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	3b05      	subs	r3, #5
 8001550:	221f      	movs	r2, #31
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	400a      	ands	r2, r1
 800155e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	4618      	mov	r0, r3
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	3b05      	subs	r3, #5
 800157a:	fa00 f203 	lsl.w	r2, r0, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	635a      	str	r2, [r3, #52]	; 0x34
 8001586:	e04c      	b.n	8001622 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b0c      	cmp	r3, #12
 800158e:	d824      	bhi.n	80015da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	3b23      	subs	r3, #35	; 0x23
 80015a2:	221f      	movs	r2, #31
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43da      	mvns	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	400a      	ands	r2, r1
 80015b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	4618      	mov	r0, r3
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	3b23      	subs	r3, #35	; 0x23
 80015cc:	fa00 f203 	lsl.w	r2, r0, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	631a      	str	r2, [r3, #48]	; 0x30
 80015d8:	e023      	b.n	8001622 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	3b41      	subs	r3, #65	; 0x41
 80015ec:	221f      	movs	r2, #31
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43da      	mvns	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	400a      	ands	r2, r1
 80015fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	b29b      	uxth	r3, r3
 8001608:	4618      	mov	r0, r3
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	3b41      	subs	r3, #65	; 0x41
 8001616:	fa00 f203 	lsl.w	r2, r0, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001622:	4b29      	ldr	r3, [pc, #164]	; (80016c8 <HAL_ADC_ConfigChannel+0x250>)
 8001624:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a28      	ldr	r2, [pc, #160]	; (80016cc <HAL_ADC_ConfigChannel+0x254>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d10f      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x1d8>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b12      	cmp	r3, #18
 8001636:	d10b      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1d      	ldr	r2, [pc, #116]	; (80016cc <HAL_ADC_ConfigChannel+0x254>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d12b      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x23a>
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a1c      	ldr	r2, [pc, #112]	; (80016d0 <HAL_ADC_ConfigChannel+0x258>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d003      	beq.n	800166c <HAL_ADC_ConfigChannel+0x1f4>
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b11      	cmp	r3, #17
 800166a:	d122      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a11      	ldr	r2, [pc, #68]	; (80016d0 <HAL_ADC_ConfigChannel+0x258>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d111      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_ADC_ConfigChannel+0x25c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a11      	ldr	r2, [pc, #68]	; (80016d8 <HAL_ADC_ConfigChannel+0x260>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	0c9a      	lsrs	r2, r3, #18
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016a4:	e002      	b.n	80016ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f9      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	40012300 	.word	0x40012300
 80016cc:	40012000 	.word	0x40012000
 80016d0:	10000012 	.word	0x10000012
 80016d4:	20000000 	.word	0x20000000
 80016d8:	431bde83 	.word	0x431bde83

080016dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016e4:	4b79      	ldr	r3, [pc, #484]	; (80018cc <ADC_Init+0x1f0>)
 80016e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	431a      	orrs	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001710:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6859      	ldr	r1, [r3, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	021a      	lsls	r2, r3, #8
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001734:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6859      	ldr	r1, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001756:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6899      	ldr	r1, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	4a58      	ldr	r2, [pc, #352]	; (80018d0 <ADC_Init+0x1f4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d022      	beq.n	80017ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001782:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6899      	ldr	r1, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6899      	ldr	r1, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	e00f      	b.n	80017da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0202 	bic.w	r2, r2, #2
 80017e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6899      	ldr	r1, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7e1b      	ldrb	r3, [r3, #24]
 80017f4:	005a      	lsls	r2, r3, #1
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d01b      	beq.n	8001840 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001816:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001826:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6859      	ldr	r1, [r3, #4]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	3b01      	subs	r3, #1
 8001834:	035a      	lsls	r2, r3, #13
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	e007      	b.n	8001850 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800184e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800185e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	3b01      	subs	r3, #1
 800186c:	051a      	lsls	r2, r3, #20
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001884:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6899      	ldr	r1, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001892:	025a      	lsls	r2, r3, #9
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6899      	ldr	r1, [r3, #8]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	029a      	lsls	r2, r3, #10
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	609a      	str	r2, [r3, #8]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	40012300 	.word	0x40012300
 80018d0:	0f000001 	.word	0x0f000001

080018d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f0:	4013      	ands	r3, r2
 80018f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001906:	4a04      	ldr	r2, [pc, #16]	; (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	60d3      	str	r3, [r2, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <__NVIC_GetPriorityGrouping+0x18>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	f003 0307 	and.w	r3, r3, #7
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	db0b      	blt.n	8001962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	f003 021f 	and.w	r2, r3, #31
 8001950:	4907      	ldr	r1, [pc, #28]	; (8001970 <__NVIC_EnableIRQ+0x38>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	2001      	movs	r0, #1
 800195a:	fa00 f202 	lsl.w	r2, r0, r2
 800195e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000e100 	.word	0xe000e100

08001974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	2b00      	cmp	r3, #0
 8001986:	db0a      	blt.n	800199e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	490c      	ldr	r1, [pc, #48]	; (80019c0 <__NVIC_SetPriority+0x4c>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	0112      	lsls	r2, r2, #4
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	440b      	add	r3, r1
 8001998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800199c:	e00a      	b.n	80019b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4908      	ldr	r1, [pc, #32]	; (80019c4 <__NVIC_SetPriority+0x50>)
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	3b04      	subs	r3, #4
 80019ac:	0112      	lsls	r2, r2, #4
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	440b      	add	r3, r1
 80019b2:	761a      	strb	r2, [r3, #24]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000e100 	.word	0xe000e100
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	; 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f1c3 0307 	rsb	r3, r3, #7
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	bf28      	it	cs
 80019e6:	2304      	movcs	r3, #4
 80019e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3304      	adds	r3, #4
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d902      	bls.n	80019f8 <NVIC_EncodePriority+0x30>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3b03      	subs	r3, #3
 80019f6:	e000      	b.n	80019fa <NVIC_EncodePriority+0x32>
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43da      	mvns	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a10:	f04f 31ff 	mov.w	r1, #4294967295
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	43d9      	mvns	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	4313      	orrs	r3, r2
         );
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3724      	adds	r7, #36	; 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a40:	d301      	bcc.n	8001a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00f      	b.n	8001a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a46:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <SysTick_Config+0x40>)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a4e:	210f      	movs	r1, #15
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f7ff ff8e 	bl	8001974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <SysTick_Config+0x40>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <SysTick_Config+0x40>)
 8001a60:	2207      	movs	r2, #7
 8001a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	e000e010 	.word	0xe000e010

08001a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ff29 	bl	80018d4 <__NVIC_SetPriorityGrouping>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a9c:	f7ff ff3e 	bl	800191c <__NVIC_GetPriorityGrouping>
 8001aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	6978      	ldr	r0, [r7, #20]
 8001aa8:	f7ff ff8e 	bl	80019c8 <NVIC_EncodePriority>
 8001aac:	4602      	mov	r2, r0
 8001aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff5d 	bl	8001974 <__NVIC_SetPriority>
}
 8001aba:	bf00      	nop
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff31 	bl	8001938 <__NVIC_EnableIRQ>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ffa2 	bl	8001a30 <SysTick_Config>
 8001aec:	4603      	mov	r3, r0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b04:	f7ff fb88 	bl	8001218 <HAL_GetTick>
 8001b08:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d008      	beq.n	8001b28 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e052      	b.n	8001bce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0216 	bic.w	r2, r2, #22
 8001b36:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	695a      	ldr	r2, [r3, #20]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b46:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d103      	bne.n	8001b58 <HAL_DMA_Abort+0x62>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0208 	bic.w	r2, r2, #8
 8001b66:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0201 	bic.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b78:	e013      	b.n	8001ba2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b7a:	f7ff fb4d 	bl	8001218 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b05      	cmp	r3, #5
 8001b86:	d90c      	bls.n	8001ba2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2203      	movs	r2, #3
 8001b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e015      	b.n	8001bce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1e4      	bne.n	8001b7a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb4:	223f      	movs	r2, #63	; 0x3f
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d004      	beq.n	8001bf4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2280      	movs	r2, #128	; 0x80
 8001bee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e00c      	b.n	8001c0e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2205      	movs	r2, #5
 8001bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0201 	bic.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	e177      	b.n	8001f28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c38:	2201      	movs	r2, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	f040 8166 	bne.w	8001f22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d005      	beq.n	8001c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d130      	bne.n	8001cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 0201 	and.w	r2, r3, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d017      	beq.n	8001d0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d123      	bne.n	8001d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	08da      	lsrs	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3208      	adds	r2, #8
 8001d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	220f      	movs	r2, #15
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	69b9      	ldr	r1, [r7, #24]
 8001d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0203 	and.w	r2, r3, #3
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80c0 	beq.w	8001f22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b66      	ldr	r3, [pc, #408]	; (8001f40 <HAL_GPIO_Init+0x324>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	4a65      	ldr	r2, [pc, #404]	; (8001f40 <HAL_GPIO_Init+0x324>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	; 0x44
 8001db2:	4b63      	ldr	r3, [pc, #396]	; (8001f40 <HAL_GPIO_Init+0x324>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dbe:	4a61      	ldr	r2, [pc, #388]	; (8001f44 <HAL_GPIO_Init+0x328>)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a58      	ldr	r2, [pc, #352]	; (8001f48 <HAL_GPIO_Init+0x32c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d037      	beq.n	8001e5a <HAL_GPIO_Init+0x23e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a57      	ldr	r2, [pc, #348]	; (8001f4c <HAL_GPIO_Init+0x330>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d031      	beq.n	8001e56 <HAL_GPIO_Init+0x23a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a56      	ldr	r2, [pc, #344]	; (8001f50 <HAL_GPIO_Init+0x334>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d02b      	beq.n	8001e52 <HAL_GPIO_Init+0x236>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a55      	ldr	r2, [pc, #340]	; (8001f54 <HAL_GPIO_Init+0x338>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d025      	beq.n	8001e4e <HAL_GPIO_Init+0x232>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a54      	ldr	r2, [pc, #336]	; (8001f58 <HAL_GPIO_Init+0x33c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d01f      	beq.n	8001e4a <HAL_GPIO_Init+0x22e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a53      	ldr	r2, [pc, #332]	; (8001f5c <HAL_GPIO_Init+0x340>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d019      	beq.n	8001e46 <HAL_GPIO_Init+0x22a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a52      	ldr	r2, [pc, #328]	; (8001f60 <HAL_GPIO_Init+0x344>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d013      	beq.n	8001e42 <HAL_GPIO_Init+0x226>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a51      	ldr	r2, [pc, #324]	; (8001f64 <HAL_GPIO_Init+0x348>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d00d      	beq.n	8001e3e <HAL_GPIO_Init+0x222>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a50      	ldr	r2, [pc, #320]	; (8001f68 <HAL_GPIO_Init+0x34c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d007      	beq.n	8001e3a <HAL_GPIO_Init+0x21e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a4f      	ldr	r2, [pc, #316]	; (8001f6c <HAL_GPIO_Init+0x350>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d101      	bne.n	8001e36 <HAL_GPIO_Init+0x21a>
 8001e32:	2309      	movs	r3, #9
 8001e34:	e012      	b.n	8001e5c <HAL_GPIO_Init+0x240>
 8001e36:	230a      	movs	r3, #10
 8001e38:	e010      	b.n	8001e5c <HAL_GPIO_Init+0x240>
 8001e3a:	2308      	movs	r3, #8
 8001e3c:	e00e      	b.n	8001e5c <HAL_GPIO_Init+0x240>
 8001e3e:	2307      	movs	r3, #7
 8001e40:	e00c      	b.n	8001e5c <HAL_GPIO_Init+0x240>
 8001e42:	2306      	movs	r3, #6
 8001e44:	e00a      	b.n	8001e5c <HAL_GPIO_Init+0x240>
 8001e46:	2305      	movs	r3, #5
 8001e48:	e008      	b.n	8001e5c <HAL_GPIO_Init+0x240>
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	e006      	b.n	8001e5c <HAL_GPIO_Init+0x240>
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e004      	b.n	8001e5c <HAL_GPIO_Init+0x240>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e002      	b.n	8001e5c <HAL_GPIO_Init+0x240>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <HAL_GPIO_Init+0x240>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	f002 0203 	and.w	r2, r2, #3
 8001e62:	0092      	lsls	r2, r2, #2
 8001e64:	4093      	lsls	r3, r2
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e6c:	4935      	ldr	r1, [pc, #212]	; (8001f44 <HAL_GPIO_Init+0x328>)
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	089b      	lsrs	r3, r3, #2
 8001e72:	3302      	adds	r3, #2
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e7a:	4b3d      	ldr	r3, [pc, #244]	; (8001f70 <HAL_GPIO_Init+0x354>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e9e:	4a34      	ldr	r2, [pc, #208]	; (8001f70 <HAL_GPIO_Init+0x354>)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ea4:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <HAL_GPIO_Init+0x354>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ec8:	4a29      	ldr	r2, [pc, #164]	; (8001f70 <HAL_GPIO_Init+0x354>)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ece:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <HAL_GPIO_Init+0x354>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ef2:	4a1f      	ldr	r2, [pc, #124]	; (8001f70 <HAL_GPIO_Init+0x354>)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <HAL_GPIO_Init+0x354>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f1c:	4a14      	ldr	r2, [pc, #80]	; (8001f70 <HAL_GPIO_Init+0x354>)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3301      	adds	r3, #1
 8001f26:	61fb      	str	r3, [r7, #28]
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	2b0f      	cmp	r3, #15
 8001f2c:	f67f ae84 	bls.w	8001c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f30:	bf00      	nop
 8001f32:	bf00      	nop
 8001f34:	3724      	adds	r7, #36	; 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40013800 	.word	0x40013800
 8001f48:	40020000 	.word	0x40020000
 8001f4c:	40020400 	.word	0x40020400
 8001f50:	40020800 	.word	0x40020800
 8001f54:	40020c00 	.word	0x40020c00
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40021400 	.word	0x40021400
 8001f60:	40021800 	.word	0x40021800
 8001f64:	40021c00 	.word	0x40021c00
 8001f68:	40022000 	.word	0x40022000
 8001f6c:	40022400 	.word	0x40022400
 8001f70:	40013c00 	.word	0x40013c00

08001f74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	887b      	ldrh	r3, [r7, #2]
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	73fb      	strb	r3, [r7, #15]
 8001f90:	e001      	b.n	8001f96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f92:	2300      	movs	r3, #0
 8001f94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	807b      	strh	r3, [r7, #2]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb4:	787b      	ldrb	r3, [r7, #1]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fba:	887a      	ldrh	r2, [r7, #2]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fc0:	e003      	b.n	8001fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fc2:	887b      	ldrh	r3, [r7, #2]
 8001fc4:	041a      	lsls	r2, r3, #16
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	619a      	str	r2, [r3, #24]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d006      	beq.n	8001ffc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fee:	4a05      	ldr	r2, [pc, #20]	; (8002004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fd10 	bl	8000a1c <HAL_GPIO_EXTI_Callback>
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40013c00 	.word	0x40013c00

08002008 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4b20      	ldr	r3, [pc, #128]	; (8002098 <HAL_PWREx_EnableOverDrive+0x90>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a1f      	ldr	r2, [pc, #124]	; (8002098 <HAL_PWREx_EnableOverDrive+0x90>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <HAL_PWREx_EnableOverDrive+0x90>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800202e:	4b1b      	ldr	r3, [pc, #108]	; (800209c <HAL_PWREx_EnableOverDrive+0x94>)
 8002030:	2201      	movs	r2, #1
 8002032:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002034:	f7ff f8f0 	bl	8001218 <HAL_GetTick>
 8002038:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800203a:	e009      	b.n	8002050 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800203c:	f7ff f8ec 	bl	8001218 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800204a:	d901      	bls.n	8002050 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e01f      	b.n	8002090 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800205c:	d1ee      	bne.n	800203c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002060:	2201      	movs	r2, #1
 8002062:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002064:	f7ff f8d8 	bl	8001218 <HAL_GetTick>
 8002068:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800206a:	e009      	b.n	8002080 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800206c:	f7ff f8d4 	bl	8001218 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800207a:	d901      	bls.n	8002080 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e007      	b.n	8002090 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800208c:	d1ee      	bne.n	800206c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40023800 	.word	0x40023800
 800209c:	420e0040 	.word	0x420e0040
 80020a0:	40007000 	.word	0x40007000
 80020a4:	420e0044 	.word	0x420e0044

080020a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e267      	b.n	800258a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d075      	beq.n	80021b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020c6:	4b88      	ldr	r3, [pc, #544]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d00c      	beq.n	80020ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020d2:	4b85      	ldr	r3, [pc, #532]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d112      	bne.n	8002104 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020de:	4b82      	ldr	r3, [pc, #520]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ea:	d10b      	bne.n	8002104 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ec:	4b7e      	ldr	r3, [pc, #504]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d05b      	beq.n	80021b0 <HAL_RCC_OscConfig+0x108>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d157      	bne.n	80021b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e242      	b.n	800258a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800210c:	d106      	bne.n	800211c <HAL_RCC_OscConfig+0x74>
 800210e:	4b76      	ldr	r3, [pc, #472]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a75      	ldr	r2, [pc, #468]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 8002114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	e01d      	b.n	8002158 <HAL_RCC_OscConfig+0xb0>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002124:	d10c      	bne.n	8002140 <HAL_RCC_OscConfig+0x98>
 8002126:	4b70      	ldr	r3, [pc, #448]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a6f      	ldr	r2, [pc, #444]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 800212c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	4b6d      	ldr	r3, [pc, #436]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a6c      	ldr	r2, [pc, #432]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 8002138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	e00b      	b.n	8002158 <HAL_RCC_OscConfig+0xb0>
 8002140:	4b69      	ldr	r3, [pc, #420]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a68      	ldr	r2, [pc, #416]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 8002146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	4b66      	ldr	r3, [pc, #408]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a65      	ldr	r2, [pc, #404]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 8002152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d013      	beq.n	8002188 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7ff f85a 	bl	8001218 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002168:	f7ff f856 	bl	8001218 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e207      	b.n	800258a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217a:	4b5b      	ldr	r3, [pc, #364]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0xc0>
 8002186:	e014      	b.n	80021b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7ff f846 	bl	8001218 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002190:	f7ff f842 	bl	8001218 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b64      	cmp	r3, #100	; 0x64
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e1f3      	b.n	800258a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a2:	4b51      	ldr	r3, [pc, #324]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0xe8>
 80021ae:	e000      	b.n	80021b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d063      	beq.n	8002286 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021be:	4b4a      	ldr	r3, [pc, #296]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00b      	beq.n	80021e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ca:	4b47      	ldr	r3, [pc, #284]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d11c      	bne.n	8002210 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021d6:	4b44      	ldr	r3, [pc, #272]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d116      	bne.n	8002210 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e2:	4b41      	ldr	r3, [pc, #260]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d005      	beq.n	80021fa <HAL_RCC_OscConfig+0x152>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d001      	beq.n	80021fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e1c7      	b.n	800258a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fa:	4b3b      	ldr	r3, [pc, #236]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4937      	ldr	r1, [pc, #220]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220e:	e03a      	b.n	8002286 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d020      	beq.n	800225a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002218:	4b34      	ldr	r3, [pc, #208]	; (80022ec <HAL_RCC_OscConfig+0x244>)
 800221a:	2201      	movs	r2, #1
 800221c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221e:	f7fe fffb 	bl	8001218 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002226:	f7fe fff7 	bl	8001218 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e1a8      	b.n	800258a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002238:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002244:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4925      	ldr	r1, [pc, #148]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 8002254:	4313      	orrs	r3, r2
 8002256:	600b      	str	r3, [r1, #0]
 8002258:	e015      	b.n	8002286 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800225a:	4b24      	ldr	r3, [pc, #144]	; (80022ec <HAL_RCC_OscConfig+0x244>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002260:	f7fe ffda 	bl	8001218 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002268:	f7fe ffd6 	bl	8001218 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e187      	b.n	800258a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227a:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d036      	beq.n	8002300 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d016      	beq.n	80022c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <HAL_RCC_OscConfig+0x248>)
 800229c:	2201      	movs	r2, #1
 800229e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a0:	f7fe ffba 	bl	8001218 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a8:	f7fe ffb6 	bl	8001218 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e167      	b.n	800258a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_RCC_OscConfig+0x240>)
 80022bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0x200>
 80022c6:	e01b      	b.n	8002300 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_RCC_OscConfig+0x248>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ce:	f7fe ffa3 	bl	8001218 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d4:	e00e      	b.n	80022f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022d6:	f7fe ff9f 	bl	8001218 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d907      	bls.n	80022f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e150      	b.n	800258a <HAL_RCC_OscConfig+0x4e2>
 80022e8:	40023800 	.word	0x40023800
 80022ec:	42470000 	.word	0x42470000
 80022f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f4:	4b88      	ldr	r3, [pc, #544]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 80022f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1ea      	bne.n	80022d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 8097 	beq.w	800243c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002312:	4b81      	ldr	r3, [pc, #516]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10f      	bne.n	800233e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	4b7d      	ldr	r3, [pc, #500]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	4a7c      	ldr	r2, [pc, #496]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 8002328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232c:	6413      	str	r3, [r2, #64]	; 0x40
 800232e:	4b7a      	ldr	r3, [pc, #488]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800233a:	2301      	movs	r3, #1
 800233c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233e:	4b77      	ldr	r3, [pc, #476]	; (800251c <HAL_RCC_OscConfig+0x474>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002346:	2b00      	cmp	r3, #0
 8002348:	d118      	bne.n	800237c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800234a:	4b74      	ldr	r3, [pc, #464]	; (800251c <HAL_RCC_OscConfig+0x474>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a73      	ldr	r2, [pc, #460]	; (800251c <HAL_RCC_OscConfig+0x474>)
 8002350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002356:	f7fe ff5f 	bl	8001218 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235e:	f7fe ff5b 	bl	8001218 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e10c      	b.n	800258a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002370:	4b6a      	ldr	r3, [pc, #424]	; (800251c <HAL_RCC_OscConfig+0x474>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d106      	bne.n	8002392 <HAL_RCC_OscConfig+0x2ea>
 8002384:	4b64      	ldr	r3, [pc, #400]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002388:	4a63      	ldr	r2, [pc, #396]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6713      	str	r3, [r2, #112]	; 0x70
 8002390:	e01c      	b.n	80023cc <HAL_RCC_OscConfig+0x324>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b05      	cmp	r3, #5
 8002398:	d10c      	bne.n	80023b4 <HAL_RCC_OscConfig+0x30c>
 800239a:	4b5f      	ldr	r3, [pc, #380]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 800239c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239e:	4a5e      	ldr	r2, [pc, #376]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 80023a0:	f043 0304 	orr.w	r3, r3, #4
 80023a4:	6713      	str	r3, [r2, #112]	; 0x70
 80023a6:	4b5c      	ldr	r3, [pc, #368]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 80023a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023aa:	4a5b      	ldr	r2, [pc, #364]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6713      	str	r3, [r2, #112]	; 0x70
 80023b2:	e00b      	b.n	80023cc <HAL_RCC_OscConfig+0x324>
 80023b4:	4b58      	ldr	r3, [pc, #352]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 80023b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b8:	4a57      	ldr	r2, [pc, #348]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 80023ba:	f023 0301 	bic.w	r3, r3, #1
 80023be:	6713      	str	r3, [r2, #112]	; 0x70
 80023c0:	4b55      	ldr	r3, [pc, #340]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 80023c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c4:	4a54      	ldr	r2, [pc, #336]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 80023c6:	f023 0304 	bic.w	r3, r3, #4
 80023ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d015      	beq.n	8002400 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d4:	f7fe ff20 	bl	8001218 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023da:	e00a      	b.n	80023f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023dc:	f7fe ff1c 	bl	8001218 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e0cb      	b.n	800258a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f2:	4b49      	ldr	r3, [pc, #292]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 80023f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0ee      	beq.n	80023dc <HAL_RCC_OscConfig+0x334>
 80023fe:	e014      	b.n	800242a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002400:	f7fe ff0a 	bl	8001218 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002406:	e00a      	b.n	800241e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002408:	f7fe ff06 	bl	8001218 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f241 3288 	movw	r2, #5000	; 0x1388
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e0b5      	b.n	800258a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800241e:	4b3e      	ldr	r3, [pc, #248]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1ee      	bne.n	8002408 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800242a:	7dfb      	ldrb	r3, [r7, #23]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d105      	bne.n	800243c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002430:	4b39      	ldr	r3, [pc, #228]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	4a38      	ldr	r2, [pc, #224]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 8002436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800243a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80a1 	beq.w	8002588 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002446:	4b34      	ldr	r3, [pc, #208]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
 800244e:	2b08      	cmp	r3, #8
 8002450:	d05c      	beq.n	800250c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d141      	bne.n	80024de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245a:	4b31      	ldr	r3, [pc, #196]	; (8002520 <HAL_RCC_OscConfig+0x478>)
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7fe feda 	bl	8001218 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002468:	f7fe fed6 	bl	8001218 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e087      	b.n	800258a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247a:	4b27      	ldr	r3, [pc, #156]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69da      	ldr	r2, [r3, #28]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	019b      	lsls	r3, r3, #6
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	085b      	lsrs	r3, r3, #1
 800249e:	3b01      	subs	r3, #1
 80024a0:	041b      	lsls	r3, r3, #16
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	061b      	lsls	r3, r3, #24
 80024aa:	491b      	ldr	r1, [pc, #108]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b0:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <HAL_RCC_OscConfig+0x478>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b6:	f7fe feaf 	bl	8001218 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024be:	f7fe feab 	bl	8001218 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e05c      	b.n	800258a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d0:	4b11      	ldr	r3, [pc, #68]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x416>
 80024dc:	e054      	b.n	8002588 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024de:	4b10      	ldr	r3, [pc, #64]	; (8002520 <HAL_RCC_OscConfig+0x478>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e4:	f7fe fe98 	bl	8001218 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ec:	f7fe fe94 	bl	8001218 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e045      	b.n	800258a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_RCC_OscConfig+0x470>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x444>
 800250a:	e03d      	b.n	8002588 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d107      	bne.n	8002524 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e038      	b.n	800258a <HAL_RCC_OscConfig+0x4e2>
 8002518:	40023800 	.word	0x40023800
 800251c:	40007000 	.word	0x40007000
 8002520:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002524:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <HAL_RCC_OscConfig+0x4ec>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d028      	beq.n	8002584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800253c:	429a      	cmp	r2, r3
 800253e:	d121      	bne.n	8002584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254a:	429a      	cmp	r2, r3
 800254c:	d11a      	bne.n	8002584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002554:	4013      	ands	r3, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800255a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800255c:	4293      	cmp	r3, r2
 800255e:	d111      	bne.n	8002584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256a:	085b      	lsrs	r3, r3, #1
 800256c:	3b01      	subs	r3, #1
 800256e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002570:	429a      	cmp	r2, r3
 8002572:	d107      	bne.n	8002584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800

08002598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0cc      	b.n	8002746 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025ac:	4b68      	ldr	r3, [pc, #416]	; (8002750 <HAL_RCC_ClockConfig+0x1b8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d90c      	bls.n	80025d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ba:	4b65      	ldr	r3, [pc, #404]	; (8002750 <HAL_RCC_ClockConfig+0x1b8>)
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c2:	4b63      	ldr	r3, [pc, #396]	; (8002750 <HAL_RCC_ClockConfig+0x1b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0b8      	b.n	8002746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d020      	beq.n	8002622 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025ec:	4b59      	ldr	r3, [pc, #356]	; (8002754 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	4a58      	ldr	r2, [pc, #352]	; (8002754 <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002604:	4b53      	ldr	r3, [pc, #332]	; (8002754 <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	4a52      	ldr	r2, [pc, #328]	; (8002754 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800260e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002610:	4b50      	ldr	r3, [pc, #320]	; (8002754 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	494d      	ldr	r1, [pc, #308]	; (8002754 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d044      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d107      	bne.n	8002646 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002636:	4b47      	ldr	r3, [pc, #284]	; (8002754 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d119      	bne.n	8002676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e07f      	b.n	8002746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d003      	beq.n	8002656 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002652:	2b03      	cmp	r3, #3
 8002654:	d107      	bne.n	8002666 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002656:	4b3f      	ldr	r3, [pc, #252]	; (8002754 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d109      	bne.n	8002676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e06f      	b.n	8002746 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002666:	4b3b      	ldr	r3, [pc, #236]	; (8002754 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e067      	b.n	8002746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002676:	4b37      	ldr	r3, [pc, #220]	; (8002754 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f023 0203 	bic.w	r2, r3, #3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	4934      	ldr	r1, [pc, #208]	; (8002754 <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	4313      	orrs	r3, r2
 8002686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002688:	f7fe fdc6 	bl	8001218 <HAL_GetTick>
 800268c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268e:	e00a      	b.n	80026a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002690:	f7fe fdc2 	bl	8001218 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f241 3288 	movw	r2, #5000	; 0x1388
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e04f      	b.n	8002746 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a6:	4b2b      	ldr	r3, [pc, #172]	; (8002754 <HAL_RCC_ClockConfig+0x1bc>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 020c 	and.w	r2, r3, #12
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d1eb      	bne.n	8002690 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026b8:	4b25      	ldr	r3, [pc, #148]	; (8002750 <HAL_RCC_ClockConfig+0x1b8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d20c      	bcs.n	80026e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c6:	4b22      	ldr	r3, [pc, #136]	; (8002750 <HAL_RCC_ClockConfig+0x1b8>)
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ce:	4b20      	ldr	r3, [pc, #128]	; (8002750 <HAL_RCC_ClockConfig+0x1b8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e032      	b.n	8002746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d008      	beq.n	80026fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ec:	4b19      	ldr	r3, [pc, #100]	; (8002754 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	4916      	ldr	r1, [pc, #88]	; (8002754 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d009      	beq.n	800271e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800270a:	4b12      	ldr	r3, [pc, #72]	; (8002754 <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	490e      	ldr	r1, [pc, #56]	; (8002754 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	4313      	orrs	r3, r2
 800271c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800271e:	f000 f821 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 8002722:	4602      	mov	r2, r0
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	091b      	lsrs	r3, r3, #4
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	490a      	ldr	r1, [pc, #40]	; (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	5ccb      	ldrb	r3, [r1, r3]
 8002732:	fa22 f303 	lsr.w	r3, r2, r3
 8002736:	4a09      	ldr	r2, [pc, #36]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <HAL_RCC_ClockConfig+0x1c8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f7fe fd26 	bl	8001190 <HAL_InitTick>

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40023c00 	.word	0x40023c00
 8002754:	40023800 	.word	0x40023800
 8002758:	080060ac 	.word	0x080060ac
 800275c:	20000000 	.word	0x20000000
 8002760:	20000004 	.word	0x20000004

08002764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002768:	b090      	sub	sp, #64	; 0x40
 800276a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	637b      	str	r3, [r7, #52]	; 0x34
 8002770:	2300      	movs	r3, #0
 8002772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002774:	2300      	movs	r3, #0
 8002776:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800277c:	4b59      	ldr	r3, [pc, #356]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 030c 	and.w	r3, r3, #12
 8002784:	2b08      	cmp	r3, #8
 8002786:	d00d      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0x40>
 8002788:	2b08      	cmp	r3, #8
 800278a:	f200 80a1 	bhi.w	80028d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <HAL_RCC_GetSysClockFreq+0x34>
 8002792:	2b04      	cmp	r3, #4
 8002794:	d003      	beq.n	800279e <HAL_RCC_GetSysClockFreq+0x3a>
 8002796:	e09b      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002798:	4b53      	ldr	r3, [pc, #332]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800279a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800279c:	e09b      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800279e:	4b53      	ldr	r3, [pc, #332]	; (80028ec <HAL_RCC_GetSysClockFreq+0x188>)
 80027a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027a2:	e098      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027a4:	4b4f      	ldr	r3, [pc, #316]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ae:	4b4d      	ldr	r3, [pc, #308]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d028      	beq.n	800280c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ba:	4b4a      	ldr	r3, [pc, #296]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	099b      	lsrs	r3, r3, #6
 80027c0:	2200      	movs	r2, #0
 80027c2:	623b      	str	r3, [r7, #32]
 80027c4:	627a      	str	r2, [r7, #36]	; 0x24
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027cc:	2100      	movs	r1, #0
 80027ce:	4b47      	ldr	r3, [pc, #284]	; (80028ec <HAL_RCC_GetSysClockFreq+0x188>)
 80027d0:	fb03 f201 	mul.w	r2, r3, r1
 80027d4:	2300      	movs	r3, #0
 80027d6:	fb00 f303 	mul.w	r3, r0, r3
 80027da:	4413      	add	r3, r2
 80027dc:	4a43      	ldr	r2, [pc, #268]	; (80028ec <HAL_RCC_GetSysClockFreq+0x188>)
 80027de:	fba0 1202 	umull	r1, r2, r0, r2
 80027e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027e4:	460a      	mov	r2, r1
 80027e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80027e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ea:	4413      	add	r3, r2
 80027ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f0:	2200      	movs	r2, #0
 80027f2:	61bb      	str	r3, [r7, #24]
 80027f4:	61fa      	str	r2, [r7, #28]
 80027f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027fe:	f7fd fd4f 	bl	80002a0 <__aeabi_uldivmod>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4613      	mov	r3, r2
 8002808:	63fb      	str	r3, [r7, #60]	; 0x3c
 800280a:	e053      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800280c:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	099b      	lsrs	r3, r3, #6
 8002812:	2200      	movs	r2, #0
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	617a      	str	r2, [r7, #20]
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800281e:	f04f 0b00 	mov.w	fp, #0
 8002822:	4652      	mov	r2, sl
 8002824:	465b      	mov	r3, fp
 8002826:	f04f 0000 	mov.w	r0, #0
 800282a:	f04f 0100 	mov.w	r1, #0
 800282e:	0159      	lsls	r1, r3, #5
 8002830:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002834:	0150      	lsls	r0, r2, #5
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	ebb2 080a 	subs.w	r8, r2, sl
 800283e:	eb63 090b 	sbc.w	r9, r3, fp
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800284e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002852:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002856:	ebb2 0408 	subs.w	r4, r2, r8
 800285a:	eb63 0509 	sbc.w	r5, r3, r9
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	00eb      	lsls	r3, r5, #3
 8002868:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800286c:	00e2      	lsls	r2, r4, #3
 800286e:	4614      	mov	r4, r2
 8002870:	461d      	mov	r5, r3
 8002872:	eb14 030a 	adds.w	r3, r4, sl
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	eb45 030b 	adc.w	r3, r5, fp
 800287c:	607b      	str	r3, [r7, #4]
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	e9d7 4500 	ldrd	r4, r5, [r7]
 800288a:	4629      	mov	r1, r5
 800288c:	028b      	lsls	r3, r1, #10
 800288e:	4621      	mov	r1, r4
 8002890:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002894:	4621      	mov	r1, r4
 8002896:	028a      	lsls	r2, r1, #10
 8002898:	4610      	mov	r0, r2
 800289a:	4619      	mov	r1, r3
 800289c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800289e:	2200      	movs	r2, #0
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	60fa      	str	r2, [r7, #12]
 80028a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028a8:	f7fd fcfa 	bl	80002a0 <__aeabi_uldivmod>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4613      	mov	r3, r2
 80028b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	0c1b      	lsrs	r3, r3, #16
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	3301      	adds	r3, #1
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80028c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028ce:	e002      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028d0:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80028d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3740      	adds	r7, #64	; 0x40
 80028dc:	46bd      	mov	sp, r7
 80028de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800
 80028e8:	00f42400 	.word	0x00f42400
 80028ec:	017d7840 	.word	0x017d7840

080028f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <HAL_RCC_GetHCLKFreq+0x14>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20000000 	.word	0x20000000

08002908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800290c:	f7ff fff0 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 8002910:	4602      	mov	r2, r0
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	0a9b      	lsrs	r3, r3, #10
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	4903      	ldr	r1, [pc, #12]	; (800292c <HAL_RCC_GetPCLK1Freq+0x24>)
 800291e:	5ccb      	ldrb	r3, [r1, r3]
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002924:	4618      	mov	r0, r3
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40023800 	.word	0x40023800
 800292c:	080060bc 	.word	0x080060bc

08002930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002934:	f7ff ffdc 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 8002938:	4602      	mov	r2, r0
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	0b5b      	lsrs	r3, r3, #13
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	4903      	ldr	r1, [pc, #12]	; (8002954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002946:	5ccb      	ldrb	r3, [r1, r3]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40023800 	.word	0x40023800
 8002954:	080060bc 	.word	0x080060bc

08002958 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10b      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800297c:	2b00      	cmp	r3, #0
 800297e:	d105      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002988:	2b00      	cmp	r3, #0
 800298a:	d075      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800298c:	4b91      	ldr	r3, [pc, #580]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002992:	f7fe fc41 	bl	8001218 <HAL_GetTick>
 8002996:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800299a:	f7fe fc3d 	bl	8001218 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e189      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029ac:	4b8a      	ldr	r3, [pc, #552]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f0      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d009      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	019a      	lsls	r2, r3, #6
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	071b      	lsls	r3, r3, #28
 80029d0:	4981      	ldr	r1, [pc, #516]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d01f      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029e4:	4b7c      	ldr	r3, [pc, #496]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80029e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ea:	0f1b      	lsrs	r3, r3, #28
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	019a      	lsls	r2, r3, #6
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	061b      	lsls	r3, r3, #24
 80029fe:	431a      	orrs	r2, r3
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	071b      	lsls	r3, r3, #28
 8002a04:	4974      	ldr	r1, [pc, #464]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a0c:	4b72      	ldr	r3, [pc, #456]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a12:	f023 021f 	bic.w	r2, r3, #31
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	496e      	ldr	r1, [pc, #440]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00d      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	019a      	lsls	r2, r3, #6
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	061b      	lsls	r3, r3, #24
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	071b      	lsls	r3, r3, #28
 8002a44:	4964      	ldr	r1, [pc, #400]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a4c:	4b61      	ldr	r3, [pc, #388]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a52:	f7fe fbe1 	bl	8001218 <HAL_GetTick>
 8002a56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a58:	e008      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a5a:	f7fe fbdd 	bl	8001218 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e129      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a6c:	4b5a      	ldr	r3, [pc, #360]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d105      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d079      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a90:	4b52      	ldr	r3, [pc, #328]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a96:	f7fe fbbf 	bl	8001218 <HAL_GetTick>
 8002a9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002a9e:	f7fe fbbb 	bl	8001218 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e107      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ab0:	4b49      	ldr	r3, [pc, #292]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002abc:	d0ef      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d020      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002aca:	4b43      	ldr	r3, [pc, #268]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad0:	0f1b      	lsrs	r3, r3, #28
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	019a      	lsls	r2, r3, #6
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	061b      	lsls	r3, r3, #24
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	071b      	lsls	r3, r3, #28
 8002aea:	493b      	ldr	r1, [pc, #236]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002af2:	4b39      	ldr	r3, [pc, #228]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002af8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	021b      	lsls	r3, r3, #8
 8002b04:	4934      	ldr	r1, [pc, #208]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d01e      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b18:	4b2f      	ldr	r3, [pc, #188]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1e:	0e1b      	lsrs	r3, r3, #24
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	019a      	lsls	r2, r3, #6
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	061b      	lsls	r3, r3, #24
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	071b      	lsls	r3, r3, #28
 8002b38:	4927      	ldr	r1, [pc, #156]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b40:	4b25      	ldr	r3, [pc, #148]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	4922      	ldr	r1, [pc, #136]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b56:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b5c:	f7fe fb5c 	bl	8001218 <HAL_GetTick>
 8002b60:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002b64:	f7fe fb58 	bl	8001218 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e0a4      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b76:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b82:	d1ef      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 808b 	beq.w	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	4a0f      	ldr	r2, [pc, #60]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002bae:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a0b      	ldr	r2, [pc, #44]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bba:	f7fe fb2d 	bl	8001218 <HAL_GetTick>
 8002bbe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002bc0:	e010      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002bc2:	f7fe fb29 	bl	8001218 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d909      	bls.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e075      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002bd4:	42470068 	.word	0x42470068
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	42470070 	.word	0x42470070
 8002be0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002be4:	4b38      	ldr	r3, [pc, #224]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0e8      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bf0:	4b36      	ldr	r3, [pc, #216]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d02f      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d028      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c0e:	4b2f      	ldr	r3, [pc, #188]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c16:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c18:	4b2d      	ldr	r3, [pc, #180]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c1e:	4b2c      	ldr	r3, [pc, #176]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002c24:	4a29      	ldr	r2, [pc, #164]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c2a:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d114      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002c36:	f7fe faef 	bl	8001218 <HAL_GetTick>
 8002c3a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3e:	f7fe faeb 	bl	8001218 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e035      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c54:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0ee      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c6c:	d10d      	bne.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002c6e:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c82:	4912      	ldr	r1, [pc, #72]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	608b      	str	r3, [r1, #8]
 8002c88:	e005      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	4a0f      	ldr	r2, [pc, #60]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c90:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c94:	6093      	str	r3, [r2, #8]
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca2:	490a      	ldr	r1, [pc, #40]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d004      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002cba:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8002cbc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40007000 	.word	0x40007000
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	42470e40 	.word	0x42470e40
 8002cd4:	424711e0 	.word	0x424711e0

08002cd8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e066      	b.n	8002dbc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	7f5b      	ldrb	r3, [r3, #29]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d105      	bne.n	8002d04 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fd ffc4 	bl	8000c8c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	22ca      	movs	r2, #202	; 0xca
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2253      	movs	r2, #83	; 0x53
 8002d18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fa45 	bl	80031aa <RTC_EnterInitMode>
 8002d20:	4603      	mov	r3, r0
 8002d22:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d12c      	bne.n	8002d84 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d3c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6899      	ldr	r1, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	68d2      	ldr	r2, [r2, #12]
 8002d64:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6919      	ldr	r1, [r3, #16]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	041a      	lsls	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fa4c 	bl	8003218 <RTC_ExitInitMode>
 8002d80:	4603      	mov	r3, r0
 8002d82:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d113      	bne.n	8002db2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d98:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699a      	ldr	r2, [r3, #24]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	22ff      	movs	r2, #255	; 0xff
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002dc4:	b590      	push	{r4, r7, lr}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	7f1b      	ldrb	r3, [r3, #28]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_RTC_SetTime+0x1c>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e087      	b.n	8002ef0 <HAL_RTC_SetTime+0x12c>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2202      	movs	r2, #2
 8002dea:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d126      	bne.n	8002e40 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d102      	bne.n	8002e06 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2200      	movs	r2, #0
 8002e04:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fa29 	bl	8003262 <RTC_ByteToBcd2>
 8002e10:	4603      	mov	r3, r0
 8002e12:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	785b      	ldrb	r3, [r3, #1]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fa22 	bl	8003262 <RTC_ByteToBcd2>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e22:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	789b      	ldrb	r3, [r3, #2]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 fa1a 	bl	8003262 <RTC_ByteToBcd2>
 8002e2e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e30:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	78db      	ldrb	r3, [r3, #3]
 8002e38:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	e018      	b.n	8002e72 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d102      	bne.n	8002e54 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2200      	movs	r2, #0
 8002e52:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	785b      	ldrb	r3, [r3, #1]
 8002e5e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002e60:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002e66:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	78db      	ldrb	r3, [r3, #3]
 8002e6c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	22ca      	movs	r2, #202	; 0xca
 8002e78:	625a      	str	r2, [r3, #36]	; 0x24
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2253      	movs	r2, #83	; 0x53
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f991 	bl	80031aa <RTC_EnterInitMode>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002e8c:	7cfb      	ldrb	r3, [r7, #19]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d120      	bne.n	8002ed4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002e9c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002ea0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002eb0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6899      	ldr	r1, [r3, #8]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f9a4 	bl	8003218 <RTC_ExitInitMode>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002ed4:	7cfb      	ldrb	r3, [r7, #19]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d102      	bne.n	8002ee0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2201      	movs	r2, #1
 8002ede:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	22ff      	movs	r2, #255	; 0xff
 8002ee6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	771a      	strb	r2, [r3, #28]

  return status;
 8002eee:	7cfb      	ldrb	r3, [r7, #19]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd90      	pop	{r4, r7, pc}

08002ef8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002f2a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f2e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	0c1b      	lsrs	r3, r3, #16
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	0a1b      	lsrs	r3, r3, #8
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	0d9b      	lsrs	r3, r3, #22
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d11a      	bne.n	8002faa <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 f98f 	bl	800329c <RTC_Bcd2ToByte>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	461a      	mov	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	785b      	ldrb	r3, [r3, #1]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f986 	bl	800329c <RTC_Bcd2ToByte>
 8002f90:	4603      	mov	r3, r0
 8002f92:	461a      	mov	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	789b      	ldrb	r3, [r3, #2]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 f97d 	bl	800329c <RTC_Bcd2ToByte>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002fb4:	b590      	push	{r4, r7, lr}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	7f1b      	ldrb	r3, [r3, #28]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_RTC_SetDate+0x1c>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e071      	b.n	80030b4 <HAL_RTC_SetDate+0x100>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10e      	bne.n	8003000 <HAL_RTC_SetDate+0x4c>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	785b      	ldrb	r3, [r3, #1]
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	785b      	ldrb	r3, [r3, #1]
 8002ff2:	f023 0310 	bic.w	r3, r3, #16
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	330a      	adds	r3, #10
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d11c      	bne.n	8003040 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	78db      	ldrb	r3, [r3, #3]
 800300a:	4618      	mov	r0, r3
 800300c:	f000 f929 	bl	8003262 <RTC_ByteToBcd2>
 8003010:	4603      	mov	r3, r0
 8003012:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	785b      	ldrb	r3, [r3, #1]
 8003018:	4618      	mov	r0, r3
 800301a:	f000 f922 	bl	8003262 <RTC_ByteToBcd2>
 800301e:	4603      	mov	r3, r0
 8003020:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003022:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	789b      	ldrb	r3, [r3, #2]
 8003028:	4618      	mov	r0, r3
 800302a:	f000 f91a 	bl	8003262 <RTC_ByteToBcd2>
 800302e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003030:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	e00e      	b.n	800305e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	78db      	ldrb	r3, [r3, #3]
 8003044:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	785b      	ldrb	r3, [r3, #1]
 800304a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800304c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003052:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	22ca      	movs	r2, #202	; 0xca
 8003064:	625a      	str	r2, [r3, #36]	; 0x24
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2253      	movs	r2, #83	; 0x53
 800306c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f89b 	bl	80031aa <RTC_EnterInitMode>
 8003074:	4603      	mov	r3, r0
 8003076:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10c      	bne.n	8003098 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003088:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800308c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f8c2 	bl	8003218 <RTC_ExitInitMode>
 8003094:	4603      	mov	r3, r0
 8003096:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003098:	7cfb      	ldrb	r3, [r7, #19]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d102      	bne.n	80030a4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	22ff      	movs	r2, #255	; 0xff
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	771a      	strb	r2, [r3, #28]

  return status;
 80030b2:	7cfb      	ldrb	r3, [r7, #19]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	371c      	adds	r7, #28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd90      	pop	{r4, r7, pc}

080030bc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80030d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80030da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	0c1b      	lsrs	r3, r3, #16
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	0a1b      	lsrs	r3, r3, #8
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	0b5b      	lsrs	r3, r3, #13
 8003108:	b2db      	uxtb	r3, r3
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	b2da      	uxtb	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d11a      	bne.n	8003150 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	78db      	ldrb	r3, [r3, #3]
 800311e:	4618      	mov	r0, r3
 8003120:	f000 f8bc 	bl	800329c <RTC_Bcd2ToByte>
 8003124:	4603      	mov	r3, r0
 8003126:	461a      	mov	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	785b      	ldrb	r3, [r3, #1]
 8003130:	4618      	mov	r0, r3
 8003132:	f000 f8b3 	bl	800329c <RTC_Bcd2ToByte>
 8003136:	4603      	mov	r3, r0
 8003138:	461a      	mov	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	789b      	ldrb	r3, [r3, #2]
 8003142:	4618      	mov	r0, r3
 8003144:	f000 f8aa 	bl	800329c <RTC_Bcd2ToByte>
 8003148:	4603      	mov	r3, r0
 800314a:	461a      	mov	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003174:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003176:	f7fe f84f 	bl	8001218 <HAL_GetTick>
 800317a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800317c:	e009      	b.n	8003192 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800317e:	f7fe f84b 	bl	8001218 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800318c:	d901      	bls.n	8003192 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e007      	b.n	80031a2 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ee      	beq.n	800317e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d122      	bne.n	800320e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031d6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031d8:	f7fe f81e 	bl	8001218 <HAL_GetTick>
 80031dc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80031de:	e00c      	b.n	80031fa <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80031e0:	f7fe f81a 	bl	8001218 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031ee:	d904      	bls.n	80031fa <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2204      	movs	r2, #4
 80031f4:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	d102      	bne.n	800320e <RTC_EnterInitMode+0x64>
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d1e8      	bne.n	80031e0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800320e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003232:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10a      	bne.n	8003258 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff ff89 	bl	800315a <HAL_RTC_WaitForSynchro>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d004      	beq.n	8003258 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2204      	movs	r2, #4
 8003252:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003258:	7bfb      	ldrb	r3, [r7, #15]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003262:	b480      	push	{r7}
 8003264:	b085      	sub	sp, #20
 8003266:	af00      	add	r7, sp, #0
 8003268:	4603      	mov	r3, r0
 800326a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003270:	e005      	b.n	800327e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	3301      	adds	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	3b0a      	subs	r3, #10
 800327c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	2b09      	cmp	r3, #9
 8003282:	d8f6      	bhi.n	8003272 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	b2da      	uxtb	r2, r3
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	4313      	orrs	r3, r2
 800328e:	b2db      	uxtb	r3, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	091b      	lsrs	r3, r3, #4
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	461a      	mov	r2, r3
 80032b2:	0092      	lsls	r2, r2, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	4413      	add	r3, r2
 80032c6:	b2db      	uxtb	r3, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e041      	b.n	800336a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7fd fe62 	bl	8000fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3304      	adds	r3, #4
 8003310:	4619      	mov	r1, r3
 8003312:	4610      	mov	r0, r2
 8003314:	f000 fa96 	bl	8003844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b01      	cmp	r3, #1
 8003386:	d001      	beq.n	800338c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e04e      	b.n	800342a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0201 	orr.w	r2, r2, #1
 80033a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a23      	ldr	r2, [pc, #140]	; (8003438 <HAL_TIM_Base_Start_IT+0xc4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d022      	beq.n	80033f4 <HAL_TIM_Base_Start_IT+0x80>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b6:	d01d      	beq.n	80033f4 <HAL_TIM_Base_Start_IT+0x80>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a1f      	ldr	r2, [pc, #124]	; (800343c <HAL_TIM_Base_Start_IT+0xc8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d018      	beq.n	80033f4 <HAL_TIM_Base_Start_IT+0x80>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a1e      	ldr	r2, [pc, #120]	; (8003440 <HAL_TIM_Base_Start_IT+0xcc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d013      	beq.n	80033f4 <HAL_TIM_Base_Start_IT+0x80>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a1c      	ldr	r2, [pc, #112]	; (8003444 <HAL_TIM_Base_Start_IT+0xd0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00e      	beq.n	80033f4 <HAL_TIM_Base_Start_IT+0x80>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a1b      	ldr	r2, [pc, #108]	; (8003448 <HAL_TIM_Base_Start_IT+0xd4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d009      	beq.n	80033f4 <HAL_TIM_Base_Start_IT+0x80>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a19      	ldr	r2, [pc, #100]	; (800344c <HAL_TIM_Base_Start_IT+0xd8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d004      	beq.n	80033f4 <HAL_TIM_Base_Start_IT+0x80>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a18      	ldr	r2, [pc, #96]	; (8003450 <HAL_TIM_Base_Start_IT+0xdc>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d111      	bne.n	8003418 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b06      	cmp	r3, #6
 8003404:	d010      	beq.n	8003428 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0201 	orr.w	r2, r2, #1
 8003414:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003416:	e007      	b.n	8003428 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40010000 	.word	0x40010000
 800343c:	40000400 	.word	0x40000400
 8003440:	40000800 	.word	0x40000800
 8003444:	40000c00 	.word	0x40000c00
 8003448:	40010400 	.word	0x40010400
 800344c:	40014000 	.word	0x40014000
 8003450:	40001800 	.word	0x40001800

08003454 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b02      	cmp	r3, #2
 8003468:	d122      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b02      	cmp	r3, #2
 8003476:	d11b      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0202 	mvn.w	r2, #2
 8003480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f9b5 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 800349c:	e005      	b.n	80034aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f9a7 	bl	80037f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f9b8 	bl	800381a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d122      	bne.n	8003504 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d11b      	bne.n	8003504 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0204 	mvn.w	r2, #4
 80034d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2202      	movs	r2, #2
 80034da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f98b 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 80034f0:	e005      	b.n	80034fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f97d 	bl	80037f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f98e 	bl	800381a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b08      	cmp	r3, #8
 8003510:	d122      	bne.n	8003558 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	2b08      	cmp	r3, #8
 800351e:	d11b      	bne.n	8003558 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0208 	mvn.w	r2, #8
 8003528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2204      	movs	r2, #4
 800352e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f961 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 8003544:	e005      	b.n	8003552 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f953 	bl	80037f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f964 	bl	800381a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b10      	cmp	r3, #16
 8003564:	d122      	bne.n	80035ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	2b10      	cmp	r3, #16
 8003572:	d11b      	bne.n	80035ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0210 	mvn.w	r2, #16
 800357c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2208      	movs	r2, #8
 8003582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f937 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 8003598:	e005      	b.n	80035a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f929 	bl	80037f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f93a 	bl	800381a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d10e      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d107      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0201 	mvn.w	r2, #1
 80035d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fd fadc 	bl	8000b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e2:	2b80      	cmp	r3, #128	; 0x80
 80035e4:	d10e      	bne.n	8003604 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f0:	2b80      	cmp	r3, #128	; 0x80
 80035f2:	d107      	bne.n	8003604 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fae0 	bl	8003bc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360e:	2b40      	cmp	r3, #64	; 0x40
 8003610:	d10e      	bne.n	8003630 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361c:	2b40      	cmp	r3, #64	; 0x40
 800361e:	d107      	bne.n	8003630 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f8ff 	bl	800382e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b20      	cmp	r3, #32
 800363c:	d10e      	bne.n	800365c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b20      	cmp	r3, #32
 800364a:	d107      	bne.n	800365c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0220 	mvn.w	r2, #32
 8003654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 faaa 	bl	8003bb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800365c:	bf00      	nop
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_TIM_ConfigClockSource+0x1c>
 800367c:	2302      	movs	r3, #2
 800367e:	e0b4      	b.n	80037ea <HAL_TIM_ConfigClockSource+0x186>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800369e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036b8:	d03e      	beq.n	8003738 <HAL_TIM_ConfigClockSource+0xd4>
 80036ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036be:	f200 8087 	bhi.w	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 80036c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c6:	f000 8086 	beq.w	80037d6 <HAL_TIM_ConfigClockSource+0x172>
 80036ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ce:	d87f      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 80036d0:	2b70      	cmp	r3, #112	; 0x70
 80036d2:	d01a      	beq.n	800370a <HAL_TIM_ConfigClockSource+0xa6>
 80036d4:	2b70      	cmp	r3, #112	; 0x70
 80036d6:	d87b      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 80036d8:	2b60      	cmp	r3, #96	; 0x60
 80036da:	d050      	beq.n	800377e <HAL_TIM_ConfigClockSource+0x11a>
 80036dc:	2b60      	cmp	r3, #96	; 0x60
 80036de:	d877      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 80036e0:	2b50      	cmp	r3, #80	; 0x50
 80036e2:	d03c      	beq.n	800375e <HAL_TIM_ConfigClockSource+0xfa>
 80036e4:	2b50      	cmp	r3, #80	; 0x50
 80036e6:	d873      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 80036e8:	2b40      	cmp	r3, #64	; 0x40
 80036ea:	d058      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x13a>
 80036ec:	2b40      	cmp	r3, #64	; 0x40
 80036ee:	d86f      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 80036f0:	2b30      	cmp	r3, #48	; 0x30
 80036f2:	d064      	beq.n	80037be <HAL_TIM_ConfigClockSource+0x15a>
 80036f4:	2b30      	cmp	r3, #48	; 0x30
 80036f6:	d86b      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d060      	beq.n	80037be <HAL_TIM_ConfigClockSource+0x15a>
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d867      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003700:	2b00      	cmp	r3, #0
 8003702:	d05c      	beq.n	80037be <HAL_TIM_ConfigClockSource+0x15a>
 8003704:	2b10      	cmp	r3, #16
 8003706:	d05a      	beq.n	80037be <HAL_TIM_ConfigClockSource+0x15a>
 8003708:	e062      	b.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6899      	ldr	r1, [r3, #8]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f000 f9ad 	bl	8003a78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800372c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	609a      	str	r2, [r3, #8]
      break;
 8003736:	e04f      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6818      	ldr	r0, [r3, #0]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	6899      	ldr	r1, [r3, #8]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f000 f996 	bl	8003a78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800375a:	609a      	str	r2, [r3, #8]
      break;
 800375c:	e03c      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	6859      	ldr	r1, [r3, #4]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	461a      	mov	r2, r3
 800376c:	f000 f90a 	bl	8003984 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2150      	movs	r1, #80	; 0x50
 8003776:	4618      	mov	r0, r3
 8003778:	f000 f963 	bl	8003a42 <TIM_ITRx_SetConfig>
      break;
 800377c:	e02c      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	6859      	ldr	r1, [r3, #4]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	461a      	mov	r2, r3
 800378c:	f000 f929 	bl	80039e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2160      	movs	r1, #96	; 0x60
 8003796:	4618      	mov	r0, r3
 8003798:	f000 f953 	bl	8003a42 <TIM_ITRx_SetConfig>
      break;
 800379c:	e01c      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6859      	ldr	r1, [r3, #4]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	461a      	mov	r2, r3
 80037ac:	f000 f8ea 	bl	8003984 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2140      	movs	r1, #64	; 0x40
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f943 	bl	8003a42 <TIM_ITRx_SetConfig>
      break;
 80037bc:	e00c      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4619      	mov	r1, r3
 80037c8:	4610      	mov	r0, r2
 80037ca:	f000 f93a 	bl	8003a42 <TIM_ITRx_SetConfig>
      break;
 80037ce:	e003      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
      break;
 80037d4:	e000      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a40      	ldr	r2, [pc, #256]	; (8003958 <TIM_Base_SetConfig+0x114>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003862:	d00f      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a3d      	ldr	r2, [pc, #244]	; (800395c <TIM_Base_SetConfig+0x118>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00b      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a3c      	ldr	r2, [pc, #240]	; (8003960 <TIM_Base_SetConfig+0x11c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d007      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a3b      	ldr	r2, [pc, #236]	; (8003964 <TIM_Base_SetConfig+0x120>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d003      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a3a      	ldr	r2, [pc, #232]	; (8003968 <TIM_Base_SetConfig+0x124>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d108      	bne.n	8003896 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a2f      	ldr	r2, [pc, #188]	; (8003958 <TIM_Base_SetConfig+0x114>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d02b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a4:	d027      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a2c      	ldr	r2, [pc, #176]	; (800395c <TIM_Base_SetConfig+0x118>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d023      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a2b      	ldr	r2, [pc, #172]	; (8003960 <TIM_Base_SetConfig+0x11c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01f      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a2a      	ldr	r2, [pc, #168]	; (8003964 <TIM_Base_SetConfig+0x120>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a29      	ldr	r2, [pc, #164]	; (8003968 <TIM_Base_SetConfig+0x124>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d017      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a28      	ldr	r2, [pc, #160]	; (800396c <TIM_Base_SetConfig+0x128>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a27      	ldr	r2, [pc, #156]	; (8003970 <TIM_Base_SetConfig+0x12c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00f      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a26      	ldr	r2, [pc, #152]	; (8003974 <TIM_Base_SetConfig+0x130>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a25      	ldr	r2, [pc, #148]	; (8003978 <TIM_Base_SetConfig+0x134>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a24      	ldr	r2, [pc, #144]	; (800397c <TIM_Base_SetConfig+0x138>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d003      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a23      	ldr	r2, [pc, #140]	; (8003980 <TIM_Base_SetConfig+0x13c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d108      	bne.n	8003908 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <TIM_Base_SetConfig+0x114>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d003      	beq.n	800393c <TIM_Base_SetConfig+0xf8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a0c      	ldr	r2, [pc, #48]	; (8003968 <TIM_Base_SetConfig+0x124>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d103      	bne.n	8003944 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	615a      	str	r2, [r3, #20]
}
 800394a:	bf00      	nop
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40010000 	.word	0x40010000
 800395c:	40000400 	.word	0x40000400
 8003960:	40000800 	.word	0x40000800
 8003964:	40000c00 	.word	0x40000c00
 8003968:	40010400 	.word	0x40010400
 800396c:	40014000 	.word	0x40014000
 8003970:	40014400 	.word	0x40014400
 8003974:	40014800 	.word	0x40014800
 8003978:	40001800 	.word	0x40001800
 800397c:	40001c00 	.word	0x40001c00
 8003980:	40002000 	.word	0x40002000

08003984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	f023 0201 	bic.w	r2, r3, #1
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f023 030a 	bic.w	r3, r3, #10
 80039c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	621a      	str	r2, [r3, #32]
}
 80039d6:	bf00      	nop
 80039d8:	371c      	adds	r7, #28
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b087      	sub	sp, #28
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	f023 0210 	bic.w	r2, r3, #16
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	031b      	lsls	r3, r3, #12
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	621a      	str	r2, [r3, #32]
}
 8003a36:	bf00      	nop
 8003a38:	371c      	adds	r7, #28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b085      	sub	sp, #20
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f043 0307 	orr.w	r3, r3, #7
 8003a64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	609a      	str	r2, [r3, #8]
}
 8003a6c:	bf00      	nop
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	021a      	lsls	r2, r3, #8
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	609a      	str	r2, [r3, #8]
}
 8003aac:	bf00      	nop
 8003aae:	371c      	adds	r7, #28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e05a      	b.n	8003b86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a21      	ldr	r2, [pc, #132]	; (8003b94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d022      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1c:	d01d      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1d      	ldr	r2, [pc, #116]	; (8003b98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d018      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1b      	ldr	r2, [pc, #108]	; (8003b9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1a      	ldr	r2, [pc, #104]	; (8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00e      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a18      	ldr	r2, [pc, #96]	; (8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d009      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a17      	ldr	r2, [pc, #92]	; (8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d004      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a15      	ldr	r2, [pc, #84]	; (8003bac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d10c      	bne.n	8003b74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40010000 	.word	0x40010000
 8003b98:	40000400 	.word	0x40000400
 8003b9c:	40000800 	.word	0x40000800
 8003ba0:	40000c00 	.word	0x40000c00
 8003ba4:	40010400 	.word	0x40010400
 8003ba8:	40014000 	.word	0x40014000
 8003bac:	40001800 	.word	0x40001800

08003bb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e03f      	b.n	8003c6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fd fa32 	bl	8001068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2224      	movs	r2, #36	; 0x24
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fd7b 	bl	8004718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b08a      	sub	sp, #40	; 0x28
 8003c76:	af02      	add	r7, sp, #8
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d17c      	bne.n	8003d8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <HAL_UART_Transmit+0x2c>
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e075      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_UART_Transmit+0x3e>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e06e      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2221      	movs	r2, #33	; 0x21
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cc6:	f7fd faa7 	bl	8001218 <HAL_GetTick>
 8003cca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	88fa      	ldrh	r2, [r7, #6]
 8003cd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce0:	d108      	bne.n	8003cf4 <HAL_UART_Transmit+0x82>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d104      	bne.n	8003cf4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	e003      	b.n	8003cfc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d04:	e02a      	b.n	8003d5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2180      	movs	r1, #128	; 0x80
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 faf9 	bl	8004308 <UART_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e036      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10b      	bne.n	8003d3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	3302      	adds	r3, #2
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	e007      	b.n	8003d4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	781a      	ldrb	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1cf      	bne.n	8003d06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2140      	movs	r1, #64	; 0x40
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 fac9 	bl	8004308 <UART_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e006      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e000      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d8c:	2302      	movs	r3, #2
  }
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b0ba      	sub	sp, #232	; 0xe8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10f      	bne.n	8003dfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d009      	beq.n	8003dfe <HAL_UART_IRQHandler+0x66>
 8003dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fbd3 	bl	80045a2 <UART_Receive_IT>
      return;
 8003dfc:	e256      	b.n	80042ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 80de 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x22c>
 8003e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d106      	bne.n	8003e22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80d1 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_UART_IRQHandler+0xae>
 8003e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f043 0201 	orr.w	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <HAL_UART_IRQHandler+0xd2>
 8003e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f043 0202 	orr.w	r2, r3, #2
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00b      	beq.n	8003e8e <HAL_UART_IRQHandler+0xf6>
 8003e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f043 0204 	orr.w	r2, r3, #4
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d011      	beq.n	8003ebe <HAL_UART_IRQHandler+0x126>
 8003e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d105      	bne.n	8003eb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f043 0208 	orr.w	r2, r3, #8
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 81ed 	beq.w	80042a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x14e>
 8003ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fb5e 	bl	80045a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d103      	bne.n	8003f12 <HAL_UART_IRQHandler+0x17a>
 8003f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d04f      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fa66 	bl	80043e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f22:	2b40      	cmp	r3, #64	; 0x40
 8003f24:	d141      	bne.n	8003faa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3314      	adds	r3, #20
 8003f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3314      	adds	r3, #20
 8003f4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1d9      	bne.n	8003f26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d013      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	4a7d      	ldr	r2, [pc, #500]	; (8004174 <HAL_UART_IRQHandler+0x3dc>)
 8003f80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fd fe25 	bl	8001bd6 <HAL_DMA_Abort_IT>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d016      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa0:	e00e      	b.n	8003fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f99a 	bl	80042dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa8:	e00a      	b.n	8003fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f996 	bl	80042dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	e006      	b.n	8003fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f992 	bl	80042dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003fbe:	e170      	b.n	80042a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc0:	bf00      	nop
    return;
 8003fc2:	e16e      	b.n	80042a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	f040 814a 	bne.w	8004262 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd2:	f003 0310 	and.w	r3, r3, #16
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 8143 	beq.w	8004262 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 813c 	beq.w	8004262 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400a:	2b40      	cmp	r3, #64	; 0x40
 800400c:	f040 80b4 	bne.w	8004178 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800401c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8140 	beq.w	80042a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800402a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800402e:	429a      	cmp	r2, r3
 8004030:	f080 8139 	bcs.w	80042a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800403a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004046:	f000 8088 	beq.w	800415a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004058:	e853 3f00 	ldrex	r3, [r3]
 800405c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004060:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004068:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	330c      	adds	r3, #12
 8004072:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004076:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800407a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004082:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800408e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1d9      	bne.n	800404a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3314      	adds	r3, #20
 800409c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80040a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040a8:	f023 0301 	bic.w	r3, r3, #1
 80040ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3314      	adds	r3, #20
 80040b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040c6:	e841 2300 	strex	r3, r2, [r1]
 80040ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1e1      	bne.n	8004096 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3314      	adds	r3, #20
 80040d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040dc:	e853 3f00 	ldrex	r3, [r3]
 80040e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3314      	adds	r3, #20
 80040f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1e3      	bne.n	80040d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	330c      	adds	r3, #12
 800411e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004122:	e853 3f00 	ldrex	r3, [r3]
 8004126:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800412a:	f023 0310 	bic.w	r3, r3, #16
 800412e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	330c      	adds	r3, #12
 8004138:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800413c:	65ba      	str	r2, [r7, #88]	; 0x58
 800413e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004140:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004142:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004144:	e841 2300 	strex	r3, r2, [r1]
 8004148:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800414a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e3      	bne.n	8004118 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	4618      	mov	r0, r3
 8004156:	f7fd fcce 	bl	8001af6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004162:	b29b      	uxth	r3, r3
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	b29b      	uxth	r3, r3
 8004168:	4619      	mov	r1, r3
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f8c0 	bl	80042f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004170:	e099      	b.n	80042a6 <HAL_UART_IRQHandler+0x50e>
 8004172:	bf00      	nop
 8004174:	080044ab 	.word	0x080044ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004180:	b29b      	uxth	r3, r3
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 808b 	beq.w	80042aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004194:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 8086 	beq.w	80042aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	330c      	adds	r3, #12
 80041a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	330c      	adds	r3, #12
 80041be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80041c2:	647a      	str	r2, [r7, #68]	; 0x44
 80041c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e3      	bne.n	800419e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3314      	adds	r3, #20
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	623b      	str	r3, [r7, #32]
   return(result);
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3314      	adds	r3, #20
 80041f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041fa:	633a      	str	r2, [r7, #48]	; 0x30
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004202:	e841 2300 	strex	r3, r2, [r1]
 8004206:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1e3      	bne.n	80041d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	330c      	adds	r3, #12
 8004222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	60fb      	str	r3, [r7, #12]
   return(result);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0310 	bic.w	r3, r3, #16
 8004232:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	330c      	adds	r3, #12
 800423c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004240:	61fa      	str	r2, [r7, #28]
 8004242:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	69b9      	ldr	r1, [r7, #24]
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	617b      	str	r3, [r7, #20]
   return(result);
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e3      	bne.n	800421c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004254:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004258:	4619      	mov	r1, r3
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f848 	bl	80042f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004260:	e023      	b.n	80042aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426a:	2b00      	cmp	r3, #0
 800426c:	d009      	beq.n	8004282 <HAL_UART_IRQHandler+0x4ea>
 800426e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f929 	bl	80044d2 <UART_Transmit_IT>
    return;
 8004280:	e014      	b.n	80042ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00e      	beq.n	80042ac <HAL_UART_IRQHandler+0x514>
 800428e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f969 	bl	8004572 <UART_EndTransmit_IT>
    return;
 80042a0:	e004      	b.n	80042ac <HAL_UART_IRQHandler+0x514>
    return;
 80042a2:	bf00      	nop
 80042a4:	e002      	b.n	80042ac <HAL_UART_IRQHandler+0x514>
      return;
 80042a6:	bf00      	nop
 80042a8:	e000      	b.n	80042ac <HAL_UART_IRQHandler+0x514>
      return;
 80042aa:	bf00      	nop
  }
}
 80042ac:	37e8      	adds	r7, #232	; 0xe8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop

080042b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b090      	sub	sp, #64	; 0x40
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004318:	e050      	b.n	80043bc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d04c      	beq.n	80043bc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004324:	2b00      	cmp	r3, #0
 8004326:	d007      	beq.n	8004338 <UART_WaitOnFlagUntilTimeout+0x30>
 8004328:	f7fc ff76 	bl	8001218 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004334:	429a      	cmp	r2, r3
 8004336:	d241      	bcs.n	80043bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	330c      	adds	r3, #12
 800433e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800434e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004358:	637a      	str	r2, [r7, #52]	; 0x34
 800435a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800435e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e5      	bne.n	8004338 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3314      	adds	r3, #20
 8004372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	613b      	str	r3, [r7, #16]
   return(result);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	63bb      	str	r3, [r7, #56]	; 0x38
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3314      	adds	r3, #20
 800438a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800438c:	623a      	str	r2, [r7, #32]
 800438e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	69f9      	ldr	r1, [r7, #28]
 8004392:	6a3a      	ldr	r2, [r7, #32]
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	61bb      	str	r3, [r7, #24]
   return(result);
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e5      	bne.n	800436c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e00f      	b.n	80043dc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	4013      	ands	r3, r2
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	bf0c      	ite	eq
 80043cc:	2301      	moveq	r3, #1
 80043ce:	2300      	movne	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	461a      	mov	r2, r3
 80043d4:	79fb      	ldrb	r3, [r7, #7]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d09f      	beq.n	800431a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3740      	adds	r7, #64	; 0x40
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b095      	sub	sp, #84	; 0x54
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	330c      	adds	r3, #12
 80043f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	330c      	adds	r3, #12
 800440a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800440c:	643a      	str	r2, [r7, #64]	; 0x40
 800440e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004412:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800441a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e5      	bne.n	80043ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3314      	adds	r3, #20
 8004426:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	e853 3f00 	ldrex	r3, [r3]
 800442e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	64bb      	str	r3, [r7, #72]	; 0x48
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3314      	adds	r3, #20
 800443e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004440:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004448:	e841 2300 	strex	r3, r2, [r1]
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e5      	bne.n	8004420 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	2b01      	cmp	r3, #1
 800445a:	d119      	bne.n	8004490 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	60bb      	str	r3, [r7, #8]
   return(result);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f023 0310 	bic.w	r3, r3, #16
 8004472:	647b      	str	r3, [r7, #68]	; 0x44
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800447c:	61ba      	str	r2, [r7, #24]
 800447e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6979      	ldr	r1, [r7, #20]
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	613b      	str	r3, [r7, #16]
   return(result);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e5      	bne.n	800445c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800449e:	bf00      	nop
 80044a0:	3754      	adds	r7, #84	; 0x54
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b084      	sub	sp, #16
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f7ff ff09 	bl	80042dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044ca:	bf00      	nop
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b085      	sub	sp, #20
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b21      	cmp	r3, #33	; 0x21
 80044e4:	d13e      	bne.n	8004564 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ee:	d114      	bne.n	800451a <UART_Transmit_IT+0x48>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d110      	bne.n	800451a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800450c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	1c9a      	adds	r2, r3, #2
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	621a      	str	r2, [r3, #32]
 8004518:	e008      	b.n	800452c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	1c59      	adds	r1, r3, #1
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6211      	str	r1, [r2, #32]
 8004524:	781a      	ldrb	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29b      	uxth	r3, r3
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	4619      	mov	r1, r3
 800453a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10f      	bne.n	8004560 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800454e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800455e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	e000      	b.n	8004566 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004564:	2302      	movs	r3, #2
  }
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b082      	sub	sp, #8
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004588:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff fe8e 	bl	80042b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b08c      	sub	sp, #48	; 0x30
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b22      	cmp	r3, #34	; 0x22
 80045b4:	f040 80ab 	bne.w	800470e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c0:	d117      	bne.n	80045f2 <UART_Receive_IT+0x50>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d113      	bne.n	80045f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	1c9a      	adds	r2, r3, #2
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	629a      	str	r2, [r3, #40]	; 0x28
 80045f0:	e026      	b.n	8004640 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004604:	d007      	beq.n	8004616 <UART_Receive_IT+0x74>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10a      	bne.n	8004624 <UART_Receive_IT+0x82>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	b2da      	uxtb	r2, r3
 800461e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004620:	701a      	strb	r2, [r3, #0]
 8004622:	e008      	b.n	8004636 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004630:	b2da      	uxtb	r2, r3
 8004632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004634:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b01      	subs	r3, #1
 8004648:	b29b      	uxth	r3, r3
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	4619      	mov	r1, r3
 800464e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004650:	2b00      	cmp	r3, #0
 8004652:	d15a      	bne.n	800470a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0220 	bic.w	r2, r2, #32
 8004662:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004672:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695a      	ldr	r2, [r3, #20]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0201 	bic.w	r2, r2, #1
 8004682:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	2b01      	cmp	r3, #1
 8004692:	d135      	bne.n	8004700 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	330c      	adds	r3, #12
 80046a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	613b      	str	r3, [r7, #16]
   return(result);
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f023 0310 	bic.w	r3, r3, #16
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	330c      	adds	r3, #12
 80046b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ba:	623a      	str	r2, [r7, #32]
 80046bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046be:	69f9      	ldr	r1, [r7, #28]
 80046c0:	6a3a      	ldr	r2, [r7, #32]
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e5      	bne.n	800469a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b10      	cmp	r3, #16
 80046da:	d10a      	bne.n	80046f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046f6:	4619      	mov	r1, r3
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff fdf9 	bl	80042f0 <HAL_UARTEx_RxEventCallback>
 80046fe:	e002      	b.n	8004706 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7ff fde1 	bl	80042c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	e002      	b.n	8004710 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	e000      	b.n	8004710 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800470e:	2302      	movs	r3, #2
  }
}
 8004710:	4618      	mov	r0, r3
 8004712:	3730      	adds	r7, #48	; 0x30
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800471c:	b0c0      	sub	sp, #256	; 0x100
 800471e:	af00      	add	r7, sp, #0
 8004720:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	68d9      	ldr	r1, [r3, #12]
 8004736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	ea40 0301 	orr.w	r3, r0, r1
 8004740:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	431a      	orrs	r2, r3
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	431a      	orrs	r2, r3
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004770:	f021 010c 	bic.w	r1, r1, #12
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800477e:	430b      	orrs	r3, r1
 8004780:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800478e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004792:	6999      	ldr	r1, [r3, #24]
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	ea40 0301 	orr.w	r3, r0, r1
 800479e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	4b8f      	ldr	r3, [pc, #572]	; (80049e4 <UART_SetConfig+0x2cc>)
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d005      	beq.n	80047b8 <UART_SetConfig+0xa0>
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	4b8d      	ldr	r3, [pc, #564]	; (80049e8 <UART_SetConfig+0x2d0>)
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d104      	bne.n	80047c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047b8:	f7fe f8ba 	bl	8002930 <HAL_RCC_GetPCLK2Freq>
 80047bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047c0:	e003      	b.n	80047ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047c2:	f7fe f8a1 	bl	8002908 <HAL_RCC_GetPCLK1Freq>
 80047c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d4:	f040 810c 	bne.w	80049f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047dc:	2200      	movs	r2, #0
 80047de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047ea:	4622      	mov	r2, r4
 80047ec:	462b      	mov	r3, r5
 80047ee:	1891      	adds	r1, r2, r2
 80047f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80047f2:	415b      	adcs	r3, r3
 80047f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047fa:	4621      	mov	r1, r4
 80047fc:	eb12 0801 	adds.w	r8, r2, r1
 8004800:	4629      	mov	r1, r5
 8004802:	eb43 0901 	adc.w	r9, r3, r1
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800481a:	4690      	mov	r8, r2
 800481c:	4699      	mov	r9, r3
 800481e:	4623      	mov	r3, r4
 8004820:	eb18 0303 	adds.w	r3, r8, r3
 8004824:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004828:	462b      	mov	r3, r5
 800482a:	eb49 0303 	adc.w	r3, r9, r3
 800482e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800483e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004842:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004846:	460b      	mov	r3, r1
 8004848:	18db      	adds	r3, r3, r3
 800484a:	653b      	str	r3, [r7, #80]	; 0x50
 800484c:	4613      	mov	r3, r2
 800484e:	eb42 0303 	adc.w	r3, r2, r3
 8004852:	657b      	str	r3, [r7, #84]	; 0x54
 8004854:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004858:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800485c:	f7fb fd20 	bl	80002a0 <__aeabi_uldivmod>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4b61      	ldr	r3, [pc, #388]	; (80049ec <UART_SetConfig+0x2d4>)
 8004866:	fba3 2302 	umull	r2, r3, r3, r2
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	011c      	lsls	r4, r3, #4
 800486e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004872:	2200      	movs	r2, #0
 8004874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004878:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800487c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004880:	4642      	mov	r2, r8
 8004882:	464b      	mov	r3, r9
 8004884:	1891      	adds	r1, r2, r2
 8004886:	64b9      	str	r1, [r7, #72]	; 0x48
 8004888:	415b      	adcs	r3, r3
 800488a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800488c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004890:	4641      	mov	r1, r8
 8004892:	eb12 0a01 	adds.w	sl, r2, r1
 8004896:	4649      	mov	r1, r9
 8004898:	eb43 0b01 	adc.w	fp, r3, r1
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048b0:	4692      	mov	sl, r2
 80048b2:	469b      	mov	fp, r3
 80048b4:	4643      	mov	r3, r8
 80048b6:	eb1a 0303 	adds.w	r3, sl, r3
 80048ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048be:	464b      	mov	r3, r9
 80048c0:	eb4b 0303 	adc.w	r3, fp, r3
 80048c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80048d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048dc:	460b      	mov	r3, r1
 80048de:	18db      	adds	r3, r3, r3
 80048e0:	643b      	str	r3, [r7, #64]	; 0x40
 80048e2:	4613      	mov	r3, r2
 80048e4:	eb42 0303 	adc.w	r3, r2, r3
 80048e8:	647b      	str	r3, [r7, #68]	; 0x44
 80048ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048f2:	f7fb fcd5 	bl	80002a0 <__aeabi_uldivmod>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	4611      	mov	r1, r2
 80048fc:	4b3b      	ldr	r3, [pc, #236]	; (80049ec <UART_SetConfig+0x2d4>)
 80048fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004902:	095b      	lsrs	r3, r3, #5
 8004904:	2264      	movs	r2, #100	; 0x64
 8004906:	fb02 f303 	mul.w	r3, r2, r3
 800490a:	1acb      	subs	r3, r1, r3
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004912:	4b36      	ldr	r3, [pc, #216]	; (80049ec <UART_SetConfig+0x2d4>)
 8004914:	fba3 2302 	umull	r2, r3, r3, r2
 8004918:	095b      	lsrs	r3, r3, #5
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004920:	441c      	add	r4, r3
 8004922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004926:	2200      	movs	r2, #0
 8004928:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800492c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004930:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004934:	4642      	mov	r2, r8
 8004936:	464b      	mov	r3, r9
 8004938:	1891      	adds	r1, r2, r2
 800493a:	63b9      	str	r1, [r7, #56]	; 0x38
 800493c:	415b      	adcs	r3, r3
 800493e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004940:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004944:	4641      	mov	r1, r8
 8004946:	1851      	adds	r1, r2, r1
 8004948:	6339      	str	r1, [r7, #48]	; 0x30
 800494a:	4649      	mov	r1, r9
 800494c:	414b      	adcs	r3, r1
 800494e:	637b      	str	r3, [r7, #52]	; 0x34
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800495c:	4659      	mov	r1, fp
 800495e:	00cb      	lsls	r3, r1, #3
 8004960:	4651      	mov	r1, sl
 8004962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004966:	4651      	mov	r1, sl
 8004968:	00ca      	lsls	r2, r1, #3
 800496a:	4610      	mov	r0, r2
 800496c:	4619      	mov	r1, r3
 800496e:	4603      	mov	r3, r0
 8004970:	4642      	mov	r2, r8
 8004972:	189b      	adds	r3, r3, r2
 8004974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004978:	464b      	mov	r3, r9
 800497a:	460a      	mov	r2, r1
 800497c:	eb42 0303 	adc.w	r3, r2, r3
 8004980:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004990:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004994:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004998:	460b      	mov	r3, r1
 800499a:	18db      	adds	r3, r3, r3
 800499c:	62bb      	str	r3, [r7, #40]	; 0x28
 800499e:	4613      	mov	r3, r2
 80049a0:	eb42 0303 	adc.w	r3, r2, r3
 80049a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049ae:	f7fb fc77 	bl	80002a0 <__aeabi_uldivmod>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <UART_SetConfig+0x2d4>)
 80049b8:	fba3 1302 	umull	r1, r3, r3, r2
 80049bc:	095b      	lsrs	r3, r3, #5
 80049be:	2164      	movs	r1, #100	; 0x64
 80049c0:	fb01 f303 	mul.w	r3, r1, r3
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	3332      	adds	r3, #50	; 0x32
 80049ca:	4a08      	ldr	r2, [pc, #32]	; (80049ec <UART_SetConfig+0x2d4>)
 80049cc:	fba2 2303 	umull	r2, r3, r2, r3
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	f003 0207 	and.w	r2, r3, #7
 80049d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4422      	add	r2, r4
 80049de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049e0:	e105      	b.n	8004bee <UART_SetConfig+0x4d6>
 80049e2:	bf00      	nop
 80049e4:	40011000 	.word	0x40011000
 80049e8:	40011400 	.word	0x40011400
 80049ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049f4:	2200      	movs	r2, #0
 80049f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a02:	4642      	mov	r2, r8
 8004a04:	464b      	mov	r3, r9
 8004a06:	1891      	adds	r1, r2, r2
 8004a08:	6239      	str	r1, [r7, #32]
 8004a0a:	415b      	adcs	r3, r3
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a12:	4641      	mov	r1, r8
 8004a14:	1854      	adds	r4, r2, r1
 8004a16:	4649      	mov	r1, r9
 8004a18:	eb43 0501 	adc.w	r5, r3, r1
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	00eb      	lsls	r3, r5, #3
 8004a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a2a:	00e2      	lsls	r2, r4, #3
 8004a2c:	4614      	mov	r4, r2
 8004a2e:	461d      	mov	r5, r3
 8004a30:	4643      	mov	r3, r8
 8004a32:	18e3      	adds	r3, r4, r3
 8004a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a38:	464b      	mov	r3, r9
 8004a3a:	eb45 0303 	adc.w	r3, r5, r3
 8004a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a5e:	4629      	mov	r1, r5
 8004a60:	008b      	lsls	r3, r1, #2
 8004a62:	4621      	mov	r1, r4
 8004a64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a68:	4621      	mov	r1, r4
 8004a6a:	008a      	lsls	r2, r1, #2
 8004a6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a70:	f7fb fc16 	bl	80002a0 <__aeabi_uldivmod>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4b60      	ldr	r3, [pc, #384]	; (8004bfc <UART_SetConfig+0x4e4>)
 8004a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a7e:	095b      	lsrs	r3, r3, #5
 8004a80:	011c      	lsls	r4, r3, #4
 8004a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a94:	4642      	mov	r2, r8
 8004a96:	464b      	mov	r3, r9
 8004a98:	1891      	adds	r1, r2, r2
 8004a9a:	61b9      	str	r1, [r7, #24]
 8004a9c:	415b      	adcs	r3, r3
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004aa4:	4641      	mov	r1, r8
 8004aa6:	1851      	adds	r1, r2, r1
 8004aa8:	6139      	str	r1, [r7, #16]
 8004aaa:	4649      	mov	r1, r9
 8004aac:	414b      	adcs	r3, r1
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004abc:	4659      	mov	r1, fp
 8004abe:	00cb      	lsls	r3, r1, #3
 8004ac0:	4651      	mov	r1, sl
 8004ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ac6:	4651      	mov	r1, sl
 8004ac8:	00ca      	lsls	r2, r1, #3
 8004aca:	4610      	mov	r0, r2
 8004acc:	4619      	mov	r1, r3
 8004ace:	4603      	mov	r3, r0
 8004ad0:	4642      	mov	r2, r8
 8004ad2:	189b      	adds	r3, r3, r2
 8004ad4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ad8:	464b      	mov	r3, r9
 8004ada:	460a      	mov	r2, r1
 8004adc:	eb42 0303 	adc.w	r3, r2, r3
 8004ae0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	67bb      	str	r3, [r7, #120]	; 0x78
 8004aee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004afc:	4649      	mov	r1, r9
 8004afe:	008b      	lsls	r3, r1, #2
 8004b00:	4641      	mov	r1, r8
 8004b02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b06:	4641      	mov	r1, r8
 8004b08:	008a      	lsls	r2, r1, #2
 8004b0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b0e:	f7fb fbc7 	bl	80002a0 <__aeabi_uldivmod>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	4b39      	ldr	r3, [pc, #228]	; (8004bfc <UART_SetConfig+0x4e4>)
 8004b18:	fba3 1302 	umull	r1, r3, r3, r2
 8004b1c:	095b      	lsrs	r3, r3, #5
 8004b1e:	2164      	movs	r1, #100	; 0x64
 8004b20:	fb01 f303 	mul.w	r3, r1, r3
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	3332      	adds	r3, #50	; 0x32
 8004b2a:	4a34      	ldr	r2, [pc, #208]	; (8004bfc <UART_SetConfig+0x4e4>)
 8004b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b30:	095b      	lsrs	r3, r3, #5
 8004b32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b36:	441c      	add	r4, r3
 8004b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	673b      	str	r3, [r7, #112]	; 0x70
 8004b40:	677a      	str	r2, [r7, #116]	; 0x74
 8004b42:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b46:	4642      	mov	r2, r8
 8004b48:	464b      	mov	r3, r9
 8004b4a:	1891      	adds	r1, r2, r2
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	415b      	adcs	r3, r3
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b56:	4641      	mov	r1, r8
 8004b58:	1851      	adds	r1, r2, r1
 8004b5a:	6039      	str	r1, [r7, #0]
 8004b5c:	4649      	mov	r1, r9
 8004b5e:	414b      	adcs	r3, r1
 8004b60:	607b      	str	r3, [r7, #4]
 8004b62:	f04f 0200 	mov.w	r2, #0
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b6e:	4659      	mov	r1, fp
 8004b70:	00cb      	lsls	r3, r1, #3
 8004b72:	4651      	mov	r1, sl
 8004b74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b78:	4651      	mov	r1, sl
 8004b7a:	00ca      	lsls	r2, r1, #3
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4603      	mov	r3, r0
 8004b82:	4642      	mov	r2, r8
 8004b84:	189b      	adds	r3, r3, r2
 8004b86:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b88:	464b      	mov	r3, r9
 8004b8a:	460a      	mov	r2, r1
 8004b8c:	eb42 0303 	adc.w	r3, r2, r3
 8004b90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	663b      	str	r3, [r7, #96]	; 0x60
 8004b9c:	667a      	str	r2, [r7, #100]	; 0x64
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004baa:	4649      	mov	r1, r9
 8004bac:	008b      	lsls	r3, r1, #2
 8004bae:	4641      	mov	r1, r8
 8004bb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bb4:	4641      	mov	r1, r8
 8004bb6:	008a      	lsls	r2, r1, #2
 8004bb8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004bbc:	f7fb fb70 	bl	80002a0 <__aeabi_uldivmod>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4b0d      	ldr	r3, [pc, #52]	; (8004bfc <UART_SetConfig+0x4e4>)
 8004bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	2164      	movs	r1, #100	; 0x64
 8004bce:	fb01 f303 	mul.w	r3, r1, r3
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	3332      	adds	r3, #50	; 0x32
 8004bd8:	4a08      	ldr	r2, [pc, #32]	; (8004bfc <UART_SetConfig+0x4e4>)
 8004bda:	fba2 2303 	umull	r2, r3, r2, r3
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	f003 020f 	and.w	r2, r3, #15
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4422      	add	r2, r4
 8004bec:	609a      	str	r2, [r3, #8]
}
 8004bee:	bf00      	nop
 8004bf0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bfa:	bf00      	nop
 8004bfc:	51eb851f 	.word	0x51eb851f

08004c00 <__errno>:
 8004c00:	4b01      	ldr	r3, [pc, #4]	; (8004c08 <__errno+0x8>)
 8004c02:	6818      	ldr	r0, [r3, #0]
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	2000000c 	.word	0x2000000c

08004c0c <__libc_init_array>:
 8004c0c:	b570      	push	{r4, r5, r6, lr}
 8004c0e:	4d0d      	ldr	r5, [pc, #52]	; (8004c44 <__libc_init_array+0x38>)
 8004c10:	4c0d      	ldr	r4, [pc, #52]	; (8004c48 <__libc_init_array+0x3c>)
 8004c12:	1b64      	subs	r4, r4, r5
 8004c14:	10a4      	asrs	r4, r4, #2
 8004c16:	2600      	movs	r6, #0
 8004c18:	42a6      	cmp	r6, r4
 8004c1a:	d109      	bne.n	8004c30 <__libc_init_array+0x24>
 8004c1c:	4d0b      	ldr	r5, [pc, #44]	; (8004c4c <__libc_init_array+0x40>)
 8004c1e:	4c0c      	ldr	r4, [pc, #48]	; (8004c50 <__libc_init_array+0x44>)
 8004c20:	f001 fa00 	bl	8006024 <_init>
 8004c24:	1b64      	subs	r4, r4, r5
 8004c26:	10a4      	asrs	r4, r4, #2
 8004c28:	2600      	movs	r6, #0
 8004c2a:	42a6      	cmp	r6, r4
 8004c2c:	d105      	bne.n	8004c3a <__libc_init_array+0x2e>
 8004c2e:	bd70      	pop	{r4, r5, r6, pc}
 8004c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c34:	4798      	blx	r3
 8004c36:	3601      	adds	r6, #1
 8004c38:	e7ee      	b.n	8004c18 <__libc_init_array+0xc>
 8004c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c3e:	4798      	blx	r3
 8004c40:	3601      	adds	r6, #1
 8004c42:	e7f2      	b.n	8004c2a <__libc_init_array+0x1e>
 8004c44:	08006164 	.word	0x08006164
 8004c48:	08006164 	.word	0x08006164
 8004c4c:	08006164 	.word	0x08006164
 8004c50:	08006168 	.word	0x08006168

08004c54 <memset>:
 8004c54:	4402      	add	r2, r0
 8004c56:	4603      	mov	r3, r0
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d100      	bne.n	8004c5e <memset+0xa>
 8004c5c:	4770      	bx	lr
 8004c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c62:	e7f9      	b.n	8004c58 <memset+0x4>

08004c64 <iprintf>:
 8004c64:	b40f      	push	{r0, r1, r2, r3}
 8004c66:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <iprintf+0x2c>)
 8004c68:	b513      	push	{r0, r1, r4, lr}
 8004c6a:	681c      	ldr	r4, [r3, #0]
 8004c6c:	b124      	cbz	r4, 8004c78 <iprintf+0x14>
 8004c6e:	69a3      	ldr	r3, [r4, #24]
 8004c70:	b913      	cbnz	r3, 8004c78 <iprintf+0x14>
 8004c72:	4620      	mov	r0, r4
 8004c74:	f000 fa7e 	bl	8005174 <__sinit>
 8004c78:	ab05      	add	r3, sp, #20
 8004c7a:	9a04      	ldr	r2, [sp, #16]
 8004c7c:	68a1      	ldr	r1, [r4, #8]
 8004c7e:	9301      	str	r3, [sp, #4]
 8004c80:	4620      	mov	r0, r4
 8004c82:	f000 fde3 	bl	800584c <_vfiprintf_r>
 8004c86:	b002      	add	sp, #8
 8004c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c8c:	b004      	add	sp, #16
 8004c8e:	4770      	bx	lr
 8004c90:	2000000c 	.word	0x2000000c

08004c94 <_puts_r>:
 8004c94:	b570      	push	{r4, r5, r6, lr}
 8004c96:	460e      	mov	r6, r1
 8004c98:	4605      	mov	r5, r0
 8004c9a:	b118      	cbz	r0, 8004ca4 <_puts_r+0x10>
 8004c9c:	6983      	ldr	r3, [r0, #24]
 8004c9e:	b90b      	cbnz	r3, 8004ca4 <_puts_r+0x10>
 8004ca0:	f000 fa68 	bl	8005174 <__sinit>
 8004ca4:	69ab      	ldr	r3, [r5, #24]
 8004ca6:	68ac      	ldr	r4, [r5, #8]
 8004ca8:	b913      	cbnz	r3, 8004cb0 <_puts_r+0x1c>
 8004caa:	4628      	mov	r0, r5
 8004cac:	f000 fa62 	bl	8005174 <__sinit>
 8004cb0:	4b2c      	ldr	r3, [pc, #176]	; (8004d64 <_puts_r+0xd0>)
 8004cb2:	429c      	cmp	r4, r3
 8004cb4:	d120      	bne.n	8004cf8 <_puts_r+0x64>
 8004cb6:	686c      	ldr	r4, [r5, #4]
 8004cb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cba:	07db      	lsls	r3, r3, #31
 8004cbc:	d405      	bmi.n	8004cca <_puts_r+0x36>
 8004cbe:	89a3      	ldrh	r3, [r4, #12]
 8004cc0:	0598      	lsls	r0, r3, #22
 8004cc2:	d402      	bmi.n	8004cca <_puts_r+0x36>
 8004cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cc6:	f000 faf3 	bl	80052b0 <__retarget_lock_acquire_recursive>
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	0719      	lsls	r1, r3, #28
 8004cce:	d51d      	bpl.n	8004d0c <_puts_r+0x78>
 8004cd0:	6923      	ldr	r3, [r4, #16]
 8004cd2:	b1db      	cbz	r3, 8004d0c <_puts_r+0x78>
 8004cd4:	3e01      	subs	r6, #1
 8004cd6:	68a3      	ldr	r3, [r4, #8]
 8004cd8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	60a3      	str	r3, [r4, #8]
 8004ce0:	bb39      	cbnz	r1, 8004d32 <_puts_r+0x9e>
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	da38      	bge.n	8004d58 <_puts_r+0xc4>
 8004ce6:	4622      	mov	r2, r4
 8004ce8:	210a      	movs	r1, #10
 8004cea:	4628      	mov	r0, r5
 8004cec:	f000 f868 	bl	8004dc0 <__swbuf_r>
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	d011      	beq.n	8004d18 <_puts_r+0x84>
 8004cf4:	250a      	movs	r5, #10
 8004cf6:	e011      	b.n	8004d1c <_puts_r+0x88>
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <_puts_r+0xd4>)
 8004cfa:	429c      	cmp	r4, r3
 8004cfc:	d101      	bne.n	8004d02 <_puts_r+0x6e>
 8004cfe:	68ac      	ldr	r4, [r5, #8]
 8004d00:	e7da      	b.n	8004cb8 <_puts_r+0x24>
 8004d02:	4b1a      	ldr	r3, [pc, #104]	; (8004d6c <_puts_r+0xd8>)
 8004d04:	429c      	cmp	r4, r3
 8004d06:	bf08      	it	eq
 8004d08:	68ec      	ldreq	r4, [r5, #12]
 8004d0a:	e7d5      	b.n	8004cb8 <_puts_r+0x24>
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	4628      	mov	r0, r5
 8004d10:	f000 f8a8 	bl	8004e64 <__swsetup_r>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	d0dd      	beq.n	8004cd4 <_puts_r+0x40>
 8004d18:	f04f 35ff 	mov.w	r5, #4294967295
 8004d1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d1e:	07da      	lsls	r2, r3, #31
 8004d20:	d405      	bmi.n	8004d2e <_puts_r+0x9a>
 8004d22:	89a3      	ldrh	r3, [r4, #12]
 8004d24:	059b      	lsls	r3, r3, #22
 8004d26:	d402      	bmi.n	8004d2e <_puts_r+0x9a>
 8004d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d2a:	f000 fac2 	bl	80052b2 <__retarget_lock_release_recursive>
 8004d2e:	4628      	mov	r0, r5
 8004d30:	bd70      	pop	{r4, r5, r6, pc}
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	da04      	bge.n	8004d40 <_puts_r+0xac>
 8004d36:	69a2      	ldr	r2, [r4, #24]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	dc06      	bgt.n	8004d4a <_puts_r+0xb6>
 8004d3c:	290a      	cmp	r1, #10
 8004d3e:	d004      	beq.n	8004d4a <_puts_r+0xb6>
 8004d40:	6823      	ldr	r3, [r4, #0]
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	6022      	str	r2, [r4, #0]
 8004d46:	7019      	strb	r1, [r3, #0]
 8004d48:	e7c5      	b.n	8004cd6 <_puts_r+0x42>
 8004d4a:	4622      	mov	r2, r4
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	f000 f837 	bl	8004dc0 <__swbuf_r>
 8004d52:	3001      	adds	r0, #1
 8004d54:	d1bf      	bne.n	8004cd6 <_puts_r+0x42>
 8004d56:	e7df      	b.n	8004d18 <_puts_r+0x84>
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	250a      	movs	r5, #10
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	6022      	str	r2, [r4, #0]
 8004d60:	701d      	strb	r5, [r3, #0]
 8004d62:	e7db      	b.n	8004d1c <_puts_r+0x88>
 8004d64:	080060e8 	.word	0x080060e8
 8004d68:	08006108 	.word	0x08006108
 8004d6c:	080060c8 	.word	0x080060c8

08004d70 <puts>:
 8004d70:	4b02      	ldr	r3, [pc, #8]	; (8004d7c <puts+0xc>)
 8004d72:	4601      	mov	r1, r0
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	f7ff bf8d 	b.w	8004c94 <_puts_r>
 8004d7a:	bf00      	nop
 8004d7c:	2000000c 	.word	0x2000000c

08004d80 <siprintf>:
 8004d80:	b40e      	push	{r1, r2, r3}
 8004d82:	b500      	push	{lr}
 8004d84:	b09c      	sub	sp, #112	; 0x70
 8004d86:	ab1d      	add	r3, sp, #116	; 0x74
 8004d88:	9002      	str	r0, [sp, #8]
 8004d8a:	9006      	str	r0, [sp, #24]
 8004d8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d90:	4809      	ldr	r0, [pc, #36]	; (8004db8 <siprintf+0x38>)
 8004d92:	9107      	str	r1, [sp, #28]
 8004d94:	9104      	str	r1, [sp, #16]
 8004d96:	4909      	ldr	r1, [pc, #36]	; (8004dbc <siprintf+0x3c>)
 8004d98:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d9c:	9105      	str	r1, [sp, #20]
 8004d9e:	6800      	ldr	r0, [r0, #0]
 8004da0:	9301      	str	r3, [sp, #4]
 8004da2:	a902      	add	r1, sp, #8
 8004da4:	f000 fc28 	bl	80055f8 <_svfiprintf_r>
 8004da8:	9b02      	ldr	r3, [sp, #8]
 8004daa:	2200      	movs	r2, #0
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	b01c      	add	sp, #112	; 0x70
 8004db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004db4:	b003      	add	sp, #12
 8004db6:	4770      	bx	lr
 8004db8:	2000000c 	.word	0x2000000c
 8004dbc:	ffff0208 	.word	0xffff0208

08004dc0 <__swbuf_r>:
 8004dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc2:	460e      	mov	r6, r1
 8004dc4:	4614      	mov	r4, r2
 8004dc6:	4605      	mov	r5, r0
 8004dc8:	b118      	cbz	r0, 8004dd2 <__swbuf_r+0x12>
 8004dca:	6983      	ldr	r3, [r0, #24]
 8004dcc:	b90b      	cbnz	r3, 8004dd2 <__swbuf_r+0x12>
 8004dce:	f000 f9d1 	bl	8005174 <__sinit>
 8004dd2:	4b21      	ldr	r3, [pc, #132]	; (8004e58 <__swbuf_r+0x98>)
 8004dd4:	429c      	cmp	r4, r3
 8004dd6:	d12b      	bne.n	8004e30 <__swbuf_r+0x70>
 8004dd8:	686c      	ldr	r4, [r5, #4]
 8004dda:	69a3      	ldr	r3, [r4, #24]
 8004ddc:	60a3      	str	r3, [r4, #8]
 8004dde:	89a3      	ldrh	r3, [r4, #12]
 8004de0:	071a      	lsls	r2, r3, #28
 8004de2:	d52f      	bpl.n	8004e44 <__swbuf_r+0x84>
 8004de4:	6923      	ldr	r3, [r4, #16]
 8004de6:	b36b      	cbz	r3, 8004e44 <__swbuf_r+0x84>
 8004de8:	6923      	ldr	r3, [r4, #16]
 8004dea:	6820      	ldr	r0, [r4, #0]
 8004dec:	1ac0      	subs	r0, r0, r3
 8004dee:	6963      	ldr	r3, [r4, #20]
 8004df0:	b2f6      	uxtb	r6, r6
 8004df2:	4283      	cmp	r3, r0
 8004df4:	4637      	mov	r7, r6
 8004df6:	dc04      	bgt.n	8004e02 <__swbuf_r+0x42>
 8004df8:	4621      	mov	r1, r4
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	f000 f926 	bl	800504c <_fflush_r>
 8004e00:	bb30      	cbnz	r0, 8004e50 <__swbuf_r+0x90>
 8004e02:	68a3      	ldr	r3, [r4, #8]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	60a3      	str	r3, [r4, #8]
 8004e08:	6823      	ldr	r3, [r4, #0]
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	6022      	str	r2, [r4, #0]
 8004e0e:	701e      	strb	r6, [r3, #0]
 8004e10:	6963      	ldr	r3, [r4, #20]
 8004e12:	3001      	adds	r0, #1
 8004e14:	4283      	cmp	r3, r0
 8004e16:	d004      	beq.n	8004e22 <__swbuf_r+0x62>
 8004e18:	89a3      	ldrh	r3, [r4, #12]
 8004e1a:	07db      	lsls	r3, r3, #31
 8004e1c:	d506      	bpl.n	8004e2c <__swbuf_r+0x6c>
 8004e1e:	2e0a      	cmp	r6, #10
 8004e20:	d104      	bne.n	8004e2c <__swbuf_r+0x6c>
 8004e22:	4621      	mov	r1, r4
 8004e24:	4628      	mov	r0, r5
 8004e26:	f000 f911 	bl	800504c <_fflush_r>
 8004e2a:	b988      	cbnz	r0, 8004e50 <__swbuf_r+0x90>
 8004e2c:	4638      	mov	r0, r7
 8004e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e30:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <__swbuf_r+0x9c>)
 8004e32:	429c      	cmp	r4, r3
 8004e34:	d101      	bne.n	8004e3a <__swbuf_r+0x7a>
 8004e36:	68ac      	ldr	r4, [r5, #8]
 8004e38:	e7cf      	b.n	8004dda <__swbuf_r+0x1a>
 8004e3a:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <__swbuf_r+0xa0>)
 8004e3c:	429c      	cmp	r4, r3
 8004e3e:	bf08      	it	eq
 8004e40:	68ec      	ldreq	r4, [r5, #12]
 8004e42:	e7ca      	b.n	8004dda <__swbuf_r+0x1a>
 8004e44:	4621      	mov	r1, r4
 8004e46:	4628      	mov	r0, r5
 8004e48:	f000 f80c 	bl	8004e64 <__swsetup_r>
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d0cb      	beq.n	8004de8 <__swbuf_r+0x28>
 8004e50:	f04f 37ff 	mov.w	r7, #4294967295
 8004e54:	e7ea      	b.n	8004e2c <__swbuf_r+0x6c>
 8004e56:	bf00      	nop
 8004e58:	080060e8 	.word	0x080060e8
 8004e5c:	08006108 	.word	0x08006108
 8004e60:	080060c8 	.word	0x080060c8

08004e64 <__swsetup_r>:
 8004e64:	4b32      	ldr	r3, [pc, #200]	; (8004f30 <__swsetup_r+0xcc>)
 8004e66:	b570      	push	{r4, r5, r6, lr}
 8004e68:	681d      	ldr	r5, [r3, #0]
 8004e6a:	4606      	mov	r6, r0
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	b125      	cbz	r5, 8004e7a <__swsetup_r+0x16>
 8004e70:	69ab      	ldr	r3, [r5, #24]
 8004e72:	b913      	cbnz	r3, 8004e7a <__swsetup_r+0x16>
 8004e74:	4628      	mov	r0, r5
 8004e76:	f000 f97d 	bl	8005174 <__sinit>
 8004e7a:	4b2e      	ldr	r3, [pc, #184]	; (8004f34 <__swsetup_r+0xd0>)
 8004e7c:	429c      	cmp	r4, r3
 8004e7e:	d10f      	bne.n	8004ea0 <__swsetup_r+0x3c>
 8004e80:	686c      	ldr	r4, [r5, #4]
 8004e82:	89a3      	ldrh	r3, [r4, #12]
 8004e84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e88:	0719      	lsls	r1, r3, #28
 8004e8a:	d42c      	bmi.n	8004ee6 <__swsetup_r+0x82>
 8004e8c:	06dd      	lsls	r5, r3, #27
 8004e8e:	d411      	bmi.n	8004eb4 <__swsetup_r+0x50>
 8004e90:	2309      	movs	r3, #9
 8004e92:	6033      	str	r3, [r6, #0]
 8004e94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e98:	81a3      	strh	r3, [r4, #12]
 8004e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9e:	e03e      	b.n	8004f1e <__swsetup_r+0xba>
 8004ea0:	4b25      	ldr	r3, [pc, #148]	; (8004f38 <__swsetup_r+0xd4>)
 8004ea2:	429c      	cmp	r4, r3
 8004ea4:	d101      	bne.n	8004eaa <__swsetup_r+0x46>
 8004ea6:	68ac      	ldr	r4, [r5, #8]
 8004ea8:	e7eb      	b.n	8004e82 <__swsetup_r+0x1e>
 8004eaa:	4b24      	ldr	r3, [pc, #144]	; (8004f3c <__swsetup_r+0xd8>)
 8004eac:	429c      	cmp	r4, r3
 8004eae:	bf08      	it	eq
 8004eb0:	68ec      	ldreq	r4, [r5, #12]
 8004eb2:	e7e6      	b.n	8004e82 <__swsetup_r+0x1e>
 8004eb4:	0758      	lsls	r0, r3, #29
 8004eb6:	d512      	bpl.n	8004ede <__swsetup_r+0x7a>
 8004eb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004eba:	b141      	cbz	r1, 8004ece <__swsetup_r+0x6a>
 8004ebc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ec0:	4299      	cmp	r1, r3
 8004ec2:	d002      	beq.n	8004eca <__swsetup_r+0x66>
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	f000 fa5b 	bl	8005380 <_free_r>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	6363      	str	r3, [r4, #52]	; 0x34
 8004ece:	89a3      	ldrh	r3, [r4, #12]
 8004ed0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ed4:	81a3      	strh	r3, [r4, #12]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	6063      	str	r3, [r4, #4]
 8004eda:	6923      	ldr	r3, [r4, #16]
 8004edc:	6023      	str	r3, [r4, #0]
 8004ede:	89a3      	ldrh	r3, [r4, #12]
 8004ee0:	f043 0308 	orr.w	r3, r3, #8
 8004ee4:	81a3      	strh	r3, [r4, #12]
 8004ee6:	6923      	ldr	r3, [r4, #16]
 8004ee8:	b94b      	cbnz	r3, 8004efe <__swsetup_r+0x9a>
 8004eea:	89a3      	ldrh	r3, [r4, #12]
 8004eec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ef4:	d003      	beq.n	8004efe <__swsetup_r+0x9a>
 8004ef6:	4621      	mov	r1, r4
 8004ef8:	4630      	mov	r0, r6
 8004efa:	f000 fa01 	bl	8005300 <__smakebuf_r>
 8004efe:	89a0      	ldrh	r0, [r4, #12]
 8004f00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f04:	f010 0301 	ands.w	r3, r0, #1
 8004f08:	d00a      	beq.n	8004f20 <__swsetup_r+0xbc>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60a3      	str	r3, [r4, #8]
 8004f0e:	6963      	ldr	r3, [r4, #20]
 8004f10:	425b      	negs	r3, r3
 8004f12:	61a3      	str	r3, [r4, #24]
 8004f14:	6923      	ldr	r3, [r4, #16]
 8004f16:	b943      	cbnz	r3, 8004f2a <__swsetup_r+0xc6>
 8004f18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f1c:	d1ba      	bne.n	8004e94 <__swsetup_r+0x30>
 8004f1e:	bd70      	pop	{r4, r5, r6, pc}
 8004f20:	0781      	lsls	r1, r0, #30
 8004f22:	bf58      	it	pl
 8004f24:	6963      	ldrpl	r3, [r4, #20]
 8004f26:	60a3      	str	r3, [r4, #8]
 8004f28:	e7f4      	b.n	8004f14 <__swsetup_r+0xb0>
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	e7f7      	b.n	8004f1e <__swsetup_r+0xba>
 8004f2e:	bf00      	nop
 8004f30:	2000000c 	.word	0x2000000c
 8004f34:	080060e8 	.word	0x080060e8
 8004f38:	08006108 	.word	0x08006108
 8004f3c:	080060c8 	.word	0x080060c8

08004f40 <__sflush_r>:
 8004f40:	898a      	ldrh	r2, [r1, #12]
 8004f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f46:	4605      	mov	r5, r0
 8004f48:	0710      	lsls	r0, r2, #28
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	d458      	bmi.n	8005000 <__sflush_r+0xc0>
 8004f4e:	684b      	ldr	r3, [r1, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	dc05      	bgt.n	8004f60 <__sflush_r+0x20>
 8004f54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	dc02      	bgt.n	8004f60 <__sflush_r+0x20>
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f62:	2e00      	cmp	r6, #0
 8004f64:	d0f9      	beq.n	8004f5a <__sflush_r+0x1a>
 8004f66:	2300      	movs	r3, #0
 8004f68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f6c:	682f      	ldr	r7, [r5, #0]
 8004f6e:	602b      	str	r3, [r5, #0]
 8004f70:	d032      	beq.n	8004fd8 <__sflush_r+0x98>
 8004f72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f74:	89a3      	ldrh	r3, [r4, #12]
 8004f76:	075a      	lsls	r2, r3, #29
 8004f78:	d505      	bpl.n	8004f86 <__sflush_r+0x46>
 8004f7a:	6863      	ldr	r3, [r4, #4]
 8004f7c:	1ac0      	subs	r0, r0, r3
 8004f7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f80:	b10b      	cbz	r3, 8004f86 <__sflush_r+0x46>
 8004f82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f84:	1ac0      	subs	r0, r0, r3
 8004f86:	2300      	movs	r3, #0
 8004f88:	4602      	mov	r2, r0
 8004f8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f8c:	6a21      	ldr	r1, [r4, #32]
 8004f8e:	4628      	mov	r0, r5
 8004f90:	47b0      	blx	r6
 8004f92:	1c43      	adds	r3, r0, #1
 8004f94:	89a3      	ldrh	r3, [r4, #12]
 8004f96:	d106      	bne.n	8004fa6 <__sflush_r+0x66>
 8004f98:	6829      	ldr	r1, [r5, #0]
 8004f9a:	291d      	cmp	r1, #29
 8004f9c:	d82c      	bhi.n	8004ff8 <__sflush_r+0xb8>
 8004f9e:	4a2a      	ldr	r2, [pc, #168]	; (8005048 <__sflush_r+0x108>)
 8004fa0:	40ca      	lsrs	r2, r1
 8004fa2:	07d6      	lsls	r6, r2, #31
 8004fa4:	d528      	bpl.n	8004ff8 <__sflush_r+0xb8>
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	6062      	str	r2, [r4, #4]
 8004faa:	04d9      	lsls	r1, r3, #19
 8004fac:	6922      	ldr	r2, [r4, #16]
 8004fae:	6022      	str	r2, [r4, #0]
 8004fb0:	d504      	bpl.n	8004fbc <__sflush_r+0x7c>
 8004fb2:	1c42      	adds	r2, r0, #1
 8004fb4:	d101      	bne.n	8004fba <__sflush_r+0x7a>
 8004fb6:	682b      	ldr	r3, [r5, #0]
 8004fb8:	b903      	cbnz	r3, 8004fbc <__sflush_r+0x7c>
 8004fba:	6560      	str	r0, [r4, #84]	; 0x54
 8004fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fbe:	602f      	str	r7, [r5, #0]
 8004fc0:	2900      	cmp	r1, #0
 8004fc2:	d0ca      	beq.n	8004f5a <__sflush_r+0x1a>
 8004fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fc8:	4299      	cmp	r1, r3
 8004fca:	d002      	beq.n	8004fd2 <__sflush_r+0x92>
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f000 f9d7 	bl	8005380 <_free_r>
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	6360      	str	r0, [r4, #52]	; 0x34
 8004fd6:	e7c1      	b.n	8004f5c <__sflush_r+0x1c>
 8004fd8:	6a21      	ldr	r1, [r4, #32]
 8004fda:	2301      	movs	r3, #1
 8004fdc:	4628      	mov	r0, r5
 8004fde:	47b0      	blx	r6
 8004fe0:	1c41      	adds	r1, r0, #1
 8004fe2:	d1c7      	bne.n	8004f74 <__sflush_r+0x34>
 8004fe4:	682b      	ldr	r3, [r5, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0c4      	beq.n	8004f74 <__sflush_r+0x34>
 8004fea:	2b1d      	cmp	r3, #29
 8004fec:	d001      	beq.n	8004ff2 <__sflush_r+0xb2>
 8004fee:	2b16      	cmp	r3, #22
 8004ff0:	d101      	bne.n	8004ff6 <__sflush_r+0xb6>
 8004ff2:	602f      	str	r7, [r5, #0]
 8004ff4:	e7b1      	b.n	8004f5a <__sflush_r+0x1a>
 8004ff6:	89a3      	ldrh	r3, [r4, #12]
 8004ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ffc:	81a3      	strh	r3, [r4, #12]
 8004ffe:	e7ad      	b.n	8004f5c <__sflush_r+0x1c>
 8005000:	690f      	ldr	r7, [r1, #16]
 8005002:	2f00      	cmp	r7, #0
 8005004:	d0a9      	beq.n	8004f5a <__sflush_r+0x1a>
 8005006:	0793      	lsls	r3, r2, #30
 8005008:	680e      	ldr	r6, [r1, #0]
 800500a:	bf08      	it	eq
 800500c:	694b      	ldreq	r3, [r1, #20]
 800500e:	600f      	str	r7, [r1, #0]
 8005010:	bf18      	it	ne
 8005012:	2300      	movne	r3, #0
 8005014:	eba6 0807 	sub.w	r8, r6, r7
 8005018:	608b      	str	r3, [r1, #8]
 800501a:	f1b8 0f00 	cmp.w	r8, #0
 800501e:	dd9c      	ble.n	8004f5a <__sflush_r+0x1a>
 8005020:	6a21      	ldr	r1, [r4, #32]
 8005022:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005024:	4643      	mov	r3, r8
 8005026:	463a      	mov	r2, r7
 8005028:	4628      	mov	r0, r5
 800502a:	47b0      	blx	r6
 800502c:	2800      	cmp	r0, #0
 800502e:	dc06      	bgt.n	800503e <__sflush_r+0xfe>
 8005030:	89a3      	ldrh	r3, [r4, #12]
 8005032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005036:	81a3      	strh	r3, [r4, #12]
 8005038:	f04f 30ff 	mov.w	r0, #4294967295
 800503c:	e78e      	b.n	8004f5c <__sflush_r+0x1c>
 800503e:	4407      	add	r7, r0
 8005040:	eba8 0800 	sub.w	r8, r8, r0
 8005044:	e7e9      	b.n	800501a <__sflush_r+0xda>
 8005046:	bf00      	nop
 8005048:	20400001 	.word	0x20400001

0800504c <_fflush_r>:
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	690b      	ldr	r3, [r1, #16]
 8005050:	4605      	mov	r5, r0
 8005052:	460c      	mov	r4, r1
 8005054:	b913      	cbnz	r3, 800505c <_fflush_r+0x10>
 8005056:	2500      	movs	r5, #0
 8005058:	4628      	mov	r0, r5
 800505a:	bd38      	pop	{r3, r4, r5, pc}
 800505c:	b118      	cbz	r0, 8005066 <_fflush_r+0x1a>
 800505e:	6983      	ldr	r3, [r0, #24]
 8005060:	b90b      	cbnz	r3, 8005066 <_fflush_r+0x1a>
 8005062:	f000 f887 	bl	8005174 <__sinit>
 8005066:	4b14      	ldr	r3, [pc, #80]	; (80050b8 <_fflush_r+0x6c>)
 8005068:	429c      	cmp	r4, r3
 800506a:	d11b      	bne.n	80050a4 <_fflush_r+0x58>
 800506c:	686c      	ldr	r4, [r5, #4]
 800506e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0ef      	beq.n	8005056 <_fflush_r+0xa>
 8005076:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005078:	07d0      	lsls	r0, r2, #31
 800507a:	d404      	bmi.n	8005086 <_fflush_r+0x3a>
 800507c:	0599      	lsls	r1, r3, #22
 800507e:	d402      	bmi.n	8005086 <_fflush_r+0x3a>
 8005080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005082:	f000 f915 	bl	80052b0 <__retarget_lock_acquire_recursive>
 8005086:	4628      	mov	r0, r5
 8005088:	4621      	mov	r1, r4
 800508a:	f7ff ff59 	bl	8004f40 <__sflush_r>
 800508e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005090:	07da      	lsls	r2, r3, #31
 8005092:	4605      	mov	r5, r0
 8005094:	d4e0      	bmi.n	8005058 <_fflush_r+0xc>
 8005096:	89a3      	ldrh	r3, [r4, #12]
 8005098:	059b      	lsls	r3, r3, #22
 800509a:	d4dd      	bmi.n	8005058 <_fflush_r+0xc>
 800509c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800509e:	f000 f908 	bl	80052b2 <__retarget_lock_release_recursive>
 80050a2:	e7d9      	b.n	8005058 <_fflush_r+0xc>
 80050a4:	4b05      	ldr	r3, [pc, #20]	; (80050bc <_fflush_r+0x70>)
 80050a6:	429c      	cmp	r4, r3
 80050a8:	d101      	bne.n	80050ae <_fflush_r+0x62>
 80050aa:	68ac      	ldr	r4, [r5, #8]
 80050ac:	e7df      	b.n	800506e <_fflush_r+0x22>
 80050ae:	4b04      	ldr	r3, [pc, #16]	; (80050c0 <_fflush_r+0x74>)
 80050b0:	429c      	cmp	r4, r3
 80050b2:	bf08      	it	eq
 80050b4:	68ec      	ldreq	r4, [r5, #12]
 80050b6:	e7da      	b.n	800506e <_fflush_r+0x22>
 80050b8:	080060e8 	.word	0x080060e8
 80050bc:	08006108 	.word	0x08006108
 80050c0:	080060c8 	.word	0x080060c8

080050c4 <std>:
 80050c4:	2300      	movs	r3, #0
 80050c6:	b510      	push	{r4, lr}
 80050c8:	4604      	mov	r4, r0
 80050ca:	e9c0 3300 	strd	r3, r3, [r0]
 80050ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050d2:	6083      	str	r3, [r0, #8]
 80050d4:	8181      	strh	r1, [r0, #12]
 80050d6:	6643      	str	r3, [r0, #100]	; 0x64
 80050d8:	81c2      	strh	r2, [r0, #14]
 80050da:	6183      	str	r3, [r0, #24]
 80050dc:	4619      	mov	r1, r3
 80050de:	2208      	movs	r2, #8
 80050e0:	305c      	adds	r0, #92	; 0x5c
 80050e2:	f7ff fdb7 	bl	8004c54 <memset>
 80050e6:	4b05      	ldr	r3, [pc, #20]	; (80050fc <std+0x38>)
 80050e8:	6263      	str	r3, [r4, #36]	; 0x24
 80050ea:	4b05      	ldr	r3, [pc, #20]	; (8005100 <std+0x3c>)
 80050ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80050ee:	4b05      	ldr	r3, [pc, #20]	; (8005104 <std+0x40>)
 80050f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050f2:	4b05      	ldr	r3, [pc, #20]	; (8005108 <std+0x44>)
 80050f4:	6224      	str	r4, [r4, #32]
 80050f6:	6323      	str	r3, [r4, #48]	; 0x30
 80050f8:	bd10      	pop	{r4, pc}
 80050fa:	bf00      	nop
 80050fc:	08005df5 	.word	0x08005df5
 8005100:	08005e17 	.word	0x08005e17
 8005104:	08005e4f 	.word	0x08005e4f
 8005108:	08005e73 	.word	0x08005e73

0800510c <_cleanup_r>:
 800510c:	4901      	ldr	r1, [pc, #4]	; (8005114 <_cleanup_r+0x8>)
 800510e:	f000 b8af 	b.w	8005270 <_fwalk_reent>
 8005112:	bf00      	nop
 8005114:	0800504d 	.word	0x0800504d

08005118 <__sfmoreglue>:
 8005118:	b570      	push	{r4, r5, r6, lr}
 800511a:	2268      	movs	r2, #104	; 0x68
 800511c:	1e4d      	subs	r5, r1, #1
 800511e:	4355      	muls	r5, r2
 8005120:	460e      	mov	r6, r1
 8005122:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005126:	f000 f997 	bl	8005458 <_malloc_r>
 800512a:	4604      	mov	r4, r0
 800512c:	b140      	cbz	r0, 8005140 <__sfmoreglue+0x28>
 800512e:	2100      	movs	r1, #0
 8005130:	e9c0 1600 	strd	r1, r6, [r0]
 8005134:	300c      	adds	r0, #12
 8005136:	60a0      	str	r0, [r4, #8]
 8005138:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800513c:	f7ff fd8a 	bl	8004c54 <memset>
 8005140:	4620      	mov	r0, r4
 8005142:	bd70      	pop	{r4, r5, r6, pc}

08005144 <__sfp_lock_acquire>:
 8005144:	4801      	ldr	r0, [pc, #4]	; (800514c <__sfp_lock_acquire+0x8>)
 8005146:	f000 b8b3 	b.w	80052b0 <__retarget_lock_acquire_recursive>
 800514a:	bf00      	nop
 800514c:	200001cd 	.word	0x200001cd

08005150 <__sfp_lock_release>:
 8005150:	4801      	ldr	r0, [pc, #4]	; (8005158 <__sfp_lock_release+0x8>)
 8005152:	f000 b8ae 	b.w	80052b2 <__retarget_lock_release_recursive>
 8005156:	bf00      	nop
 8005158:	200001cd 	.word	0x200001cd

0800515c <__sinit_lock_acquire>:
 800515c:	4801      	ldr	r0, [pc, #4]	; (8005164 <__sinit_lock_acquire+0x8>)
 800515e:	f000 b8a7 	b.w	80052b0 <__retarget_lock_acquire_recursive>
 8005162:	bf00      	nop
 8005164:	200001ce 	.word	0x200001ce

08005168 <__sinit_lock_release>:
 8005168:	4801      	ldr	r0, [pc, #4]	; (8005170 <__sinit_lock_release+0x8>)
 800516a:	f000 b8a2 	b.w	80052b2 <__retarget_lock_release_recursive>
 800516e:	bf00      	nop
 8005170:	200001ce 	.word	0x200001ce

08005174 <__sinit>:
 8005174:	b510      	push	{r4, lr}
 8005176:	4604      	mov	r4, r0
 8005178:	f7ff fff0 	bl	800515c <__sinit_lock_acquire>
 800517c:	69a3      	ldr	r3, [r4, #24]
 800517e:	b11b      	cbz	r3, 8005188 <__sinit+0x14>
 8005180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005184:	f7ff bff0 	b.w	8005168 <__sinit_lock_release>
 8005188:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800518c:	6523      	str	r3, [r4, #80]	; 0x50
 800518e:	4b13      	ldr	r3, [pc, #76]	; (80051dc <__sinit+0x68>)
 8005190:	4a13      	ldr	r2, [pc, #76]	; (80051e0 <__sinit+0x6c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	62a2      	str	r2, [r4, #40]	; 0x28
 8005196:	42a3      	cmp	r3, r4
 8005198:	bf04      	itt	eq
 800519a:	2301      	moveq	r3, #1
 800519c:	61a3      	streq	r3, [r4, #24]
 800519e:	4620      	mov	r0, r4
 80051a0:	f000 f820 	bl	80051e4 <__sfp>
 80051a4:	6060      	str	r0, [r4, #4]
 80051a6:	4620      	mov	r0, r4
 80051a8:	f000 f81c 	bl	80051e4 <__sfp>
 80051ac:	60a0      	str	r0, [r4, #8]
 80051ae:	4620      	mov	r0, r4
 80051b0:	f000 f818 	bl	80051e4 <__sfp>
 80051b4:	2200      	movs	r2, #0
 80051b6:	60e0      	str	r0, [r4, #12]
 80051b8:	2104      	movs	r1, #4
 80051ba:	6860      	ldr	r0, [r4, #4]
 80051bc:	f7ff ff82 	bl	80050c4 <std>
 80051c0:	68a0      	ldr	r0, [r4, #8]
 80051c2:	2201      	movs	r2, #1
 80051c4:	2109      	movs	r1, #9
 80051c6:	f7ff ff7d 	bl	80050c4 <std>
 80051ca:	68e0      	ldr	r0, [r4, #12]
 80051cc:	2202      	movs	r2, #2
 80051ce:	2112      	movs	r1, #18
 80051d0:	f7ff ff78 	bl	80050c4 <std>
 80051d4:	2301      	movs	r3, #1
 80051d6:	61a3      	str	r3, [r4, #24]
 80051d8:	e7d2      	b.n	8005180 <__sinit+0xc>
 80051da:	bf00      	nop
 80051dc:	080060c4 	.word	0x080060c4
 80051e0:	0800510d 	.word	0x0800510d

080051e4 <__sfp>:
 80051e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e6:	4607      	mov	r7, r0
 80051e8:	f7ff ffac 	bl	8005144 <__sfp_lock_acquire>
 80051ec:	4b1e      	ldr	r3, [pc, #120]	; (8005268 <__sfp+0x84>)
 80051ee:	681e      	ldr	r6, [r3, #0]
 80051f0:	69b3      	ldr	r3, [r6, #24]
 80051f2:	b913      	cbnz	r3, 80051fa <__sfp+0x16>
 80051f4:	4630      	mov	r0, r6
 80051f6:	f7ff ffbd 	bl	8005174 <__sinit>
 80051fa:	3648      	adds	r6, #72	; 0x48
 80051fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005200:	3b01      	subs	r3, #1
 8005202:	d503      	bpl.n	800520c <__sfp+0x28>
 8005204:	6833      	ldr	r3, [r6, #0]
 8005206:	b30b      	cbz	r3, 800524c <__sfp+0x68>
 8005208:	6836      	ldr	r6, [r6, #0]
 800520a:	e7f7      	b.n	80051fc <__sfp+0x18>
 800520c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005210:	b9d5      	cbnz	r5, 8005248 <__sfp+0x64>
 8005212:	4b16      	ldr	r3, [pc, #88]	; (800526c <__sfp+0x88>)
 8005214:	60e3      	str	r3, [r4, #12]
 8005216:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800521a:	6665      	str	r5, [r4, #100]	; 0x64
 800521c:	f000 f847 	bl	80052ae <__retarget_lock_init_recursive>
 8005220:	f7ff ff96 	bl	8005150 <__sfp_lock_release>
 8005224:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005228:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800522c:	6025      	str	r5, [r4, #0]
 800522e:	61a5      	str	r5, [r4, #24]
 8005230:	2208      	movs	r2, #8
 8005232:	4629      	mov	r1, r5
 8005234:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005238:	f7ff fd0c 	bl	8004c54 <memset>
 800523c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005240:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005244:	4620      	mov	r0, r4
 8005246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005248:	3468      	adds	r4, #104	; 0x68
 800524a:	e7d9      	b.n	8005200 <__sfp+0x1c>
 800524c:	2104      	movs	r1, #4
 800524e:	4638      	mov	r0, r7
 8005250:	f7ff ff62 	bl	8005118 <__sfmoreglue>
 8005254:	4604      	mov	r4, r0
 8005256:	6030      	str	r0, [r6, #0]
 8005258:	2800      	cmp	r0, #0
 800525a:	d1d5      	bne.n	8005208 <__sfp+0x24>
 800525c:	f7ff ff78 	bl	8005150 <__sfp_lock_release>
 8005260:	230c      	movs	r3, #12
 8005262:	603b      	str	r3, [r7, #0]
 8005264:	e7ee      	b.n	8005244 <__sfp+0x60>
 8005266:	bf00      	nop
 8005268:	080060c4 	.word	0x080060c4
 800526c:	ffff0001 	.word	0xffff0001

08005270 <_fwalk_reent>:
 8005270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005274:	4606      	mov	r6, r0
 8005276:	4688      	mov	r8, r1
 8005278:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800527c:	2700      	movs	r7, #0
 800527e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005282:	f1b9 0901 	subs.w	r9, r9, #1
 8005286:	d505      	bpl.n	8005294 <_fwalk_reent+0x24>
 8005288:	6824      	ldr	r4, [r4, #0]
 800528a:	2c00      	cmp	r4, #0
 800528c:	d1f7      	bne.n	800527e <_fwalk_reent+0xe>
 800528e:	4638      	mov	r0, r7
 8005290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005294:	89ab      	ldrh	r3, [r5, #12]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d907      	bls.n	80052aa <_fwalk_reent+0x3a>
 800529a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800529e:	3301      	adds	r3, #1
 80052a0:	d003      	beq.n	80052aa <_fwalk_reent+0x3a>
 80052a2:	4629      	mov	r1, r5
 80052a4:	4630      	mov	r0, r6
 80052a6:	47c0      	blx	r8
 80052a8:	4307      	orrs	r7, r0
 80052aa:	3568      	adds	r5, #104	; 0x68
 80052ac:	e7e9      	b.n	8005282 <_fwalk_reent+0x12>

080052ae <__retarget_lock_init_recursive>:
 80052ae:	4770      	bx	lr

080052b0 <__retarget_lock_acquire_recursive>:
 80052b0:	4770      	bx	lr

080052b2 <__retarget_lock_release_recursive>:
 80052b2:	4770      	bx	lr

080052b4 <__swhatbuf_r>:
 80052b4:	b570      	push	{r4, r5, r6, lr}
 80052b6:	460e      	mov	r6, r1
 80052b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052bc:	2900      	cmp	r1, #0
 80052be:	b096      	sub	sp, #88	; 0x58
 80052c0:	4614      	mov	r4, r2
 80052c2:	461d      	mov	r5, r3
 80052c4:	da08      	bge.n	80052d8 <__swhatbuf_r+0x24>
 80052c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	602a      	str	r2, [r5, #0]
 80052ce:	061a      	lsls	r2, r3, #24
 80052d0:	d410      	bmi.n	80052f4 <__swhatbuf_r+0x40>
 80052d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052d6:	e00e      	b.n	80052f6 <__swhatbuf_r+0x42>
 80052d8:	466a      	mov	r2, sp
 80052da:	f000 fdf1 	bl	8005ec0 <_fstat_r>
 80052de:	2800      	cmp	r0, #0
 80052e0:	dbf1      	blt.n	80052c6 <__swhatbuf_r+0x12>
 80052e2:	9a01      	ldr	r2, [sp, #4]
 80052e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80052e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80052ec:	425a      	negs	r2, r3
 80052ee:	415a      	adcs	r2, r3
 80052f0:	602a      	str	r2, [r5, #0]
 80052f2:	e7ee      	b.n	80052d2 <__swhatbuf_r+0x1e>
 80052f4:	2340      	movs	r3, #64	; 0x40
 80052f6:	2000      	movs	r0, #0
 80052f8:	6023      	str	r3, [r4, #0]
 80052fa:	b016      	add	sp, #88	; 0x58
 80052fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08005300 <__smakebuf_r>:
 8005300:	898b      	ldrh	r3, [r1, #12]
 8005302:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005304:	079d      	lsls	r5, r3, #30
 8005306:	4606      	mov	r6, r0
 8005308:	460c      	mov	r4, r1
 800530a:	d507      	bpl.n	800531c <__smakebuf_r+0x1c>
 800530c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	6123      	str	r3, [r4, #16]
 8005314:	2301      	movs	r3, #1
 8005316:	6163      	str	r3, [r4, #20]
 8005318:	b002      	add	sp, #8
 800531a:	bd70      	pop	{r4, r5, r6, pc}
 800531c:	ab01      	add	r3, sp, #4
 800531e:	466a      	mov	r2, sp
 8005320:	f7ff ffc8 	bl	80052b4 <__swhatbuf_r>
 8005324:	9900      	ldr	r1, [sp, #0]
 8005326:	4605      	mov	r5, r0
 8005328:	4630      	mov	r0, r6
 800532a:	f000 f895 	bl	8005458 <_malloc_r>
 800532e:	b948      	cbnz	r0, 8005344 <__smakebuf_r+0x44>
 8005330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005334:	059a      	lsls	r2, r3, #22
 8005336:	d4ef      	bmi.n	8005318 <__smakebuf_r+0x18>
 8005338:	f023 0303 	bic.w	r3, r3, #3
 800533c:	f043 0302 	orr.w	r3, r3, #2
 8005340:	81a3      	strh	r3, [r4, #12]
 8005342:	e7e3      	b.n	800530c <__smakebuf_r+0xc>
 8005344:	4b0d      	ldr	r3, [pc, #52]	; (800537c <__smakebuf_r+0x7c>)
 8005346:	62b3      	str	r3, [r6, #40]	; 0x28
 8005348:	89a3      	ldrh	r3, [r4, #12]
 800534a:	6020      	str	r0, [r4, #0]
 800534c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005350:	81a3      	strh	r3, [r4, #12]
 8005352:	9b00      	ldr	r3, [sp, #0]
 8005354:	6163      	str	r3, [r4, #20]
 8005356:	9b01      	ldr	r3, [sp, #4]
 8005358:	6120      	str	r0, [r4, #16]
 800535a:	b15b      	cbz	r3, 8005374 <__smakebuf_r+0x74>
 800535c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005360:	4630      	mov	r0, r6
 8005362:	f000 fdbf 	bl	8005ee4 <_isatty_r>
 8005366:	b128      	cbz	r0, 8005374 <__smakebuf_r+0x74>
 8005368:	89a3      	ldrh	r3, [r4, #12]
 800536a:	f023 0303 	bic.w	r3, r3, #3
 800536e:	f043 0301 	orr.w	r3, r3, #1
 8005372:	81a3      	strh	r3, [r4, #12]
 8005374:	89a0      	ldrh	r0, [r4, #12]
 8005376:	4305      	orrs	r5, r0
 8005378:	81a5      	strh	r5, [r4, #12]
 800537a:	e7cd      	b.n	8005318 <__smakebuf_r+0x18>
 800537c:	0800510d 	.word	0x0800510d

08005380 <_free_r>:
 8005380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005382:	2900      	cmp	r1, #0
 8005384:	d044      	beq.n	8005410 <_free_r+0x90>
 8005386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800538a:	9001      	str	r0, [sp, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	f1a1 0404 	sub.w	r4, r1, #4
 8005392:	bfb8      	it	lt
 8005394:	18e4      	addlt	r4, r4, r3
 8005396:	f000 fdef 	bl	8005f78 <__malloc_lock>
 800539a:	4a1e      	ldr	r2, [pc, #120]	; (8005414 <_free_r+0x94>)
 800539c:	9801      	ldr	r0, [sp, #4]
 800539e:	6813      	ldr	r3, [r2, #0]
 80053a0:	b933      	cbnz	r3, 80053b0 <_free_r+0x30>
 80053a2:	6063      	str	r3, [r4, #4]
 80053a4:	6014      	str	r4, [r2, #0]
 80053a6:	b003      	add	sp, #12
 80053a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053ac:	f000 bdea 	b.w	8005f84 <__malloc_unlock>
 80053b0:	42a3      	cmp	r3, r4
 80053b2:	d908      	bls.n	80053c6 <_free_r+0x46>
 80053b4:	6825      	ldr	r5, [r4, #0]
 80053b6:	1961      	adds	r1, r4, r5
 80053b8:	428b      	cmp	r3, r1
 80053ba:	bf01      	itttt	eq
 80053bc:	6819      	ldreq	r1, [r3, #0]
 80053be:	685b      	ldreq	r3, [r3, #4]
 80053c0:	1949      	addeq	r1, r1, r5
 80053c2:	6021      	streq	r1, [r4, #0]
 80053c4:	e7ed      	b.n	80053a2 <_free_r+0x22>
 80053c6:	461a      	mov	r2, r3
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	b10b      	cbz	r3, 80053d0 <_free_r+0x50>
 80053cc:	42a3      	cmp	r3, r4
 80053ce:	d9fa      	bls.n	80053c6 <_free_r+0x46>
 80053d0:	6811      	ldr	r1, [r2, #0]
 80053d2:	1855      	adds	r5, r2, r1
 80053d4:	42a5      	cmp	r5, r4
 80053d6:	d10b      	bne.n	80053f0 <_free_r+0x70>
 80053d8:	6824      	ldr	r4, [r4, #0]
 80053da:	4421      	add	r1, r4
 80053dc:	1854      	adds	r4, r2, r1
 80053de:	42a3      	cmp	r3, r4
 80053e0:	6011      	str	r1, [r2, #0]
 80053e2:	d1e0      	bne.n	80053a6 <_free_r+0x26>
 80053e4:	681c      	ldr	r4, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	6053      	str	r3, [r2, #4]
 80053ea:	4421      	add	r1, r4
 80053ec:	6011      	str	r1, [r2, #0]
 80053ee:	e7da      	b.n	80053a6 <_free_r+0x26>
 80053f0:	d902      	bls.n	80053f8 <_free_r+0x78>
 80053f2:	230c      	movs	r3, #12
 80053f4:	6003      	str	r3, [r0, #0]
 80053f6:	e7d6      	b.n	80053a6 <_free_r+0x26>
 80053f8:	6825      	ldr	r5, [r4, #0]
 80053fa:	1961      	adds	r1, r4, r5
 80053fc:	428b      	cmp	r3, r1
 80053fe:	bf04      	itt	eq
 8005400:	6819      	ldreq	r1, [r3, #0]
 8005402:	685b      	ldreq	r3, [r3, #4]
 8005404:	6063      	str	r3, [r4, #4]
 8005406:	bf04      	itt	eq
 8005408:	1949      	addeq	r1, r1, r5
 800540a:	6021      	streq	r1, [r4, #0]
 800540c:	6054      	str	r4, [r2, #4]
 800540e:	e7ca      	b.n	80053a6 <_free_r+0x26>
 8005410:	b003      	add	sp, #12
 8005412:	bd30      	pop	{r4, r5, pc}
 8005414:	200001d0 	.word	0x200001d0

08005418 <sbrk_aligned>:
 8005418:	b570      	push	{r4, r5, r6, lr}
 800541a:	4e0e      	ldr	r6, [pc, #56]	; (8005454 <sbrk_aligned+0x3c>)
 800541c:	460c      	mov	r4, r1
 800541e:	6831      	ldr	r1, [r6, #0]
 8005420:	4605      	mov	r5, r0
 8005422:	b911      	cbnz	r1, 800542a <sbrk_aligned+0x12>
 8005424:	f000 fcd6 	bl	8005dd4 <_sbrk_r>
 8005428:	6030      	str	r0, [r6, #0]
 800542a:	4621      	mov	r1, r4
 800542c:	4628      	mov	r0, r5
 800542e:	f000 fcd1 	bl	8005dd4 <_sbrk_r>
 8005432:	1c43      	adds	r3, r0, #1
 8005434:	d00a      	beq.n	800544c <sbrk_aligned+0x34>
 8005436:	1cc4      	adds	r4, r0, #3
 8005438:	f024 0403 	bic.w	r4, r4, #3
 800543c:	42a0      	cmp	r0, r4
 800543e:	d007      	beq.n	8005450 <sbrk_aligned+0x38>
 8005440:	1a21      	subs	r1, r4, r0
 8005442:	4628      	mov	r0, r5
 8005444:	f000 fcc6 	bl	8005dd4 <_sbrk_r>
 8005448:	3001      	adds	r0, #1
 800544a:	d101      	bne.n	8005450 <sbrk_aligned+0x38>
 800544c:	f04f 34ff 	mov.w	r4, #4294967295
 8005450:	4620      	mov	r0, r4
 8005452:	bd70      	pop	{r4, r5, r6, pc}
 8005454:	200001d4 	.word	0x200001d4

08005458 <_malloc_r>:
 8005458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800545c:	1ccd      	adds	r5, r1, #3
 800545e:	f025 0503 	bic.w	r5, r5, #3
 8005462:	3508      	adds	r5, #8
 8005464:	2d0c      	cmp	r5, #12
 8005466:	bf38      	it	cc
 8005468:	250c      	movcc	r5, #12
 800546a:	2d00      	cmp	r5, #0
 800546c:	4607      	mov	r7, r0
 800546e:	db01      	blt.n	8005474 <_malloc_r+0x1c>
 8005470:	42a9      	cmp	r1, r5
 8005472:	d905      	bls.n	8005480 <_malloc_r+0x28>
 8005474:	230c      	movs	r3, #12
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	2600      	movs	r6, #0
 800547a:	4630      	mov	r0, r6
 800547c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005480:	4e2e      	ldr	r6, [pc, #184]	; (800553c <_malloc_r+0xe4>)
 8005482:	f000 fd79 	bl	8005f78 <__malloc_lock>
 8005486:	6833      	ldr	r3, [r6, #0]
 8005488:	461c      	mov	r4, r3
 800548a:	bb34      	cbnz	r4, 80054da <_malloc_r+0x82>
 800548c:	4629      	mov	r1, r5
 800548e:	4638      	mov	r0, r7
 8005490:	f7ff ffc2 	bl	8005418 <sbrk_aligned>
 8005494:	1c43      	adds	r3, r0, #1
 8005496:	4604      	mov	r4, r0
 8005498:	d14d      	bne.n	8005536 <_malloc_r+0xde>
 800549a:	6834      	ldr	r4, [r6, #0]
 800549c:	4626      	mov	r6, r4
 800549e:	2e00      	cmp	r6, #0
 80054a0:	d140      	bne.n	8005524 <_malloc_r+0xcc>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	4631      	mov	r1, r6
 80054a6:	4638      	mov	r0, r7
 80054a8:	eb04 0803 	add.w	r8, r4, r3
 80054ac:	f000 fc92 	bl	8005dd4 <_sbrk_r>
 80054b0:	4580      	cmp	r8, r0
 80054b2:	d13a      	bne.n	800552a <_malloc_r+0xd2>
 80054b4:	6821      	ldr	r1, [r4, #0]
 80054b6:	3503      	adds	r5, #3
 80054b8:	1a6d      	subs	r5, r5, r1
 80054ba:	f025 0503 	bic.w	r5, r5, #3
 80054be:	3508      	adds	r5, #8
 80054c0:	2d0c      	cmp	r5, #12
 80054c2:	bf38      	it	cc
 80054c4:	250c      	movcc	r5, #12
 80054c6:	4629      	mov	r1, r5
 80054c8:	4638      	mov	r0, r7
 80054ca:	f7ff ffa5 	bl	8005418 <sbrk_aligned>
 80054ce:	3001      	adds	r0, #1
 80054d0:	d02b      	beq.n	800552a <_malloc_r+0xd2>
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	442b      	add	r3, r5
 80054d6:	6023      	str	r3, [r4, #0]
 80054d8:	e00e      	b.n	80054f8 <_malloc_r+0xa0>
 80054da:	6822      	ldr	r2, [r4, #0]
 80054dc:	1b52      	subs	r2, r2, r5
 80054de:	d41e      	bmi.n	800551e <_malloc_r+0xc6>
 80054e0:	2a0b      	cmp	r2, #11
 80054e2:	d916      	bls.n	8005512 <_malloc_r+0xba>
 80054e4:	1961      	adds	r1, r4, r5
 80054e6:	42a3      	cmp	r3, r4
 80054e8:	6025      	str	r5, [r4, #0]
 80054ea:	bf18      	it	ne
 80054ec:	6059      	strne	r1, [r3, #4]
 80054ee:	6863      	ldr	r3, [r4, #4]
 80054f0:	bf08      	it	eq
 80054f2:	6031      	streq	r1, [r6, #0]
 80054f4:	5162      	str	r2, [r4, r5]
 80054f6:	604b      	str	r3, [r1, #4]
 80054f8:	4638      	mov	r0, r7
 80054fa:	f104 060b 	add.w	r6, r4, #11
 80054fe:	f000 fd41 	bl	8005f84 <__malloc_unlock>
 8005502:	f026 0607 	bic.w	r6, r6, #7
 8005506:	1d23      	adds	r3, r4, #4
 8005508:	1af2      	subs	r2, r6, r3
 800550a:	d0b6      	beq.n	800547a <_malloc_r+0x22>
 800550c:	1b9b      	subs	r3, r3, r6
 800550e:	50a3      	str	r3, [r4, r2]
 8005510:	e7b3      	b.n	800547a <_malloc_r+0x22>
 8005512:	6862      	ldr	r2, [r4, #4]
 8005514:	42a3      	cmp	r3, r4
 8005516:	bf0c      	ite	eq
 8005518:	6032      	streq	r2, [r6, #0]
 800551a:	605a      	strne	r2, [r3, #4]
 800551c:	e7ec      	b.n	80054f8 <_malloc_r+0xa0>
 800551e:	4623      	mov	r3, r4
 8005520:	6864      	ldr	r4, [r4, #4]
 8005522:	e7b2      	b.n	800548a <_malloc_r+0x32>
 8005524:	4634      	mov	r4, r6
 8005526:	6876      	ldr	r6, [r6, #4]
 8005528:	e7b9      	b.n	800549e <_malloc_r+0x46>
 800552a:	230c      	movs	r3, #12
 800552c:	603b      	str	r3, [r7, #0]
 800552e:	4638      	mov	r0, r7
 8005530:	f000 fd28 	bl	8005f84 <__malloc_unlock>
 8005534:	e7a1      	b.n	800547a <_malloc_r+0x22>
 8005536:	6025      	str	r5, [r4, #0]
 8005538:	e7de      	b.n	80054f8 <_malloc_r+0xa0>
 800553a:	bf00      	nop
 800553c:	200001d0 	.word	0x200001d0

08005540 <__ssputs_r>:
 8005540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005544:	688e      	ldr	r6, [r1, #8]
 8005546:	429e      	cmp	r6, r3
 8005548:	4682      	mov	sl, r0
 800554a:	460c      	mov	r4, r1
 800554c:	4690      	mov	r8, r2
 800554e:	461f      	mov	r7, r3
 8005550:	d838      	bhi.n	80055c4 <__ssputs_r+0x84>
 8005552:	898a      	ldrh	r2, [r1, #12]
 8005554:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005558:	d032      	beq.n	80055c0 <__ssputs_r+0x80>
 800555a:	6825      	ldr	r5, [r4, #0]
 800555c:	6909      	ldr	r1, [r1, #16]
 800555e:	eba5 0901 	sub.w	r9, r5, r1
 8005562:	6965      	ldr	r5, [r4, #20]
 8005564:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005568:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800556c:	3301      	adds	r3, #1
 800556e:	444b      	add	r3, r9
 8005570:	106d      	asrs	r5, r5, #1
 8005572:	429d      	cmp	r5, r3
 8005574:	bf38      	it	cc
 8005576:	461d      	movcc	r5, r3
 8005578:	0553      	lsls	r3, r2, #21
 800557a:	d531      	bpl.n	80055e0 <__ssputs_r+0xa0>
 800557c:	4629      	mov	r1, r5
 800557e:	f7ff ff6b 	bl	8005458 <_malloc_r>
 8005582:	4606      	mov	r6, r0
 8005584:	b950      	cbnz	r0, 800559c <__ssputs_r+0x5c>
 8005586:	230c      	movs	r3, #12
 8005588:	f8ca 3000 	str.w	r3, [sl]
 800558c:	89a3      	ldrh	r3, [r4, #12]
 800558e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005592:	81a3      	strh	r3, [r4, #12]
 8005594:	f04f 30ff 	mov.w	r0, #4294967295
 8005598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800559c:	6921      	ldr	r1, [r4, #16]
 800559e:	464a      	mov	r2, r9
 80055a0:	f000 fcc2 	bl	8005f28 <memcpy>
 80055a4:	89a3      	ldrh	r3, [r4, #12]
 80055a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ae:	81a3      	strh	r3, [r4, #12]
 80055b0:	6126      	str	r6, [r4, #16]
 80055b2:	6165      	str	r5, [r4, #20]
 80055b4:	444e      	add	r6, r9
 80055b6:	eba5 0509 	sub.w	r5, r5, r9
 80055ba:	6026      	str	r6, [r4, #0]
 80055bc:	60a5      	str	r5, [r4, #8]
 80055be:	463e      	mov	r6, r7
 80055c0:	42be      	cmp	r6, r7
 80055c2:	d900      	bls.n	80055c6 <__ssputs_r+0x86>
 80055c4:	463e      	mov	r6, r7
 80055c6:	6820      	ldr	r0, [r4, #0]
 80055c8:	4632      	mov	r2, r6
 80055ca:	4641      	mov	r1, r8
 80055cc:	f000 fcba 	bl	8005f44 <memmove>
 80055d0:	68a3      	ldr	r3, [r4, #8]
 80055d2:	1b9b      	subs	r3, r3, r6
 80055d4:	60a3      	str	r3, [r4, #8]
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	4433      	add	r3, r6
 80055da:	6023      	str	r3, [r4, #0]
 80055dc:	2000      	movs	r0, #0
 80055de:	e7db      	b.n	8005598 <__ssputs_r+0x58>
 80055e0:	462a      	mov	r2, r5
 80055e2:	f000 fcd5 	bl	8005f90 <_realloc_r>
 80055e6:	4606      	mov	r6, r0
 80055e8:	2800      	cmp	r0, #0
 80055ea:	d1e1      	bne.n	80055b0 <__ssputs_r+0x70>
 80055ec:	6921      	ldr	r1, [r4, #16]
 80055ee:	4650      	mov	r0, sl
 80055f0:	f7ff fec6 	bl	8005380 <_free_r>
 80055f4:	e7c7      	b.n	8005586 <__ssputs_r+0x46>
	...

080055f8 <_svfiprintf_r>:
 80055f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055fc:	4698      	mov	r8, r3
 80055fe:	898b      	ldrh	r3, [r1, #12]
 8005600:	061b      	lsls	r3, r3, #24
 8005602:	b09d      	sub	sp, #116	; 0x74
 8005604:	4607      	mov	r7, r0
 8005606:	460d      	mov	r5, r1
 8005608:	4614      	mov	r4, r2
 800560a:	d50e      	bpl.n	800562a <_svfiprintf_r+0x32>
 800560c:	690b      	ldr	r3, [r1, #16]
 800560e:	b963      	cbnz	r3, 800562a <_svfiprintf_r+0x32>
 8005610:	2140      	movs	r1, #64	; 0x40
 8005612:	f7ff ff21 	bl	8005458 <_malloc_r>
 8005616:	6028      	str	r0, [r5, #0]
 8005618:	6128      	str	r0, [r5, #16]
 800561a:	b920      	cbnz	r0, 8005626 <_svfiprintf_r+0x2e>
 800561c:	230c      	movs	r3, #12
 800561e:	603b      	str	r3, [r7, #0]
 8005620:	f04f 30ff 	mov.w	r0, #4294967295
 8005624:	e0d1      	b.n	80057ca <_svfiprintf_r+0x1d2>
 8005626:	2340      	movs	r3, #64	; 0x40
 8005628:	616b      	str	r3, [r5, #20]
 800562a:	2300      	movs	r3, #0
 800562c:	9309      	str	r3, [sp, #36]	; 0x24
 800562e:	2320      	movs	r3, #32
 8005630:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005634:	f8cd 800c 	str.w	r8, [sp, #12]
 8005638:	2330      	movs	r3, #48	; 0x30
 800563a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80057e4 <_svfiprintf_r+0x1ec>
 800563e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005642:	f04f 0901 	mov.w	r9, #1
 8005646:	4623      	mov	r3, r4
 8005648:	469a      	mov	sl, r3
 800564a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800564e:	b10a      	cbz	r2, 8005654 <_svfiprintf_r+0x5c>
 8005650:	2a25      	cmp	r2, #37	; 0x25
 8005652:	d1f9      	bne.n	8005648 <_svfiprintf_r+0x50>
 8005654:	ebba 0b04 	subs.w	fp, sl, r4
 8005658:	d00b      	beq.n	8005672 <_svfiprintf_r+0x7a>
 800565a:	465b      	mov	r3, fp
 800565c:	4622      	mov	r2, r4
 800565e:	4629      	mov	r1, r5
 8005660:	4638      	mov	r0, r7
 8005662:	f7ff ff6d 	bl	8005540 <__ssputs_r>
 8005666:	3001      	adds	r0, #1
 8005668:	f000 80aa 	beq.w	80057c0 <_svfiprintf_r+0x1c8>
 800566c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800566e:	445a      	add	r2, fp
 8005670:	9209      	str	r2, [sp, #36]	; 0x24
 8005672:	f89a 3000 	ldrb.w	r3, [sl]
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 80a2 	beq.w	80057c0 <_svfiprintf_r+0x1c8>
 800567c:	2300      	movs	r3, #0
 800567e:	f04f 32ff 	mov.w	r2, #4294967295
 8005682:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005686:	f10a 0a01 	add.w	sl, sl, #1
 800568a:	9304      	str	r3, [sp, #16]
 800568c:	9307      	str	r3, [sp, #28]
 800568e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005692:	931a      	str	r3, [sp, #104]	; 0x68
 8005694:	4654      	mov	r4, sl
 8005696:	2205      	movs	r2, #5
 8005698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800569c:	4851      	ldr	r0, [pc, #324]	; (80057e4 <_svfiprintf_r+0x1ec>)
 800569e:	f7fa fdaf 	bl	8000200 <memchr>
 80056a2:	9a04      	ldr	r2, [sp, #16]
 80056a4:	b9d8      	cbnz	r0, 80056de <_svfiprintf_r+0xe6>
 80056a6:	06d0      	lsls	r0, r2, #27
 80056a8:	bf44      	itt	mi
 80056aa:	2320      	movmi	r3, #32
 80056ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056b0:	0711      	lsls	r1, r2, #28
 80056b2:	bf44      	itt	mi
 80056b4:	232b      	movmi	r3, #43	; 0x2b
 80056b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056ba:	f89a 3000 	ldrb.w	r3, [sl]
 80056be:	2b2a      	cmp	r3, #42	; 0x2a
 80056c0:	d015      	beq.n	80056ee <_svfiprintf_r+0xf6>
 80056c2:	9a07      	ldr	r2, [sp, #28]
 80056c4:	4654      	mov	r4, sl
 80056c6:	2000      	movs	r0, #0
 80056c8:	f04f 0c0a 	mov.w	ip, #10
 80056cc:	4621      	mov	r1, r4
 80056ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056d2:	3b30      	subs	r3, #48	; 0x30
 80056d4:	2b09      	cmp	r3, #9
 80056d6:	d94e      	bls.n	8005776 <_svfiprintf_r+0x17e>
 80056d8:	b1b0      	cbz	r0, 8005708 <_svfiprintf_r+0x110>
 80056da:	9207      	str	r2, [sp, #28]
 80056dc:	e014      	b.n	8005708 <_svfiprintf_r+0x110>
 80056de:	eba0 0308 	sub.w	r3, r0, r8
 80056e2:	fa09 f303 	lsl.w	r3, r9, r3
 80056e6:	4313      	orrs	r3, r2
 80056e8:	9304      	str	r3, [sp, #16]
 80056ea:	46a2      	mov	sl, r4
 80056ec:	e7d2      	b.n	8005694 <_svfiprintf_r+0x9c>
 80056ee:	9b03      	ldr	r3, [sp, #12]
 80056f0:	1d19      	adds	r1, r3, #4
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	9103      	str	r1, [sp, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	bfbb      	ittet	lt
 80056fa:	425b      	neglt	r3, r3
 80056fc:	f042 0202 	orrlt.w	r2, r2, #2
 8005700:	9307      	strge	r3, [sp, #28]
 8005702:	9307      	strlt	r3, [sp, #28]
 8005704:	bfb8      	it	lt
 8005706:	9204      	strlt	r2, [sp, #16]
 8005708:	7823      	ldrb	r3, [r4, #0]
 800570a:	2b2e      	cmp	r3, #46	; 0x2e
 800570c:	d10c      	bne.n	8005728 <_svfiprintf_r+0x130>
 800570e:	7863      	ldrb	r3, [r4, #1]
 8005710:	2b2a      	cmp	r3, #42	; 0x2a
 8005712:	d135      	bne.n	8005780 <_svfiprintf_r+0x188>
 8005714:	9b03      	ldr	r3, [sp, #12]
 8005716:	1d1a      	adds	r2, r3, #4
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	9203      	str	r2, [sp, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	bfb8      	it	lt
 8005720:	f04f 33ff 	movlt.w	r3, #4294967295
 8005724:	3402      	adds	r4, #2
 8005726:	9305      	str	r3, [sp, #20]
 8005728:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80057f4 <_svfiprintf_r+0x1fc>
 800572c:	7821      	ldrb	r1, [r4, #0]
 800572e:	2203      	movs	r2, #3
 8005730:	4650      	mov	r0, sl
 8005732:	f7fa fd65 	bl	8000200 <memchr>
 8005736:	b140      	cbz	r0, 800574a <_svfiprintf_r+0x152>
 8005738:	2340      	movs	r3, #64	; 0x40
 800573a:	eba0 000a 	sub.w	r0, r0, sl
 800573e:	fa03 f000 	lsl.w	r0, r3, r0
 8005742:	9b04      	ldr	r3, [sp, #16]
 8005744:	4303      	orrs	r3, r0
 8005746:	3401      	adds	r4, #1
 8005748:	9304      	str	r3, [sp, #16]
 800574a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800574e:	4826      	ldr	r0, [pc, #152]	; (80057e8 <_svfiprintf_r+0x1f0>)
 8005750:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005754:	2206      	movs	r2, #6
 8005756:	f7fa fd53 	bl	8000200 <memchr>
 800575a:	2800      	cmp	r0, #0
 800575c:	d038      	beq.n	80057d0 <_svfiprintf_r+0x1d8>
 800575e:	4b23      	ldr	r3, [pc, #140]	; (80057ec <_svfiprintf_r+0x1f4>)
 8005760:	bb1b      	cbnz	r3, 80057aa <_svfiprintf_r+0x1b2>
 8005762:	9b03      	ldr	r3, [sp, #12]
 8005764:	3307      	adds	r3, #7
 8005766:	f023 0307 	bic.w	r3, r3, #7
 800576a:	3308      	adds	r3, #8
 800576c:	9303      	str	r3, [sp, #12]
 800576e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005770:	4433      	add	r3, r6
 8005772:	9309      	str	r3, [sp, #36]	; 0x24
 8005774:	e767      	b.n	8005646 <_svfiprintf_r+0x4e>
 8005776:	fb0c 3202 	mla	r2, ip, r2, r3
 800577a:	460c      	mov	r4, r1
 800577c:	2001      	movs	r0, #1
 800577e:	e7a5      	b.n	80056cc <_svfiprintf_r+0xd4>
 8005780:	2300      	movs	r3, #0
 8005782:	3401      	adds	r4, #1
 8005784:	9305      	str	r3, [sp, #20]
 8005786:	4619      	mov	r1, r3
 8005788:	f04f 0c0a 	mov.w	ip, #10
 800578c:	4620      	mov	r0, r4
 800578e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005792:	3a30      	subs	r2, #48	; 0x30
 8005794:	2a09      	cmp	r2, #9
 8005796:	d903      	bls.n	80057a0 <_svfiprintf_r+0x1a8>
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0c5      	beq.n	8005728 <_svfiprintf_r+0x130>
 800579c:	9105      	str	r1, [sp, #20]
 800579e:	e7c3      	b.n	8005728 <_svfiprintf_r+0x130>
 80057a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80057a4:	4604      	mov	r4, r0
 80057a6:	2301      	movs	r3, #1
 80057a8:	e7f0      	b.n	800578c <_svfiprintf_r+0x194>
 80057aa:	ab03      	add	r3, sp, #12
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	462a      	mov	r2, r5
 80057b0:	4b0f      	ldr	r3, [pc, #60]	; (80057f0 <_svfiprintf_r+0x1f8>)
 80057b2:	a904      	add	r1, sp, #16
 80057b4:	4638      	mov	r0, r7
 80057b6:	f3af 8000 	nop.w
 80057ba:	1c42      	adds	r2, r0, #1
 80057bc:	4606      	mov	r6, r0
 80057be:	d1d6      	bne.n	800576e <_svfiprintf_r+0x176>
 80057c0:	89ab      	ldrh	r3, [r5, #12]
 80057c2:	065b      	lsls	r3, r3, #25
 80057c4:	f53f af2c 	bmi.w	8005620 <_svfiprintf_r+0x28>
 80057c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057ca:	b01d      	add	sp, #116	; 0x74
 80057cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d0:	ab03      	add	r3, sp, #12
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	462a      	mov	r2, r5
 80057d6:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <_svfiprintf_r+0x1f8>)
 80057d8:	a904      	add	r1, sp, #16
 80057da:	4638      	mov	r0, r7
 80057dc:	f000 f9d4 	bl	8005b88 <_printf_i>
 80057e0:	e7eb      	b.n	80057ba <_svfiprintf_r+0x1c2>
 80057e2:	bf00      	nop
 80057e4:	08006128 	.word	0x08006128
 80057e8:	08006132 	.word	0x08006132
 80057ec:	00000000 	.word	0x00000000
 80057f0:	08005541 	.word	0x08005541
 80057f4:	0800612e 	.word	0x0800612e

080057f8 <__sfputc_r>:
 80057f8:	6893      	ldr	r3, [r2, #8]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	b410      	push	{r4}
 8005800:	6093      	str	r3, [r2, #8]
 8005802:	da08      	bge.n	8005816 <__sfputc_r+0x1e>
 8005804:	6994      	ldr	r4, [r2, #24]
 8005806:	42a3      	cmp	r3, r4
 8005808:	db01      	blt.n	800580e <__sfputc_r+0x16>
 800580a:	290a      	cmp	r1, #10
 800580c:	d103      	bne.n	8005816 <__sfputc_r+0x1e>
 800580e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005812:	f7ff bad5 	b.w	8004dc0 <__swbuf_r>
 8005816:	6813      	ldr	r3, [r2, #0]
 8005818:	1c58      	adds	r0, r3, #1
 800581a:	6010      	str	r0, [r2, #0]
 800581c:	7019      	strb	r1, [r3, #0]
 800581e:	4608      	mov	r0, r1
 8005820:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005824:	4770      	bx	lr

08005826 <__sfputs_r>:
 8005826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005828:	4606      	mov	r6, r0
 800582a:	460f      	mov	r7, r1
 800582c:	4614      	mov	r4, r2
 800582e:	18d5      	adds	r5, r2, r3
 8005830:	42ac      	cmp	r4, r5
 8005832:	d101      	bne.n	8005838 <__sfputs_r+0x12>
 8005834:	2000      	movs	r0, #0
 8005836:	e007      	b.n	8005848 <__sfputs_r+0x22>
 8005838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800583c:	463a      	mov	r2, r7
 800583e:	4630      	mov	r0, r6
 8005840:	f7ff ffda 	bl	80057f8 <__sfputc_r>
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	d1f3      	bne.n	8005830 <__sfputs_r+0xa>
 8005848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800584c <_vfiprintf_r>:
 800584c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005850:	460d      	mov	r5, r1
 8005852:	b09d      	sub	sp, #116	; 0x74
 8005854:	4614      	mov	r4, r2
 8005856:	4698      	mov	r8, r3
 8005858:	4606      	mov	r6, r0
 800585a:	b118      	cbz	r0, 8005864 <_vfiprintf_r+0x18>
 800585c:	6983      	ldr	r3, [r0, #24]
 800585e:	b90b      	cbnz	r3, 8005864 <_vfiprintf_r+0x18>
 8005860:	f7ff fc88 	bl	8005174 <__sinit>
 8005864:	4b89      	ldr	r3, [pc, #548]	; (8005a8c <_vfiprintf_r+0x240>)
 8005866:	429d      	cmp	r5, r3
 8005868:	d11b      	bne.n	80058a2 <_vfiprintf_r+0x56>
 800586a:	6875      	ldr	r5, [r6, #4]
 800586c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800586e:	07d9      	lsls	r1, r3, #31
 8005870:	d405      	bmi.n	800587e <_vfiprintf_r+0x32>
 8005872:	89ab      	ldrh	r3, [r5, #12]
 8005874:	059a      	lsls	r2, r3, #22
 8005876:	d402      	bmi.n	800587e <_vfiprintf_r+0x32>
 8005878:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800587a:	f7ff fd19 	bl	80052b0 <__retarget_lock_acquire_recursive>
 800587e:	89ab      	ldrh	r3, [r5, #12]
 8005880:	071b      	lsls	r3, r3, #28
 8005882:	d501      	bpl.n	8005888 <_vfiprintf_r+0x3c>
 8005884:	692b      	ldr	r3, [r5, #16]
 8005886:	b9eb      	cbnz	r3, 80058c4 <_vfiprintf_r+0x78>
 8005888:	4629      	mov	r1, r5
 800588a:	4630      	mov	r0, r6
 800588c:	f7ff faea 	bl	8004e64 <__swsetup_r>
 8005890:	b1c0      	cbz	r0, 80058c4 <_vfiprintf_r+0x78>
 8005892:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005894:	07dc      	lsls	r4, r3, #31
 8005896:	d50e      	bpl.n	80058b6 <_vfiprintf_r+0x6a>
 8005898:	f04f 30ff 	mov.w	r0, #4294967295
 800589c:	b01d      	add	sp, #116	; 0x74
 800589e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058a2:	4b7b      	ldr	r3, [pc, #492]	; (8005a90 <_vfiprintf_r+0x244>)
 80058a4:	429d      	cmp	r5, r3
 80058a6:	d101      	bne.n	80058ac <_vfiprintf_r+0x60>
 80058a8:	68b5      	ldr	r5, [r6, #8]
 80058aa:	e7df      	b.n	800586c <_vfiprintf_r+0x20>
 80058ac:	4b79      	ldr	r3, [pc, #484]	; (8005a94 <_vfiprintf_r+0x248>)
 80058ae:	429d      	cmp	r5, r3
 80058b0:	bf08      	it	eq
 80058b2:	68f5      	ldreq	r5, [r6, #12]
 80058b4:	e7da      	b.n	800586c <_vfiprintf_r+0x20>
 80058b6:	89ab      	ldrh	r3, [r5, #12]
 80058b8:	0598      	lsls	r0, r3, #22
 80058ba:	d4ed      	bmi.n	8005898 <_vfiprintf_r+0x4c>
 80058bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058be:	f7ff fcf8 	bl	80052b2 <__retarget_lock_release_recursive>
 80058c2:	e7e9      	b.n	8005898 <_vfiprintf_r+0x4c>
 80058c4:	2300      	movs	r3, #0
 80058c6:	9309      	str	r3, [sp, #36]	; 0x24
 80058c8:	2320      	movs	r3, #32
 80058ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80058d2:	2330      	movs	r3, #48	; 0x30
 80058d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005a98 <_vfiprintf_r+0x24c>
 80058d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058dc:	f04f 0901 	mov.w	r9, #1
 80058e0:	4623      	mov	r3, r4
 80058e2:	469a      	mov	sl, r3
 80058e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058e8:	b10a      	cbz	r2, 80058ee <_vfiprintf_r+0xa2>
 80058ea:	2a25      	cmp	r2, #37	; 0x25
 80058ec:	d1f9      	bne.n	80058e2 <_vfiprintf_r+0x96>
 80058ee:	ebba 0b04 	subs.w	fp, sl, r4
 80058f2:	d00b      	beq.n	800590c <_vfiprintf_r+0xc0>
 80058f4:	465b      	mov	r3, fp
 80058f6:	4622      	mov	r2, r4
 80058f8:	4629      	mov	r1, r5
 80058fa:	4630      	mov	r0, r6
 80058fc:	f7ff ff93 	bl	8005826 <__sfputs_r>
 8005900:	3001      	adds	r0, #1
 8005902:	f000 80aa 	beq.w	8005a5a <_vfiprintf_r+0x20e>
 8005906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005908:	445a      	add	r2, fp
 800590a:	9209      	str	r2, [sp, #36]	; 0x24
 800590c:	f89a 3000 	ldrb.w	r3, [sl]
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 80a2 	beq.w	8005a5a <_vfiprintf_r+0x20e>
 8005916:	2300      	movs	r3, #0
 8005918:	f04f 32ff 	mov.w	r2, #4294967295
 800591c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005920:	f10a 0a01 	add.w	sl, sl, #1
 8005924:	9304      	str	r3, [sp, #16]
 8005926:	9307      	str	r3, [sp, #28]
 8005928:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800592c:	931a      	str	r3, [sp, #104]	; 0x68
 800592e:	4654      	mov	r4, sl
 8005930:	2205      	movs	r2, #5
 8005932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005936:	4858      	ldr	r0, [pc, #352]	; (8005a98 <_vfiprintf_r+0x24c>)
 8005938:	f7fa fc62 	bl	8000200 <memchr>
 800593c:	9a04      	ldr	r2, [sp, #16]
 800593e:	b9d8      	cbnz	r0, 8005978 <_vfiprintf_r+0x12c>
 8005940:	06d1      	lsls	r1, r2, #27
 8005942:	bf44      	itt	mi
 8005944:	2320      	movmi	r3, #32
 8005946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800594a:	0713      	lsls	r3, r2, #28
 800594c:	bf44      	itt	mi
 800594e:	232b      	movmi	r3, #43	; 0x2b
 8005950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005954:	f89a 3000 	ldrb.w	r3, [sl]
 8005958:	2b2a      	cmp	r3, #42	; 0x2a
 800595a:	d015      	beq.n	8005988 <_vfiprintf_r+0x13c>
 800595c:	9a07      	ldr	r2, [sp, #28]
 800595e:	4654      	mov	r4, sl
 8005960:	2000      	movs	r0, #0
 8005962:	f04f 0c0a 	mov.w	ip, #10
 8005966:	4621      	mov	r1, r4
 8005968:	f811 3b01 	ldrb.w	r3, [r1], #1
 800596c:	3b30      	subs	r3, #48	; 0x30
 800596e:	2b09      	cmp	r3, #9
 8005970:	d94e      	bls.n	8005a10 <_vfiprintf_r+0x1c4>
 8005972:	b1b0      	cbz	r0, 80059a2 <_vfiprintf_r+0x156>
 8005974:	9207      	str	r2, [sp, #28]
 8005976:	e014      	b.n	80059a2 <_vfiprintf_r+0x156>
 8005978:	eba0 0308 	sub.w	r3, r0, r8
 800597c:	fa09 f303 	lsl.w	r3, r9, r3
 8005980:	4313      	orrs	r3, r2
 8005982:	9304      	str	r3, [sp, #16]
 8005984:	46a2      	mov	sl, r4
 8005986:	e7d2      	b.n	800592e <_vfiprintf_r+0xe2>
 8005988:	9b03      	ldr	r3, [sp, #12]
 800598a:	1d19      	adds	r1, r3, #4
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	9103      	str	r1, [sp, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	bfbb      	ittet	lt
 8005994:	425b      	neglt	r3, r3
 8005996:	f042 0202 	orrlt.w	r2, r2, #2
 800599a:	9307      	strge	r3, [sp, #28]
 800599c:	9307      	strlt	r3, [sp, #28]
 800599e:	bfb8      	it	lt
 80059a0:	9204      	strlt	r2, [sp, #16]
 80059a2:	7823      	ldrb	r3, [r4, #0]
 80059a4:	2b2e      	cmp	r3, #46	; 0x2e
 80059a6:	d10c      	bne.n	80059c2 <_vfiprintf_r+0x176>
 80059a8:	7863      	ldrb	r3, [r4, #1]
 80059aa:	2b2a      	cmp	r3, #42	; 0x2a
 80059ac:	d135      	bne.n	8005a1a <_vfiprintf_r+0x1ce>
 80059ae:	9b03      	ldr	r3, [sp, #12]
 80059b0:	1d1a      	adds	r2, r3, #4
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	9203      	str	r2, [sp, #12]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	bfb8      	it	lt
 80059ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80059be:	3402      	adds	r4, #2
 80059c0:	9305      	str	r3, [sp, #20]
 80059c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005aa8 <_vfiprintf_r+0x25c>
 80059c6:	7821      	ldrb	r1, [r4, #0]
 80059c8:	2203      	movs	r2, #3
 80059ca:	4650      	mov	r0, sl
 80059cc:	f7fa fc18 	bl	8000200 <memchr>
 80059d0:	b140      	cbz	r0, 80059e4 <_vfiprintf_r+0x198>
 80059d2:	2340      	movs	r3, #64	; 0x40
 80059d4:	eba0 000a 	sub.w	r0, r0, sl
 80059d8:	fa03 f000 	lsl.w	r0, r3, r0
 80059dc:	9b04      	ldr	r3, [sp, #16]
 80059de:	4303      	orrs	r3, r0
 80059e0:	3401      	adds	r4, #1
 80059e2:	9304      	str	r3, [sp, #16]
 80059e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059e8:	482c      	ldr	r0, [pc, #176]	; (8005a9c <_vfiprintf_r+0x250>)
 80059ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059ee:	2206      	movs	r2, #6
 80059f0:	f7fa fc06 	bl	8000200 <memchr>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	d03f      	beq.n	8005a78 <_vfiprintf_r+0x22c>
 80059f8:	4b29      	ldr	r3, [pc, #164]	; (8005aa0 <_vfiprintf_r+0x254>)
 80059fa:	bb1b      	cbnz	r3, 8005a44 <_vfiprintf_r+0x1f8>
 80059fc:	9b03      	ldr	r3, [sp, #12]
 80059fe:	3307      	adds	r3, #7
 8005a00:	f023 0307 	bic.w	r3, r3, #7
 8005a04:	3308      	adds	r3, #8
 8005a06:	9303      	str	r3, [sp, #12]
 8005a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a0a:	443b      	add	r3, r7
 8005a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a0e:	e767      	b.n	80058e0 <_vfiprintf_r+0x94>
 8005a10:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a14:	460c      	mov	r4, r1
 8005a16:	2001      	movs	r0, #1
 8005a18:	e7a5      	b.n	8005966 <_vfiprintf_r+0x11a>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	3401      	adds	r4, #1
 8005a1e:	9305      	str	r3, [sp, #20]
 8005a20:	4619      	mov	r1, r3
 8005a22:	f04f 0c0a 	mov.w	ip, #10
 8005a26:	4620      	mov	r0, r4
 8005a28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a2c:	3a30      	subs	r2, #48	; 0x30
 8005a2e:	2a09      	cmp	r2, #9
 8005a30:	d903      	bls.n	8005a3a <_vfiprintf_r+0x1ee>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d0c5      	beq.n	80059c2 <_vfiprintf_r+0x176>
 8005a36:	9105      	str	r1, [sp, #20]
 8005a38:	e7c3      	b.n	80059c2 <_vfiprintf_r+0x176>
 8005a3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a3e:	4604      	mov	r4, r0
 8005a40:	2301      	movs	r3, #1
 8005a42:	e7f0      	b.n	8005a26 <_vfiprintf_r+0x1da>
 8005a44:	ab03      	add	r3, sp, #12
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	462a      	mov	r2, r5
 8005a4a:	4b16      	ldr	r3, [pc, #88]	; (8005aa4 <_vfiprintf_r+0x258>)
 8005a4c:	a904      	add	r1, sp, #16
 8005a4e:	4630      	mov	r0, r6
 8005a50:	f3af 8000 	nop.w
 8005a54:	4607      	mov	r7, r0
 8005a56:	1c78      	adds	r0, r7, #1
 8005a58:	d1d6      	bne.n	8005a08 <_vfiprintf_r+0x1bc>
 8005a5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a5c:	07d9      	lsls	r1, r3, #31
 8005a5e:	d405      	bmi.n	8005a6c <_vfiprintf_r+0x220>
 8005a60:	89ab      	ldrh	r3, [r5, #12]
 8005a62:	059a      	lsls	r2, r3, #22
 8005a64:	d402      	bmi.n	8005a6c <_vfiprintf_r+0x220>
 8005a66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a68:	f7ff fc23 	bl	80052b2 <__retarget_lock_release_recursive>
 8005a6c:	89ab      	ldrh	r3, [r5, #12]
 8005a6e:	065b      	lsls	r3, r3, #25
 8005a70:	f53f af12 	bmi.w	8005898 <_vfiprintf_r+0x4c>
 8005a74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a76:	e711      	b.n	800589c <_vfiprintf_r+0x50>
 8005a78:	ab03      	add	r3, sp, #12
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	462a      	mov	r2, r5
 8005a7e:	4b09      	ldr	r3, [pc, #36]	; (8005aa4 <_vfiprintf_r+0x258>)
 8005a80:	a904      	add	r1, sp, #16
 8005a82:	4630      	mov	r0, r6
 8005a84:	f000 f880 	bl	8005b88 <_printf_i>
 8005a88:	e7e4      	b.n	8005a54 <_vfiprintf_r+0x208>
 8005a8a:	bf00      	nop
 8005a8c:	080060e8 	.word	0x080060e8
 8005a90:	08006108 	.word	0x08006108
 8005a94:	080060c8 	.word	0x080060c8
 8005a98:	08006128 	.word	0x08006128
 8005a9c:	08006132 	.word	0x08006132
 8005aa0:	00000000 	.word	0x00000000
 8005aa4:	08005827 	.word	0x08005827
 8005aa8:	0800612e 	.word	0x0800612e

08005aac <_printf_common>:
 8005aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab0:	4616      	mov	r6, r2
 8005ab2:	4699      	mov	r9, r3
 8005ab4:	688a      	ldr	r2, [r1, #8]
 8005ab6:	690b      	ldr	r3, [r1, #16]
 8005ab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005abc:	4293      	cmp	r3, r2
 8005abe:	bfb8      	it	lt
 8005ac0:	4613      	movlt	r3, r2
 8005ac2:	6033      	str	r3, [r6, #0]
 8005ac4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ac8:	4607      	mov	r7, r0
 8005aca:	460c      	mov	r4, r1
 8005acc:	b10a      	cbz	r2, 8005ad2 <_printf_common+0x26>
 8005ace:	3301      	adds	r3, #1
 8005ad0:	6033      	str	r3, [r6, #0]
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	0699      	lsls	r1, r3, #26
 8005ad6:	bf42      	ittt	mi
 8005ad8:	6833      	ldrmi	r3, [r6, #0]
 8005ada:	3302      	addmi	r3, #2
 8005adc:	6033      	strmi	r3, [r6, #0]
 8005ade:	6825      	ldr	r5, [r4, #0]
 8005ae0:	f015 0506 	ands.w	r5, r5, #6
 8005ae4:	d106      	bne.n	8005af4 <_printf_common+0x48>
 8005ae6:	f104 0a19 	add.w	sl, r4, #25
 8005aea:	68e3      	ldr	r3, [r4, #12]
 8005aec:	6832      	ldr	r2, [r6, #0]
 8005aee:	1a9b      	subs	r3, r3, r2
 8005af0:	42ab      	cmp	r3, r5
 8005af2:	dc26      	bgt.n	8005b42 <_printf_common+0x96>
 8005af4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005af8:	1e13      	subs	r3, r2, #0
 8005afa:	6822      	ldr	r2, [r4, #0]
 8005afc:	bf18      	it	ne
 8005afe:	2301      	movne	r3, #1
 8005b00:	0692      	lsls	r2, r2, #26
 8005b02:	d42b      	bmi.n	8005b5c <_printf_common+0xb0>
 8005b04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b08:	4649      	mov	r1, r9
 8005b0a:	4638      	mov	r0, r7
 8005b0c:	47c0      	blx	r8
 8005b0e:	3001      	adds	r0, #1
 8005b10:	d01e      	beq.n	8005b50 <_printf_common+0xa4>
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	68e5      	ldr	r5, [r4, #12]
 8005b16:	6832      	ldr	r2, [r6, #0]
 8005b18:	f003 0306 	and.w	r3, r3, #6
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	bf08      	it	eq
 8005b20:	1aad      	subeq	r5, r5, r2
 8005b22:	68a3      	ldr	r3, [r4, #8]
 8005b24:	6922      	ldr	r2, [r4, #16]
 8005b26:	bf0c      	ite	eq
 8005b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b2c:	2500      	movne	r5, #0
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	bfc4      	itt	gt
 8005b32:	1a9b      	subgt	r3, r3, r2
 8005b34:	18ed      	addgt	r5, r5, r3
 8005b36:	2600      	movs	r6, #0
 8005b38:	341a      	adds	r4, #26
 8005b3a:	42b5      	cmp	r5, r6
 8005b3c:	d11a      	bne.n	8005b74 <_printf_common+0xc8>
 8005b3e:	2000      	movs	r0, #0
 8005b40:	e008      	b.n	8005b54 <_printf_common+0xa8>
 8005b42:	2301      	movs	r3, #1
 8005b44:	4652      	mov	r2, sl
 8005b46:	4649      	mov	r1, r9
 8005b48:	4638      	mov	r0, r7
 8005b4a:	47c0      	blx	r8
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	d103      	bne.n	8005b58 <_printf_common+0xac>
 8005b50:	f04f 30ff 	mov.w	r0, #4294967295
 8005b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b58:	3501      	adds	r5, #1
 8005b5a:	e7c6      	b.n	8005aea <_printf_common+0x3e>
 8005b5c:	18e1      	adds	r1, r4, r3
 8005b5e:	1c5a      	adds	r2, r3, #1
 8005b60:	2030      	movs	r0, #48	; 0x30
 8005b62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b66:	4422      	add	r2, r4
 8005b68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b70:	3302      	adds	r3, #2
 8005b72:	e7c7      	b.n	8005b04 <_printf_common+0x58>
 8005b74:	2301      	movs	r3, #1
 8005b76:	4622      	mov	r2, r4
 8005b78:	4649      	mov	r1, r9
 8005b7a:	4638      	mov	r0, r7
 8005b7c:	47c0      	blx	r8
 8005b7e:	3001      	adds	r0, #1
 8005b80:	d0e6      	beq.n	8005b50 <_printf_common+0xa4>
 8005b82:	3601      	adds	r6, #1
 8005b84:	e7d9      	b.n	8005b3a <_printf_common+0x8e>
	...

08005b88 <_printf_i>:
 8005b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b8c:	7e0f      	ldrb	r7, [r1, #24]
 8005b8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b90:	2f78      	cmp	r7, #120	; 0x78
 8005b92:	4691      	mov	r9, r2
 8005b94:	4680      	mov	r8, r0
 8005b96:	460c      	mov	r4, r1
 8005b98:	469a      	mov	sl, r3
 8005b9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b9e:	d807      	bhi.n	8005bb0 <_printf_i+0x28>
 8005ba0:	2f62      	cmp	r7, #98	; 0x62
 8005ba2:	d80a      	bhi.n	8005bba <_printf_i+0x32>
 8005ba4:	2f00      	cmp	r7, #0
 8005ba6:	f000 80d8 	beq.w	8005d5a <_printf_i+0x1d2>
 8005baa:	2f58      	cmp	r7, #88	; 0x58
 8005bac:	f000 80a3 	beq.w	8005cf6 <_printf_i+0x16e>
 8005bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bb8:	e03a      	b.n	8005c30 <_printf_i+0xa8>
 8005bba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bbe:	2b15      	cmp	r3, #21
 8005bc0:	d8f6      	bhi.n	8005bb0 <_printf_i+0x28>
 8005bc2:	a101      	add	r1, pc, #4	; (adr r1, 8005bc8 <_printf_i+0x40>)
 8005bc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bc8:	08005c21 	.word	0x08005c21
 8005bcc:	08005c35 	.word	0x08005c35
 8005bd0:	08005bb1 	.word	0x08005bb1
 8005bd4:	08005bb1 	.word	0x08005bb1
 8005bd8:	08005bb1 	.word	0x08005bb1
 8005bdc:	08005bb1 	.word	0x08005bb1
 8005be0:	08005c35 	.word	0x08005c35
 8005be4:	08005bb1 	.word	0x08005bb1
 8005be8:	08005bb1 	.word	0x08005bb1
 8005bec:	08005bb1 	.word	0x08005bb1
 8005bf0:	08005bb1 	.word	0x08005bb1
 8005bf4:	08005d41 	.word	0x08005d41
 8005bf8:	08005c65 	.word	0x08005c65
 8005bfc:	08005d23 	.word	0x08005d23
 8005c00:	08005bb1 	.word	0x08005bb1
 8005c04:	08005bb1 	.word	0x08005bb1
 8005c08:	08005d63 	.word	0x08005d63
 8005c0c:	08005bb1 	.word	0x08005bb1
 8005c10:	08005c65 	.word	0x08005c65
 8005c14:	08005bb1 	.word	0x08005bb1
 8005c18:	08005bb1 	.word	0x08005bb1
 8005c1c:	08005d2b 	.word	0x08005d2b
 8005c20:	682b      	ldr	r3, [r5, #0]
 8005c22:	1d1a      	adds	r2, r3, #4
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	602a      	str	r2, [r5, #0]
 8005c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c30:	2301      	movs	r3, #1
 8005c32:	e0a3      	b.n	8005d7c <_printf_i+0x1f4>
 8005c34:	6820      	ldr	r0, [r4, #0]
 8005c36:	6829      	ldr	r1, [r5, #0]
 8005c38:	0606      	lsls	r6, r0, #24
 8005c3a:	f101 0304 	add.w	r3, r1, #4
 8005c3e:	d50a      	bpl.n	8005c56 <_printf_i+0xce>
 8005c40:	680e      	ldr	r6, [r1, #0]
 8005c42:	602b      	str	r3, [r5, #0]
 8005c44:	2e00      	cmp	r6, #0
 8005c46:	da03      	bge.n	8005c50 <_printf_i+0xc8>
 8005c48:	232d      	movs	r3, #45	; 0x2d
 8005c4a:	4276      	negs	r6, r6
 8005c4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c50:	485e      	ldr	r0, [pc, #376]	; (8005dcc <_printf_i+0x244>)
 8005c52:	230a      	movs	r3, #10
 8005c54:	e019      	b.n	8005c8a <_printf_i+0x102>
 8005c56:	680e      	ldr	r6, [r1, #0]
 8005c58:	602b      	str	r3, [r5, #0]
 8005c5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c5e:	bf18      	it	ne
 8005c60:	b236      	sxthne	r6, r6
 8005c62:	e7ef      	b.n	8005c44 <_printf_i+0xbc>
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	6820      	ldr	r0, [r4, #0]
 8005c68:	1d19      	adds	r1, r3, #4
 8005c6a:	6029      	str	r1, [r5, #0]
 8005c6c:	0601      	lsls	r1, r0, #24
 8005c6e:	d501      	bpl.n	8005c74 <_printf_i+0xec>
 8005c70:	681e      	ldr	r6, [r3, #0]
 8005c72:	e002      	b.n	8005c7a <_printf_i+0xf2>
 8005c74:	0646      	lsls	r6, r0, #25
 8005c76:	d5fb      	bpl.n	8005c70 <_printf_i+0xe8>
 8005c78:	881e      	ldrh	r6, [r3, #0]
 8005c7a:	4854      	ldr	r0, [pc, #336]	; (8005dcc <_printf_i+0x244>)
 8005c7c:	2f6f      	cmp	r7, #111	; 0x6f
 8005c7e:	bf0c      	ite	eq
 8005c80:	2308      	moveq	r3, #8
 8005c82:	230a      	movne	r3, #10
 8005c84:	2100      	movs	r1, #0
 8005c86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c8a:	6865      	ldr	r5, [r4, #4]
 8005c8c:	60a5      	str	r5, [r4, #8]
 8005c8e:	2d00      	cmp	r5, #0
 8005c90:	bfa2      	ittt	ge
 8005c92:	6821      	ldrge	r1, [r4, #0]
 8005c94:	f021 0104 	bicge.w	r1, r1, #4
 8005c98:	6021      	strge	r1, [r4, #0]
 8005c9a:	b90e      	cbnz	r6, 8005ca0 <_printf_i+0x118>
 8005c9c:	2d00      	cmp	r5, #0
 8005c9e:	d04d      	beq.n	8005d3c <_printf_i+0x1b4>
 8005ca0:	4615      	mov	r5, r2
 8005ca2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ca6:	fb03 6711 	mls	r7, r3, r1, r6
 8005caa:	5dc7      	ldrb	r7, [r0, r7]
 8005cac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cb0:	4637      	mov	r7, r6
 8005cb2:	42bb      	cmp	r3, r7
 8005cb4:	460e      	mov	r6, r1
 8005cb6:	d9f4      	bls.n	8005ca2 <_printf_i+0x11a>
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d10b      	bne.n	8005cd4 <_printf_i+0x14c>
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	07de      	lsls	r6, r3, #31
 8005cc0:	d508      	bpl.n	8005cd4 <_printf_i+0x14c>
 8005cc2:	6923      	ldr	r3, [r4, #16]
 8005cc4:	6861      	ldr	r1, [r4, #4]
 8005cc6:	4299      	cmp	r1, r3
 8005cc8:	bfde      	ittt	le
 8005cca:	2330      	movle	r3, #48	; 0x30
 8005ccc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cd4:	1b52      	subs	r2, r2, r5
 8005cd6:	6122      	str	r2, [r4, #16]
 8005cd8:	f8cd a000 	str.w	sl, [sp]
 8005cdc:	464b      	mov	r3, r9
 8005cde:	aa03      	add	r2, sp, #12
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	4640      	mov	r0, r8
 8005ce4:	f7ff fee2 	bl	8005aac <_printf_common>
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d14c      	bne.n	8005d86 <_printf_i+0x1fe>
 8005cec:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf0:	b004      	add	sp, #16
 8005cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf6:	4835      	ldr	r0, [pc, #212]	; (8005dcc <_printf_i+0x244>)
 8005cf8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005cfc:	6829      	ldr	r1, [r5, #0]
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d04:	6029      	str	r1, [r5, #0]
 8005d06:	061d      	lsls	r5, r3, #24
 8005d08:	d514      	bpl.n	8005d34 <_printf_i+0x1ac>
 8005d0a:	07df      	lsls	r7, r3, #31
 8005d0c:	bf44      	itt	mi
 8005d0e:	f043 0320 	orrmi.w	r3, r3, #32
 8005d12:	6023      	strmi	r3, [r4, #0]
 8005d14:	b91e      	cbnz	r6, 8005d1e <_printf_i+0x196>
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	f023 0320 	bic.w	r3, r3, #32
 8005d1c:	6023      	str	r3, [r4, #0]
 8005d1e:	2310      	movs	r3, #16
 8005d20:	e7b0      	b.n	8005c84 <_printf_i+0xfc>
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	f043 0320 	orr.w	r3, r3, #32
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	2378      	movs	r3, #120	; 0x78
 8005d2c:	4828      	ldr	r0, [pc, #160]	; (8005dd0 <_printf_i+0x248>)
 8005d2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d32:	e7e3      	b.n	8005cfc <_printf_i+0x174>
 8005d34:	0659      	lsls	r1, r3, #25
 8005d36:	bf48      	it	mi
 8005d38:	b2b6      	uxthmi	r6, r6
 8005d3a:	e7e6      	b.n	8005d0a <_printf_i+0x182>
 8005d3c:	4615      	mov	r5, r2
 8005d3e:	e7bb      	b.n	8005cb8 <_printf_i+0x130>
 8005d40:	682b      	ldr	r3, [r5, #0]
 8005d42:	6826      	ldr	r6, [r4, #0]
 8005d44:	6961      	ldr	r1, [r4, #20]
 8005d46:	1d18      	adds	r0, r3, #4
 8005d48:	6028      	str	r0, [r5, #0]
 8005d4a:	0635      	lsls	r5, r6, #24
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	d501      	bpl.n	8005d54 <_printf_i+0x1cc>
 8005d50:	6019      	str	r1, [r3, #0]
 8005d52:	e002      	b.n	8005d5a <_printf_i+0x1d2>
 8005d54:	0670      	lsls	r0, r6, #25
 8005d56:	d5fb      	bpl.n	8005d50 <_printf_i+0x1c8>
 8005d58:	8019      	strh	r1, [r3, #0]
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	6123      	str	r3, [r4, #16]
 8005d5e:	4615      	mov	r5, r2
 8005d60:	e7ba      	b.n	8005cd8 <_printf_i+0x150>
 8005d62:	682b      	ldr	r3, [r5, #0]
 8005d64:	1d1a      	adds	r2, r3, #4
 8005d66:	602a      	str	r2, [r5, #0]
 8005d68:	681d      	ldr	r5, [r3, #0]
 8005d6a:	6862      	ldr	r2, [r4, #4]
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	4628      	mov	r0, r5
 8005d70:	f7fa fa46 	bl	8000200 <memchr>
 8005d74:	b108      	cbz	r0, 8005d7a <_printf_i+0x1f2>
 8005d76:	1b40      	subs	r0, r0, r5
 8005d78:	6060      	str	r0, [r4, #4]
 8005d7a:	6863      	ldr	r3, [r4, #4]
 8005d7c:	6123      	str	r3, [r4, #16]
 8005d7e:	2300      	movs	r3, #0
 8005d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d84:	e7a8      	b.n	8005cd8 <_printf_i+0x150>
 8005d86:	6923      	ldr	r3, [r4, #16]
 8005d88:	462a      	mov	r2, r5
 8005d8a:	4649      	mov	r1, r9
 8005d8c:	4640      	mov	r0, r8
 8005d8e:	47d0      	blx	sl
 8005d90:	3001      	adds	r0, #1
 8005d92:	d0ab      	beq.n	8005cec <_printf_i+0x164>
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	079b      	lsls	r3, r3, #30
 8005d98:	d413      	bmi.n	8005dc2 <_printf_i+0x23a>
 8005d9a:	68e0      	ldr	r0, [r4, #12]
 8005d9c:	9b03      	ldr	r3, [sp, #12]
 8005d9e:	4298      	cmp	r0, r3
 8005da0:	bfb8      	it	lt
 8005da2:	4618      	movlt	r0, r3
 8005da4:	e7a4      	b.n	8005cf0 <_printf_i+0x168>
 8005da6:	2301      	movs	r3, #1
 8005da8:	4632      	mov	r2, r6
 8005daa:	4649      	mov	r1, r9
 8005dac:	4640      	mov	r0, r8
 8005dae:	47d0      	blx	sl
 8005db0:	3001      	adds	r0, #1
 8005db2:	d09b      	beq.n	8005cec <_printf_i+0x164>
 8005db4:	3501      	adds	r5, #1
 8005db6:	68e3      	ldr	r3, [r4, #12]
 8005db8:	9903      	ldr	r1, [sp, #12]
 8005dba:	1a5b      	subs	r3, r3, r1
 8005dbc:	42ab      	cmp	r3, r5
 8005dbe:	dcf2      	bgt.n	8005da6 <_printf_i+0x21e>
 8005dc0:	e7eb      	b.n	8005d9a <_printf_i+0x212>
 8005dc2:	2500      	movs	r5, #0
 8005dc4:	f104 0619 	add.w	r6, r4, #25
 8005dc8:	e7f5      	b.n	8005db6 <_printf_i+0x22e>
 8005dca:	bf00      	nop
 8005dcc:	08006139 	.word	0x08006139
 8005dd0:	0800614a 	.word	0x0800614a

08005dd4 <_sbrk_r>:
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	4d06      	ldr	r5, [pc, #24]	; (8005df0 <_sbrk_r+0x1c>)
 8005dd8:	2300      	movs	r3, #0
 8005dda:	4604      	mov	r4, r0
 8005ddc:	4608      	mov	r0, r1
 8005dde:	602b      	str	r3, [r5, #0]
 8005de0:	f7fb f85a 	bl	8000e98 <_sbrk>
 8005de4:	1c43      	adds	r3, r0, #1
 8005de6:	d102      	bne.n	8005dee <_sbrk_r+0x1a>
 8005de8:	682b      	ldr	r3, [r5, #0]
 8005dea:	b103      	cbz	r3, 8005dee <_sbrk_r+0x1a>
 8005dec:	6023      	str	r3, [r4, #0]
 8005dee:	bd38      	pop	{r3, r4, r5, pc}
 8005df0:	200001d8 	.word	0x200001d8

08005df4 <__sread>:
 8005df4:	b510      	push	{r4, lr}
 8005df6:	460c      	mov	r4, r1
 8005df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dfc:	f000 f8f8 	bl	8005ff0 <_read_r>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	bfab      	itete	ge
 8005e04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e06:	89a3      	ldrhlt	r3, [r4, #12]
 8005e08:	181b      	addge	r3, r3, r0
 8005e0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e0e:	bfac      	ite	ge
 8005e10:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e12:	81a3      	strhlt	r3, [r4, #12]
 8005e14:	bd10      	pop	{r4, pc}

08005e16 <__swrite>:
 8005e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e1a:	461f      	mov	r7, r3
 8005e1c:	898b      	ldrh	r3, [r1, #12]
 8005e1e:	05db      	lsls	r3, r3, #23
 8005e20:	4605      	mov	r5, r0
 8005e22:	460c      	mov	r4, r1
 8005e24:	4616      	mov	r6, r2
 8005e26:	d505      	bpl.n	8005e34 <__swrite+0x1e>
 8005e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f000 f868 	bl	8005f04 <_lseek_r>
 8005e34:	89a3      	ldrh	r3, [r4, #12]
 8005e36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e3e:	81a3      	strh	r3, [r4, #12]
 8005e40:	4632      	mov	r2, r6
 8005e42:	463b      	mov	r3, r7
 8005e44:	4628      	mov	r0, r5
 8005e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e4a:	f000 b817 	b.w	8005e7c <_write_r>

08005e4e <__sseek>:
 8005e4e:	b510      	push	{r4, lr}
 8005e50:	460c      	mov	r4, r1
 8005e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e56:	f000 f855 	bl	8005f04 <_lseek_r>
 8005e5a:	1c43      	adds	r3, r0, #1
 8005e5c:	89a3      	ldrh	r3, [r4, #12]
 8005e5e:	bf15      	itete	ne
 8005e60:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e6a:	81a3      	strheq	r3, [r4, #12]
 8005e6c:	bf18      	it	ne
 8005e6e:	81a3      	strhne	r3, [r4, #12]
 8005e70:	bd10      	pop	{r4, pc}

08005e72 <__sclose>:
 8005e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e76:	f000 b813 	b.w	8005ea0 <_close_r>
	...

08005e7c <_write_r>:
 8005e7c:	b538      	push	{r3, r4, r5, lr}
 8005e7e:	4d07      	ldr	r5, [pc, #28]	; (8005e9c <_write_r+0x20>)
 8005e80:	4604      	mov	r4, r0
 8005e82:	4608      	mov	r0, r1
 8005e84:	4611      	mov	r1, r2
 8005e86:	2200      	movs	r2, #0
 8005e88:	602a      	str	r2, [r5, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	f7fa ffb3 	bl	8000df6 <_write>
 8005e90:	1c43      	adds	r3, r0, #1
 8005e92:	d102      	bne.n	8005e9a <_write_r+0x1e>
 8005e94:	682b      	ldr	r3, [r5, #0]
 8005e96:	b103      	cbz	r3, 8005e9a <_write_r+0x1e>
 8005e98:	6023      	str	r3, [r4, #0]
 8005e9a:	bd38      	pop	{r3, r4, r5, pc}
 8005e9c:	200001d8 	.word	0x200001d8

08005ea0 <_close_r>:
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	4d06      	ldr	r5, [pc, #24]	; (8005ebc <_close_r+0x1c>)
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	4608      	mov	r0, r1
 8005eaa:	602b      	str	r3, [r5, #0]
 8005eac:	f7fa ffbf 	bl	8000e2e <_close>
 8005eb0:	1c43      	adds	r3, r0, #1
 8005eb2:	d102      	bne.n	8005eba <_close_r+0x1a>
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	b103      	cbz	r3, 8005eba <_close_r+0x1a>
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
 8005ebc:	200001d8 	.word	0x200001d8

08005ec0 <_fstat_r>:
 8005ec0:	b538      	push	{r3, r4, r5, lr}
 8005ec2:	4d07      	ldr	r5, [pc, #28]	; (8005ee0 <_fstat_r+0x20>)
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	4608      	mov	r0, r1
 8005eca:	4611      	mov	r1, r2
 8005ecc:	602b      	str	r3, [r5, #0]
 8005ece:	f7fa ffba 	bl	8000e46 <_fstat>
 8005ed2:	1c43      	adds	r3, r0, #1
 8005ed4:	d102      	bne.n	8005edc <_fstat_r+0x1c>
 8005ed6:	682b      	ldr	r3, [r5, #0]
 8005ed8:	b103      	cbz	r3, 8005edc <_fstat_r+0x1c>
 8005eda:	6023      	str	r3, [r4, #0]
 8005edc:	bd38      	pop	{r3, r4, r5, pc}
 8005ede:	bf00      	nop
 8005ee0:	200001d8 	.word	0x200001d8

08005ee4 <_isatty_r>:
 8005ee4:	b538      	push	{r3, r4, r5, lr}
 8005ee6:	4d06      	ldr	r5, [pc, #24]	; (8005f00 <_isatty_r+0x1c>)
 8005ee8:	2300      	movs	r3, #0
 8005eea:	4604      	mov	r4, r0
 8005eec:	4608      	mov	r0, r1
 8005eee:	602b      	str	r3, [r5, #0]
 8005ef0:	f7fa ffb9 	bl	8000e66 <_isatty>
 8005ef4:	1c43      	adds	r3, r0, #1
 8005ef6:	d102      	bne.n	8005efe <_isatty_r+0x1a>
 8005ef8:	682b      	ldr	r3, [r5, #0]
 8005efa:	b103      	cbz	r3, 8005efe <_isatty_r+0x1a>
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	bd38      	pop	{r3, r4, r5, pc}
 8005f00:	200001d8 	.word	0x200001d8

08005f04 <_lseek_r>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	4d07      	ldr	r5, [pc, #28]	; (8005f24 <_lseek_r+0x20>)
 8005f08:	4604      	mov	r4, r0
 8005f0a:	4608      	mov	r0, r1
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	2200      	movs	r2, #0
 8005f10:	602a      	str	r2, [r5, #0]
 8005f12:	461a      	mov	r2, r3
 8005f14:	f7fa ffb2 	bl	8000e7c <_lseek>
 8005f18:	1c43      	adds	r3, r0, #1
 8005f1a:	d102      	bne.n	8005f22 <_lseek_r+0x1e>
 8005f1c:	682b      	ldr	r3, [r5, #0]
 8005f1e:	b103      	cbz	r3, 8005f22 <_lseek_r+0x1e>
 8005f20:	6023      	str	r3, [r4, #0]
 8005f22:	bd38      	pop	{r3, r4, r5, pc}
 8005f24:	200001d8 	.word	0x200001d8

08005f28 <memcpy>:
 8005f28:	440a      	add	r2, r1
 8005f2a:	4291      	cmp	r1, r2
 8005f2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f30:	d100      	bne.n	8005f34 <memcpy+0xc>
 8005f32:	4770      	bx	lr
 8005f34:	b510      	push	{r4, lr}
 8005f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f3e:	4291      	cmp	r1, r2
 8005f40:	d1f9      	bne.n	8005f36 <memcpy+0xe>
 8005f42:	bd10      	pop	{r4, pc}

08005f44 <memmove>:
 8005f44:	4288      	cmp	r0, r1
 8005f46:	b510      	push	{r4, lr}
 8005f48:	eb01 0402 	add.w	r4, r1, r2
 8005f4c:	d902      	bls.n	8005f54 <memmove+0x10>
 8005f4e:	4284      	cmp	r4, r0
 8005f50:	4623      	mov	r3, r4
 8005f52:	d807      	bhi.n	8005f64 <memmove+0x20>
 8005f54:	1e43      	subs	r3, r0, #1
 8005f56:	42a1      	cmp	r1, r4
 8005f58:	d008      	beq.n	8005f6c <memmove+0x28>
 8005f5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f62:	e7f8      	b.n	8005f56 <memmove+0x12>
 8005f64:	4402      	add	r2, r0
 8005f66:	4601      	mov	r1, r0
 8005f68:	428a      	cmp	r2, r1
 8005f6a:	d100      	bne.n	8005f6e <memmove+0x2a>
 8005f6c:	bd10      	pop	{r4, pc}
 8005f6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f76:	e7f7      	b.n	8005f68 <memmove+0x24>

08005f78 <__malloc_lock>:
 8005f78:	4801      	ldr	r0, [pc, #4]	; (8005f80 <__malloc_lock+0x8>)
 8005f7a:	f7ff b999 	b.w	80052b0 <__retarget_lock_acquire_recursive>
 8005f7e:	bf00      	nop
 8005f80:	200001cc 	.word	0x200001cc

08005f84 <__malloc_unlock>:
 8005f84:	4801      	ldr	r0, [pc, #4]	; (8005f8c <__malloc_unlock+0x8>)
 8005f86:	f7ff b994 	b.w	80052b2 <__retarget_lock_release_recursive>
 8005f8a:	bf00      	nop
 8005f8c:	200001cc 	.word	0x200001cc

08005f90 <_realloc_r>:
 8005f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f94:	4680      	mov	r8, r0
 8005f96:	4614      	mov	r4, r2
 8005f98:	460e      	mov	r6, r1
 8005f9a:	b921      	cbnz	r1, 8005fa6 <_realloc_r+0x16>
 8005f9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa0:	4611      	mov	r1, r2
 8005fa2:	f7ff ba59 	b.w	8005458 <_malloc_r>
 8005fa6:	b92a      	cbnz	r2, 8005fb4 <_realloc_r+0x24>
 8005fa8:	f7ff f9ea 	bl	8005380 <_free_r>
 8005fac:	4625      	mov	r5, r4
 8005fae:	4628      	mov	r0, r5
 8005fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fb4:	f000 f82e 	bl	8006014 <_malloc_usable_size_r>
 8005fb8:	4284      	cmp	r4, r0
 8005fba:	4607      	mov	r7, r0
 8005fbc:	d802      	bhi.n	8005fc4 <_realloc_r+0x34>
 8005fbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005fc2:	d812      	bhi.n	8005fea <_realloc_r+0x5a>
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	4640      	mov	r0, r8
 8005fc8:	f7ff fa46 	bl	8005458 <_malloc_r>
 8005fcc:	4605      	mov	r5, r0
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	d0ed      	beq.n	8005fae <_realloc_r+0x1e>
 8005fd2:	42bc      	cmp	r4, r7
 8005fd4:	4622      	mov	r2, r4
 8005fd6:	4631      	mov	r1, r6
 8005fd8:	bf28      	it	cs
 8005fda:	463a      	movcs	r2, r7
 8005fdc:	f7ff ffa4 	bl	8005f28 <memcpy>
 8005fe0:	4631      	mov	r1, r6
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	f7ff f9cc 	bl	8005380 <_free_r>
 8005fe8:	e7e1      	b.n	8005fae <_realloc_r+0x1e>
 8005fea:	4635      	mov	r5, r6
 8005fec:	e7df      	b.n	8005fae <_realloc_r+0x1e>
	...

08005ff0 <_read_r>:
 8005ff0:	b538      	push	{r3, r4, r5, lr}
 8005ff2:	4d07      	ldr	r5, [pc, #28]	; (8006010 <_read_r+0x20>)
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	4608      	mov	r0, r1
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	602a      	str	r2, [r5, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	f7fa fedc 	bl	8000dbc <_read>
 8006004:	1c43      	adds	r3, r0, #1
 8006006:	d102      	bne.n	800600e <_read_r+0x1e>
 8006008:	682b      	ldr	r3, [r5, #0]
 800600a:	b103      	cbz	r3, 800600e <_read_r+0x1e>
 800600c:	6023      	str	r3, [r4, #0]
 800600e:	bd38      	pop	{r3, r4, r5, pc}
 8006010:	200001d8 	.word	0x200001d8

08006014 <_malloc_usable_size_r>:
 8006014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006018:	1f18      	subs	r0, r3, #4
 800601a:	2b00      	cmp	r3, #0
 800601c:	bfbc      	itt	lt
 800601e:	580b      	ldrlt	r3, [r1, r0]
 8006020:	18c0      	addlt	r0, r0, r3
 8006022:	4770      	bx	lr

08006024 <_init>:
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006026:	bf00      	nop
 8006028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602a:	bc08      	pop	{r3}
 800602c:	469e      	mov	lr, r3
 800602e:	4770      	bx	lr

08006030 <_fini>:
 8006030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006032:	bf00      	nop
 8006034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006036:	bc08      	pop	{r3}
 8006038:	469e      	mov	lr, r3
 800603a:	4770      	bx	lr
