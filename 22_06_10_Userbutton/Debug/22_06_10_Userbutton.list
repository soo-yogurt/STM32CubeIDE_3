
22_06_10_Userbutton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007680  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08007830  08007830  00017830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079c0  080079c0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080079c0  080079c0  000179c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079c8  080079c8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079c8  080079c8  000179c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079cc  080079cc  000179cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080079d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000244  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002c4  200002c4  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017228  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003325  00000000  00000000  000372d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001398  00000000  00000000  0003a600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001238  00000000  00000000  0003b998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ea8  00000000  00000000  0003cbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019d9d  00000000  00000000  00064a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0986  00000000  00000000  0007e815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016f19b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b84  00000000  00000000  0016f1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007818 	.word	0x08007818

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08007818 	.word	0x08007818

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	463b      	mov	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b6:	4b21      	ldr	r3, [pc, #132]	; (800063c <MX_ADC1_Init+0x98>)
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_ADC1_Init+0x98>)
 80005be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <MX_ADC1_Init+0x98>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_ADC1_Init+0x98>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_ADC1_Init+0x98>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_ADC1_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <MX_ADC1_Init+0x98>)
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <MX_ADC1_Init+0xa0>)
 80005e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_ADC1_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_ADC1_Init+0x98>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_ADC1_Init+0x98>)
 8000600:	2201      	movs	r2, #1
 8000602:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <MX_ADC1_Init+0x98>)
 8000606:	f001 fbe5 	bl	8001dd4 <HAL_ADC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000610:	f001 f82a 	bl	8001668 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000614:	2303      	movs	r3, #3
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_ADC1_Init+0x98>)
 8000626:	f001 fcf9 	bl	800201c <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000630:	f001 f81a 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	2000009c 	.word	0x2000009c
 8000640:	40012000 	.word	0x40012000
 8000644:	0f000001 	.word	0x0f000001

08000648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <HAL_ADC_MspInit+0x7c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d127      	bne.n	80006ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6453      	str	r3, [r2, #68]	; 0x44
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006a2:	2308      	movs	r3, #8
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <HAL_ADC_MspInit+0x84>)
 80006b6:	f002 f883 	bl	80027c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000

080006d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <MX_GPIO_Init+0xd4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a2d      	ldr	r2, [pc, #180]	; (80007a4 <MX_GPIO_Init+0xd4>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <MX_GPIO_Init+0xd4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a26      	ldr	r2, [pc, #152]	; (80007a4 <MX_GPIO_Init+0xd4>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_GPIO_Init+0xd4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800075c:	4812      	ldr	r0, [pc, #72]	; (80007a8 <MX_GPIO_Init+0xd8>)
 800075e:	f002 f9f3 	bl	8002b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000768:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800076c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_GPIO_Init+0xdc>)
 800077a:	f002 f821 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 800077e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_GPIO_Init+0xd8>)
 8000798:	f002 f812 	bl	80027c0 <HAL_GPIO_Init>

}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020400 	.word	0x40020400
 80007ac:	40020800 	.word	0x40020800

080007b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_I2C1_Init+0x78>)
 80007b6:	4a1d      	ldr	r2, [pc, #116]	; (800082c <MX_I2C1_Init+0x7c>)
 80007b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_I2C1_Init+0x78>)
 80007bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80007c0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_I2C1_Init+0x78>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_I2C1_Init+0x78>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_I2C1_Init+0x78>)
 80007d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_I2C1_Init+0x78>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2C1_Init+0x78>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_I2C1_Init+0x78>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_I2C1_Init+0x78>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ee:	480e      	ldr	r0, [pc, #56]	; (8000828 <MX_I2C1_Init+0x78>)
 80007f0:	f002 f9dc 	bl	8002bac <HAL_I2C_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80007fa:	f000 ff35 	bl	8001668 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007fe:	2100      	movs	r1, #0
 8000800:	4809      	ldr	r0, [pc, #36]	; (8000828 <MX_I2C1_Init+0x78>)
 8000802:	f002 ff4c 	bl	800369e <HAL_I2CEx_ConfigAnalogFilter>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 800080c:	f000 ff2c 	bl	8001668 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000810:	2100      	movs	r1, #0
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_I2C1_Init+0x78>)
 8000814:	f002 ff7f 	bl	8003716 <HAL_I2CEx_ConfigDigitalFilter>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 800081e:	f000 ff23 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200000e4 	.word	0x200000e4
 800082c:	40005400 	.word	0x40005400

08000830 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a19      	ldr	r2, [pc, #100]	; (80008b4 <HAL_I2C_MspInit+0x84>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d12c      	bne.n	80008ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800086e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000874:	2312      	movs	r3, #18
 8000876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000878:	2301      	movs	r3, #1
 800087a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000880:	2304      	movs	r3, #4
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	480c      	ldr	r0, [pc, #48]	; (80008bc <HAL_I2C_MspInit+0x8c>)
 800088c:	f001 ff98 	bl	80027c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 800089a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800089e:	6413      	str	r3, [r2, #64]	; 0x40
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	; 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40005400 	.word	0x40005400
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020400 	.word	0x40020400

080008c0 <__io_putchar>:
void SaveSeting(const int *location);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ch, 1, 100);
 80008c8:	6879      	ldr	r1, [r7, #4]
 80008ca:	2364      	movs	r3, #100	; 0x64
 80008cc:	2201      	movs	r2, #1
 80008ce:	4804      	ldr	r0, [pc, #16]	; (80008e0 <__io_putchar+0x20>)
 80008d0:	f004 fd95 	bl	80053fe <HAL_UART_Transmit>
	return ch;
 80008d4:	687b      	ldr	r3, [r7, #4]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000026c 	.word	0x2000026c

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b5b0      	push	{r4, r5, r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	int location = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
	uint8_t adc_point = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	71fb      	strb	r3, [r7, #7]
	int i = 1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f6:	f001 f9d7 	bl	8001ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fa:	f000 f941 	bl	8000b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fe:	f7ff fee7 	bl	80006d0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000902:	f000 feb7 	bl	8001674 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000906:	f001 f8ff 	bl	8001b08 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800090a:	f001 f85d 	bl	80019c8 <MX_TIM3_Init>
  MX_ADC1_Init();
 800090e:	f7ff fe49 	bl	80005a4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000912:	f001 f8cf 	bl	8001ab4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000916:	f7ff ff4b 	bl	80007b0 <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800091a:	f000 f9a3 	bl	8000c64 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	init();
 800091e:	f000 fb84 	bl	800102a <init>
	HAL_TIM_Base_Init(&htim3);
 8000922:	4886      	ldr	r0, [pc, #536]	; (8000b3c <main+0x258>)
 8000924:	f004 f89c 	bl	8004a60 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim3);
 8000928:	4884      	ldr	r0, [pc, #528]	; (8000b3c <main+0x258>)
 800092a:	f004 f8e9 	bl	8004b00 <HAL_TIM_Base_Start_IT>

	sTime.Hours = 12;
 800092e:	4b84      	ldr	r3, [pc, #528]	; (8000b40 <main+0x25c>)
 8000930:	220c      	movs	r2, #12
 8000932:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 0;
 8000934:	4b82      	ldr	r3, [pc, #520]	; (8000b40 <main+0x25c>)
 8000936:	2200      	movs	r2, #0
 8000938:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0;
 800093a:	4b81      	ldr	r3, [pc, #516]	; (8000b40 <main+0x25c>)
 800093c:	2200      	movs	r2, #0
 800093e:	709a      	strb	r2, [r3, #2]
	sTime.TimeFormat = 0;
 8000940:	4b7f      	ldr	r3, [pc, #508]	; (8000b40 <main+0x25c>)
 8000942:	2200      	movs	r2, #0
 8000944:	70da      	strb	r2, [r3, #3]

	sDate.Year = 22;
 8000946:	4b7f      	ldr	r3, [pc, #508]	; (8000b44 <main+0x260>)
 8000948:	2216      	movs	r2, #22
 800094a:	70da      	strb	r2, [r3, #3]
	sDate.Month = 6;
 800094c:	4b7d      	ldr	r3, [pc, #500]	; (8000b44 <main+0x260>)
 800094e:	2206      	movs	r2, #6
 8000950:	705a      	strb	r2, [r3, #1]
	sDate.Date = 20;
 8000952:	4b7c      	ldr	r3, [pc, #496]	; (8000b44 <main+0x260>)
 8000954:	2214      	movs	r2, #20
 8000956:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000958:	2200      	movs	r2, #0
 800095a:	4979      	ldr	r1, [pc, #484]	; (8000b40 <main+0x25c>)
 800095c:	487a      	ldr	r0, [pc, #488]	; (8000b48 <main+0x264>)
 800095e:	f003 fdf7 	bl	8004550 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000962:	2200      	movs	r2, #0
 8000964:	4977      	ldr	r1, [pc, #476]	; (8000b44 <main+0x260>)
 8000966:	4878      	ldr	r0, [pc, #480]	; (8000b48 <main+0x264>)
 8000968:	f003 feea 	bl	8004740 <HAL_RTC_SetDate>
	memset(buf, 0, sizeof(buf));
 800096c:	2219      	movs	r2, #25
 800096e:	2100      	movs	r1, #0
 8000970:	4876      	ldr	r0, [pc, #472]	; (8000b4c <main+0x268>)
 8000972:	f005 fd35 	bl	80063e0 <memset>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//clock
		if (flag == 0) {
 8000976:	4b76      	ldr	r3, [pc, #472]	; (8000b50 <main+0x26c>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d142      	bne.n	8000a04 <main+0x120>
			//********************** cursor ****************************************
			bufferState();
 800097e:	f000 f985 	bl	8000c8c <bufferState>
			//********************* Display ** LINE 1 ******************************
			LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000982:	2180      	movs	r1, #128	; 0x80
 8000984:	204e      	movs	r0, #78	; 0x4e
 8000986:	f000 faf5 	bl	8000f74 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, " @   LCD Clock  ");
 800098a:	4972      	ldr	r1, [pc, #456]	; (8000b54 <main+0x270>)
 800098c:	204e      	movs	r0, #78	; 0x4e
 800098e:	f000 fb32 	bl	8000ff6 <LCD_SendString>
			//********************* Display ** LINE 2 ******************************
			while (flag == 0) {
 8000992:	e032      	b.n	80009fa <main+0x116>
				HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000994:	2200      	movs	r2, #0
 8000996:	496a      	ldr	r1, [pc, #424]	; (8000b40 <main+0x25c>)
 8000998:	486b      	ldr	r0, [pc, #428]	; (8000b48 <main+0x264>)
 800099a:	f003 fe73 	bl	8004684 <HAL_RTC_GetTime>
				HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800099e:	2200      	movs	r2, #0
 80009a0:	4968      	ldr	r1, [pc, #416]	; (8000b44 <main+0x260>)
 80009a2:	4869      	ldr	r0, [pc, #420]	; (8000b48 <main+0x264>)
 80009a4:	f003 ff50 	bl	8004848 <HAL_RTC_GetDate>
				HAL_UART_Transmit(&huart3, (uint8_t*) buf, sizeof(buf), 2000);
 80009a8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009ac:	2219      	movs	r2, #25
 80009ae:	4967      	ldr	r1, [pc, #412]	; (8000b4c <main+0x268>)
 80009b0:	4869      	ldr	r0, [pc, #420]	; (8000b58 <main+0x274>)
 80009b2:	f004 fd24 	bl	80053fe <HAL_UART_Transmit>
				sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 80009b6:	4b62      	ldr	r3, [pc, #392]	; (8000b40 <main+0x25c>)
 80009b8:	78db      	ldrb	r3, [r3, #3]
 80009ba:	461a      	mov	r2, r3
 80009bc:	4613      	mov	r3, r2
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	4413      	add	r3, r2
 80009c2:	4a66      	ldr	r2, [pc, #408]	; (8000b5c <main+0x278>)
 80009c4:	441a      	add	r2, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 80009c6:	4b5e      	ldr	r3, [pc, #376]	; (8000b40 <main+0x25c>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
				sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 80009ca:	4618      	mov	r0, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 80009cc:	4b5c      	ldr	r3, [pc, #368]	; (8000b40 <main+0x25c>)
 80009ce:	785b      	ldrb	r3, [r3, #1]
				sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 80009d0:	4619      	mov	r1, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 80009d2:	4b5b      	ldr	r3, [pc, #364]	; (8000b40 <main+0x25c>)
 80009d4:	789b      	ldrb	r3, [r3, #2]
				sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 80009d6:	9301      	str	r3, [sp, #4]
 80009d8:	9100      	str	r1, [sp, #0]
 80009da:	4603      	mov	r3, r0
 80009dc:	4960      	ldr	r1, [pc, #384]	; (8000b60 <main+0x27c>)
 80009de:	485b      	ldr	r0, [pc, #364]	; (8000b4c <main+0x268>)
 80009e0:	f005 fdc8 	bl	8006574 <siprintf>
				printf("\r\n");
 80009e4:	485f      	ldr	r0, [pc, #380]	; (8000b64 <main+0x280>)
 80009e6:	f005 fd89 	bl	80064fc <puts>
				LCD_SendCommand(LCD_ADDR, 0b11000000);
 80009ea:	21c0      	movs	r1, #192	; 0xc0
 80009ec:	204e      	movs	r0, #78	; 0x4e
 80009ee:	f000 fac1 	bl	8000f74 <LCD_SendCommand>
				LCD_SendString(LCD_ADDR, buf);
 80009f2:	4956      	ldr	r1, [pc, #344]	; (8000b4c <main+0x268>)
 80009f4:	204e      	movs	r0, #78	; 0x4e
 80009f6:	f000 fafe 	bl	8000ff6 <LCD_SendString>
			while (flag == 0) {
 80009fa:	4b55      	ldr	r3, [pc, #340]	; (8000b50 <main+0x26c>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0c8      	beq.n	8000994 <main+0xb0>
 8000a02:	e7b8      	b.n	8000976 <main+0x92>
			//**********************************************************************
			}
		}
		//set Time
		else if (flag == 1) {
 8000a04:	4b52      	ldr	r3, [pc, #328]	; (8000b50 <main+0x26c>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d14c      	bne.n	8000aa6 <main+0x1c2>
			//********************* Display ** LINE 1 ******************************
			LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000a0c:	2180      	movs	r1, #128	; 0x80
 8000a0e:	204e      	movs	r0, #78	; 0x4e
 8000a10:	f000 fab0 	bl	8000f74 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, " @   Set Time  ");
 8000a14:	4954      	ldr	r1, [pc, #336]	; (8000b68 <main+0x284>)
 8000a16:	204e      	movs	r0, #78	; 0x4e
 8000a18:	f000 faed 	bl	8000ff6 <LCD_SendString>
			//********************* Display ** LINE 2 ******************************
			sprintf(buf, "%s %02d:%02d:%02d Save", ampm[sTime.TimeFormat],
 8000a1c:	4b48      	ldr	r3, [pc, #288]	; (8000b40 <main+0x25c>)
 8000a1e:	78db      	ldrb	r3, [r3, #3]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4613      	mov	r3, r2
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	4413      	add	r3, r2
 8000a28:	4a4c      	ldr	r2, [pc, #304]	; (8000b5c <main+0x278>)
 8000a2a:	441a      	add	r2, r3
									sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000a2c:	4b44      	ldr	r3, [pc, #272]	; (8000b40 <main+0x25c>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
			sprintf(buf, "%s %02d:%02d:%02d Save", ampm[sTime.TimeFormat],
 8000a30:	4618      	mov	r0, r3
									sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000a32:	4b43      	ldr	r3, [pc, #268]	; (8000b40 <main+0x25c>)
 8000a34:	785b      	ldrb	r3, [r3, #1]
			sprintf(buf, "%s %02d:%02d:%02d Save", ampm[sTime.TimeFormat],
 8000a36:	4619      	mov	r1, r3
									sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000a38:	4b41      	ldr	r3, [pc, #260]	; (8000b40 <main+0x25c>)
 8000a3a:	789b      	ldrb	r3, [r3, #2]
			sprintf(buf, "%s %02d:%02d:%02d Save", ampm[sTime.TimeFormat],
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	9100      	str	r1, [sp, #0]
 8000a40:	4603      	mov	r3, r0
 8000a42:	494a      	ldr	r1, [pc, #296]	; (8000b6c <main+0x288>)
 8000a44:	4841      	ldr	r0, [pc, #260]	; (8000b4c <main+0x268>)
 8000a46:	f005 fd95 	bl	8006574 <siprintf>
			LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000a4a:	21c0      	movs	r1, #192	; 0xc0
 8000a4c:	204e      	movs	r0, #78	; 0x4e
 8000a4e:	f000 fa91 	bl	8000f74 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, buf);
 8000a52:	493e      	ldr	r1, [pc, #248]	; (8000b4c <main+0x268>)
 8000a54:	204e      	movs	r0, #78	; 0x4e
 8000a56:	f000 face 	bl	8000ff6 <LCD_SendString>
			//********************** cursor ****************************************
			bufferState();
 8000a5a:	f000 f917 	bl	8000c8c <bufferState>
			location = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
			//***********************st 초기화 *******************************************
			st.f = sTime.TimeFormat;
 8000a62:	4b37      	ldr	r3, [pc, #220]	; (8000b40 <main+0x25c>)
 8000a64:	78da      	ldrb	r2, [r3, #3]
 8000a66:	4b42      	ldr	r3, [pc, #264]	; (8000b70 <main+0x28c>)
 8000a68:	701a      	strb	r2, [r3, #0]
			st.h = sTime.Hours;
 8000a6a:	4b35      	ldr	r3, [pc, #212]	; (8000b40 <main+0x25c>)
 8000a6c:	781a      	ldrb	r2, [r3, #0]
 8000a6e:	4b40      	ldr	r3, [pc, #256]	; (8000b70 <main+0x28c>)
 8000a70:	705a      	strb	r2, [r3, #1]
			st.m = sTime.Minutes;
 8000a72:	4b33      	ldr	r3, [pc, #204]	; (8000b40 <main+0x25c>)
 8000a74:	785a      	ldrb	r2, [r3, #1]
 8000a76:	4b3e      	ldr	r3, [pc, #248]	; (8000b70 <main+0x28c>)
 8000a78:	709a      	strb	r2, [r3, #2]
			st.s = sTime.Seconds;
 8000a7a:	4b31      	ldr	r3, [pc, #196]	; (8000b40 <main+0x25c>)
 8000a7c:	789a      	ldrb	r2, [r3, #2]
 8000a7e:	4b3c      	ldr	r3, [pc, #240]	; (8000b70 <main+0x28c>)
 8000a80:	70da      	strb	r2, [r3, #3]
			//**********************************************************************
			while (flag == 1) {
 8000a82:	e00b      	b.n	8000a9c <main+0x1b8>
				AdcSwitch(&adc_point, &location);
 8000a84:	f107 0208 	add.w	r2, r7, #8
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 fcf9 	bl	8001484 <AdcSwitch>
				SaveSeting(&location);
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fad0 	bl	800103c <SaveSeting>
			while (flag == 1) {
 8000a9c:	4b2c      	ldr	r3, [pc, #176]	; (8000b50 <main+0x26c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d0ef      	beq.n	8000a84 <main+0x1a0>
 8000aa4:	e767      	b.n	8000976 <main+0x92>
																												// 세이브 되면 flag를 0으로 돌리자. // 알람에서 셋팅 되면 화면 출력 ON / OFF 바꾸기...
			}
			//**********************************************************************
		}
		//alarm
		else if (flag == 2) {
 8000aa6:	4b2a      	ldr	r3, [pc, #168]	; (8000b50 <main+0x26c>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d13d      	bne.n	8000b2a <main+0x246>
			//********************* Display ** LINE 1 ******************************
			LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000aae:	2180      	movs	r1, #128	; 0x80
 8000ab0:	204e      	movs	r0, #78	; 0x4e
 8000ab2:	f000 fa5f 	bl	8000f74 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, " @   alarm     ");
 8000ab6:	492f      	ldr	r1, [pc, #188]	; (8000b74 <main+0x290>)
 8000ab8:	204e      	movs	r0, #78	; 0x4e
 8000aba:	f000 fa9c 	bl	8000ff6 <LCD_SendString>
			//********************* Display ** LINE 2 ******************************
			sprintf(buf, "%s %02d:%02d:%02d %s ", ampm[sTime.TimeFormat],
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <main+0x25c>)
 8000ac0:	78db      	ldrb	r3, [r3, #3]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a24      	ldr	r2, [pc, #144]	; (8000b5c <main+0x278>)
 8000acc:	441a      	add	r2, r3
									sTime.Hours, sTime.Minutes, sTime.Seconds, alarmSet[i]);
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <main+0x25c>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
			sprintf(buf, "%s %02d:%02d:%02d %s ", ampm[sTime.TimeFormat],
 8000ad2:	461d      	mov	r5, r3
									sTime.Hours, sTime.Minutes, sTime.Seconds, alarmSet[i]);
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <main+0x25c>)
 8000ad6:	785b      	ldrb	r3, [r3, #1]
			sprintf(buf, "%s %02d:%02d:%02d %s ", ampm[sTime.TimeFormat],
 8000ad8:	4618      	mov	r0, r3
									sTime.Hours, sTime.Minutes, sTime.Seconds, alarmSet[i]);
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <main+0x25c>)
 8000adc:	789b      	ldrb	r3, [r3, #2]
			sprintf(buf, "%s %02d:%02d:%02d %s ", ampm[sTime.TimeFormat],
 8000ade:	461c      	mov	r4, r3
									sTime.Hours, sTime.Minutes, sTime.Seconds, alarmSet[i]);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	4924      	ldr	r1, [pc, #144]	; (8000b78 <main+0x294>)
 8000ae6:	440b      	add	r3, r1
			sprintf(buf, "%s %02d:%02d:%02d %s ", ampm[sTime.TimeFormat],
 8000ae8:	9302      	str	r3, [sp, #8]
 8000aea:	9401      	str	r4, [sp, #4]
 8000aec:	9000      	str	r0, [sp, #0]
 8000aee:	462b      	mov	r3, r5
 8000af0:	4922      	ldr	r1, [pc, #136]	; (8000b7c <main+0x298>)
 8000af2:	4816      	ldr	r0, [pc, #88]	; (8000b4c <main+0x268>)
 8000af4:	f005 fd3e 	bl	8006574 <siprintf>
			LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000af8:	21c0      	movs	r1, #192	; 0xc0
 8000afa:	204e      	movs	r0, #78	; 0x4e
 8000afc:	f000 fa3a 	bl	8000f74 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, buf);
 8000b00:	4912      	ldr	r1, [pc, #72]	; (8000b4c <main+0x268>)
 8000b02:	204e      	movs	r0, #78	; 0x4e
 8000b04:	f000 fa77 	bl	8000ff6 <LCD_SendString>
			//********************** cursor ****************************************
			bufferState();
 8000b08:	f000 f8c0 	bl	8000c8c <bufferState>
			location = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
			//**********************************************************************
			while (flag == 2) {
 8000b10:	e006      	b.n	8000b20 <main+0x23c>
				AdcSwitch(&adc_point, &location);
 8000b12:	f107 0208 	add.w	r2, r7, #8
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 fcb2 	bl	8001484 <AdcSwitch>
			while (flag == 2) {
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <main+0x26c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d0f4      	beq.n	8000b12 <main+0x22e>
 8000b28:	e725      	b.n	8000976 <main+0x92>
			}
			//**********************************************************************
		} else if (flag > 2)
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <main+0x26c>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	f67f af21 	bls.w	8000976 <main+0x92>
			flag = 0;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <main+0x26c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
		if (flag == 0) {
 8000b3a:	e71c      	b.n	8000976 <main+0x92>
 8000b3c:	200001e0 	.word	0x200001e0
 8000b40:	20000168 	.word	0x20000168
 8000b44:	2000017c 	.word	0x2000017c
 8000b48:	200001bc 	.word	0x200001bc
 8000b4c:	20000180 	.word	0x20000180
 8000b50:	20000164 	.word	0x20000164
 8000b54:	08007830 	.word	0x08007830
 8000b58:	2000026c 	.word	0x2000026c
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	08007844 	.word	0x08007844
 8000b64:	0800785c 	.word	0x0800785c
 8000b68:	08007860 	.word	0x08007860
 8000b6c:	08007870 	.word	0x08007870
 8000b70:	200001b8 	.word	0x200001b8
 8000b74:	08007888 	.word	0x08007888
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	08007898 	.word	0x08007898

08000b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b094      	sub	sp, #80	; 0x50
 8000b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b86:	f107 0320 	add.w	r3, r7, #32
 8000b8a:	2230      	movs	r2, #48	; 0x30
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f005 fc26 	bl	80063e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	4b2c      	ldr	r3, [pc, #176]	; (8000c5c <SystemClock_Config+0xdc>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	4a2b      	ldr	r2, [pc, #172]	; (8000c5c <SystemClock_Config+0xdc>)
 8000bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb4:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <SystemClock_Config+0xdc>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <SystemClock_Config+0xe0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a25      	ldr	r2, [pc, #148]	; (8000c60 <SystemClock_Config+0xe0>)
 8000bca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <SystemClock_Config+0xe0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000bdc:	2306      	movs	r3, #6
 8000bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000be0:	2301      	movs	r3, #1
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be4:	2301      	movs	r3, #1
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be8:	2310      	movs	r3, #16
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bec:	2302      	movs	r3, #2
 8000bee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000bf8:	23b4      	movs	r3, #180	; 0xb4
 8000bfa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c00:	2304      	movs	r3, #4
 8000c02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c04:	f107 0320 	add.w	r3, r7, #32
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f002 fe13 	bl	8003834 <HAL_RCC_OscConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c14:	f000 fd28 	bl	8001668 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c18:	f002 fdbc 	bl	8003794 <HAL_PWREx_EnableOverDrive>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c22:	f000 fd21 	bl	8001668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c26:	230f      	movs	r3, #15
 8000c28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	2105      	movs	r1, #5
 8000c44:	4618      	mov	r0, r3
 8000c46:	f003 f86d 	bl	8003d24 <HAL_RCC_ClockConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c50:	f000 fd0a 	bl	8001668 <Error_Handler>
  }
}
 8000c54:	bf00      	nop
 8000c56:	3750      	adds	r7, #80	; 0x50
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40007000 	.word	0x40007000

08000c64 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2027      	movs	r0, #39	; 0x27
 8000c6e:	f001 fcde 	bl	800262e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c72:	2027      	movs	r0, #39	; 0x27
 8000c74:	f001 fcf7 	bl	8002666 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2028      	movs	r0, #40	; 0x28
 8000c7e:	f001 fcd6 	bl	800262e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c82:	2028      	movs	r0, #40	; 0x28
 8000c84:	f001 fcef 	bl	8002666 <HAL_NVIC_EnableIRQ>
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <bufferState>:

/* USER CODE BEGIN 4 */
void bufferState() {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
	if (flag == 2 || flag == 1) {
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <bufferState+0x34>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d003      	beq.n	8000ca0 <bufferState+0x14>
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <bufferState+0x34>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d108      	bne.n	8000cb2 <bufferState+0x26>
		LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000ca0:	21c0      	movs	r1, #192	; 0xc0
 8000ca2:	204e      	movs	r0, #78	; 0x4e
 8000ca4:	f000 f966 	bl	8000f74 <LCD_SendCommand>
		LCD_SendCommand(LCD_ADDR, 0b00001111);
 8000ca8:	210f      	movs	r1, #15
 8000caa:	204e      	movs	r0, #78	; 0x4e
 8000cac:	f000 f962 	bl	8000f74 <LCD_SendCommand>
 8000cb0:	e004      	b.n	8000cbc <bufferState+0x30>
	} else
		LCD_SendCommand(LCD_ADDR, 0b00001110);
 8000cb2:	210e      	movs	r1, #14
 8000cb4:	204e      	movs	r0, #78	; 0x4e
 8000cb6:	f000 f95d 	bl	8000f74 <LCD_SendCommand>
}
 8000cba:	bf00      	nop
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000164 	.word	0x20000164

08000cc4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState pin;

	if (GPIO_Pin == GPIO_PIN_13) {
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cd4:	d156      	bne.n	8000d84 <HAL_GPIO_EXTI_Callback+0xc0>
		current_time = HAL_GetTick();
 8000cd6:	f001 f84d 	bl	8001d74 <HAL_GetTick>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b2b      	ldr	r3, [pc, #172]	; (8000d8c <HAL_GPIO_EXTI_Callback+0xc8>)
 8000ce0:	601a      	str	r2, [r3, #0]
		time_interval = current_time - last_time;
 8000ce2:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <HAL_GPIO_EXTI_Callback+0xc8>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	4a29      	ldr	r2, [pc, #164]	; (8000d94 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000cee:	6013      	str	r3, [r2, #0]
		last_time = current_time;
 8000cf0:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <HAL_GPIO_EXTI_Callback+0xc8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a26      	ldr	r2, [pc, #152]	; (8000d90 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000cf6:	6013      	str	r3, [r2, #0]

		pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000cf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfc:	4826      	ldr	r0, [pc, #152]	; (8000d98 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000cfe:	f001 ff0b 	bl	8002b18 <HAL_GPIO_ReadPin>
 8000d02:	4603      	mov	r3, r0
 8000d04:	73fb      	strb	r3, [r7, #15]

		if (time_interval <= 2) {
 8000d06:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	dc07      	bgt.n	8000d1e <HAL_GPIO_EXTI_Callback+0x5a>
			printf("Noise %d, %d\r\n", pin, time_interval);
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	4a20      	ldr	r2, [pc, #128]	; (8000d94 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000d12:	6812      	ldr	r2, [r2, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	4821      	ldr	r0, [pc, #132]	; (8000d9c <HAL_GPIO_EXTI_Callback+0xd8>)
 8000d18:	f005 fb6a 	bl	80063f0 <iprintf>
 8000d1c:	e00e      	b.n	8000d3c <HAL_GPIO_EXTI_Callback+0x78>
		} else {

			click[1].time = click[0].time;
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a1f      	ldr	r2, [pc, #124]	; (8000da0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000d24:	6093      	str	r3, [r2, #8]
			click[1].level = click[0].level;
 8000d26:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000d28:	791a      	ldrb	r2, [r3, #4]
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000d2c:	731a      	strb	r2, [r3, #12]

			click[0].time = time_interval;
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000d34:	6013      	str	r3, [r2, #0]
			click[0].level = pin;
 8000d36:	4a1a      	ldr	r2, [pc, #104]	; (8000da0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	7113      	strb	r3, [r2, #4]
		}
		if (click[0].level == GPIO_PIN_RESET && click[0].time >= LONG_CLICK_MIN) // long click
 8000d3c:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000d3e:	791b      	ldrb	r3, [r3, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d10b      	bne.n	8000d5c <HAL_GPIO_EXTI_Callback+0x98>
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000d4c:	db06      	blt.n	8000d5c <HAL_GPIO_EXTI_Callback+0x98>
		{
			printf("\r\nLong Key\r\n");
 8000d4e:	4815      	ldr	r0, [pc, #84]	; (8000da4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000d50:	f005 fbd4 	bl	80064fc <puts>
			longClick = 1;
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
				&& click[1].level == GPIO_PIN_SET) {
			printf("\r\nSelect Key, %d\r\n", click[0].time);
			flag++;
		}
	}
}
 8000d5a:	e013      	b.n	8000d84 <HAL_GPIO_EXTI_Callback+0xc0>
		} else if (click[0].level == GPIO_PIN_RESET
 8000d5c:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000d5e:	791b      	ldrb	r3, [r3, #4]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d10f      	bne.n	8000d84 <HAL_GPIO_EXTI_Callback+0xc0>
				&& click[1].level == GPIO_PIN_SET) {
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000d66:	7b1b      	ldrb	r3, [r3, #12]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d10b      	bne.n	8000d84 <HAL_GPIO_EXTI_Callback+0xc0>
			printf("\r\nSelect Key, %d\r\n", click[0].time);
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	480e      	ldr	r0, [pc, #56]	; (8000dac <HAL_GPIO_EXTI_Callback+0xe8>)
 8000d74:	f005 fb3c 	bl	80063f0 <iprintf>
			flag++;
 8000d78:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <HAL_GPIO_EXTI_Callback+0xec>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <HAL_GPIO_EXTI_Callback+0xec>)
 8000d82:	701a      	strb	r2, [r3, #0]
}
 8000d84:	bf00      	nop
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000150 	.word	0x20000150
 8000d90:	20000158 	.word	0x20000158
 8000d94:	20000154 	.word	0x20000154
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	080078b0 	.word	0x080078b0
 8000da0:	20000138 	.word	0x20000138
 8000da4:	080078c0 	.word	0x080078c0
 8000da8:	2000015c 	.word	0x2000015c
 8000dac:	080078cc 	.word	0x080078cc
 8000db0:	20000164 	.word	0x20000164

08000db4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d109      	bne.n	8000dda <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_ADC_Start(&hadc1);
 8000dc6:	4808      	ldr	r0, [pc, #32]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000dc8:	f001 f848 	bl	8001e5c <HAL_ADC_Start>
		ADC_value = HAL_ADC_GetValue(&hadc1);
 8000dcc:	4806      	ldr	r0, [pc, #24]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000dce:	f001 f917 	bl	8002000 <HAL_ADC_GetValue>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000dd8:	601a      	str	r2, [r3, #0]
		//	printf("ADC_value = %d\r\n", ADC_value);

	}
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40000400 	.word	0x40000400
 8000de8:	2000009c 	.word	0x2000009c
 8000dec:	20000160 	.word	0x20000160

08000df0 <I2C_Scan>:

void I2C_Scan() {
 8000df0:	b5b0      	push	{r4, r5, r7, lr}
 8000df2:	b098      	sub	sp, #96	; 0x60
 8000df4:	af00      	add	r7, sp, #0
	char info[] = "Scanning I2C bus...\r\n";
 8000df6:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <I2C_Scan+0xc0>)
 8000df8:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000dfc:	461d      	mov	r5, r3
 8000dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e02:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e06:	6020      	str	r0, [r4, #0]
 8000e08:	3404      	adds	r4, #4
 8000e0a:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) info, strlen(info), HAL_MAX_DELAY);
 8000e0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff f9ed 	bl	80001f0 <strlen>
 8000e16:	4603      	mov	r3, r0
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e22:	4824      	ldr	r0, [pc, #144]	; (8000eb4 <I2C_Scan+0xc4>)
 8000e24:	f004 faeb 	bl	80053fe <HAL_UART_Transmit>

	HAL_StatusTypeDef res;
	for (uint16_t i = 0; i < 128; i++) {
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000e2e:	e02f      	b.n	8000e90 <I2C_Scan+0xa0>
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000e30:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	b299      	uxth	r1, r3
 8000e38:	230a      	movs	r3, #10
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	481e      	ldr	r0, [pc, #120]	; (8000eb8 <I2C_Scan+0xc8>)
 8000e3e:	f002 f8f7 	bl	8003030 <HAL_I2C_IsDeviceReady>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		if (res == HAL_OK) {
 8000e48:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d113      	bne.n	8000e78 <I2C_Scan+0x88>
			char msg[64];
			snprintf(msg, sizeof(msg), "0x%02X", i);
 8000e50:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000e54:	1d38      	adds	r0, r7, #4
 8000e56:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <I2C_Scan+0xcc>)
 8000e58:	2140      	movs	r1, #64	; 0x40
 8000e5a:	f005 fb57 	bl	800650c <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff f9c5 	bl	80001f0 <strlen>
 8000e66:	4603      	mov	r3, r0
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	1d39      	adds	r1, r7, #4
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e70:	4810      	ldr	r0, [pc, #64]	; (8000eb4 <I2C_Scan+0xc4>)
 8000e72:	f004 fac4 	bl	80053fe <HAL_UART_Transmit>
 8000e76:	e006      	b.n	8000e86 <I2C_Scan+0x96>
			HAL_MAX_DELAY);
		} else {
			HAL_UART_Transmit(&huart2, (uint8_t*) ".", 1, HAL_MAX_DELAY);
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4910      	ldr	r1, [pc, #64]	; (8000ec0 <I2C_Scan+0xd0>)
 8000e80:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <I2C_Scan+0xc4>)
 8000e82:	f004 fabc 	bl	80053fe <HAL_UART_Transmit>
	for (uint16_t i = 0; i < 128; i++) {
 8000e86:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000e90:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000e94:	2b7f      	cmp	r3, #127	; 0x7f
 8000e96:	d9cb      	bls.n	8000e30 <I2C_Scan+0x40>
		}
	}

	HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 8000e98:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	4909      	ldr	r1, [pc, #36]	; (8000ec4 <I2C_Scan+0xd4>)
 8000ea0:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <I2C_Scan+0xc4>)
 8000ea2:	f004 faac 	bl	80053fe <HAL_UART_Transmit>
}
 8000ea6:	bf00      	nop
 8000ea8:	3760      	adds	r7, #96	; 0x60
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bdb0      	pop	{r4, r5, r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	080078f0 	.word	0x080078f0
 8000eb4:	20000228 	.word	0x20000228
 8000eb8:	200000e4 	.word	0x200000e4
 8000ebc:	080078e0 	.word	0x080078e0
 8000ec0:	080078e8 	.word	0x080078e8
 8000ec4:	080078ec 	.word	0x080078ec

08000ec8 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	71bb      	strb	r3, [r7, #6]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	b299      	uxth	r1, r3
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4822      	ldr	r0, [pc, #136]	; (8000f70 <LCD_SendInternal+0xa8>)
 8000ee6:	f002 f8a3 	bl	8003030 <HAL_I2C_IsDeviceReady>
 8000eea:	4603      	mov	r3, r0
 8000eec:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d000      	beq.n	8000ef6 <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000ef4:	e7f1      	b.n	8000eda <LCD_SendInternal+0x12>
			break;
 8000ef6:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 8000ef8:	79bb      	ldrb	r3, [r7, #6]
 8000efa:	f023 030f 	bic.w	r3, r3, #15
 8000efe:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 8000f00:	79bb      	ldrb	r3, [r7, #6]
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | BACKLIGHT | PIN_EN;
 8000f06:	7bba      	ldrb	r2, [r7, #14]
 8000f08:	797b      	ldrb	r3, [r7, #5]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f043 030c 	orr.w	r3, r3, #12
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | BACKLIGHT;
 8000f16:	7bba      	ldrb	r2, [r7, #14]
 8000f18:	797b      	ldrb	r3, [r7, #5]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	f043 0308 	orr.w	r3, r3, #8
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | BACKLIGHT | PIN_EN;
 8000f26:	7b7a      	ldrb	r2, [r7, #13]
 8000f28:	797b      	ldrb	r3, [r7, #5]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	f043 030c 	orr.w	r3, r3, #12
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | BACKLIGHT;
 8000f36:	7b7a      	ldrb	r2, [r7, #13]
 8000f38:	797b      	ldrb	r3, [r7, #5]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	f043 0308 	orr.w	r3, r3, #8
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	b299      	uxth	r1, r3
 8000f4a:	f107 0208 	add.w	r2, r7, #8
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2304      	movs	r3, #4
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <LCD_SendInternal+0xa8>)
 8000f58:	f001 ff6c 	bl	8002e34 <HAL_I2C_Master_Transmit>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8000f60:	2005      	movs	r0, #5
 8000f62:	f000 ff13 	bl	8001d8c <HAL_Delay>
	return res;
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200000e4 	.word	0x200000e4

08000f74 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	4613      	mov	r3, r2
 8000f82:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 8000f84:	79b9      	ldrb	r1, [r7, #6]
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff9c 	bl	8000ec8 <LCD_SendInternal>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000fa8:	79b9      	ldrb	r1, [r7, #6]
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	2201      	movs	r2, #1
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff8a 	bl	8000ec8 <LCD_SendInternal>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0b00110000);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2130      	movs	r1, #48	; 0x30
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ffd2 	bl	8000f74 <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0b00000010);
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ffcd 	bl	8000f74 <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, 0b00001100);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	210c      	movs	r1, #12
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ffc8 	bl	8000f74 <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, 0b00000001);
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ffc3 	bl	8000f74 <LCD_SendCommand>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	6039      	str	r1, [r7, #0]
 8001000:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 8001002:	e009      	b.n	8001018 <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	781a      	ldrb	r2, [r3, #0]
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ffc3 	bl	8000f98 <LCD_SendData>
		str++;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1f1      	bne.n	8001004 <LCD_SendString+0xe>
	}
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <init>:

void init() {
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
	I2C_Scan();
 800102e:	f7ff fedf 	bl	8000df0 <I2C_Scan>
	LCD_Init(LCD_ADDR);
 8001032:	204e      	movs	r0, #78	; 0x4e
 8001034:	f7ff ffc2 	bl	8000fbc <LCD_Init>
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <SaveSeting>:
		longClick = 0;
	}
}

void SaveSeting(const int *location)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

	/***************** Save 기능 **************************/
	if(*location == 12 && longClick == 1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b0c      	cmp	r3, #12
 800104a:	d120      	bne.n	800108e <SaveSeting+0x52>
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <SaveSeting+0x5c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d11c      	bne.n	800108e <SaveSeting+0x52>
	{
		sTime.TimeFormat = st.f;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <SaveSeting+0x60>)
 8001056:	781a      	ldrb	r2, [r3, #0]
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <SaveSeting+0x64>)
 800105a:	70da      	strb	r2, [r3, #3]
		sTime.Hours = st.h;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <SaveSeting+0x60>)
 800105e:	785a      	ldrb	r2, [r3, #1]
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <SaveSeting+0x64>)
 8001062:	701a      	strb	r2, [r3, #0]
		sTime.Minutes = st.m;
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <SaveSeting+0x60>)
 8001066:	789a      	ldrb	r2, [r3, #2]
 8001068:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <SaveSeting+0x64>)
 800106a:	705a      	strb	r2, [r3, #1]
		sTime.Seconds = st.s;
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <SaveSeting+0x60>)
 800106e:	78da      	ldrb	r2, [r3, #3]
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <SaveSeting+0x64>)
 8001072:	709a      	strb	r2, [r3, #2]

		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001074:	2200      	movs	r2, #0
 8001076:	490a      	ldr	r1, [pc, #40]	; (80010a0 <SaveSeting+0x64>)
 8001078:	480a      	ldr	r0, [pc, #40]	; (80010a4 <SaveSeting+0x68>)
 800107a:	f003 fa69 	bl	8004550 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800107e:	2200      	movs	r2, #0
 8001080:	4909      	ldr	r1, [pc, #36]	; (80010a8 <SaveSeting+0x6c>)
 8001082:	4808      	ldr	r0, [pc, #32]	; (80010a4 <SaveSeting+0x68>)
 8001084:	f003 fb5c 	bl	8004740 <HAL_RTC_SetDate>

		longClick = 0;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <SaveSeting+0x5c>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
	}
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000015c 	.word	0x2000015c
 800109c:	200001b8 	.word	0x200001b8
 80010a0:	20000168 	.word	0x20000168
 80010a4:	200001bc 	.word	0x200001bc
 80010a8:	2000017c 	.word	0x2000017c

080010ac <SetTimeDown>:
void SetTimeDown(const int *location)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	6078      	str	r0, [r7, #4]
	if(*location == 0){
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d110      	bne.n	80010de <SetTimeDown+0x32>
		if(st.f == 0)
 80010bc:	4b6d      	ldr	r3, [pc, #436]	; (8001274 <SetTimeDown+0x1c8>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d103      	bne.n	80010cc <SetTimeDown+0x20>
			st.f = 1;
 80010c4:	4b6b      	ldr	r3, [pc, #428]	; (8001274 <SetTimeDown+0x1c8>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	e086      	b.n	80011da <SetTimeDown+0x12e>
		else if(st.f == 1)
 80010cc:	4b69      	ldr	r3, [pc, #420]	; (8001274 <SetTimeDown+0x1c8>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	f040 8082 	bne.w	80011da <SetTimeDown+0x12e>
			st.f = 0;
 80010d6:	4b67      	ldr	r3, [pc, #412]	; (8001274 <SetTimeDown+0x1c8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	e07d      	b.n	80011da <SetTimeDown+0x12e>
	}
	else if(*location == 4){
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	d10e      	bne.n	8001104 <SetTimeDown+0x58>
		if(st.h == 0)
 80010e6:	4b63      	ldr	r3, [pc, #396]	; (8001274 <SetTimeDown+0x1c8>)
 80010e8:	785b      	ldrb	r3, [r3, #1]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d103      	bne.n	80010f6 <SetTimeDown+0x4a>
			st.h = 12;
 80010ee:	4b61      	ldr	r3, [pc, #388]	; (8001274 <SetTimeDown+0x1c8>)
 80010f0:	220c      	movs	r2, #12
 80010f2:	705a      	strb	r2, [r3, #1]
 80010f4:	e071      	b.n	80011da <SetTimeDown+0x12e>
		else
			st.h -= 1;
 80010f6:	4b5f      	ldr	r3, [pc, #380]	; (8001274 <SetTimeDown+0x1c8>)
 80010f8:	785b      	ldrb	r3, [r3, #1]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b5d      	ldr	r3, [pc, #372]	; (8001274 <SetTimeDown+0x1c8>)
 8001100:	705a      	strb	r2, [r3, #1]
 8001102:	e06a      	b.n	80011da <SetTimeDown+0x12e>
	}
	else if(*location == 6){
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b06      	cmp	r3, #6
 800110a:	d111      	bne.n	8001130 <SetTimeDown+0x84>
		if(st.m < 10)
 800110c:	4b59      	ldr	r3, [pc, #356]	; (8001274 <SetTimeDown+0x1c8>)
 800110e:	789b      	ldrb	r3, [r3, #2]
 8001110:	2b09      	cmp	r3, #9
 8001112:	d806      	bhi.n	8001122 <SetTimeDown+0x76>
			st.m += 50;
 8001114:	4b57      	ldr	r3, [pc, #348]	; (8001274 <SetTimeDown+0x1c8>)
 8001116:	789b      	ldrb	r3, [r3, #2]
 8001118:	3332      	adds	r3, #50	; 0x32
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b55      	ldr	r3, [pc, #340]	; (8001274 <SetTimeDown+0x1c8>)
 800111e:	709a      	strb	r2, [r3, #2]
 8001120:	e05b      	b.n	80011da <SetTimeDown+0x12e>
		else
			st.m -= 10;
 8001122:	4b54      	ldr	r3, [pc, #336]	; (8001274 <SetTimeDown+0x1c8>)
 8001124:	789b      	ldrb	r3, [r3, #2]
 8001126:	3b0a      	subs	r3, #10
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b52      	ldr	r3, [pc, #328]	; (8001274 <SetTimeDown+0x1c8>)
 800112c:	709a      	strb	r2, [r3, #2]
 800112e:	e054      	b.n	80011da <SetTimeDown+0x12e>
	}
	else if(*location == 7){
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b07      	cmp	r3, #7
 8001136:	d11b      	bne.n	8001170 <SetTimeDown+0xc4>
		if(st.m % 10 == 0)
 8001138:	4b4e      	ldr	r3, [pc, #312]	; (8001274 <SetTimeDown+0x1c8>)
 800113a:	789a      	ldrb	r2, [r3, #2]
 800113c:	4b4e      	ldr	r3, [pc, #312]	; (8001278 <SetTimeDown+0x1cc>)
 800113e:	fba3 1302 	umull	r1, r3, r3, r2
 8001142:	08d9      	lsrs	r1, r3, #3
 8001144:	460b      	mov	r3, r1
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d106      	bne.n	8001162 <SetTimeDown+0xb6>
			st.m += 9;
 8001154:	4b47      	ldr	r3, [pc, #284]	; (8001274 <SetTimeDown+0x1c8>)
 8001156:	789b      	ldrb	r3, [r3, #2]
 8001158:	3309      	adds	r3, #9
 800115a:	b2da      	uxtb	r2, r3
 800115c:	4b45      	ldr	r3, [pc, #276]	; (8001274 <SetTimeDown+0x1c8>)
 800115e:	709a      	strb	r2, [r3, #2]
 8001160:	e03b      	b.n	80011da <SetTimeDown+0x12e>
		else
			st.m--;
 8001162:	4b44      	ldr	r3, [pc, #272]	; (8001274 <SetTimeDown+0x1c8>)
 8001164:	789b      	ldrb	r3, [r3, #2]
 8001166:	3b01      	subs	r3, #1
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b42      	ldr	r3, [pc, #264]	; (8001274 <SetTimeDown+0x1c8>)
 800116c:	709a      	strb	r2, [r3, #2]
 800116e:	e034      	b.n	80011da <SetTimeDown+0x12e>
	}
	else if(*location == 9){
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b09      	cmp	r3, #9
 8001176:	d111      	bne.n	800119c <SetTimeDown+0xf0>
		if(st.s < 10)
 8001178:	4b3e      	ldr	r3, [pc, #248]	; (8001274 <SetTimeDown+0x1c8>)
 800117a:	78db      	ldrb	r3, [r3, #3]
 800117c:	2b09      	cmp	r3, #9
 800117e:	d806      	bhi.n	800118e <SetTimeDown+0xe2>
			st.s += 50;
 8001180:	4b3c      	ldr	r3, [pc, #240]	; (8001274 <SetTimeDown+0x1c8>)
 8001182:	78db      	ldrb	r3, [r3, #3]
 8001184:	3332      	adds	r3, #50	; 0x32
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b3a      	ldr	r3, [pc, #232]	; (8001274 <SetTimeDown+0x1c8>)
 800118a:	70da      	strb	r2, [r3, #3]
 800118c:	e025      	b.n	80011da <SetTimeDown+0x12e>
		else
			st.s -=10;
 800118e:	4b39      	ldr	r3, [pc, #228]	; (8001274 <SetTimeDown+0x1c8>)
 8001190:	78db      	ldrb	r3, [r3, #3]
 8001192:	3b0a      	subs	r3, #10
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4b37      	ldr	r3, [pc, #220]	; (8001274 <SetTimeDown+0x1c8>)
 8001198:	70da      	strb	r2, [r3, #3]
 800119a:	e01e      	b.n	80011da <SetTimeDown+0x12e>
	}else if(*location == 10){
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b0a      	cmp	r3, #10
 80011a2:	d11a      	bne.n	80011da <SetTimeDown+0x12e>
		if(st.s % 10 == 0)
 80011a4:	4b33      	ldr	r3, [pc, #204]	; (8001274 <SetTimeDown+0x1c8>)
 80011a6:	78da      	ldrb	r2, [r3, #3]
 80011a8:	4b33      	ldr	r3, [pc, #204]	; (8001278 <SetTimeDown+0x1cc>)
 80011aa:	fba3 1302 	umull	r1, r3, r3, r2
 80011ae:	08d9      	lsrs	r1, r3, #3
 80011b0:	460b      	mov	r3, r1
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d106      	bne.n	80011ce <SetTimeDown+0x122>
			st.s += 9;
 80011c0:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <SetTimeDown+0x1c8>)
 80011c2:	78db      	ldrb	r3, [r3, #3]
 80011c4:	3309      	adds	r3, #9
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <SetTimeDown+0x1c8>)
 80011ca:	70da      	strb	r2, [r3, #3]
 80011cc:	e005      	b.n	80011da <SetTimeDown+0x12e>
		else
			st.s--;
 80011ce:	4b29      	ldr	r3, [pc, #164]	; (8001274 <SetTimeDown+0x1c8>)
 80011d0:	78db      	ldrb	r3, [r3, #3]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b27      	ldr	r3, [pc, #156]	; (8001274 <SetTimeDown+0x1c8>)
 80011d8:	70da      	strb	r2, [r3, #3]
	}
	char format[3];
	if(st.f == 0)
 80011da:	4b26      	ldr	r3, [pc, #152]	; (8001274 <SetTimeDown+0x1c8>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d109      	bne.n	80011f6 <SetTimeDown+0x14a>
		strcpy(format, "AM");
 80011e2:	4a26      	ldr	r2, [pc, #152]	; (800127c <SetTimeDown+0x1d0>)
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	6812      	ldr	r2, [r2, #0]
 80011ea:	4611      	mov	r1, r2
 80011ec:	8019      	strh	r1, [r3, #0]
 80011ee:	3302      	adds	r3, #2
 80011f0:	0c12      	lsrs	r2, r2, #16
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	e00c      	b.n	8001210 <SetTimeDown+0x164>
	else if(st.f == 1)
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <SetTimeDown+0x1c8>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d108      	bne.n	8001210 <SetTimeDown+0x164>
		strcpy(format, "PM");
 80011fe:	4a20      	ldr	r2, [pc, #128]	; (8001280 <SetTimeDown+0x1d4>)
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	6812      	ldr	r2, [r2, #0]
 8001206:	4611      	mov	r1, r2
 8001208:	8019      	strh	r1, [r3, #0]
 800120a:	3302      	adds	r3, #2
 800120c:	0c12      	lsrs	r2, r2, #16
 800120e:	701a      	strb	r2, [r3, #0]
	/****************** Display *************************************/
	sprintf(temp, "%s %02d:%02d:%02d Save", format, st.h, st.m, st.s);
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <SetTimeDown+0x1c8>)
 8001212:	785b      	ldrb	r3, [r3, #1]
 8001214:	4618      	mov	r0, r3
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <SetTimeDown+0x1c8>)
 8001218:	789b      	ldrb	r3, [r3, #2]
 800121a:	4619      	mov	r1, r3
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <SetTimeDown+0x1c8>)
 800121e:	78db      	ldrb	r3, [r3, #3]
 8001220:	f107 0208 	add.w	r2, r7, #8
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	9100      	str	r1, [sp, #0]
 8001228:	4603      	mov	r3, r0
 800122a:	4916      	ldr	r1, [pc, #88]	; (8001284 <SetTimeDown+0x1d8>)
 800122c:	4816      	ldr	r0, [pc, #88]	; (8001288 <SetTimeDown+0x1dc>)
 800122e:	f005 f9a1 	bl	8006574 <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001232:	21c0      	movs	r1, #192	; 0xc0
 8001234:	204e      	movs	r0, #78	; 0x4e
 8001236:	f7ff fe9d 	bl	8000f74 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, temp);
 800123a:	4913      	ldr	r1, [pc, #76]	; (8001288 <SetTimeDown+0x1dc>)
 800123c:	204e      	movs	r0, #78	; 0x4e
 800123e:	f7ff feda 	bl	8000ff6 <LCD_SendString>


	/***************** SetTime 후 커서 되돌리기 **************************/
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001242:	21c0      	movs	r1, #192	; 0xc0
 8001244:	204e      	movs	r0, #78	; 0x4e
 8001246:	f7ff fe95 	bl	8000f74 <LCD_SendCommand>
	for(int j = 0; j < *location; j++)
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	e006      	b.n	800125e <SetTimeDown+0x1b2>
	{
		LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001250:	2114      	movs	r1, #20
 8001252:	204e      	movs	r0, #78	; 0x4e
 8001254:	f7ff fe8e 	bl	8000f74 <LCD_SendCommand>
	for(int j = 0; j < *location; j++)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	3301      	adds	r3, #1
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	dbf3      	blt.n	8001250 <SetTimeDown+0x1a4>
	}

}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200001b8 	.word	0x200001b8
 8001278:	cccccccd 	.word	0xcccccccd
 800127c:	08007908 	.word	0x08007908
 8001280:	0800790c 	.word	0x0800790c
 8001284:	08007870 	.word	0x08007870
 8001288:	2000019c 	.word	0x2000019c

0800128c <SetTimeUp>:

void SetTimeUp(const int *location)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af02      	add	r7, sp, #8
 8001292:	6078      	str	r0, [r7, #4]
	if(*location == 3) {}
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b03      	cmp	r3, #3
 800129a:	f000 809a 	beq.w	80013d2 <SetTimeUp+0x146>
	else if(*location == 4){
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	d10e      	bne.n	80012c4 <SetTimeUp+0x38>
		if(st.h == 12)
 80012a6:	4b71      	ldr	r3, [pc, #452]	; (800146c <SetTimeUp+0x1e0>)
 80012a8:	785b      	ldrb	r3, [r3, #1]
 80012aa:	2b0c      	cmp	r3, #12
 80012ac:	d103      	bne.n	80012b6 <SetTimeUp+0x2a>
			st.h = 0;
 80012ae:	4b6f      	ldr	r3, [pc, #444]	; (800146c <SetTimeUp+0x1e0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	705a      	strb	r2, [r3, #1]
 80012b4:	e08d      	b.n	80013d2 <SetTimeUp+0x146>
		else
			st.h += 1;
 80012b6:	4b6d      	ldr	r3, [pc, #436]	; (800146c <SetTimeUp+0x1e0>)
 80012b8:	785b      	ldrb	r3, [r3, #1]
 80012ba:	3301      	adds	r3, #1
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b6b      	ldr	r3, [pc, #428]	; (800146c <SetTimeUp+0x1e0>)
 80012c0:	705a      	strb	r2, [r3, #1]
 80012c2:	e086      	b.n	80013d2 <SetTimeUp+0x146>
	} else if(*location == 0){
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10f      	bne.n	80012ec <SetTimeUp+0x60>
		if(st.f == 0)
 80012cc:	4b67      	ldr	r3, [pc, #412]	; (800146c <SetTimeUp+0x1e0>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d103      	bne.n	80012dc <SetTimeUp+0x50>
			st.f = 1;
 80012d4:	4b65      	ldr	r3, [pc, #404]	; (800146c <SetTimeUp+0x1e0>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	e07a      	b.n	80013d2 <SetTimeUp+0x146>
		else if(st.f == 1)
 80012dc:	4b63      	ldr	r3, [pc, #396]	; (800146c <SetTimeUp+0x1e0>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d176      	bne.n	80013d2 <SetTimeUp+0x146>
			st.f = 0;
 80012e4:	4b61      	ldr	r3, [pc, #388]	; (800146c <SetTimeUp+0x1e0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
 80012ea:	e072      	b.n	80013d2 <SetTimeUp+0x146>
	}
	else if(*location == 6){
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b06      	cmp	r3, #6
 80012f2:	d115      	bne.n	8001320 <SetTimeUp+0x94>
		if(st.m >= 50)
 80012f4:	4b5d      	ldr	r3, [pc, #372]	; (800146c <SetTimeUp+0x1e0>)
 80012f6:	789b      	ldrb	r3, [r3, #2]
 80012f8:	2b31      	cmp	r3, #49	; 0x31
 80012fa:	d906      	bls.n	800130a <SetTimeUp+0x7e>
			st.m -= 50;
 80012fc:	4b5b      	ldr	r3, [pc, #364]	; (800146c <SetTimeUp+0x1e0>)
 80012fe:	789b      	ldrb	r3, [r3, #2]
 8001300:	3b32      	subs	r3, #50	; 0x32
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b59      	ldr	r3, [pc, #356]	; (800146c <SetTimeUp+0x1e0>)
 8001306:	709a      	strb	r2, [r3, #2]
 8001308:	e063      	b.n	80013d2 <SetTimeUp+0x146>
		else if(st.m < 50) {
 800130a:	4b58      	ldr	r3, [pc, #352]	; (800146c <SetTimeUp+0x1e0>)
 800130c:	789b      	ldrb	r3, [r3, #2]
 800130e:	2b31      	cmp	r3, #49	; 0x31
 8001310:	d85f      	bhi.n	80013d2 <SetTimeUp+0x146>
			st.m += 10;
 8001312:	4b56      	ldr	r3, [pc, #344]	; (800146c <SetTimeUp+0x1e0>)
 8001314:	789b      	ldrb	r3, [r3, #2]
 8001316:	330a      	adds	r3, #10
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b54      	ldr	r3, [pc, #336]	; (800146c <SetTimeUp+0x1e0>)
 800131c:	709a      	strb	r2, [r3, #2]
 800131e:	e058      	b.n	80013d2 <SetTimeUp+0x146>
		}
	} else if (*location == 7){
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b07      	cmp	r3, #7
 8001326:	d11b      	bne.n	8001360 <SetTimeUp+0xd4>
		if(st.m % 10 == 9)
 8001328:	4b50      	ldr	r3, [pc, #320]	; (800146c <SetTimeUp+0x1e0>)
 800132a:	789a      	ldrb	r2, [r3, #2]
 800132c:	4b50      	ldr	r3, [pc, #320]	; (8001470 <SetTimeUp+0x1e4>)
 800132e:	fba3 1302 	umull	r1, r3, r3, r2
 8001332:	08d9      	lsrs	r1, r3, #3
 8001334:	460b      	mov	r3, r1
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b09      	cmp	r3, #9
 8001342:	d106      	bne.n	8001352 <SetTimeUp+0xc6>
			st.m -= 9;
 8001344:	4b49      	ldr	r3, [pc, #292]	; (800146c <SetTimeUp+0x1e0>)
 8001346:	789b      	ldrb	r3, [r3, #2]
 8001348:	3b09      	subs	r3, #9
 800134a:	b2da      	uxtb	r2, r3
 800134c:	4b47      	ldr	r3, [pc, #284]	; (800146c <SetTimeUp+0x1e0>)
 800134e:	709a      	strb	r2, [r3, #2]
 8001350:	e03f      	b.n	80013d2 <SetTimeUp+0x146>
		else
			st.m++;
 8001352:	4b46      	ldr	r3, [pc, #280]	; (800146c <SetTimeUp+0x1e0>)
 8001354:	789b      	ldrb	r3, [r3, #2]
 8001356:	3301      	adds	r3, #1
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4b44      	ldr	r3, [pc, #272]	; (800146c <SetTimeUp+0x1e0>)
 800135c:	709a      	strb	r2, [r3, #2]
 800135e:	e038      	b.n	80013d2 <SetTimeUp+0x146>
	} else if (*location == 9){
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b09      	cmp	r3, #9
 8001366:	d115      	bne.n	8001394 <SetTimeUp+0x108>
		if(st.s >= 50)
 8001368:	4b40      	ldr	r3, [pc, #256]	; (800146c <SetTimeUp+0x1e0>)
 800136a:	78db      	ldrb	r3, [r3, #3]
 800136c:	2b31      	cmp	r3, #49	; 0x31
 800136e:	d906      	bls.n	800137e <SetTimeUp+0xf2>
			st.s -=50;
 8001370:	4b3e      	ldr	r3, [pc, #248]	; (800146c <SetTimeUp+0x1e0>)
 8001372:	78db      	ldrb	r3, [r3, #3]
 8001374:	3b32      	subs	r3, #50	; 0x32
 8001376:	b2da      	uxtb	r2, r3
 8001378:	4b3c      	ldr	r3, [pc, #240]	; (800146c <SetTimeUp+0x1e0>)
 800137a:	70da      	strb	r2, [r3, #3]
 800137c:	e029      	b.n	80013d2 <SetTimeUp+0x146>
		else if(st.s < 50)
 800137e:	4b3b      	ldr	r3, [pc, #236]	; (800146c <SetTimeUp+0x1e0>)
 8001380:	78db      	ldrb	r3, [r3, #3]
 8001382:	2b31      	cmp	r3, #49	; 0x31
 8001384:	d825      	bhi.n	80013d2 <SetTimeUp+0x146>
			st.s +=10;
 8001386:	4b39      	ldr	r3, [pc, #228]	; (800146c <SetTimeUp+0x1e0>)
 8001388:	78db      	ldrb	r3, [r3, #3]
 800138a:	330a      	adds	r3, #10
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4b37      	ldr	r3, [pc, #220]	; (800146c <SetTimeUp+0x1e0>)
 8001390:	70da      	strb	r2, [r3, #3]
 8001392:	e01e      	b.n	80013d2 <SetTimeUp+0x146>
	} else if (*location == 10){
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b0a      	cmp	r3, #10
 800139a:	d11a      	bne.n	80013d2 <SetTimeUp+0x146>
		if(st.s % 10 == 9)
 800139c:	4b33      	ldr	r3, [pc, #204]	; (800146c <SetTimeUp+0x1e0>)
 800139e:	78da      	ldrb	r2, [r3, #3]
 80013a0:	4b33      	ldr	r3, [pc, #204]	; (8001470 <SetTimeUp+0x1e4>)
 80013a2:	fba3 1302 	umull	r1, r3, r3, r2
 80013a6:	08d9      	lsrs	r1, r3, #3
 80013a8:	460b      	mov	r3, r1
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b09      	cmp	r3, #9
 80013b6:	d106      	bne.n	80013c6 <SetTimeUp+0x13a>
			st.s -=9;
 80013b8:	4b2c      	ldr	r3, [pc, #176]	; (800146c <SetTimeUp+0x1e0>)
 80013ba:	78db      	ldrb	r3, [r3, #3]
 80013bc:	3b09      	subs	r3, #9
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	4b2a      	ldr	r3, [pc, #168]	; (800146c <SetTimeUp+0x1e0>)
 80013c2:	70da      	strb	r2, [r3, #3]
 80013c4:	e005      	b.n	80013d2 <SetTimeUp+0x146>
		else
			st.s++;
 80013c6:	4b29      	ldr	r3, [pc, #164]	; (800146c <SetTimeUp+0x1e0>)
 80013c8:	78db      	ldrb	r3, [r3, #3]
 80013ca:	3301      	adds	r3, #1
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4b27      	ldr	r3, [pc, #156]	; (800146c <SetTimeUp+0x1e0>)
 80013d0:	70da      	strb	r2, [r3, #3]
	}
	char format[3];
	if(st.f == 0)
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <SetTimeUp+0x1e0>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d109      	bne.n	80013ee <SetTimeUp+0x162>
		strcpy(format, "AM");
 80013da:	4a26      	ldr	r2, [pc, #152]	; (8001474 <SetTimeUp+0x1e8>)
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	4611      	mov	r1, r2
 80013e4:	8019      	strh	r1, [r3, #0]
 80013e6:	3302      	adds	r3, #2
 80013e8:	0c12      	lsrs	r2, r2, #16
 80013ea:	701a      	strb	r2, [r3, #0]
 80013ec:	e00c      	b.n	8001408 <SetTimeUp+0x17c>
	else if(st.f == 1)
 80013ee:	4b1f      	ldr	r3, [pc, #124]	; (800146c <SetTimeUp+0x1e0>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d108      	bne.n	8001408 <SetTimeUp+0x17c>
		strcpy(format, "PM");
 80013f6:	4a20      	ldr	r2, [pc, #128]	; (8001478 <SetTimeUp+0x1ec>)
 80013f8:	f107 0308 	add.w	r3, r7, #8
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	4611      	mov	r1, r2
 8001400:	8019      	strh	r1, [r3, #0]
 8001402:	3302      	adds	r3, #2
 8001404:	0c12      	lsrs	r2, r2, #16
 8001406:	701a      	strb	r2, [r3, #0]
	/****************** Display *************************************/
	sprintf(temp, "%s %02d:%02d:%02d Save", format, st.h, st.m, st.s);
 8001408:	4b18      	ldr	r3, [pc, #96]	; (800146c <SetTimeUp+0x1e0>)
 800140a:	785b      	ldrb	r3, [r3, #1]
 800140c:	4618      	mov	r0, r3
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <SetTimeUp+0x1e0>)
 8001410:	789b      	ldrb	r3, [r3, #2]
 8001412:	4619      	mov	r1, r3
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <SetTimeUp+0x1e0>)
 8001416:	78db      	ldrb	r3, [r3, #3]
 8001418:	f107 0208 	add.w	r2, r7, #8
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	9100      	str	r1, [sp, #0]
 8001420:	4603      	mov	r3, r0
 8001422:	4916      	ldr	r1, [pc, #88]	; (800147c <SetTimeUp+0x1f0>)
 8001424:	4816      	ldr	r0, [pc, #88]	; (8001480 <SetTimeUp+0x1f4>)
 8001426:	f005 f8a5 	bl	8006574 <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 800142a:	21c0      	movs	r1, #192	; 0xc0
 800142c:	204e      	movs	r0, #78	; 0x4e
 800142e:	f7ff fda1 	bl	8000f74 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, temp);
 8001432:	4913      	ldr	r1, [pc, #76]	; (8001480 <SetTimeUp+0x1f4>)
 8001434:	204e      	movs	r0, #78	; 0x4e
 8001436:	f7ff fdde 	bl	8000ff6 <LCD_SendString>


	/***************** SetTime 후 커서 되돌리기 **************************/
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 800143a:	21c0      	movs	r1, #192	; 0xc0
 800143c:	204e      	movs	r0, #78	; 0x4e
 800143e:	f7ff fd99 	bl	8000f74 <LCD_SendCommand>
	for(int j = 0; j < *location; j++)
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	e006      	b.n	8001456 <SetTimeUp+0x1ca>
	{
		LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001448:	2114      	movs	r1, #20
 800144a:	204e      	movs	r0, #78	; 0x4e
 800144c:	f7ff fd92 	bl	8000f74 <LCD_SendCommand>
	for(int j = 0; j < *location; j++)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	3301      	adds	r3, #1
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	429a      	cmp	r2, r3
 800145e:	dbf3      	blt.n	8001448 <SetTimeUp+0x1bc>
	}
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200001b8 	.word	0x200001b8
 8001470:	cccccccd 	.word	0xcccccccd
 8001474:	08007908 	.word	0x08007908
 8001478:	0800790c 	.word	0x0800790c
 800147c:	08007870 	.word	0x08007870
 8001480:	2000019c 	.word	0x2000019c

08001484 <AdcSwitch>:


void AdcSwitch(uint8_t *adc_point, int *location)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
	//***************** UP *************************************************
	if ((ADC_value <= UP_KEY_MAX) && (*adc_point != 1)){
 800148e:	4b75      	ldr	r3, [pc, #468]	; (8001664 <AdcSwitch+0x1e0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b0f      	cmp	r3, #15
 8001494:	dc09      	bgt.n	80014aa <AdcSwitch+0x26>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d005      	beq.n	80014aa <AdcSwitch+0x26>
		*adc_point = 1;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	701a      	strb	r2, [r3, #0]
		SetTimeUp(location);
 80014a4:	6838      	ldr	r0, [r7, #0]
 80014a6:	f7ff fef1 	bl	800128c <SetTimeUp>
	}
	//***************** DOWN ***********************************************
	if ((ADC_value >= DOWN_KEY_MIN && ADC_value <= DOWN_KEY_MAX)
 80014aa:	4b6e      	ldr	r3, [pc, #440]	; (8001664 <AdcSwitch+0x1e0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f240 323d 	movw	r2, #829	; 0x33d
 80014b2:	4293      	cmp	r3, r2
 80014b4:	dd0f      	ble.n	80014d6 <AdcSwitch+0x52>
 80014b6:	4b6b      	ldr	r3, [pc, #428]	; (8001664 <AdcSwitch+0x1e0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f240 3266 	movw	r2, #870	; 0x366
 80014be:	4293      	cmp	r3, r2
 80014c0:	dc09      	bgt.n	80014d6 <AdcSwitch+0x52>
			&& (*adc_point != 2)) {
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d005      	beq.n	80014d6 <AdcSwitch+0x52>
		*adc_point = 2;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2202      	movs	r2, #2
 80014ce:	701a      	strb	r2, [r3, #0]
		SetTimeDown(location);
 80014d0:	6838      	ldr	r0, [r7, #0]
 80014d2:	f7ff fdeb 	bl	80010ac <SetTimeDown>
	}
	//****************** LEFT **********************************************
	if ((ADC_value >= LEFT_KEY_MIN && ADC_value <= LEFT_KEY_MAX)
 80014d6:	4b63      	ldr	r3, [pc, #396]	; (8001664 <AdcSwitch+0x1e0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f240 7275 	movw	r2, #1909	; 0x775
 80014de:	4293      	cmp	r3, r2
 80014e0:	dd53      	ble.n	800158a <AdcSwitch+0x106>
 80014e2:	4b60      	ldr	r3, [pc, #384]	; (8001664 <AdcSwitch+0x1e0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f5b3 6ff5 	cmp.w	r3, #1960	; 0x7a8
 80014ea:	dc4e      	bgt.n	800158a <AdcSwitch+0x106>
			&& (*adc_point != 3)) {
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d04a      	beq.n	800158a <AdcSwitch+0x106>
		*adc_point = 3;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2203      	movs	r2, #3
 80014f8:	701a      	strb	r2, [r3, #0]
	//****************** LEFT **********************************************
		if(*location <= 0){
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	dc10      	bgt.n	8001524 <AdcSwitch+0xa0>
			for(int r = 0; r < 12; r++){
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	e006      	b.n	8001516 <AdcSwitch+0x92>
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001508:	2114      	movs	r1, #20
 800150a:	204e      	movs	r0, #78	; 0x4e
 800150c:	f7ff fd32 	bl	8000f74 <LCD_SendCommand>
			for(int r = 0; r < 12; r++){
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3301      	adds	r3, #1
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2b0b      	cmp	r3, #11
 800151a:	ddf5      	ble.n	8001508 <AdcSwitch+0x84>
			}
		*location = 12;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	220c      	movs	r2, #12
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	e032      	b.n	800158a <AdcSwitch+0x106>
		}

		else
		{
			if(*location == 4)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b04      	cmp	r3, #4
 800152a:	d110      	bne.n	800154e <AdcSwitch+0xca>
			{
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 800152c:	2110      	movs	r1, #16
 800152e:	204e      	movs	r0, #78	; 0x4e
 8001530:	f7ff fd20 	bl	8000f74 <LCD_SendCommand>
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001534:	2110      	movs	r1, #16
 8001536:	204e      	movs	r0, #78	; 0x4e
 8001538:	f7ff fd1c 	bl	8000f74 <LCD_SendCommand>
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 800153c:	2110      	movs	r1, #16
 800153e:	204e      	movs	r0, #78	; 0x4e
 8001540:	f7ff fd18 	bl	8000f74 <LCD_SendCommand>
				(*location) -= 3;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	1eda      	subs	r2, r3, #3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	601a      	str	r2, [r3, #0]
			}
			if(*location == 6 || *location == 9 || *location == 12)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b06      	cmp	r3, #6
 8001554:	d007      	beq.n	8001566 <AdcSwitch+0xe2>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b09      	cmp	r3, #9
 800155c:	d003      	beq.n	8001566 <AdcSwitch+0xe2>
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b0c      	cmp	r3, #12
 8001564:	d108      	bne.n	8001578 <AdcSwitch+0xf4>
			{
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001566:	2110      	movs	r1, #16
 8001568:	204e      	movs	r0, #78	; 0x4e
 800156a:	f7ff fd03 	bl	8000f74 <LCD_SendCommand>
				(*location) -= 1;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	1e5a      	subs	r2, r3, #1
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	601a      	str	r2, [r3, #0]
			}
			LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001578:	2110      	movs	r1, #16
 800157a:	204e      	movs	r0, #78	; 0x4e
 800157c:	f7ff fcfa 	bl	8000f74 <LCD_SendCommand>
			(*location)--;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	1e5a      	subs	r2, r3, #1
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	601a      	str	r2, [r3, #0]
		}
	}
	//***************** RIGHT **********************************************
	if ((ADC_value >= RIGHT_KEY_MIN && ADC_value <= RIGHT_KEY_MAX)
 800158a:	4b36      	ldr	r3, [pc, #216]	; (8001664 <AdcSwitch+0x1e0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f640 3267 	movw	r2, #2919	; 0xb67
 8001592:	4293      	cmp	r3, r2
 8001594:	dd54      	ble.n	8001640 <AdcSwitch+0x1bc>
 8001596:	4b33      	ldr	r3, [pc, #204]	; (8001664 <AdcSwitch+0x1e0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f640 32c2 	movw	r2, #3010	; 0xbc2
 800159e:	4293      	cmp	r3, r2
 80015a0:	dc4e      	bgt.n	8001640 <AdcSwitch+0x1bc>
			&& (*adc_point != 4)) {
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d04a      	beq.n	8001640 <AdcSwitch+0x1bc>
		*adc_point = 4;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2204      	movs	r2, #4
 80015ae:	701a      	strb	r2, [r3, #0]
	//***************** RIGHT **********************************************
		if (*location >= 12){
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b0b      	cmp	r3, #11
 80015b6:	dd10      	ble.n	80015da <AdcSwitch+0x156>
			for(int l = 12; l > 0; l--){
 80015b8:	230c      	movs	r3, #12
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	e006      	b.n	80015cc <AdcSwitch+0x148>
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 80015be:	2110      	movs	r1, #16
 80015c0:	204e      	movs	r0, #78	; 0x4e
 80015c2:	f7ff fcd7 	bl	8000f74 <LCD_SendCommand>
			for(int l = 12; l > 0; l--){
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	dcf5      	bgt.n	80015be <AdcSwitch+0x13a>
			}
			*location = 0;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	e032      	b.n	8001640 <AdcSwitch+0x1bc>
		}
		else
		{
			if(*location == 0)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d110      	bne.n	8001604 <AdcSwitch+0x180>
			{
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 80015e2:	2114      	movs	r1, #20
 80015e4:	204e      	movs	r0, #78	; 0x4e
 80015e6:	f7ff fcc5 	bl	8000f74 <LCD_SendCommand>
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 80015ea:	2114      	movs	r1, #20
 80015ec:	204e      	movs	r0, #78	; 0x4e
 80015ee:	f7ff fcc1 	bl	8000f74 <LCD_SendCommand>
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 80015f2:	2114      	movs	r1, #20
 80015f4:	204e      	movs	r0, #78	; 0x4e
 80015f6:	f7ff fcbd 	bl	8000f74 <LCD_SendCommand>
				(*location) += 3;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	1cda      	adds	r2, r3, #3
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	601a      	str	r2, [r3, #0]
			}
			if(*location == 4 || *location == 7 || *location == 10)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b04      	cmp	r3, #4
 800160a:	d007      	beq.n	800161c <AdcSwitch+0x198>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b07      	cmp	r3, #7
 8001612:	d003      	beq.n	800161c <AdcSwitch+0x198>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b0a      	cmp	r3, #10
 800161a:	d108      	bne.n	800162e <AdcSwitch+0x1aa>
			{
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 800161c:	2114      	movs	r1, #20
 800161e:	204e      	movs	r0, #78	; 0x4e
 8001620:	f7ff fca8 	bl	8000f74 <LCD_SendCommand>
				(*location) += 1;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	601a      	str	r2, [r3, #0]
			}
			LCD_SendCommand(LCD_ADDR, 0b00010100);
 800162e:	2114      	movs	r1, #20
 8001630:	204e      	movs	r0, #78	; 0x4e
 8001632:	f7ff fc9f 	bl	8000f74 <LCD_SendCommand>
			(*location)++;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	601a      	str	r2, [r3, #0]
		}
	}
	if (ADC_value > RIGHT_KEY_MAX && *adc_point != 0) {
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <AdcSwitch+0x1e0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f640 32c2 	movw	r2, #3010	; 0xbc2
 8001648:	4293      	cmp	r3, r2
 800164a:	dd06      	ble.n	800165a <AdcSwitch+0x1d6>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <AdcSwitch+0x1d6>
		*adc_point = 0;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
	}
	//**********************************************************************

}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000160 	.word	0x20000160

08001668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800166c:	b672      	cpsid	i
}
 800166e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001670:	e7fe      	b.n	8001670 <Error_Handler+0x8>
	...

08001674 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001688:	2300      	movs	r3, #0
 800168a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800168c:	4b25      	ldr	r3, [pc, #148]	; (8001724 <MX_RTC_Init+0xb0>)
 800168e:	4a26      	ldr	r2, [pc, #152]	; (8001728 <MX_RTC_Init+0xb4>)
 8001690:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <MX_RTC_Init+0xb0>)
 8001694:	2240      	movs	r2, #64	; 0x40
 8001696:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <MX_RTC_Init+0xb0>)
 800169a:	227f      	movs	r2, #127	; 0x7f
 800169c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <MX_RTC_Init+0xb0>)
 80016a0:	22ff      	movs	r2, #255	; 0xff
 80016a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <MX_RTC_Init+0xb0>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016aa:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <MX_RTC_Init+0xb0>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016b0:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <MX_RTC_Init+0xb0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016b6:	481b      	ldr	r0, [pc, #108]	; (8001724 <MX_RTC_Init+0xb0>)
 80016b8:	f002 fed4 	bl	8004464 <HAL_RTC_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80016c2:	f7ff ffd1 	bl	8001668 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 80016c6:	2301      	movs	r3, #1
 80016c8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80016d2:	2300      	movs	r3, #0
 80016d4:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	2200      	movs	r2, #0
 80016e2:	4619      	mov	r1, r3
 80016e4:	480f      	ldr	r0, [pc, #60]	; (8001724 <MX_RTC_Init+0xb0>)
 80016e6:	f002 ff33 	bl	8004550 <HAL_RTC_SetTime>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 80016f0:	f7ff ffba 	bl	8001668 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80016f4:	2301      	movs	r3, #1
 80016f6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80016f8:	2301      	movs	r3, #1
 80016fa:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80016fc:	2301      	movs	r3, #1
 80016fe:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001704:	463b      	mov	r3, r7
 8001706:	2200      	movs	r2, #0
 8001708:	4619      	mov	r1, r3
 800170a:	4806      	ldr	r0, [pc, #24]	; (8001724 <MX_RTC_Init+0xb0>)
 800170c:	f003 f818 	bl	8004740 <HAL_RTC_SetDate>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8001716:	f7ff ffa7 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200001bc 	.word	0x200001bc
 8001728:	40002800 	.word	0x40002800

0800172c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08e      	sub	sp, #56	; 0x38
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001734:	f107 0308 	add.w	r3, r7, #8
 8001738:	2230      	movs	r2, #48	; 0x30
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f004 fe4f 	bl	80063e0 <memset>
  if(rtcHandle->Instance==RTC)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a0c      	ldr	r2, [pc, #48]	; (8001778 <HAL_RTC_MspInit+0x4c>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d111      	bne.n	8001770 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800174c:	2320      	movs	r3, #32
 800174e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001754:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	4618      	mov	r0, r3
 800175c:	f002 fcc2 	bl	80040e4 <HAL_RCCEx_PeriphCLKConfig>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001766:	f7ff ff7f 	bl	8001668 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800176a:	4b04      	ldr	r3, [pc, #16]	; (800177c <HAL_RTC_MspInit+0x50>)
 800176c:	2201      	movs	r2, #1
 800176e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001770:	bf00      	nop
 8001772:	3738      	adds	r7, #56	; 0x38
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40002800 	.word	0x40002800
 800177c:	42470e3c 	.word	0x42470e3c

08001780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <HAL_MspInit+0x4c>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a0f      	ldr	r2, [pc, #60]	; (80017cc <HAL_MspInit+0x4c>)
 8001790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <HAL_MspInit+0x4c>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	603b      	str	r3, [r7, #0]
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_MspInit+0x4c>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a08      	ldr	r2, [pc, #32]	; (80017cc <HAL_MspInit+0x4c>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_MspInit+0x4c>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <NMI_Handler+0x4>

080017d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <HardFault_Handler+0x4>

080017dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <MemManage_Handler+0x4>

080017e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <BusFault_Handler+0x4>

080017e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <UsageFault_Handler+0x4>

080017ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800181c:	f000 fa96 	bl	8001d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}

08001824 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <TIM3_IRQHandler+0x10>)
 800182a:	f003 f9d9 	bl	8004be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200001e0 	.word	0x200001e0

08001838 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <USART3_IRQHandler+0x10>)
 800183e:	f003 fe71 	bl	8005524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	2000026c 	.word	0x2000026c

0800184c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001850:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001854:	f001 f992 	bl	8002b7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}

0800185c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	e00a      	b.n	8001884 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800186e:	f3af 8000 	nop.w
 8001872:	4601      	mov	r1, r0
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	60ba      	str	r2, [r7, #8]
 800187a:	b2ca      	uxtb	r2, r1
 800187c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	3301      	adds	r3, #1
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	dbf0      	blt.n	800186e <_read+0x12>
	}

return len;
 800188c:	687b      	ldr	r3, [r7, #4]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	e009      	b.n	80018bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	60ba      	str	r2, [r7, #8]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff f805 	bl	80008c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3301      	adds	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	dbf1      	blt.n	80018a8 <_write+0x12>
	}
	return len;
 80018c4:	687b      	ldr	r3, [r7, #4]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <_close>:

int _close(int file)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
	return -1;
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018f6:	605a      	str	r2, [r3, #4]
	return 0;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <_isatty>:

int _isatty(int file)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
	return 1;
 800190e:	2301      	movs	r3, #1
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
	return 0;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001940:	4a14      	ldr	r2, [pc, #80]	; (8001994 <_sbrk+0x5c>)
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <_sbrk+0x60>)
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <_sbrk+0x64>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d102      	bne.n	800195a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <_sbrk+0x64>)
 8001956:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <_sbrk+0x68>)
 8001958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <_sbrk+0x64>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	429a      	cmp	r2, r3
 8001966:	d207      	bcs.n	8001978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001968:	f004 fd10 	bl	800638c <__errno>
 800196c:	4603      	mov	r3, r0
 800196e:	220c      	movs	r2, #12
 8001970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
 8001976:	e009      	b.n	800198c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <_sbrk+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <_sbrk+0x64>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <_sbrk+0x64>)
 8001988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198a:	68fb      	ldr	r3, [r7, #12]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20030000 	.word	0x20030000
 8001998:	00000400 	.word	0x00000400
 800199c:	200001dc 	.word	0x200001dc
 80019a0:	200002c8 	.word	0x200002c8

080019a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <SystemInit+0x20>)
 80019aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ae:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <SystemInit+0x20>)
 80019b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019dc:	463b      	mov	r3, r7
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019e4:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <MX_TIM3_Init+0x94>)
 80019e6:	4a1e      	ldr	r2, [pc, #120]	; (8001a60 <MX_TIM3_Init+0x98>)
 80019e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <MX_TIM3_Init+0x94>)
 80019ec:	f242 7210 	movw	r2, #10000	; 0x2710
 80019f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <MX_TIM3_Init+0x94>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 900;
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <MX_TIM3_Init+0x94>)
 80019fa:	f44f 7261 	mov.w	r2, #900	; 0x384
 80019fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a00:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <MX_TIM3_Init+0x94>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <MX_TIM3_Init+0x94>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a0c:	4813      	ldr	r0, [pc, #76]	; (8001a5c <MX_TIM3_Init+0x94>)
 8001a0e:	f003 f827 	bl	8004a60 <HAL_TIM_Base_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a18:	f7ff fe26 	bl	8001668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	4619      	mov	r1, r3
 8001a28:	480c      	ldr	r0, [pc, #48]	; (8001a5c <MX_TIM3_Init+0x94>)
 8001a2a:	f003 f9e1 	bl	8004df0 <HAL_TIM_ConfigClockSource>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a34:	f7ff fe18 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a40:	463b      	mov	r3, r7
 8001a42:	4619      	mov	r1, r3
 8001a44:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_TIM3_Init+0x94>)
 8001a46:	f003 fbfd 	bl	8005244 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a50:	f7ff fe0a 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200001e0 	.word	0x200001e0
 8001a60:	40000400 	.word	0x40000400

08001a64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <HAL_TIM_Base_MspInit+0x48>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d115      	bne.n	8001aa2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <HAL_TIM_Base_MspInit+0x4c>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	4a0c      	ldr	r2, [pc, #48]	; (8001ab0 <HAL_TIM_Base_MspInit+0x4c>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	6413      	str	r3, [r2, #64]	; 0x40
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_TIM_Base_MspInit+0x4c>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2100      	movs	r1, #0
 8001a96:	201d      	movs	r0, #29
 8001a98:	f000 fdc9 	bl	800262e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a9c:	201d      	movs	r0, #29
 8001a9e:	f000 fde2 	bl	8002666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40000400 	.word	0x40000400
 8001ab0:	40023800 	.word	0x40023800

08001ab4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <MX_USART2_UART_Init+0x50>)
 8001abc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ada:	220c      	movs	r2, #12
 8001adc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aea:	4805      	ldr	r0, [pc, #20]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001aec:	f003 fc3a 	bl	8005364 <HAL_UART_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001af6:	f7ff fdb7 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000228 	.word	0x20000228
 8001b04:	40004400 	.word	0x40004400

08001b08 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <MX_USART3_UART_Init+0x4c>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <MX_USART3_UART_Init+0x50>)
 8001b10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <MX_USART3_UART_Init+0x4c>)
 8001b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <MX_USART3_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <MX_USART3_UART_Init+0x4c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <MX_USART3_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <MX_USART3_UART_Init+0x4c>)
 8001b2e:	220c      	movs	r2, #12
 8001b30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <MX_USART3_UART_Init+0x4c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <MX_USART3_UART_Init+0x4c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_USART3_UART_Init+0x4c>)
 8001b40:	f003 fc10 	bl	8005364 <HAL_UART_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b4a:	f7ff fd8d 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000026c 	.word	0x2000026c
 8001b58:	40004800 	.word	0x40004800

08001b5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08c      	sub	sp, #48	; 0x30
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a32      	ldr	r2, [pc, #200]	; (8001c44 <HAL_UART_MspInit+0xe8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d12c      	bne.n	8001bd8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
 8001b82:	4b31      	ldr	r3, [pc, #196]	; (8001c48 <HAL_UART_MspInit+0xec>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	4a30      	ldr	r2, [pc, #192]	; (8001c48 <HAL_UART_MspInit+0xec>)
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8e:	4b2e      	ldr	r3, [pc, #184]	; (8001c48 <HAL_UART_MspInit+0xec>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	61bb      	str	r3, [r7, #24]
 8001b98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	4b2a      	ldr	r3, [pc, #168]	; (8001c48 <HAL_UART_MspInit+0xec>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a29      	ldr	r2, [pc, #164]	; (8001c48 <HAL_UART_MspInit+0xec>)
 8001ba4:	f043 0308 	orr.w	r3, r3, #8
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <HAL_UART_MspInit+0xec>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001bb6:	2360      	movs	r3, #96	; 0x60
 8001bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bc6:	2307      	movs	r3, #7
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	481e      	ldr	r0, [pc, #120]	; (8001c4c <HAL_UART_MspInit+0xf0>)
 8001bd2:	f000 fdf5 	bl	80027c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001bd6:	e031      	b.n	8001c3c <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <HAL_UART_MspInit+0xf4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d12c      	bne.n	8001c3c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <HAL_UART_MspInit+0xec>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4a17      	ldr	r2, [pc, #92]	; (8001c48 <HAL_UART_MspInit+0xec>)
 8001bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_UART_MspInit+0xec>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <HAL_UART_MspInit+0xec>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a10      	ldr	r2, [pc, #64]	; (8001c48 <HAL_UART_MspInit+0xec>)
 8001c08:	f043 0308 	orr.w	r3, r3, #8
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <HAL_UART_MspInit+0xec>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c2c:	2307      	movs	r3, #7
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	4619      	mov	r1, r3
 8001c36:	4805      	ldr	r0, [pc, #20]	; (8001c4c <HAL_UART_MspInit+0xf0>)
 8001c38:	f000 fdc2 	bl	80027c0 <HAL_GPIO_Init>
}
 8001c3c:	bf00      	nop
 8001c3e:	3730      	adds	r7, #48	; 0x30
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40004400 	.word	0x40004400
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40020c00 	.word	0x40020c00
 8001c50:	40004800 	.word	0x40004800

08001c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c8c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c58:	480d      	ldr	r0, [pc, #52]	; (8001c90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c5a:	490e      	ldr	r1, [pc, #56]	; (8001c94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c5c:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c60:	e002      	b.n	8001c68 <LoopCopyDataInit>

08001c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c66:	3304      	adds	r3, #4

08001c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c6c:	d3f9      	bcc.n	8001c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6e:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c70:	4c0b      	ldr	r4, [pc, #44]	; (8001ca0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c74:	e001      	b.n	8001c7a <LoopFillZerobss>

08001c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c78:	3204      	adds	r2, #4

08001c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c7c:	d3fb      	bcc.n	8001c76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c7e:	f7ff fe91 	bl	80019a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c82:	f004 fb89 	bl	8006398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c86:	f7fe fe2d 	bl	80008e4 <main>
  bx  lr    
 8001c8a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c8c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c94:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001c98:	080079d0 	.word	0x080079d0
  ldr r2, =_sbss
 8001c9c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001ca0:	200002c4 	.word	0x200002c4

08001ca4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca4:	e7fe      	b.n	8001ca4 <ADC_IRQHandler>
	...

08001ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cac:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <HAL_Init+0x40>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ce8 <HAL_Init+0x40>)
 8001cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_Init+0x40>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <HAL_Init+0x40>)
 8001cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <HAL_Init+0x40>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <HAL_Init+0x40>)
 8001cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd0:	2003      	movs	r0, #3
 8001cd2:	f000 fca1 	bl	8002618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd6:	200f      	movs	r0, #15
 8001cd8:	f000 f808 	bl	8001cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cdc:	f7ff fd50 	bl	8001780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40023c00 	.word	0x40023c00

08001cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_InitTick+0x54>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_InitTick+0x58>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 fcb9 	bl	8002682 <HAL_SYSTICK_Config>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00e      	b.n	8001d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b0f      	cmp	r3, #15
 8001d1e:	d80a      	bhi.n	8001d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d20:	2200      	movs	r2, #0
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	f000 fc81 	bl	800262e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d2c:	4a06      	ldr	r2, [pc, #24]	; (8001d48 <HAL_InitTick+0x5c>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e000      	b.n	8001d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000010 	.word	0x20000010
 8001d44:	20000018 	.word	0x20000018
 8001d48:	20000014 	.word	0x20000014

08001d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_IncTick+0x20>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_IncTick+0x24>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <HAL_IncTick+0x24>)
 8001d5e:	6013      	str	r3, [r2, #0]
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000018 	.word	0x20000018
 8001d70:	200002b0 	.word	0x200002b0

08001d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return uwTick;
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <HAL_GetTick+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	200002b0 	.word	0x200002b0

08001d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff ffee 	bl	8001d74 <HAL_GetTick>
 8001d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d005      	beq.n	8001db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <HAL_Delay+0x44>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001db2:	bf00      	nop
 8001db4:	f7ff ffde 	bl	8001d74 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d8f7      	bhi.n	8001db4 <HAL_Delay+0x28>
  {
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000018 	.word	0x20000018

08001dd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e033      	b.n	8001e52 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7fe fc28 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d118      	bne.n	8001e44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e1a:	f023 0302 	bic.w	r3, r3, #2
 8001e1e:	f043 0202 	orr.w	r2, r3, #2
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fa2a 	bl	8002280 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f023 0303 	bic.w	r3, r3, #3
 8001e3a:	f043 0201 	orr.w	r2, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40
 8001e42:	e001      	b.n	8001e48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_Start+0x1a>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e0b2      	b.n	8001fdc <HAL_ADC_Start+0x180>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d018      	beq.n	8001ebe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e9c:	4b52      	ldr	r3, [pc, #328]	; (8001fe8 <HAL_ADC_Start+0x18c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a52      	ldr	r2, [pc, #328]	; (8001fec <HAL_ADC_Start+0x190>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	0c9a      	lsrs	r2, r3, #18
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001eb0:	e002      	b.n	8001eb8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f9      	bne.n	8001eb2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d17a      	bne.n	8001fc2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ed4:	f023 0301 	bic.w	r3, r3, #1
 8001ed8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ef6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f0a:	d106      	bne.n	8001f1a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f10:	f023 0206 	bic.w	r2, r3, #6
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	645a      	str	r2, [r3, #68]	; 0x44
 8001f18:	e002      	b.n	8001f20 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f28:	4b31      	ldr	r3, [pc, #196]	; (8001ff0 <HAL_ADC_Start+0x194>)
 8001f2a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f34:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 031f 	and.w	r3, r3, #31
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d12a      	bne.n	8001f98 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a2b      	ldr	r2, [pc, #172]	; (8001ff4 <HAL_ADC_Start+0x198>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d015      	beq.n	8001f78 <HAL_ADC_Start+0x11c>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a29      	ldr	r2, [pc, #164]	; (8001ff8 <HAL_ADC_Start+0x19c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d105      	bne.n	8001f62 <HAL_ADC_Start+0x106>
 8001f56:	4b26      	ldr	r3, [pc, #152]	; (8001ff0 <HAL_ADC_Start+0x194>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a25      	ldr	r2, [pc, #148]	; (8001ffc <HAL_ADC_Start+0x1a0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d136      	bne.n	8001fda <HAL_ADC_Start+0x17e>
 8001f6c:	4b20      	ldr	r3, [pc, #128]	; (8001ff0 <HAL_ADC_Start+0x194>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d130      	bne.n	8001fda <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d129      	bne.n	8001fda <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	e020      	b.n	8001fda <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a15      	ldr	r2, [pc, #84]	; (8001ff4 <HAL_ADC_Start+0x198>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d11b      	bne.n	8001fda <HAL_ADC_Start+0x17e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d114      	bne.n	8001fda <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	e00b      	b.n	8001fda <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f043 0210 	orr.w	r2, r3, #16
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	f043 0201 	orr.w	r2, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	20000010 	.word	0x20000010
 8001fec:	431bde83 	.word	0x431bde83
 8001ff0:	40012300 	.word	0x40012300
 8001ff4:	40012000 	.word	0x40012000
 8001ff8:	40012100 	.word	0x40012100
 8001ffc:	40012200 	.word	0x40012200

08002000 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x1c>
 8002034:	2302      	movs	r3, #2
 8002036:	e113      	b.n	8002260 <HAL_ADC_ConfigChannel+0x244>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b09      	cmp	r3, #9
 8002046:	d925      	bls.n	8002094 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68d9      	ldr	r1, [r3, #12]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	b29b      	uxth	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	4613      	mov	r3, r2
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4413      	add	r3, r2
 800205c:	3b1e      	subs	r3, #30
 800205e:	2207      	movs	r2, #7
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43da      	mvns	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	400a      	ands	r2, r1
 800206c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68d9      	ldr	r1, [r3, #12]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	b29b      	uxth	r3, r3
 800207e:	4618      	mov	r0, r3
 8002080:	4603      	mov	r3, r0
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4403      	add	r3, r0
 8002086:	3b1e      	subs	r3, #30
 8002088:	409a      	lsls	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	e022      	b.n	80020da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6919      	ldr	r1, [r3, #16]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	4613      	mov	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4413      	add	r3, r2
 80020a8:	2207      	movs	r2, #7
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	400a      	ands	r2, r1
 80020b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6919      	ldr	r1, [r3, #16]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	4618      	mov	r0, r3
 80020ca:	4603      	mov	r3, r0
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4403      	add	r3, r0
 80020d0:	409a      	lsls	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b06      	cmp	r3, #6
 80020e0:	d824      	bhi.n	800212c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	3b05      	subs	r3, #5
 80020f4:	221f      	movs	r2, #31
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43da      	mvns	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	400a      	ands	r2, r1
 8002102:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	b29b      	uxth	r3, r3
 8002110:	4618      	mov	r0, r3
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	3b05      	subs	r3, #5
 800211e:	fa00 f203 	lsl.w	r2, r0, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	635a      	str	r2, [r3, #52]	; 0x34
 800212a:	e04c      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b0c      	cmp	r3, #12
 8002132:	d824      	bhi.n	800217e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	3b23      	subs	r3, #35	; 0x23
 8002146:	221f      	movs	r2, #31
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43da      	mvns	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	400a      	ands	r2, r1
 8002154:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	b29b      	uxth	r3, r3
 8002162:	4618      	mov	r0, r3
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	3b23      	subs	r3, #35	; 0x23
 8002170:	fa00 f203 	lsl.w	r2, r0, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	631a      	str	r2, [r3, #48]	; 0x30
 800217c:	e023      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	3b41      	subs	r3, #65	; 0x41
 8002190:	221f      	movs	r2, #31
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	400a      	ands	r2, r1
 800219e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	4618      	mov	r0, r3
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	3b41      	subs	r3, #65	; 0x41
 80021ba:	fa00 f203 	lsl.w	r2, r0, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021c6:	4b29      	ldr	r3, [pc, #164]	; (800226c <HAL_ADC_ConfigChannel+0x250>)
 80021c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a28      	ldr	r2, [pc, #160]	; (8002270 <HAL_ADC_ConfigChannel+0x254>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d10f      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x1d8>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b12      	cmp	r3, #18
 80021da:	d10b      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1d      	ldr	r2, [pc, #116]	; (8002270 <HAL_ADC_ConfigChannel+0x254>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d12b      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x23a>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1c      	ldr	r2, [pc, #112]	; (8002274 <HAL_ADC_ConfigChannel+0x258>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d003      	beq.n	8002210 <HAL_ADC_ConfigChannel+0x1f4>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b11      	cmp	r3, #17
 800220e:	d122      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a11      	ldr	r2, [pc, #68]	; (8002274 <HAL_ADC_ConfigChannel+0x258>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d111      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <HAL_ADC_ConfigChannel+0x25c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a11      	ldr	r2, [pc, #68]	; (800227c <HAL_ADC_ConfigChannel+0x260>)
 8002238:	fba2 2303 	umull	r2, r3, r2, r3
 800223c:	0c9a      	lsrs	r2, r3, #18
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002248:	e002      	b.n	8002250 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	3b01      	subs	r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f9      	bne.n	800224a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	40012300 	.word	0x40012300
 8002270:	40012000 	.word	0x40012000
 8002274:	10000012 	.word	0x10000012
 8002278:	20000010 	.word	0x20000010
 800227c:	431bde83 	.word	0x431bde83

08002280 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002288:	4b79      	ldr	r3, [pc, #484]	; (8002470 <ADC_Init+0x1f0>)
 800228a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	431a      	orrs	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6859      	ldr	r1, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	021a      	lsls	r2, r3, #8
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6859      	ldr	r1, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6899      	ldr	r1, [r3, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	4a58      	ldr	r2, [pc, #352]	; (8002474 <ADC_Init+0x1f4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d022      	beq.n	800235e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002326:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6899      	ldr	r1, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002348:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6899      	ldr	r1, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	e00f      	b.n	800237e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800236c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800237c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0202 	bic.w	r2, r2, #2
 800238c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6899      	ldr	r1, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	7e1b      	ldrb	r3, [r3, #24]
 8002398:	005a      	lsls	r2, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d01b      	beq.n	80023e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6859      	ldr	r1, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	3b01      	subs	r3, #1
 80023d8:	035a      	lsls	r2, r3, #13
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	e007      	b.n	80023f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002402:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	3b01      	subs	r3, #1
 8002410:	051a      	lsls	r2, r3, #20
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002428:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6899      	ldr	r1, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002436:	025a      	lsls	r2, r3, #9
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800244e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6899      	ldr	r1, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	029a      	lsls	r2, r3, #10
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	609a      	str	r2, [r3, #8]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	40012300 	.word	0x40012300
 8002474:	0f000001 	.word	0x0f000001

08002478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002494:	4013      	ands	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024aa:	4a04      	ldr	r2, [pc, #16]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	60d3      	str	r3, [r2, #12]
}
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <__NVIC_GetPriorityGrouping+0x18>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	f003 0307 	and.w	r3, r3, #7
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	db0b      	blt.n	8002506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	f003 021f 	and.w	r2, r3, #31
 80024f4:	4907      	ldr	r1, [pc, #28]	; (8002514 <__NVIC_EnableIRQ+0x38>)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	2001      	movs	r0, #1
 80024fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000e100 	.word	0xe000e100

08002518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	6039      	str	r1, [r7, #0]
 8002522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	2b00      	cmp	r3, #0
 800252a:	db0a      	blt.n	8002542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	b2da      	uxtb	r2, r3
 8002530:	490c      	ldr	r1, [pc, #48]	; (8002564 <__NVIC_SetPriority+0x4c>)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	0112      	lsls	r2, r2, #4
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	440b      	add	r3, r1
 800253c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002540:	e00a      	b.n	8002558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4908      	ldr	r1, [pc, #32]	; (8002568 <__NVIC_SetPriority+0x50>)
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	3b04      	subs	r3, #4
 8002550:	0112      	lsls	r2, r2, #4
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	440b      	add	r3, r1
 8002556:	761a      	strb	r2, [r3, #24]
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000e100 	.word	0xe000e100
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800256c:	b480      	push	{r7}
 800256e:	b089      	sub	sp, #36	; 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f1c3 0307 	rsb	r3, r3, #7
 8002586:	2b04      	cmp	r3, #4
 8002588:	bf28      	it	cs
 800258a:	2304      	movcs	r3, #4
 800258c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3304      	adds	r3, #4
 8002592:	2b06      	cmp	r3, #6
 8002594:	d902      	bls.n	800259c <NVIC_EncodePriority+0x30>
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3b03      	subs	r3, #3
 800259a:	e000      	b.n	800259e <NVIC_EncodePriority+0x32>
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a0:	f04f 32ff 	mov.w	r2, #4294967295
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43da      	mvns	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	401a      	ands	r2, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b4:	f04f 31ff 	mov.w	r1, #4294967295
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	43d9      	mvns	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c4:	4313      	orrs	r3, r2
         );
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3724      	adds	r7, #36	; 0x24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e4:	d301      	bcc.n	80025ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025e6:	2301      	movs	r3, #1
 80025e8:	e00f      	b.n	800260a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ea:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <SysTick_Config+0x40>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025f2:	210f      	movs	r1, #15
 80025f4:	f04f 30ff 	mov.w	r0, #4294967295
 80025f8:	f7ff ff8e 	bl	8002518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <SysTick_Config+0x40>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002602:	4b04      	ldr	r3, [pc, #16]	; (8002614 <SysTick_Config+0x40>)
 8002604:	2207      	movs	r2, #7
 8002606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	e000e010 	.word	0xe000e010

08002618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ff29 	bl	8002478 <__NVIC_SetPriorityGrouping>
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
 800263a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002640:	f7ff ff3e 	bl	80024c0 <__NVIC_GetPriorityGrouping>
 8002644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	6978      	ldr	r0, [r7, #20]
 800264c:	f7ff ff8e 	bl	800256c <NVIC_EncodePriority>
 8002650:	4602      	mov	r2, r0
 8002652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff5d 	bl	8002518 <__NVIC_SetPriority>
}
 800265e:	bf00      	nop
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	4603      	mov	r3, r0
 800266e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff31 	bl	80024dc <__NVIC_EnableIRQ>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff ffa2 	bl	80025d4 <SysTick_Config>
 8002690:	4603      	mov	r3, r0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026a8:	f7ff fb64 	bl	8001d74 <HAL_GetTick>
 80026ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d008      	beq.n	80026cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2280      	movs	r2, #128	; 0x80
 80026be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e052      	b.n	8002772 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0216 	bic.w	r2, r2, #22
 80026da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d103      	bne.n	80026fc <HAL_DMA_Abort+0x62>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d007      	beq.n	800270c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0208 	bic.w	r2, r2, #8
 800270a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800271c:	e013      	b.n	8002746 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800271e:	f7ff fb29 	bl	8001d74 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b05      	cmp	r3, #5
 800272a:	d90c      	bls.n	8002746 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2203      	movs	r2, #3
 8002736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e015      	b.n	8002772 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1e4      	bne.n	800271e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002758:	223f      	movs	r2, #63	; 0x3f
 800275a:	409a      	lsls	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d004      	beq.n	8002798 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2280      	movs	r2, #128	; 0x80
 8002792:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e00c      	b.n	80027b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2205      	movs	r2, #5
 800279c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0201 	bic.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b089      	sub	sp, #36	; 0x24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	e177      	b.n	8002acc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027dc:	2201      	movs	r2, #1
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	f040 8166 	bne.w	8002ac6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d005      	beq.n	8002812 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800280e:	2b02      	cmp	r3, #2
 8002810:	d130      	bne.n	8002874 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	2203      	movs	r2, #3
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002848:	2201      	movs	r2, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 0201 	and.w	r2, r3, #1
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	2b03      	cmp	r3, #3
 800287e:	d017      	beq.n	80028b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	2203      	movs	r2, #3
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d123      	bne.n	8002904 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	08da      	lsrs	r2, r3, #3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3208      	adds	r2, #8
 80028c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	220f      	movs	r2, #15
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	08da      	lsrs	r2, r3, #3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3208      	adds	r2, #8
 80028fe:	69b9      	ldr	r1, [r7, #24]
 8002900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	2203      	movs	r2, #3
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0203 	and.w	r2, r3, #3
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80c0 	beq.w	8002ac6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	4b66      	ldr	r3, [pc, #408]	; (8002ae4 <HAL_GPIO_Init+0x324>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	4a65      	ldr	r2, [pc, #404]	; (8002ae4 <HAL_GPIO_Init+0x324>)
 8002950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002954:	6453      	str	r3, [r2, #68]	; 0x44
 8002956:	4b63      	ldr	r3, [pc, #396]	; (8002ae4 <HAL_GPIO_Init+0x324>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002962:	4a61      	ldr	r2, [pc, #388]	; (8002ae8 <HAL_GPIO_Init+0x328>)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	089b      	lsrs	r3, r3, #2
 8002968:	3302      	adds	r3, #2
 800296a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	220f      	movs	r2, #15
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a58      	ldr	r2, [pc, #352]	; (8002aec <HAL_GPIO_Init+0x32c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d037      	beq.n	80029fe <HAL_GPIO_Init+0x23e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a57      	ldr	r2, [pc, #348]	; (8002af0 <HAL_GPIO_Init+0x330>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d031      	beq.n	80029fa <HAL_GPIO_Init+0x23a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a56      	ldr	r2, [pc, #344]	; (8002af4 <HAL_GPIO_Init+0x334>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d02b      	beq.n	80029f6 <HAL_GPIO_Init+0x236>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a55      	ldr	r2, [pc, #340]	; (8002af8 <HAL_GPIO_Init+0x338>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d025      	beq.n	80029f2 <HAL_GPIO_Init+0x232>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a54      	ldr	r2, [pc, #336]	; (8002afc <HAL_GPIO_Init+0x33c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01f      	beq.n	80029ee <HAL_GPIO_Init+0x22e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a53      	ldr	r2, [pc, #332]	; (8002b00 <HAL_GPIO_Init+0x340>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d019      	beq.n	80029ea <HAL_GPIO_Init+0x22a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a52      	ldr	r2, [pc, #328]	; (8002b04 <HAL_GPIO_Init+0x344>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d013      	beq.n	80029e6 <HAL_GPIO_Init+0x226>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a51      	ldr	r2, [pc, #324]	; (8002b08 <HAL_GPIO_Init+0x348>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00d      	beq.n	80029e2 <HAL_GPIO_Init+0x222>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a50      	ldr	r2, [pc, #320]	; (8002b0c <HAL_GPIO_Init+0x34c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d007      	beq.n	80029de <HAL_GPIO_Init+0x21e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4f      	ldr	r2, [pc, #316]	; (8002b10 <HAL_GPIO_Init+0x350>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d101      	bne.n	80029da <HAL_GPIO_Init+0x21a>
 80029d6:	2309      	movs	r3, #9
 80029d8:	e012      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029da:	230a      	movs	r3, #10
 80029dc:	e010      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029de:	2308      	movs	r3, #8
 80029e0:	e00e      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029e2:	2307      	movs	r3, #7
 80029e4:	e00c      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029e6:	2306      	movs	r3, #6
 80029e8:	e00a      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029ea:	2305      	movs	r3, #5
 80029ec:	e008      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029ee:	2304      	movs	r3, #4
 80029f0:	e006      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029f2:	2303      	movs	r3, #3
 80029f4:	e004      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e002      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029fe:	2300      	movs	r3, #0
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	f002 0203 	and.w	r2, r2, #3
 8002a06:	0092      	lsls	r2, r2, #2
 8002a08:	4093      	lsls	r3, r2
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a10:	4935      	ldr	r1, [pc, #212]	; (8002ae8 <HAL_GPIO_Init+0x328>)
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	089b      	lsrs	r3, r3, #2
 8002a16:	3302      	adds	r3, #2
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a1e:	4b3d      	ldr	r3, [pc, #244]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a42:	4a34      	ldr	r2, [pc, #208]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a48:	4b32      	ldr	r3, [pc, #200]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a6c:	4a29      	ldr	r2, [pc, #164]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a72:	4b28      	ldr	r3, [pc, #160]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a96:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ac0:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	61fb      	str	r3, [r7, #28]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2b0f      	cmp	r3, #15
 8002ad0:	f67f ae84 	bls.w	80027dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	3724      	adds	r7, #36	; 0x24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40013800 	.word	0x40013800
 8002aec:	40020000 	.word	0x40020000
 8002af0:	40020400 	.word	0x40020400
 8002af4:	40020800 	.word	0x40020800
 8002af8:	40020c00 	.word	0x40020c00
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40021400 	.word	0x40021400
 8002b04:	40021800 	.word	0x40021800
 8002b08:	40021c00 	.word	0x40021c00
 8002b0c:	40022000 	.word	0x40022000
 8002b10:	40022400 	.word	0x40022400
 8002b14:	40013c00 	.word	0x40013c00

08002b18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	887b      	ldrh	r3, [r7, #2]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
 8002b34:	e001      	b.n	8002b3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]
 8002b54:	4613      	mov	r3, r2
 8002b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b58:	787b      	ldrb	r3, [r7, #1]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b5e:	887a      	ldrh	r2, [r7, #2]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b64:	e003      	b.n	8002b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b66:	887b      	ldrh	r3, [r7, #2]
 8002b68:	041a      	lsls	r2, r3, #16
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	619a      	str	r2, [r3, #24]
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b86:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	88fb      	ldrh	r3, [r7, #6]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d006      	beq.n	8002ba0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b92:	4a05      	ldr	r2, [pc, #20]	; (8002ba8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b94:	88fb      	ldrh	r3, [r7, #6]
 8002b96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fe f892 	bl	8000cc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40013c00 	.word	0x40013c00

08002bac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e12b      	b.n	8002e16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fd fe2c 	bl	8000830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2224      	movs	r2, #36	; 0x24
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0201 	bic.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c10:	f001 fa40 	bl	8004094 <HAL_RCC_GetPCLK1Freq>
 8002c14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4a81      	ldr	r2, [pc, #516]	; (8002e20 <HAL_I2C_Init+0x274>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d807      	bhi.n	8002c30 <HAL_I2C_Init+0x84>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4a80      	ldr	r2, [pc, #512]	; (8002e24 <HAL_I2C_Init+0x278>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	bf94      	ite	ls
 8002c28:	2301      	movls	r3, #1
 8002c2a:	2300      	movhi	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	e006      	b.n	8002c3e <HAL_I2C_Init+0x92>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4a7d      	ldr	r2, [pc, #500]	; (8002e28 <HAL_I2C_Init+0x27c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	bf94      	ite	ls
 8002c38:	2301      	movls	r3, #1
 8002c3a:	2300      	movhi	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e0e7      	b.n	8002e16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4a78      	ldr	r2, [pc, #480]	; (8002e2c <HAL_I2C_Init+0x280>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	0c9b      	lsrs	r3, r3, #18
 8002c50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4a6a      	ldr	r2, [pc, #424]	; (8002e20 <HAL_I2C_Init+0x274>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d802      	bhi.n	8002c80 <HAL_I2C_Init+0xd4>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	e009      	b.n	8002c94 <HAL_I2C_Init+0xe8>
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c86:	fb02 f303 	mul.w	r3, r2, r3
 8002c8a:	4a69      	ldr	r2, [pc, #420]	; (8002e30 <HAL_I2C_Init+0x284>)
 8002c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c90:	099b      	lsrs	r3, r3, #6
 8002c92:	3301      	adds	r3, #1
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ca6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	495c      	ldr	r1, [pc, #368]	; (8002e20 <HAL_I2C_Init+0x274>)
 8002cb0:	428b      	cmp	r3, r1
 8002cb2:	d819      	bhi.n	8002ce8 <HAL_I2C_Init+0x13c>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	1e59      	subs	r1, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cc2:	1c59      	adds	r1, r3, #1
 8002cc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cc8:	400b      	ands	r3, r1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_I2C_Init+0x138>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1e59      	subs	r1, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cdc:	3301      	adds	r3, #1
 8002cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce2:	e051      	b.n	8002d88 <HAL_I2C_Init+0x1dc>
 8002ce4:	2304      	movs	r3, #4
 8002ce6:	e04f      	b.n	8002d88 <HAL_I2C_Init+0x1dc>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d111      	bne.n	8002d14 <HAL_I2C_Init+0x168>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1e58      	subs	r0, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	440b      	add	r3, r1
 8002cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d02:	3301      	adds	r3, #1
 8002d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	bf0c      	ite	eq
 8002d0c:	2301      	moveq	r3, #1
 8002d0e:	2300      	movne	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	e012      	b.n	8002d3a <HAL_I2C_Init+0x18e>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	1e58      	subs	r0, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6859      	ldr	r1, [r3, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	0099      	lsls	r1, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_I2C_Init+0x196>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e022      	b.n	8002d88 <HAL_I2C_Init+0x1dc>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10e      	bne.n	8002d68 <HAL_I2C_Init+0x1bc>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1e58      	subs	r0, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6859      	ldr	r1, [r3, #4]
 8002d52:	460b      	mov	r3, r1
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	440b      	add	r3, r1
 8002d58:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d66:	e00f      	b.n	8002d88 <HAL_I2C_Init+0x1dc>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1e58      	subs	r0, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6859      	ldr	r1, [r3, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	0099      	lsls	r1, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d7e:	3301      	adds	r3, #1
 8002d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	6809      	ldr	r1, [r1, #0]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69da      	ldr	r2, [r3, #28]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002db6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6911      	ldr	r1, [r2, #16]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	68d2      	ldr	r2, [r2, #12]
 8002dc2:	4311      	orrs	r1, r2
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	000186a0 	.word	0x000186a0
 8002e24:	001e847f 	.word	0x001e847f
 8002e28:	003d08ff 	.word	0x003d08ff
 8002e2c:	431bde83 	.word	0x431bde83
 8002e30:	10624dd3 	.word	0x10624dd3

08002e34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	460b      	mov	r3, r1
 8002e42:	817b      	strh	r3, [r7, #10]
 8002e44:	4613      	mov	r3, r2
 8002e46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e48:	f7fe ff94 	bl	8001d74 <HAL_GetTick>
 8002e4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b20      	cmp	r3, #32
 8002e58:	f040 80e0 	bne.w	800301c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	2319      	movs	r3, #25
 8002e62:	2201      	movs	r2, #1
 8002e64:	4970      	ldr	r1, [pc, #448]	; (8003028 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 fa92 	bl	8003390 <I2C_WaitOnFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e72:	2302      	movs	r3, #2
 8002e74:	e0d3      	b.n	800301e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_I2C_Master_Transmit+0x50>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e0cc      	b.n	800301e <HAL_I2C_Master_Transmit+0x1ea>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d007      	beq.n	8002eaa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0201 	orr.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2221      	movs	r2, #33	; 0x21
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	893a      	ldrh	r2, [r7, #8]
 8002eda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4a50      	ldr	r2, [pc, #320]	; (800302c <HAL_I2C_Master_Transmit+0x1f8>)
 8002eea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002eec:	8979      	ldrh	r1, [r7, #10]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	6a3a      	ldr	r2, [r7, #32]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f9ca 	bl	800328c <I2C_MasterRequestWrite>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e08d      	b.n	800301e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f18:	e066      	b.n	8002fe8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	6a39      	ldr	r1, [r7, #32]
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 fb0c 	bl	800353c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00d      	beq.n	8002f46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d107      	bne.n	8002f42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e06b      	b.n	800301e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	781a      	ldrb	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	1c5a      	adds	r2, r3, #1
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d11b      	bne.n	8002fbc <HAL_I2C_Master_Transmit+0x188>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d017      	beq.n	8002fbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	781a      	ldrb	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	6a39      	ldr	r1, [r7, #32]
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 fafc 	bl	80035be <I2C_WaitOnBTFFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00d      	beq.n	8002fe8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d107      	bne.n	8002fe4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e01a      	b.n	800301e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d194      	bne.n	8002f1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	e000      	b.n	800301e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800301c:	2302      	movs	r3, #2
  }
}
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	00100002 	.word	0x00100002
 800302c:	ffff0000 	.word	0xffff0000

08003030 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08a      	sub	sp, #40	; 0x28
 8003034:	af02      	add	r7, sp, #8
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	460b      	mov	r3, r1
 800303e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003040:	f7fe fe98 	bl	8001d74 <HAL_GetTick>
 8003044:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b20      	cmp	r3, #32
 8003054:	f040 8111 	bne.w	800327a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	2319      	movs	r3, #25
 800305e:	2201      	movs	r2, #1
 8003060:	4988      	ldr	r1, [pc, #544]	; (8003284 <HAL_I2C_IsDeviceReady+0x254>)
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f994 	bl	8003390 <I2C_WaitOnFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800306e:	2302      	movs	r3, #2
 8003070:	e104      	b.n	800327c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_I2C_IsDeviceReady+0x50>
 800307c:	2302      	movs	r3, #2
 800307e:	e0fd      	b.n	800327c <HAL_I2C_IsDeviceReady+0x24c>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b01      	cmp	r3, #1
 8003094:	d007      	beq.n	80030a6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0201 	orr.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2224      	movs	r2, #36	; 0x24
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4a70      	ldr	r2, [pc, #448]	; (8003288 <HAL_I2C_IsDeviceReady+0x258>)
 80030c8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030d8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f952 	bl	8003390 <I2C_WaitOnFlagUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00d      	beq.n	800310e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003100:	d103      	bne.n	800310a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003108:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e0b6      	b.n	800327c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800310e:	897b      	ldrh	r3, [r7, #10]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800311c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800311e:	f7fe fe29 	bl	8001d74 <HAL_GetTick>
 8003122:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b02      	cmp	r3, #2
 8003130:	bf0c      	ite	eq
 8003132:	2301      	moveq	r3, #1
 8003134:	2300      	movne	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003148:	bf0c      	ite	eq
 800314a:	2301      	moveq	r3, #1
 800314c:	2300      	movne	r3, #0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003152:	e025      	b.n	80031a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003154:	f7fe fe0e 	bl	8001d74 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d302      	bcc.n	800316a <HAL_I2C_IsDeviceReady+0x13a>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d103      	bne.n	8003172 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	22a0      	movs	r2, #160	; 0xa0
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b02      	cmp	r3, #2
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003196:	bf0c      	ite	eq
 8003198:	2301      	moveq	r3, #1
 800319a:	2300      	movne	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2ba0      	cmp	r3, #160	; 0xa0
 80031aa:	d005      	beq.n	80031b8 <HAL_I2C_IsDeviceReady+0x188>
 80031ac:	7dfb      	ldrb	r3, [r7, #23]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d102      	bne.n	80031b8 <HAL_I2C_IsDeviceReady+0x188>
 80031b2:	7dbb      	ldrb	r3, [r7, #22]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0cd      	beq.n	8003154 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d129      	bne.n	8003222 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031dc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	2319      	movs	r3, #25
 80031fa:	2201      	movs	r2, #1
 80031fc:	4921      	ldr	r1, [pc, #132]	; (8003284 <HAL_I2C_IsDeviceReady+0x254>)
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f8c6 	bl	8003390 <I2C_WaitOnFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e036      	b.n	800327c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	e02c      	b.n	800327c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003230:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800323a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	2319      	movs	r3, #25
 8003242:	2201      	movs	r2, #1
 8003244:	490f      	ldr	r1, [pc, #60]	; (8003284 <HAL_I2C_IsDeviceReady+0x254>)
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f8a2 	bl	8003390 <I2C_WaitOnFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e012      	b.n	800327c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	3301      	adds	r3, #1
 800325a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	429a      	cmp	r2, r3
 8003262:	f4ff af32 	bcc.w	80030ca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2220      	movs	r2, #32
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800327a:	2302      	movs	r3, #2
  }
}
 800327c:	4618      	mov	r0, r3
 800327e:	3720      	adds	r7, #32
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	00100002 	.word	0x00100002
 8003288:	ffff0000 	.word	0xffff0000

0800328c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af02      	add	r7, sp, #8
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	460b      	mov	r3, r1
 800329a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d006      	beq.n	80032b6 <I2C_MasterRequestWrite+0x2a>
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d003      	beq.n	80032b6 <I2C_MasterRequestWrite+0x2a>
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032b4:	d108      	bne.n	80032c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	e00b      	b.n	80032e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	2b12      	cmp	r3, #18
 80032ce:	d107      	bne.n	80032e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 f84f 	bl	8003390 <I2C_WaitOnFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00d      	beq.n	8003314 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003306:	d103      	bne.n	8003310 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800330e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e035      	b.n	8003380 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800331c:	d108      	bne.n	8003330 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800331e:	897b      	ldrh	r3, [r7, #10]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	461a      	mov	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800332c:	611a      	str	r2, [r3, #16]
 800332e:	e01b      	b.n	8003368 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003330:	897b      	ldrh	r3, [r7, #10]
 8003332:	11db      	asrs	r3, r3, #7
 8003334:	b2db      	uxtb	r3, r3
 8003336:	f003 0306 	and.w	r3, r3, #6
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f063 030f 	orn	r3, r3, #15
 8003340:	b2da      	uxtb	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	490e      	ldr	r1, [pc, #56]	; (8003388 <I2C_MasterRequestWrite+0xfc>)
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f875 	bl	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e010      	b.n	8003380 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800335e:	897b      	ldrh	r3, [r7, #10]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4907      	ldr	r1, [pc, #28]	; (800338c <I2C_MasterRequestWrite+0x100>)
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f865 	bl	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	00010008 	.word	0x00010008
 800338c:	00010002 	.word	0x00010002

08003390 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	4613      	mov	r3, r2
 800339e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a0:	e025      	b.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d021      	beq.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033aa:	f7fe fce3 	bl	8001d74 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d302      	bcc.n	80033c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d116      	bne.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f043 0220 	orr.w	r2, r3, #32
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e023      	b.n	8003436 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	0c1b      	lsrs	r3, r3, #16
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d10d      	bne.n	8003414 <I2C_WaitOnFlagUntilTimeout+0x84>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	43da      	mvns	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4013      	ands	r3, r2
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	bf0c      	ite	eq
 800340a:	2301      	moveq	r3, #1
 800340c:	2300      	movne	r3, #0
 800340e:	b2db      	uxtb	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	e00c      	b.n	800342e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	43da      	mvns	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	4013      	ands	r3, r2
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	bf0c      	ite	eq
 8003426:	2301      	moveq	r3, #1
 8003428:	2300      	movne	r3, #0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	429a      	cmp	r2, r3
 8003432:	d0b6      	beq.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
 800344a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800344c:	e051      	b.n	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345c:	d123      	bne.n	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003476:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f043 0204 	orr.w	r2, r3, #4
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e046      	b.n	8003534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d021      	beq.n	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ae:	f7fe fc61 	bl	8001d74 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d116      	bne.n	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f043 0220 	orr.w	r2, r3, #32
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e020      	b.n	8003534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	0c1b      	lsrs	r3, r3, #16
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d10c      	bne.n	8003516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	43da      	mvns	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4013      	ands	r3, r2
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	bf14      	ite	ne
 800350e:	2301      	movne	r3, #1
 8003510:	2300      	moveq	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	e00b      	b.n	800352e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	43da      	mvns	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	4013      	ands	r3, r2
 8003522:	b29b      	uxth	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	bf14      	ite	ne
 8003528:	2301      	movne	r3, #1
 800352a:	2300      	moveq	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d18d      	bne.n	800344e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003548:	e02d      	b.n	80035a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f878 	bl	8003640 <I2C_IsAcknowledgeFailed>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e02d      	b.n	80035b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d021      	beq.n	80035a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003562:	f7fe fc07 	bl	8001d74 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	429a      	cmp	r2, r3
 8003570:	d302      	bcc.n	8003578 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d116      	bne.n	80035a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f043 0220 	orr.w	r2, r3, #32
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e007      	b.n	80035b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	2b80      	cmp	r3, #128	; 0x80
 80035b2:	d1ca      	bne.n	800354a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035ca:	e02d      	b.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 f837 	bl	8003640 <I2C_IsAcknowledgeFailed>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e02d      	b.n	8003638 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e2:	d021      	beq.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e4:	f7fe fbc6 	bl	8001d74 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d302      	bcc.n	80035fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d116      	bne.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	f043 0220 	orr.w	r2, r3, #32
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e007      	b.n	8003638 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b04      	cmp	r3, #4
 8003634:	d1ca      	bne.n	80035cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003656:	d11b      	bne.n	8003690 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003660:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	f043 0204 	orr.w	r2, r3, #4
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d129      	bne.n	8003708 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2224      	movs	r2, #36	; 0x24
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0210 	bic.w	r2, r2, #16
 80036da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	e000      	b.n	800370a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003708:	2302      	movs	r3, #2
  }
}
 800370a:	4618      	mov	r0, r3
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003716:	b480      	push	{r7}
 8003718:	b085      	sub	sp, #20
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003720:	2300      	movs	r3, #0
 8003722:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b20      	cmp	r3, #32
 800372e:	d12a      	bne.n	8003786 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2224      	movs	r2, #36	; 0x24
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0201 	bic.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003750:	89fb      	ldrh	r3, [r7, #14]
 8003752:	f023 030f 	bic.w	r3, r3, #15
 8003756:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	b29a      	uxth	r2, r3
 800375c:	89fb      	ldrh	r3, [r7, #14]
 800375e:	4313      	orrs	r3, r2
 8003760:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	89fa      	ldrh	r2, [r7, #14]
 8003768:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0201 	orr.w	r2, r2, #1
 8003778:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2220      	movs	r2, #32
 800377e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	e000      	b.n	8003788 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003786:	2302      	movs	r3, #2
  }
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	603b      	str	r3, [r7, #0]
 80037a2:	4b20      	ldr	r3, [pc, #128]	; (8003824 <HAL_PWREx_EnableOverDrive+0x90>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	4a1f      	ldr	r2, [pc, #124]	; (8003824 <HAL_PWREx_EnableOverDrive+0x90>)
 80037a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ac:	6413      	str	r3, [r2, #64]	; 0x40
 80037ae:	4b1d      	ldr	r3, [pc, #116]	; (8003824 <HAL_PWREx_EnableOverDrive+0x90>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80037ba:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <HAL_PWREx_EnableOverDrive+0x94>)
 80037bc:	2201      	movs	r2, #1
 80037be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037c0:	f7fe fad8 	bl	8001d74 <HAL_GetTick>
 80037c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037c6:	e009      	b.n	80037dc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037c8:	f7fe fad4 	bl	8001d74 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037d6:	d901      	bls.n	80037dc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e01f      	b.n	800381c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037dc:	4b13      	ldr	r3, [pc, #76]	; (800382c <HAL_PWREx_EnableOverDrive+0x98>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e8:	d1ee      	bne.n	80037c8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80037ea:	4b11      	ldr	r3, [pc, #68]	; (8003830 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037f0:	f7fe fac0 	bl	8001d74 <HAL_GetTick>
 80037f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037f6:	e009      	b.n	800380c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037f8:	f7fe fabc 	bl	8001d74 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003806:	d901      	bls.n	800380c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e007      	b.n	800381c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800380c:	4b07      	ldr	r3, [pc, #28]	; (800382c <HAL_PWREx_EnableOverDrive+0x98>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003818:	d1ee      	bne.n	80037f8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40023800 	.word	0x40023800
 8003828:	420e0040 	.word	0x420e0040
 800382c:	40007000 	.word	0x40007000
 8003830:	420e0044 	.word	0x420e0044

08003834 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e267      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d075      	beq.n	800393e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003852:	4b88      	ldr	r3, [pc, #544]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 030c 	and.w	r3, r3, #12
 800385a:	2b04      	cmp	r3, #4
 800385c:	d00c      	beq.n	8003878 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800385e:	4b85      	ldr	r3, [pc, #532]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003866:	2b08      	cmp	r3, #8
 8003868:	d112      	bne.n	8003890 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800386a:	4b82      	ldr	r3, [pc, #520]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003872:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003876:	d10b      	bne.n	8003890 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003878:	4b7e      	ldr	r3, [pc, #504]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d05b      	beq.n	800393c <HAL_RCC_OscConfig+0x108>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d157      	bne.n	800393c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e242      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003898:	d106      	bne.n	80038a8 <HAL_RCC_OscConfig+0x74>
 800389a:	4b76      	ldr	r3, [pc, #472]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a75      	ldr	r2, [pc, #468]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	e01d      	b.n	80038e4 <HAL_RCC_OscConfig+0xb0>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038b0:	d10c      	bne.n	80038cc <HAL_RCC_OscConfig+0x98>
 80038b2:	4b70      	ldr	r3, [pc, #448]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a6f      	ldr	r2, [pc, #444]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	4b6d      	ldr	r3, [pc, #436]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a6c      	ldr	r2, [pc, #432]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	e00b      	b.n	80038e4 <HAL_RCC_OscConfig+0xb0>
 80038cc:	4b69      	ldr	r3, [pc, #420]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a68      	ldr	r2, [pc, #416]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	4b66      	ldr	r3, [pc, #408]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a65      	ldr	r2, [pc, #404]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d013      	beq.n	8003914 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7fe fa42 	bl	8001d74 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038f4:	f7fe fa3e 	bl	8001d74 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	; 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e207      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b5b      	ldr	r3, [pc, #364]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0xc0>
 8003912:	e014      	b.n	800393e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7fe fa2e 	bl	8001d74 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800391c:	f7fe fa2a 	bl	8001d74 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	; 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e1f3      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392e:	4b51      	ldr	r3, [pc, #324]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0xe8>
 800393a:	e000      	b.n	800393e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d063      	beq.n	8003a12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800394a:	4b4a      	ldr	r3, [pc, #296]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00b      	beq.n	800396e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003956:	4b47      	ldr	r3, [pc, #284]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800395e:	2b08      	cmp	r3, #8
 8003960:	d11c      	bne.n	800399c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003962:	4b44      	ldr	r3, [pc, #272]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d116      	bne.n	800399c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396e:	4b41      	ldr	r3, [pc, #260]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <HAL_RCC_OscConfig+0x152>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d001      	beq.n	8003986 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e1c7      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003986:	4b3b      	ldr	r3, [pc, #236]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	4937      	ldr	r1, [pc, #220]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003996:	4313      	orrs	r3, r2
 8003998:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399a:	e03a      	b.n	8003a12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d020      	beq.n	80039e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a4:	4b34      	ldr	r3, [pc, #208]	; (8003a78 <HAL_RCC_OscConfig+0x244>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039aa:	f7fe f9e3 	bl	8001d74 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039b2:	f7fe f9df 	bl	8001d74 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e1a8      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c4:	4b2b      	ldr	r3, [pc, #172]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d0:	4b28      	ldr	r3, [pc, #160]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4925      	ldr	r1, [pc, #148]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	600b      	str	r3, [r1, #0]
 80039e4:	e015      	b.n	8003a12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039e6:	4b24      	ldr	r3, [pc, #144]	; (8003a78 <HAL_RCC_OscConfig+0x244>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ec:	f7fe f9c2 	bl	8001d74 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039f4:	f7fe f9be 	bl	8001d74 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e187      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a06:	4b1b      	ldr	r3, [pc, #108]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d036      	beq.n	8003a8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d016      	beq.n	8003a54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a26:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <HAL_RCC_OscConfig+0x248>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2c:	f7fe f9a2 	bl	8001d74 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a34:	f7fe f99e 	bl	8001d74 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e167      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a46:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x200>
 8003a52:	e01b      	b.n	8003a8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a54:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <HAL_RCC_OscConfig+0x248>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5a:	f7fe f98b 	bl	8001d74 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a60:	e00e      	b.n	8003a80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a62:	f7fe f987 	bl	8001d74 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d907      	bls.n	8003a80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e150      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
 8003a74:	40023800 	.word	0x40023800
 8003a78:	42470000 	.word	0x42470000
 8003a7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a80:	4b88      	ldr	r3, [pc, #544]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1ea      	bne.n	8003a62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8097 	beq.w	8003bc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a9e:	4b81      	ldr	r3, [pc, #516]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10f      	bne.n	8003aca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	4b7d      	ldr	r3, [pc, #500]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	4a7c      	ldr	r2, [pc, #496]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aba:	4b7a      	ldr	r3, [pc, #488]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aca:	4b77      	ldr	r3, [pc, #476]	; (8003ca8 <HAL_RCC_OscConfig+0x474>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d118      	bne.n	8003b08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ad6:	4b74      	ldr	r3, [pc, #464]	; (8003ca8 <HAL_RCC_OscConfig+0x474>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a73      	ldr	r2, [pc, #460]	; (8003ca8 <HAL_RCC_OscConfig+0x474>)
 8003adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae2:	f7fe f947 	bl	8001d74 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aea:	f7fe f943 	bl	8001d74 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e10c      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afc:	4b6a      	ldr	r3, [pc, #424]	; (8003ca8 <HAL_RCC_OscConfig+0x474>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f0      	beq.n	8003aea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d106      	bne.n	8003b1e <HAL_RCC_OscConfig+0x2ea>
 8003b10:	4b64      	ldr	r3, [pc, #400]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	4a63      	ldr	r2, [pc, #396]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1c:	e01c      	b.n	8003b58 <HAL_RCC_OscConfig+0x324>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	2b05      	cmp	r3, #5
 8003b24:	d10c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x30c>
 8003b26:	4b5f      	ldr	r3, [pc, #380]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2a:	4a5e      	ldr	r2, [pc, #376]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b2c:	f043 0304 	orr.w	r3, r3, #4
 8003b30:	6713      	str	r3, [r2, #112]	; 0x70
 8003b32:	4b5c      	ldr	r3, [pc, #368]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b36:	4a5b      	ldr	r2, [pc, #364]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b3e:	e00b      	b.n	8003b58 <HAL_RCC_OscConfig+0x324>
 8003b40:	4b58      	ldr	r3, [pc, #352]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b44:	4a57      	ldr	r2, [pc, #348]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b46:	f023 0301 	bic.w	r3, r3, #1
 8003b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b4c:	4b55      	ldr	r3, [pc, #340]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	4a54      	ldr	r2, [pc, #336]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b52:	f023 0304 	bic.w	r3, r3, #4
 8003b56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d015      	beq.n	8003b8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b60:	f7fe f908 	bl	8001d74 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b68:	f7fe f904 	bl	8001d74 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e0cb      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7e:	4b49      	ldr	r3, [pc, #292]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0ee      	beq.n	8003b68 <HAL_RCC_OscConfig+0x334>
 8003b8a:	e014      	b.n	8003bb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8c:	f7fe f8f2 	bl	8001d74 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b92:	e00a      	b.n	8003baa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b94:	f7fe f8ee 	bl	8001d74 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e0b5      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003baa:	4b3e      	ldr	r3, [pc, #248]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1ee      	bne.n	8003b94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bb6:	7dfb      	ldrb	r3, [r7, #23]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d105      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bbc:	4b39      	ldr	r3, [pc, #228]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	4a38      	ldr	r2, [pc, #224]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 80a1 	beq.w	8003d14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bd2:	4b34      	ldr	r3, [pc, #208]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d05c      	beq.n	8003c98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d141      	bne.n	8003c6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be6:	4b31      	ldr	r3, [pc, #196]	; (8003cac <HAL_RCC_OscConfig+0x478>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bec:	f7fe f8c2 	bl	8001d74 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf4:	f7fe f8be 	bl	8001d74 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e087      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c06:	4b27      	ldr	r3, [pc, #156]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69da      	ldr	r2, [r3, #28]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	019b      	lsls	r3, r3, #6
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c28:	085b      	lsrs	r3, r3, #1
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c34:	061b      	lsls	r3, r3, #24
 8003c36:	491b      	ldr	r1, [pc, #108]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c3c:	4b1b      	ldr	r3, [pc, #108]	; (8003cac <HAL_RCC_OscConfig+0x478>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c42:	f7fe f897 	bl	8001d74 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c4a:	f7fe f893 	bl	8001d74 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e05c      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5c:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0x416>
 8003c68:	e054      	b.n	8003d14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6a:	4b10      	ldr	r3, [pc, #64]	; (8003cac <HAL_RCC_OscConfig+0x478>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c70:	f7fe f880 	bl	8001d74 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c78:	f7fe f87c 	bl	8001d74 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e045      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8a:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0x444>
 8003c96:	e03d      	b.n	8003d14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d107      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e038      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	40007000 	.word	0x40007000
 8003cac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cb0:	4b1b      	ldr	r3, [pc, #108]	; (8003d20 <HAL_RCC_OscConfig+0x4ec>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d028      	beq.n	8003d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d121      	bne.n	8003d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d11a      	bne.n	8003d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ce6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d111      	bne.n	8003d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf6:	085b      	lsrs	r3, r3, #1
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d107      	bne.n	8003d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d001      	beq.n	8003d14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40023800 	.word	0x40023800

08003d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0cc      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d38:	4b68      	ldr	r3, [pc, #416]	; (8003edc <HAL_RCC_ClockConfig+0x1b8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d90c      	bls.n	8003d60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d46:	4b65      	ldr	r3, [pc, #404]	; (8003edc <HAL_RCC_ClockConfig+0x1b8>)
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4e:	4b63      	ldr	r3, [pc, #396]	; (8003edc <HAL_RCC_ClockConfig+0x1b8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e0b8      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d020      	beq.n	8003dae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d78:	4b59      	ldr	r3, [pc, #356]	; (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4a58      	ldr	r2, [pc, #352]	; (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d90:	4b53      	ldr	r3, [pc, #332]	; (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	4a52      	ldr	r2, [pc, #328]	; (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d9c:	4b50      	ldr	r3, [pc, #320]	; (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	494d      	ldr	r1, [pc, #308]	; (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d044      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d107      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	4b47      	ldr	r3, [pc, #284]	; (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d119      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e07f      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d003      	beq.n	8003de2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dde:	2b03      	cmp	r3, #3
 8003de0:	d107      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de2:	4b3f      	ldr	r3, [pc, #252]	; (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e06f      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df2:	4b3b      	ldr	r3, [pc, #236]	; (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e067      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e02:	4b37      	ldr	r3, [pc, #220]	; (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f023 0203 	bic.w	r2, r3, #3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	4934      	ldr	r1, [pc, #208]	; (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e14:	f7fd ffae 	bl	8001d74 <HAL_GetTick>
 8003e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e1c:	f7fd ffaa 	bl	8001d74 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e04f      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e32:	4b2b      	ldr	r3, [pc, #172]	; (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 020c 	and.w	r2, r3, #12
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d1eb      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e44:	4b25      	ldr	r3, [pc, #148]	; (8003edc <HAL_RCC_ClockConfig+0x1b8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d20c      	bcs.n	8003e6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e52:	4b22      	ldr	r3, [pc, #136]	; (8003edc <HAL_RCC_ClockConfig+0x1b8>)
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5a:	4b20      	ldr	r3, [pc, #128]	; (8003edc <HAL_RCC_ClockConfig+0x1b8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d001      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e032      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d008      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e78:	4b19      	ldr	r3, [pc, #100]	; (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4916      	ldr	r1, [pc, #88]	; (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d009      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e96:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	490e      	ldr	r1, [pc, #56]	; (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eaa:	f000 f821 	bl	8003ef0 <HAL_RCC_GetSysClockFreq>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	490a      	ldr	r1, [pc, #40]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8003ebc:	5ccb      	ldrb	r3, [r1, r3]
 8003ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec2:	4a09      	ldr	r2, [pc, #36]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ec6:	4b09      	ldr	r3, [pc, #36]	; (8003eec <HAL_RCC_ClockConfig+0x1c8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fd ff0e 	bl	8001cec <HAL_InitTick>

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40023c00 	.word	0x40023c00
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	08007910 	.word	0x08007910
 8003ee8:	20000010 	.word	0x20000010
 8003eec:	20000014 	.word	0x20000014

08003ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ef4:	b090      	sub	sp, #64	; 0x40
 8003ef6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	637b      	str	r3, [r7, #52]	; 0x34
 8003efc:	2300      	movs	r3, #0
 8003efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f00:	2300      	movs	r3, #0
 8003f02:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f08:	4b59      	ldr	r3, [pc, #356]	; (8004070 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 030c 	and.w	r3, r3, #12
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d00d      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0x40>
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	f200 80a1 	bhi.w	800405c <HAL_RCC_GetSysClockFreq+0x16c>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <HAL_RCC_GetSysClockFreq+0x34>
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d003      	beq.n	8003f2a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f22:	e09b      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f24:	4b53      	ldr	r3, [pc, #332]	; (8004074 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f26:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003f28:	e09b      	b.n	8004062 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f2a:	4b53      	ldr	r3, [pc, #332]	; (8004078 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f2e:	e098      	b.n	8004062 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f30:	4b4f      	ldr	r3, [pc, #316]	; (8004070 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f38:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f3a:	4b4d      	ldr	r3, [pc, #308]	; (8004070 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d028      	beq.n	8003f98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f46:	4b4a      	ldr	r3, [pc, #296]	; (8004070 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	099b      	lsrs	r3, r3, #6
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	623b      	str	r3, [r7, #32]
 8003f50:	627a      	str	r2, [r7, #36]	; 0x24
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f58:	2100      	movs	r1, #0
 8003f5a:	4b47      	ldr	r3, [pc, #284]	; (8004078 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f5c:	fb03 f201 	mul.w	r2, r3, r1
 8003f60:	2300      	movs	r3, #0
 8003f62:	fb00 f303 	mul.w	r3, r0, r3
 8003f66:	4413      	add	r3, r2
 8003f68:	4a43      	ldr	r2, [pc, #268]	; (8004078 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f6a:	fba0 1202 	umull	r1, r2, r0, r2
 8003f6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f70:	460a      	mov	r2, r1
 8003f72:	62ba      	str	r2, [r7, #40]	; 0x28
 8003f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f76:	4413      	add	r3, r2
 8003f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	61bb      	str	r3, [r7, #24]
 8003f80:	61fa      	str	r2, [r7, #28]
 8003f82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003f8a:	f7fc f989 	bl	80002a0 <__aeabi_uldivmod>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4613      	mov	r3, r2
 8003f94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f96:	e053      	b.n	8004040 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f98:	4b35      	ldr	r3, [pc, #212]	; (8004070 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	099b      	lsrs	r3, r3, #6
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	617a      	str	r2, [r7, #20]
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003faa:	f04f 0b00 	mov.w	fp, #0
 8003fae:	4652      	mov	r2, sl
 8003fb0:	465b      	mov	r3, fp
 8003fb2:	f04f 0000 	mov.w	r0, #0
 8003fb6:	f04f 0100 	mov.w	r1, #0
 8003fba:	0159      	lsls	r1, r3, #5
 8003fbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fc0:	0150      	lsls	r0, r2, #5
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	ebb2 080a 	subs.w	r8, r2, sl
 8003fca:	eb63 090b 	sbc.w	r9, r3, fp
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	f04f 0300 	mov.w	r3, #0
 8003fd6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003fda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003fde:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003fe2:	ebb2 0408 	subs.w	r4, r2, r8
 8003fe6:	eb63 0509 	sbc.w	r5, r3, r9
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	00eb      	lsls	r3, r5, #3
 8003ff4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ff8:	00e2      	lsls	r2, r4, #3
 8003ffa:	4614      	mov	r4, r2
 8003ffc:	461d      	mov	r5, r3
 8003ffe:	eb14 030a 	adds.w	r3, r4, sl
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	eb45 030b 	adc.w	r3, r5, fp
 8004008:	607b      	str	r3, [r7, #4]
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004016:	4629      	mov	r1, r5
 8004018:	028b      	lsls	r3, r1, #10
 800401a:	4621      	mov	r1, r4
 800401c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004020:	4621      	mov	r1, r4
 8004022:	028a      	lsls	r2, r1, #10
 8004024:	4610      	mov	r0, r2
 8004026:	4619      	mov	r1, r3
 8004028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800402a:	2200      	movs	r2, #0
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	60fa      	str	r2, [r7, #12]
 8004030:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004034:	f7fc f934 	bl	80002a0 <__aeabi_uldivmod>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4613      	mov	r3, r2
 800403e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004040:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <HAL_RCC_GetSysClockFreq+0x180>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	0c1b      	lsrs	r3, r3, #16
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	3301      	adds	r3, #1
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004050:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	fbb2 f3f3 	udiv	r3, r2, r3
 8004058:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800405a:	e002      	b.n	8004062 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <HAL_RCC_GetSysClockFreq+0x184>)
 800405e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004064:	4618      	mov	r0, r3
 8004066:	3740      	adds	r7, #64	; 0x40
 8004068:	46bd      	mov	sp, r7
 800406a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800406e:	bf00      	nop
 8004070:	40023800 	.word	0x40023800
 8004074:	00f42400 	.word	0x00f42400
 8004078:	017d7840 	.word	0x017d7840

0800407c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004080:	4b03      	ldr	r3, [pc, #12]	; (8004090 <HAL_RCC_GetHCLKFreq+0x14>)
 8004082:	681b      	ldr	r3, [r3, #0]
}
 8004084:	4618      	mov	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	20000010 	.word	0x20000010

08004094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004098:	f7ff fff0 	bl	800407c <HAL_RCC_GetHCLKFreq>
 800409c:	4602      	mov	r2, r0
 800409e:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	0a9b      	lsrs	r3, r3, #10
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	4903      	ldr	r1, [pc, #12]	; (80040b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040aa:	5ccb      	ldrb	r3, [r1, r3]
 80040ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40023800 	.word	0x40023800
 80040b8:	08007920 	.word	0x08007920

080040bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040c0:	f7ff ffdc 	bl	800407c <HAL_RCC_GetHCLKFreq>
 80040c4:	4602      	mov	r2, r0
 80040c6:	4b05      	ldr	r3, [pc, #20]	; (80040dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	0b5b      	lsrs	r3, r3, #13
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	4903      	ldr	r1, [pc, #12]	; (80040e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040d2:	5ccb      	ldrb	r3, [r1, r3]
 80040d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d8:	4618      	mov	r0, r3
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40023800 	.word	0x40023800
 80040e0:	08007920 	.word	0x08007920

080040e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10b      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004108:	2b00      	cmp	r3, #0
 800410a:	d105      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004114:	2b00      	cmp	r3, #0
 8004116:	d075      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004118:	4b91      	ldr	r3, [pc, #580]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800411e:	f7fd fe29 	bl	8001d74 <HAL_GetTick>
 8004122:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004124:	e008      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004126:	f7fd fe25 	bl	8001d74 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e189      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004138:	4b8a      	ldr	r3, [pc, #552]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1f0      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d009      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	019a      	lsls	r2, r3, #6
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	071b      	lsls	r3, r3, #28
 800415c:	4981      	ldr	r1, [pc, #516]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01f      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004170:	4b7c      	ldr	r3, [pc, #496]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004176:	0f1b      	lsrs	r3, r3, #28
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	019a      	lsls	r2, r3, #6
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	061b      	lsls	r3, r3, #24
 800418a:	431a      	orrs	r2, r3
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	071b      	lsls	r3, r3, #28
 8004190:	4974      	ldr	r1, [pc, #464]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004198:	4b72      	ldr	r3, [pc, #456]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800419a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800419e:	f023 021f 	bic.w	r2, r3, #31
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	496e      	ldr	r1, [pc, #440]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00d      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	019a      	lsls	r2, r3, #6
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	061b      	lsls	r3, r3, #24
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	071b      	lsls	r3, r3, #28
 80041d0:	4964      	ldr	r1, [pc, #400]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041d8:	4b61      	ldr	r3, [pc, #388]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80041da:	2201      	movs	r2, #1
 80041dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041de:	f7fd fdc9 	bl	8001d74 <HAL_GetTick>
 80041e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041e4:	e008      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041e6:	f7fd fdc5 	bl	8001d74 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e129      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041f8:	4b5a      	ldr	r3, [pc, #360]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b00      	cmp	r3, #0
 800420e:	d105      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004218:	2b00      	cmp	r3, #0
 800421a:	d079      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800421c:	4b52      	ldr	r3, [pc, #328]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004222:	f7fd fda7 	bl	8001d74 <HAL_GetTick>
 8004226:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004228:	e008      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800422a:	f7fd fda3 	bl	8001d74 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e107      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800423c:	4b49      	ldr	r3, [pc, #292]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004248:	d0ef      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b00      	cmp	r3, #0
 8004254:	d020      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004256:	4b43      	ldr	r3, [pc, #268]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425c:	0f1b      	lsrs	r3, r3, #28
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	019a      	lsls	r2, r3, #6
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	061b      	lsls	r3, r3, #24
 8004270:	431a      	orrs	r2, r3
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	071b      	lsls	r3, r3, #28
 8004276:	493b      	ldr	r1, [pc, #236]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800427e:	4b39      	ldr	r3, [pc, #228]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004284:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	3b01      	subs	r3, #1
 800428e:	021b      	lsls	r3, r3, #8
 8004290:	4934      	ldr	r1, [pc, #208]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01e      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042a4:	4b2f      	ldr	r3, [pc, #188]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042aa:	0e1b      	lsrs	r3, r3, #24
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	019a      	lsls	r2, r3, #6
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	061b      	lsls	r3, r3, #24
 80042bc:	431a      	orrs	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	071b      	lsls	r3, r3, #28
 80042c4:	4927      	ldr	r1, [pc, #156]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042cc:	4b25      	ldr	r3, [pc, #148]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	4922      	ldr	r1, [pc, #136]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042e2:	4b21      	ldr	r3, [pc, #132]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80042e4:	2201      	movs	r2, #1
 80042e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042e8:	f7fd fd44 	bl	8001d74 <HAL_GetTick>
 80042ec:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80042f0:	f7fd fd40 	bl	8001d74 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e0a4      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004302:	4b18      	ldr	r3, [pc, #96]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800430a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800430e:	d1ef      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 808b 	beq.w	8004434 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	4b10      	ldr	r3, [pc, #64]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	4a0f      	ldr	r2, [pc, #60]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800432c:	6413      	str	r3, [r2, #64]	; 0x40
 800432e:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800433a:	4b0c      	ldr	r3, [pc, #48]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a0b      	ldr	r2, [pc, #44]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004344:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004346:	f7fd fd15 	bl	8001d74 <HAL_GetTick>
 800434a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800434c:	e010      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800434e:	f7fd fd11 	bl	8001d74 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d909      	bls.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e075      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004360:	42470068 	.word	0x42470068
 8004364:	40023800 	.word	0x40023800
 8004368:	42470070 	.word	0x42470070
 800436c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004370:	4b38      	ldr	r3, [pc, #224]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0e8      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800437c:	4b36      	ldr	r3, [pc, #216]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004384:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d02f      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x308>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	429a      	cmp	r2, r3
 8004398:	d028      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800439a:	4b2f      	ldr	r3, [pc, #188]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800439c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043a4:	4b2d      	ldr	r3, [pc, #180]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80043a6:	2201      	movs	r2, #1
 80043a8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043aa:	4b2c      	ldr	r3, [pc, #176]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043b0:	4a29      	ldr	r2, [pc, #164]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043b6:	4b28      	ldr	r3, [pc, #160]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d114      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80043c2:	f7fd fcd7 	bl	8001d74 <HAL_GetTick>
 80043c6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c8:	e00a      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ca:	f7fd fcd3 	bl	8001d74 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d8:	4293      	cmp	r3, r2
 80043da:	d901      	bls.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e035      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e0:	4b1d      	ldr	r3, [pc, #116]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80043e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0ee      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043f8:	d10d      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80043fa:	4b17      	ldr	r3, [pc, #92]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004406:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800440a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800440e:	4912      	ldr	r1, [pc, #72]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004410:	4313      	orrs	r3, r2
 8004412:	608b      	str	r3, [r1, #8]
 8004414:	e005      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004416:	4b10      	ldr	r3, [pc, #64]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	4a0f      	ldr	r2, [pc, #60]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800441c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004420:	6093      	str	r3, [r2, #8]
 8004422:	4b0d      	ldr	r3, [pc, #52]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004424:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800442e:	490a      	ldr	r1, [pc, #40]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004430:	4313      	orrs	r3, r2
 8004432:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0310 	and.w	r3, r3, #16
 800443c:	2b00      	cmp	r3, #0
 800443e:	d004      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004446:	4b06      	ldr	r3, [pc, #24]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004448:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40007000 	.word	0x40007000
 8004458:	40023800 	.word	0x40023800
 800445c:	42470e40 	.word	0x42470e40
 8004460:	424711e0 	.word	0x424711e0

08004464 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e066      	b.n	8004548 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	7f5b      	ldrb	r3, [r3, #29]
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d105      	bne.n	8004490 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fd f94e 	bl	800172c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	22ca      	movs	r2, #202	; 0xca
 800449c:	625a      	str	r2, [r3, #36]	; 0x24
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2253      	movs	r2, #83	; 0x53
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 fa45 	bl	8004936 <RTC_EnterInitMode>
 80044ac:	4603      	mov	r3, r0
 80044ae:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d12c      	bne.n	8004510 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80044c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044c8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6899      	ldr	r1, [r3, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	68d2      	ldr	r2, [r2, #12]
 80044f0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6919      	ldr	r1, [r3, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	041a      	lsls	r2, r3, #16
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fa4c 	bl	80049a4 <RTC_ExitInitMode>
 800450c:	4603      	mov	r3, r0
 800450e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004510:	7bfb      	ldrb	r3, [r7, #15]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d113      	bne.n	800453e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004524:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699a      	ldr	r2, [r3, #24]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	22ff      	movs	r2, #255	; 0xff
 8004544:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004546:	7bfb      	ldrb	r3, [r7, #15]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004550:	b590      	push	{r4, r7, lr}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	7f1b      	ldrb	r3, [r3, #28]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_RTC_SetTime+0x1c>
 8004568:	2302      	movs	r3, #2
 800456a:	e087      	b.n	800467c <HAL_RTC_SetTime+0x12c>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2202      	movs	r2, #2
 8004576:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d126      	bne.n	80045cc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004588:	2b00      	cmp	r3, #0
 800458a:	d102      	bne.n	8004592 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2200      	movs	r2, #0
 8004590:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fa29 	bl	80049ee <RTC_ByteToBcd2>
 800459c:	4603      	mov	r3, r0
 800459e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	785b      	ldrb	r3, [r3, #1]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fa22 	bl	80049ee <RTC_ByteToBcd2>
 80045aa:	4603      	mov	r3, r0
 80045ac:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80045ae:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	789b      	ldrb	r3, [r3, #2]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 fa1a 	bl	80049ee <RTC_ByteToBcd2>
 80045ba:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045bc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	78db      	ldrb	r3, [r3, #3]
 80045c4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80045c6:	4313      	orrs	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	e018      	b.n	80045fe <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d102      	bne.n	80045e0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2200      	movs	r2, #0
 80045de:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	785b      	ldrb	r3, [r3, #1]
 80045ea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80045ec:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80045f2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	78db      	ldrb	r3, [r3, #3]
 80045f8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	22ca      	movs	r2, #202	; 0xca
 8004604:	625a      	str	r2, [r3, #36]	; 0x24
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2253      	movs	r2, #83	; 0x53
 800460c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f991 	bl	8004936 <RTC_EnterInitMode>
 8004614:	4603      	mov	r3, r0
 8004616:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004618:	7cfb      	ldrb	r3, [r7, #19]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d120      	bne.n	8004660 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004628:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800462c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800463c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6899      	ldr	r1, [r3, #8]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	431a      	orrs	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f9a4 	bl	80049a4 <RTC_ExitInitMode>
 800465c:	4603      	mov	r3, r0
 800465e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004660:	7cfb      	ldrb	r3, [r7, #19]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	22ff      	movs	r2, #255	; 0xff
 8004672:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	771a      	strb	r2, [r3, #28]

  return status;
 800467a:	7cfb      	ldrb	r3, [r7, #19]
}
 800467c:	4618      	mov	r0, r3
 800467e:	371c      	adds	r7, #28
 8004680:	46bd      	mov	sp, r7
 8004682:	bd90      	pop	{r4, r7, pc}

08004684 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80046b6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80046ba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	0c1b      	lsrs	r3, r3, #16
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	0a1b      	lsrs	r3, r3, #8
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	0d9b      	lsrs	r3, r3, #22
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d11a      	bne.n	8004736 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f000 f98f 	bl	8004a28 <RTC_Bcd2ToByte>
 800470a:	4603      	mov	r3, r0
 800470c:	461a      	mov	r2, r3
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	785b      	ldrb	r3, [r3, #1]
 8004716:	4618      	mov	r0, r3
 8004718:	f000 f986 	bl	8004a28 <RTC_Bcd2ToByte>
 800471c:	4603      	mov	r3, r0
 800471e:	461a      	mov	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	789b      	ldrb	r3, [r3, #2]
 8004728:	4618      	mov	r0, r3
 800472a:	f000 f97d 	bl	8004a28 <RTC_Bcd2ToByte>
 800472e:	4603      	mov	r3, r0
 8004730:	461a      	mov	r2, r3
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004740:	b590      	push	{r4, r7, lr}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	7f1b      	ldrb	r3, [r3, #28]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_RTC_SetDate+0x1c>
 8004758:	2302      	movs	r3, #2
 800475a:	e071      	b.n	8004840 <HAL_RTC_SetDate+0x100>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2202      	movs	r2, #2
 8004766:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10e      	bne.n	800478c <HAL_RTC_SetDate+0x4c>
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	785b      	ldrb	r3, [r3, #1]
 8004772:	f003 0310 	and.w	r3, r3, #16
 8004776:	2b00      	cmp	r3, #0
 8004778:	d008      	beq.n	800478c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	785b      	ldrb	r3, [r3, #1]
 800477e:	f023 0310 	bic.w	r3, r3, #16
 8004782:	b2db      	uxtb	r3, r3
 8004784:	330a      	adds	r3, #10
 8004786:	b2da      	uxtb	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d11c      	bne.n	80047cc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	78db      	ldrb	r3, [r3, #3]
 8004796:	4618      	mov	r0, r3
 8004798:	f000 f929 	bl	80049ee <RTC_ByteToBcd2>
 800479c:	4603      	mov	r3, r0
 800479e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	785b      	ldrb	r3, [r3, #1]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 f922 	bl	80049ee <RTC_ByteToBcd2>
 80047aa:	4603      	mov	r3, r0
 80047ac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80047ae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	789b      	ldrb	r3, [r3, #2]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 f91a 	bl	80049ee <RTC_ByteToBcd2>
 80047ba:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80047bc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	e00e      	b.n	80047ea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	78db      	ldrb	r3, [r3, #3]
 80047d0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	785b      	ldrb	r3, [r3, #1]
 80047d6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80047d8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80047de:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	22ca      	movs	r2, #202	; 0xca
 80047f0:	625a      	str	r2, [r3, #36]	; 0x24
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2253      	movs	r2, #83	; 0x53
 80047f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f89b 	bl	8004936 <RTC_EnterInitMode>
 8004800:	4603      	mov	r3, r0
 8004802:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004804:	7cfb      	ldrb	r3, [r7, #19]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10c      	bne.n	8004824 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004814:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004818:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 f8c2 	bl	80049a4 <RTC_ExitInitMode>
 8004820:	4603      	mov	r3, r0
 8004822:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004824:	7cfb      	ldrb	r3, [r7, #19]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d102      	bne.n	8004830 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	22ff      	movs	r2, #255	; 0xff
 8004836:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	771a      	strb	r2, [r3, #28]

  return status;
 800483e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004840:	4618      	mov	r0, r3
 8004842:	371c      	adds	r7, #28
 8004844:	46bd      	mov	sp, r7
 8004846:	bd90      	pop	{r4, r7, pc}

08004848 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004862:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004866:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	0c1b      	lsrs	r3, r3, #16
 800486c:	b2da      	uxtb	r2, r3
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	0a1b      	lsrs	r3, r3, #8
 8004876:	b2db      	uxtb	r3, r3
 8004878:	f003 031f 	and.w	r3, r3, #31
 800487c:	b2da      	uxtb	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800488a:	b2da      	uxtb	r2, r3
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	0b5b      	lsrs	r3, r3, #13
 8004894:	b2db      	uxtb	r3, r3
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	b2da      	uxtb	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d11a      	bne.n	80048dc <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	78db      	ldrb	r3, [r3, #3]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 f8bc 	bl	8004a28 <RTC_Bcd2ToByte>
 80048b0:	4603      	mov	r3, r0
 80048b2:	461a      	mov	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	785b      	ldrb	r3, [r3, #1]
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 f8b3 	bl	8004a28 <RTC_Bcd2ToByte>
 80048c2:	4603      	mov	r3, r0
 80048c4:	461a      	mov	r2, r3
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	789b      	ldrb	r3, [r3, #2]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 f8aa 	bl	8004a28 <RTC_Bcd2ToByte>
 80048d4:	4603      	mov	r3, r0
 80048d6:	461a      	mov	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004900:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004902:	f7fd fa37 	bl	8001d74 <HAL_GetTick>
 8004906:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004908:	e009      	b.n	800491e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800490a:	f7fd fa33 	bl	8001d74 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004918:	d901      	bls.n	800491e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e007      	b.n	800492e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f003 0320 	and.w	r3, r3, #32
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0ee      	beq.n	800490a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b084      	sub	sp, #16
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800493e:	2300      	movs	r3, #0
 8004940:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004950:	2b00      	cmp	r3, #0
 8004952:	d122      	bne.n	800499a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004962:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004964:	f7fd fa06 	bl	8001d74 <HAL_GetTick>
 8004968:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800496a:	e00c      	b.n	8004986 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800496c:	f7fd fa02 	bl	8001d74 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800497a:	d904      	bls.n	8004986 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2204      	movs	r2, #4
 8004980:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004990:	2b00      	cmp	r3, #0
 8004992:	d102      	bne.n	800499a <RTC_EnterInitMode+0x64>
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d1e8      	bne.n	800496c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800499a:	7bfb      	ldrb	r3, [r7, #15]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049be:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 0320 	and.w	r3, r3, #32
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff ff89 	bl	80048e6 <HAL_RTC_WaitForSynchro>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d004      	beq.n	80049e4 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2204      	movs	r2, #4
 80049de:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b085      	sub	sp, #20
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	4603      	mov	r3, r0
 80049f6:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80049fc:	e005      	b.n	8004a0a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	3301      	adds	r3, #1
 8004a02:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004a04:	79fb      	ldrb	r3, [r7, #7]
 8004a06:	3b0a      	subs	r3, #10
 8004a08:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	2b09      	cmp	r3, #9
 8004a0e:	d8f6      	bhi.n	80049fe <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	79fb      	ldrb	r3, [r7, #7]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	b2db      	uxtb	r3, r3
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	091b      	lsrs	r3, r3, #4
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	0092      	lsls	r2, r2, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	4413      	add	r3, r2
 8004a52:	b2db      	uxtb	r3, r3
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e041      	b.n	8004af6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fc ffec 	bl	8001a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	f000 fa96 	bl	8004fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d001      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e04e      	b.n	8004bb6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a23      	ldr	r2, [pc, #140]	; (8004bc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d022      	beq.n	8004b80 <HAL_TIM_Base_Start_IT+0x80>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b42:	d01d      	beq.n	8004b80 <HAL_TIM_Base_Start_IT+0x80>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a1f      	ldr	r2, [pc, #124]	; (8004bc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d018      	beq.n	8004b80 <HAL_TIM_Base_Start_IT+0x80>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a1e      	ldr	r2, [pc, #120]	; (8004bcc <HAL_TIM_Base_Start_IT+0xcc>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d013      	beq.n	8004b80 <HAL_TIM_Base_Start_IT+0x80>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a1c      	ldr	r2, [pc, #112]	; (8004bd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00e      	beq.n	8004b80 <HAL_TIM_Base_Start_IT+0x80>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a1b      	ldr	r2, [pc, #108]	; (8004bd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d009      	beq.n	8004b80 <HAL_TIM_Base_Start_IT+0x80>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a19      	ldr	r2, [pc, #100]	; (8004bd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d004      	beq.n	8004b80 <HAL_TIM_Base_Start_IT+0x80>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a18      	ldr	r2, [pc, #96]	; (8004bdc <HAL_TIM_Base_Start_IT+0xdc>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d111      	bne.n	8004ba4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b06      	cmp	r3, #6
 8004b90:	d010      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0201 	orr.w	r2, r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba2:	e007      	b.n	8004bb4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40010000 	.word	0x40010000
 8004bc8:	40000400 	.word	0x40000400
 8004bcc:	40000800 	.word	0x40000800
 8004bd0:	40000c00 	.word	0x40000c00
 8004bd4:	40010400 	.word	0x40010400
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	40001800 	.word	0x40001800

08004be0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d122      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d11b      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0202 	mvn.w	r2, #2
 8004c0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f9b5 	bl	8004f92 <HAL_TIM_IC_CaptureCallback>
 8004c28:	e005      	b.n	8004c36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f9a7 	bl	8004f7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f9b8 	bl	8004fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	2b04      	cmp	r3, #4
 8004c48:	d122      	bne.n	8004c90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d11b      	bne.n	8004c90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f06f 0204 	mvn.w	r2, #4
 8004c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2202      	movs	r2, #2
 8004c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f98b 	bl	8004f92 <HAL_TIM_IC_CaptureCallback>
 8004c7c:	e005      	b.n	8004c8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f97d 	bl	8004f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f98e 	bl	8004fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d122      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d11b      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f06f 0208 	mvn.w	r2, #8
 8004cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2204      	movs	r2, #4
 8004cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f961 	bl	8004f92 <HAL_TIM_IC_CaptureCallback>
 8004cd0:	e005      	b.n	8004cde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f953 	bl	8004f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f964 	bl	8004fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f003 0310 	and.w	r3, r3, #16
 8004cee:	2b10      	cmp	r3, #16
 8004cf0:	d122      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b10      	cmp	r3, #16
 8004cfe:	d11b      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0210 	mvn.w	r2, #16
 8004d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f937 	bl	8004f92 <HAL_TIM_IC_CaptureCallback>
 8004d24:	e005      	b.n	8004d32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f929 	bl	8004f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f93a 	bl	8004fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d10e      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d107      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0201 	mvn.w	r2, #1
 8004d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fc f828 	bl	8000db4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6e:	2b80      	cmp	r3, #128	; 0x80
 8004d70:	d10e      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7c:	2b80      	cmp	r3, #128	; 0x80
 8004d7e:	d107      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fae0 	bl	8005350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9a:	2b40      	cmp	r3, #64	; 0x40
 8004d9c:	d10e      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da8:	2b40      	cmp	r3, #64	; 0x40
 8004daa:	d107      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f8ff 	bl	8004fba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d10e      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b20      	cmp	r3, #32
 8004dd6:	d107      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0220 	mvn.w	r2, #32
 8004de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 faaa 	bl	800533c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004de8:	bf00      	nop
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_TIM_ConfigClockSource+0x1c>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e0b4      	b.n	8004f76 <HAL_TIM_ConfigClockSource+0x186>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e44:	d03e      	beq.n	8004ec4 <HAL_TIM_ConfigClockSource+0xd4>
 8004e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e4a:	f200 8087 	bhi.w	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e52:	f000 8086 	beq.w	8004f62 <HAL_TIM_ConfigClockSource+0x172>
 8004e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5a:	d87f      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e5c:	2b70      	cmp	r3, #112	; 0x70
 8004e5e:	d01a      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0xa6>
 8004e60:	2b70      	cmp	r3, #112	; 0x70
 8004e62:	d87b      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e64:	2b60      	cmp	r3, #96	; 0x60
 8004e66:	d050      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x11a>
 8004e68:	2b60      	cmp	r3, #96	; 0x60
 8004e6a:	d877      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e6c:	2b50      	cmp	r3, #80	; 0x50
 8004e6e:	d03c      	beq.n	8004eea <HAL_TIM_ConfigClockSource+0xfa>
 8004e70:	2b50      	cmp	r3, #80	; 0x50
 8004e72:	d873      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e74:	2b40      	cmp	r3, #64	; 0x40
 8004e76:	d058      	beq.n	8004f2a <HAL_TIM_ConfigClockSource+0x13a>
 8004e78:	2b40      	cmp	r3, #64	; 0x40
 8004e7a:	d86f      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e7c:	2b30      	cmp	r3, #48	; 0x30
 8004e7e:	d064      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x15a>
 8004e80:	2b30      	cmp	r3, #48	; 0x30
 8004e82:	d86b      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d060      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x15a>
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	d867      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d05c      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x15a>
 8004e90:	2b10      	cmp	r3, #16
 8004e92:	d05a      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x15a>
 8004e94:	e062      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6899      	ldr	r1, [r3, #8]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f000 f9ad 	bl	8005204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004eb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	609a      	str	r2, [r3, #8]
      break;
 8004ec2:	e04f      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6818      	ldr	r0, [r3, #0]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	6899      	ldr	r1, [r3, #8]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f000 f996 	bl	8005204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ee6:	609a      	str	r2, [r3, #8]
      break;
 8004ee8:	e03c      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6859      	ldr	r1, [r3, #4]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f000 f90a 	bl	8005110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2150      	movs	r1, #80	; 0x50
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 f963 	bl	80051ce <TIM_ITRx_SetConfig>
      break;
 8004f08:	e02c      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6818      	ldr	r0, [r3, #0]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	6859      	ldr	r1, [r3, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	461a      	mov	r2, r3
 8004f18:	f000 f929 	bl	800516e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2160      	movs	r1, #96	; 0x60
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 f953 	bl	80051ce <TIM_ITRx_SetConfig>
      break;
 8004f28:	e01c      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	6859      	ldr	r1, [r3, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	461a      	mov	r2, r3
 8004f38:	f000 f8ea 	bl	8005110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2140      	movs	r1, #64	; 0x40
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 f943 	bl	80051ce <TIM_ITRx_SetConfig>
      break;
 8004f48:	e00c      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4619      	mov	r1, r3
 8004f54:	4610      	mov	r0, r2
 8004f56:	f000 f93a 	bl	80051ce <TIM_ITRx_SetConfig>
      break;
 8004f5a:	e003      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f60:	e000      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
	...

08004fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a40      	ldr	r2, [pc, #256]	; (80050e4 <TIM_Base_SetConfig+0x114>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d013      	beq.n	8005010 <TIM_Base_SetConfig+0x40>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fee:	d00f      	beq.n	8005010 <TIM_Base_SetConfig+0x40>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a3d      	ldr	r2, [pc, #244]	; (80050e8 <TIM_Base_SetConfig+0x118>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00b      	beq.n	8005010 <TIM_Base_SetConfig+0x40>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a3c      	ldr	r2, [pc, #240]	; (80050ec <TIM_Base_SetConfig+0x11c>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d007      	beq.n	8005010 <TIM_Base_SetConfig+0x40>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a3b      	ldr	r2, [pc, #236]	; (80050f0 <TIM_Base_SetConfig+0x120>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d003      	beq.n	8005010 <TIM_Base_SetConfig+0x40>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a3a      	ldr	r2, [pc, #232]	; (80050f4 <TIM_Base_SetConfig+0x124>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d108      	bne.n	8005022 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a2f      	ldr	r2, [pc, #188]	; (80050e4 <TIM_Base_SetConfig+0x114>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d02b      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005030:	d027      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a2c      	ldr	r2, [pc, #176]	; (80050e8 <TIM_Base_SetConfig+0x118>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d023      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a2b      	ldr	r2, [pc, #172]	; (80050ec <TIM_Base_SetConfig+0x11c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d01f      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a2a      	ldr	r2, [pc, #168]	; (80050f0 <TIM_Base_SetConfig+0x120>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d01b      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a29      	ldr	r2, [pc, #164]	; (80050f4 <TIM_Base_SetConfig+0x124>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d017      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a28      	ldr	r2, [pc, #160]	; (80050f8 <TIM_Base_SetConfig+0x128>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d013      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a27      	ldr	r2, [pc, #156]	; (80050fc <TIM_Base_SetConfig+0x12c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00f      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a26      	ldr	r2, [pc, #152]	; (8005100 <TIM_Base_SetConfig+0x130>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d00b      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a25      	ldr	r2, [pc, #148]	; (8005104 <TIM_Base_SetConfig+0x134>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d007      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a24      	ldr	r2, [pc, #144]	; (8005108 <TIM_Base_SetConfig+0x138>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d003      	beq.n	8005082 <TIM_Base_SetConfig+0xb2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a23      	ldr	r2, [pc, #140]	; (800510c <TIM_Base_SetConfig+0x13c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d108      	bne.n	8005094 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a0a      	ldr	r2, [pc, #40]	; (80050e4 <TIM_Base_SetConfig+0x114>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d003      	beq.n	80050c8 <TIM_Base_SetConfig+0xf8>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a0c      	ldr	r2, [pc, #48]	; (80050f4 <TIM_Base_SetConfig+0x124>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d103      	bne.n	80050d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	691a      	ldr	r2, [r3, #16]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	615a      	str	r2, [r3, #20]
}
 80050d6:	bf00      	nop
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	40010000 	.word	0x40010000
 80050e8:	40000400 	.word	0x40000400
 80050ec:	40000800 	.word	0x40000800
 80050f0:	40000c00 	.word	0x40000c00
 80050f4:	40010400 	.word	0x40010400
 80050f8:	40014000 	.word	0x40014000
 80050fc:	40014400 	.word	0x40014400
 8005100:	40014800 	.word	0x40014800
 8005104:	40001800 	.word	0x40001800
 8005108:	40001c00 	.word	0x40001c00
 800510c:	40002000 	.word	0x40002000

08005110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	f023 0201 	bic.w	r2, r3, #1
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800513a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f023 030a 	bic.w	r3, r3, #10
 800514c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4313      	orrs	r3, r2
 8005154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	bf00      	nop
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800516e:	b480      	push	{r7}
 8005170:	b087      	sub	sp, #28
 8005172:	af00      	add	r7, sp, #0
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	f023 0210 	bic.w	r2, r3, #16
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005198:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	031b      	lsls	r3, r3, #12
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	621a      	str	r2, [r3, #32]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b085      	sub	sp, #20
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f043 0307 	orr.w	r3, r3, #7
 80051f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	609a      	str	r2, [r3, #8]
}
 80051f8:	bf00      	nop
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800521e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	021a      	lsls	r2, r3, #8
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	431a      	orrs	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	4313      	orrs	r3, r2
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	609a      	str	r2, [r3, #8]
}
 8005238:	bf00      	nop
 800523a:	371c      	adds	r7, #28
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005258:	2302      	movs	r3, #2
 800525a:	e05a      	b.n	8005312 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005282:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a21      	ldr	r2, [pc, #132]	; (8005320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d022      	beq.n	80052e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a8:	d01d      	beq.n	80052e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a1d      	ldr	r2, [pc, #116]	; (8005324 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d018      	beq.n	80052e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a1b      	ldr	r2, [pc, #108]	; (8005328 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d013      	beq.n	80052e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a1a      	ldr	r2, [pc, #104]	; (800532c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d00e      	beq.n	80052e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a18      	ldr	r2, [pc, #96]	; (8005330 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d009      	beq.n	80052e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a17      	ldr	r2, [pc, #92]	; (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d004      	beq.n	80052e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a15      	ldr	r2, [pc, #84]	; (8005338 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d10c      	bne.n	8005300 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40010000 	.word	0x40010000
 8005324:	40000400 	.word	0x40000400
 8005328:	40000800 	.word	0x40000800
 800532c:	40000c00 	.word	0x40000c00
 8005330:	40010400 	.word	0x40010400
 8005334:	40014000 	.word	0x40014000
 8005338:	40001800 	.word	0x40001800

0800533c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e03f      	b.n	80053f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d106      	bne.n	8005390 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7fc fbe6 	bl	8001b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2224      	movs	r2, #36	; 0x24
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 fd7b 	bl	8005ea4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695a      	ldr	r2, [r3, #20]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b08a      	sub	sp, #40	; 0x28
 8005402:	af02      	add	r7, sp, #8
 8005404:	60f8      	str	r0, [r7, #12]
 8005406:	60b9      	str	r1, [r7, #8]
 8005408:	603b      	str	r3, [r7, #0]
 800540a:	4613      	mov	r3, r2
 800540c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b20      	cmp	r3, #32
 800541c:	d17c      	bne.n	8005518 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <HAL_UART_Transmit+0x2c>
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e075      	b.n	800551a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_UART_Transmit+0x3e>
 8005438:	2302      	movs	r3, #2
 800543a:	e06e      	b.n	800551a <HAL_UART_Transmit+0x11c>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2221      	movs	r2, #33	; 0x21
 800544e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005452:	f7fc fc8f 	bl	8001d74 <HAL_GetTick>
 8005456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	88fa      	ldrh	r2, [r7, #6]
 800545c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	88fa      	ldrh	r2, [r7, #6]
 8005462:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546c:	d108      	bne.n	8005480 <HAL_UART_Transmit+0x82>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d104      	bne.n	8005480 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005476:	2300      	movs	r3, #0
 8005478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	61bb      	str	r3, [r7, #24]
 800547e:	e003      	b.n	8005488 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005484:	2300      	movs	r3, #0
 8005486:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005490:	e02a      	b.n	80054e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2200      	movs	r2, #0
 800549a:	2180      	movs	r1, #128	; 0x80
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 faf9 	bl	8005a94 <UART_WaitOnFlagUntilTimeout>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e036      	b.n	800551a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10b      	bne.n	80054ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	3302      	adds	r3, #2
 80054c6:	61bb      	str	r3, [r7, #24]
 80054c8:	e007      	b.n	80054da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	781a      	ldrb	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	3301      	adds	r3, #1
 80054d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1cf      	bne.n	8005492 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2200      	movs	r2, #0
 80054fa:	2140      	movs	r1, #64	; 0x40
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 fac9 	bl	8005a94 <UART_WaitOnFlagUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e006      	b.n	800551a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	e000      	b.n	800551a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005518:	2302      	movs	r3, #2
  }
}
 800551a:	4618      	mov	r0, r3
 800551c:	3720      	adds	r7, #32
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b0ba      	sub	sp, #232	; 0xe8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800554a:	2300      	movs	r3, #0
 800554c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005550:	2300      	movs	r3, #0
 8005552:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555a:	f003 030f 	and.w	r3, r3, #15
 800555e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005562:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10f      	bne.n	800558a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800556a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800556e:	f003 0320 	and.w	r3, r3, #32
 8005572:	2b00      	cmp	r3, #0
 8005574:	d009      	beq.n	800558a <HAL_UART_IRQHandler+0x66>
 8005576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fbd3 	bl	8005d2e <UART_Receive_IT>
      return;
 8005588:	e256      	b.n	8005a38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800558a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 80de 	beq.w	8005750 <HAL_UART_IRQHandler+0x22c>
 8005594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d106      	bne.n	80055ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 80d1 	beq.w	8005750 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00b      	beq.n	80055d2 <HAL_UART_IRQHandler+0xae>
 80055ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d005      	beq.n	80055d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f043 0201 	orr.w	r2, r3, #1
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d6:	f003 0304 	and.w	r3, r3, #4
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00b      	beq.n	80055f6 <HAL_UART_IRQHandler+0xd2>
 80055de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f043 0202 	orr.w	r2, r3, #2
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00b      	beq.n	800561a <HAL_UART_IRQHandler+0xf6>
 8005602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	d005      	beq.n	800561a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f043 0204 	orr.w	r2, r3, #4
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800561a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d011      	beq.n	800564a <HAL_UART_IRQHandler+0x126>
 8005626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b00      	cmp	r3, #0
 8005630:	d105      	bne.n	800563e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d005      	beq.n	800564a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	f043 0208 	orr.w	r2, r3, #8
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 81ed 	beq.w	8005a2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005658:	f003 0320 	and.w	r3, r3, #32
 800565c:	2b00      	cmp	r3, #0
 800565e:	d008      	beq.n	8005672 <HAL_UART_IRQHandler+0x14e>
 8005660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 fb5e 	bl	8005d2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567c:	2b40      	cmp	r3, #64	; 0x40
 800567e:	bf0c      	ite	eq
 8005680:	2301      	moveq	r3, #1
 8005682:	2300      	movne	r3, #0
 8005684:	b2db      	uxtb	r3, r3
 8005686:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	f003 0308 	and.w	r3, r3, #8
 8005692:	2b00      	cmp	r3, #0
 8005694:	d103      	bne.n	800569e <HAL_UART_IRQHandler+0x17a>
 8005696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800569a:	2b00      	cmp	r3, #0
 800569c:	d04f      	beq.n	800573e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fa66 	bl	8005b70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ae:	2b40      	cmp	r3, #64	; 0x40
 80056b0:	d141      	bne.n	8005736 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3314      	adds	r3, #20
 80056b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3314      	adds	r3, #20
 80056da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056ee:	e841 2300 	strex	r3, r2, [r1]
 80056f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1d9      	bne.n	80056b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	2b00      	cmp	r3, #0
 8005704:	d013      	beq.n	800572e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	4a7d      	ldr	r2, [pc, #500]	; (8005900 <HAL_UART_IRQHandler+0x3dc>)
 800570c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	4618      	mov	r0, r3
 8005714:	f7fd f831 	bl	800277a <HAL_DMA_Abort_IT>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d016      	beq.n	800574c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005728:	4610      	mov	r0, r2
 800572a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800572c:	e00e      	b.n	800574c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f99a 	bl	8005a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005734:	e00a      	b.n	800574c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f996 	bl	8005a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800573c:	e006      	b.n	800574c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f992 	bl	8005a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800574a:	e170      	b.n	8005a2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800574c:	bf00      	nop
    return;
 800574e:	e16e      	b.n	8005a2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005754:	2b01      	cmp	r3, #1
 8005756:	f040 814a 	bne.w	80059ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800575a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575e:	f003 0310 	and.w	r3, r3, #16
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 8143 	beq.w	80059ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800576c:	f003 0310 	and.w	r3, r3, #16
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 813c 	beq.w	80059ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005776:	2300      	movs	r3, #0
 8005778:	60bb      	str	r3, [r7, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	60bb      	str	r3, [r7, #8]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	60bb      	str	r3, [r7, #8]
 800578a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005796:	2b40      	cmp	r3, #64	; 0x40
 8005798:	f040 80b4 	bne.w	8005904 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 8140 	beq.w	8005a32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057ba:	429a      	cmp	r2, r3
 80057bc:	f080 8139 	bcs.w	8005a32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057d2:	f000 8088 	beq.w	80058e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	330c      	adds	r3, #12
 80057dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057e4:	e853 3f00 	ldrex	r3, [r3]
 80057e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	330c      	adds	r3, #12
 80057fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005802:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005806:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800580e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005812:	e841 2300 	strex	r3, r2, [r1]
 8005816:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800581a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1d9      	bne.n	80057d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3314      	adds	r3, #20
 8005828:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005832:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005834:	f023 0301 	bic.w	r3, r3, #1
 8005838:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3314      	adds	r3, #20
 8005842:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005846:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800584a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800584e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e1      	bne.n	8005822 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3314      	adds	r3, #20
 8005864:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005868:	e853 3f00 	ldrex	r3, [r3]
 800586c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800586e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005874:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3314      	adds	r3, #20
 800587e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005882:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005884:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005888:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e3      	bne.n	800585e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2220      	movs	r2, #32
 800589a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	330c      	adds	r3, #12
 80058aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ae:	e853 3f00 	ldrex	r3, [r3]
 80058b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058b6:	f023 0310 	bic.w	r3, r3, #16
 80058ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	330c      	adds	r3, #12
 80058c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80058ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058d0:	e841 2300 	strex	r3, r2, [r1]
 80058d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e3      	bne.n	80058a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7fc feda 	bl	800269a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f8c0 	bl	8005a7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058fc:	e099      	b.n	8005a32 <HAL_UART_IRQHandler+0x50e>
 80058fe:	bf00      	nop
 8005900:	08005c37 	.word	0x08005c37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800590c:	b29b      	uxth	r3, r3
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 808b 	beq.w	8005a36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 8086 	beq.w	8005a36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	330c      	adds	r3, #12
 8005930:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800593a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005940:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	330c      	adds	r3, #12
 800594a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800594e:	647a      	str	r2, [r7, #68]	; 0x44
 8005950:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005954:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800595c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e3      	bne.n	800592a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3314      	adds	r3, #20
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	623b      	str	r3, [r7, #32]
   return(result);
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	f023 0301 	bic.w	r3, r3, #1
 8005978:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3314      	adds	r3, #20
 8005982:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005986:	633a      	str	r2, [r7, #48]	; 0x30
 8005988:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800598c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e3      	bne.n	8005962 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2220      	movs	r2, #32
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	330c      	adds	r3, #12
 80059ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0310 	bic.w	r3, r3, #16
 80059be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	330c      	adds	r3, #12
 80059c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059cc:	61fa      	str	r2, [r7, #28]
 80059ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d0:	69b9      	ldr	r1, [r7, #24]
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	e841 2300 	strex	r3, r2, [r1]
 80059d8:	617b      	str	r3, [r7, #20]
   return(result);
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1e3      	bne.n	80059a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059e4:	4619      	mov	r1, r3
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f848 	bl	8005a7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059ec:	e023      	b.n	8005a36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d009      	beq.n	8005a0e <HAL_UART_IRQHandler+0x4ea>
 80059fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f929 	bl	8005c5e <UART_Transmit_IT>
    return;
 8005a0c:	e014      	b.n	8005a38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00e      	beq.n	8005a38 <HAL_UART_IRQHandler+0x514>
 8005a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d008      	beq.n	8005a38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f969 	bl	8005cfe <UART_EndTransmit_IT>
    return;
 8005a2c:	e004      	b.n	8005a38 <HAL_UART_IRQHandler+0x514>
    return;
 8005a2e:	bf00      	nop
 8005a30:	e002      	b.n	8005a38 <HAL_UART_IRQHandler+0x514>
      return;
 8005a32:	bf00      	nop
 8005a34:	e000      	b.n	8005a38 <HAL_UART_IRQHandler+0x514>
      return;
 8005a36:	bf00      	nop
  }
}
 8005a38:	37e8      	adds	r7, #232	; 0xe8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop

08005a40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b090      	sub	sp, #64	; 0x40
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	603b      	str	r3, [r7, #0]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa4:	e050      	b.n	8005b48 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aac:	d04c      	beq.n	8005b48 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d007      	beq.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ab4:	f7fc f95e 	bl	8001d74 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d241      	bcs.n	8005b48 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	330c      	adds	r3, #12
 8005aca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ace:	e853 3f00 	ldrex	r3, [r3]
 8005ad2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	330c      	adds	r3, #12
 8005ae2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ae4:	637a      	str	r2, [r7, #52]	; 0x34
 8005ae6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005aec:	e841 2300 	strex	r3, r2, [r1]
 8005af0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1e5      	bne.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3314      	adds	r3, #20
 8005afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	e853 3f00 	ldrex	r3, [r3]
 8005b06:	613b      	str	r3, [r7, #16]
   return(result);
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f023 0301 	bic.w	r3, r3, #1
 8005b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3314      	adds	r3, #20
 8005b16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b18:	623a      	str	r2, [r7, #32]
 8005b1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1c:	69f9      	ldr	r1, [r7, #28]
 8005b1e:	6a3a      	ldr	r2, [r7, #32]
 8005b20:	e841 2300 	strex	r3, r2, [r1]
 8005b24:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1e5      	bne.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e00f      	b.n	8005b68 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	4013      	ands	r3, r2
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	bf0c      	ite	eq
 8005b58:	2301      	moveq	r3, #1
 8005b5a:	2300      	movne	r3, #0
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	461a      	mov	r2, r3
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d09f      	beq.n	8005aa6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3740      	adds	r7, #64	; 0x40
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b095      	sub	sp, #84	; 0x54
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	330c      	adds	r3, #12
 8005b7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b82:	e853 3f00 	ldrex	r3, [r3]
 8005b86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	330c      	adds	r3, #12
 8005b96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b98:	643a      	str	r2, [r7, #64]	; 0x40
 8005b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ba0:	e841 2300 	strex	r3, r2, [r1]
 8005ba4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e5      	bne.n	8005b78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3314      	adds	r3, #20
 8005bb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	e853 3f00 	ldrex	r3, [r3]
 8005bba:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	f023 0301 	bic.w	r3, r3, #1
 8005bc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3314      	adds	r3, #20
 8005bca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bd4:	e841 2300 	strex	r3, r2, [r1]
 8005bd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e5      	bne.n	8005bac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d119      	bne.n	8005c1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	330c      	adds	r3, #12
 8005bee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	e853 3f00 	ldrex	r3, [r3]
 8005bf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f023 0310 	bic.w	r3, r3, #16
 8005bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	330c      	adds	r3, #12
 8005c06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c08:	61ba      	str	r2, [r7, #24]
 8005c0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0c:	6979      	ldr	r1, [r7, #20]
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	e841 2300 	strex	r3, r2, [r1]
 8005c14:	613b      	str	r3, [r7, #16]
   return(result);
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1e5      	bne.n	8005be8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c2a:	bf00      	nop
 8005c2c:	3754      	adds	r7, #84	; 0x54
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b084      	sub	sp, #16
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f7ff ff09 	bl	8005a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c56:	bf00      	nop
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b085      	sub	sp, #20
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b21      	cmp	r3, #33	; 0x21
 8005c70:	d13e      	bne.n	8005cf0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c7a:	d114      	bne.n	8005ca6 <UART_Transmit_IT+0x48>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d110      	bne.n	8005ca6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	1c9a      	adds	r2, r3, #2
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	621a      	str	r2, [r3, #32]
 8005ca4:	e008      	b.n	8005cb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	1c59      	adds	r1, r3, #1
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6211      	str	r1, [r2, #32]
 8005cb0:	781a      	ldrb	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10f      	bne.n	8005cec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	e000      	b.n	8005cf2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005cf0:	2302      	movs	r3, #2
  }
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b082      	sub	sp, #8
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7ff fe8e 	bl	8005a40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b08c      	sub	sp, #48	; 0x30
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b22      	cmp	r3, #34	; 0x22
 8005d40:	f040 80ab 	bne.w	8005e9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d4c:	d117      	bne.n	8005d7e <UART_Receive_IT+0x50>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d113      	bne.n	8005d7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d76:	1c9a      	adds	r2, r3, #2
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	629a      	str	r2, [r3, #40]	; 0x28
 8005d7c:	e026      	b.n	8005dcc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d90:	d007      	beq.n	8005da2 <UART_Receive_IT+0x74>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10a      	bne.n	8005db0 <UART_Receive_IT+0x82>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d106      	bne.n	8005db0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dac:	701a      	strb	r2, [r3, #0]
 8005dae:	e008      	b.n	8005dc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	4619      	mov	r1, r3
 8005dda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d15a      	bne.n	8005e96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0220 	bic.w	r2, r2, #32
 8005dee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68da      	ldr	r2, [r3, #12]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	695a      	ldr	r2, [r3, #20]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0201 	bic.w	r2, r2, #1
 8005e0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2220      	movs	r2, #32
 8005e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d135      	bne.n	8005e8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	330c      	adds	r3, #12
 8005e2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	e853 3f00 	ldrex	r3, [r3]
 8005e34:	613b      	str	r3, [r7, #16]
   return(result);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f023 0310 	bic.w	r3, r3, #16
 8005e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	330c      	adds	r3, #12
 8005e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e46:	623a      	str	r2, [r7, #32]
 8005e48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4a:	69f9      	ldr	r1, [r7, #28]
 8005e4c:	6a3a      	ldr	r2, [r7, #32]
 8005e4e:	e841 2300 	strex	r3, r2, [r1]
 8005e52:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1e5      	bne.n	8005e26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	2b10      	cmp	r3, #16
 8005e66:	d10a      	bne.n	8005e7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	60fb      	str	r3, [r7, #12]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e82:	4619      	mov	r1, r3
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff fdf9 	bl	8005a7c <HAL_UARTEx_RxEventCallback>
 8005e8a:	e002      	b.n	8005e92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7ff fde1 	bl	8005a54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	e002      	b.n	8005e9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	e000      	b.n	8005e9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e9a:	2302      	movs	r3, #2
  }
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3730      	adds	r7, #48	; 0x30
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ea8:	b0c0      	sub	sp, #256	; 0x100
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec0:	68d9      	ldr	r1, [r3, #12]
 8005ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	ea40 0301 	orr.w	r3, r0, r1
 8005ecc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed2:	689a      	ldr	r2, [r3, #8]
 8005ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	431a      	orrs	r2, r3
 8005edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005efc:	f021 010c 	bic.w	r1, r1, #12
 8005f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f0a:	430b      	orrs	r3, r1
 8005f0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1e:	6999      	ldr	r1, [r3, #24]
 8005f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	ea40 0301 	orr.w	r3, r0, r1
 8005f2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	4b8f      	ldr	r3, [pc, #572]	; (8006170 <UART_SetConfig+0x2cc>)
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d005      	beq.n	8005f44 <UART_SetConfig+0xa0>
 8005f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	4b8d      	ldr	r3, [pc, #564]	; (8006174 <UART_SetConfig+0x2d0>)
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d104      	bne.n	8005f4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f44:	f7fe f8ba 	bl	80040bc <HAL_RCC_GetPCLK2Freq>
 8005f48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f4c:	e003      	b.n	8005f56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f4e:	f7fe f8a1 	bl	8004094 <HAL_RCC_GetPCLK1Freq>
 8005f52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f60:	f040 810c 	bne.w	800617c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f76:	4622      	mov	r2, r4
 8005f78:	462b      	mov	r3, r5
 8005f7a:	1891      	adds	r1, r2, r2
 8005f7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f7e:	415b      	adcs	r3, r3
 8005f80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f86:	4621      	mov	r1, r4
 8005f88:	eb12 0801 	adds.w	r8, r2, r1
 8005f8c:	4629      	mov	r1, r5
 8005f8e:	eb43 0901 	adc.w	r9, r3, r1
 8005f92:	f04f 0200 	mov.w	r2, #0
 8005f96:	f04f 0300 	mov.w	r3, #0
 8005f9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fa6:	4690      	mov	r8, r2
 8005fa8:	4699      	mov	r9, r3
 8005faa:	4623      	mov	r3, r4
 8005fac:	eb18 0303 	adds.w	r3, r8, r3
 8005fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fb4:	462b      	mov	r3, r5
 8005fb6:	eb49 0303 	adc.w	r3, r9, r3
 8005fba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005fca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005fce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	18db      	adds	r3, r3, r3
 8005fd6:	653b      	str	r3, [r7, #80]	; 0x50
 8005fd8:	4613      	mov	r3, r2
 8005fda:	eb42 0303 	adc.w	r3, r2, r3
 8005fde:	657b      	str	r3, [r7, #84]	; 0x54
 8005fe0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005fe4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005fe8:	f7fa f95a 	bl	80002a0 <__aeabi_uldivmod>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4b61      	ldr	r3, [pc, #388]	; (8006178 <UART_SetConfig+0x2d4>)
 8005ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	011c      	lsls	r4, r3, #4
 8005ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006004:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006008:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800600c:	4642      	mov	r2, r8
 800600e:	464b      	mov	r3, r9
 8006010:	1891      	adds	r1, r2, r2
 8006012:	64b9      	str	r1, [r7, #72]	; 0x48
 8006014:	415b      	adcs	r3, r3
 8006016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006018:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800601c:	4641      	mov	r1, r8
 800601e:	eb12 0a01 	adds.w	sl, r2, r1
 8006022:	4649      	mov	r1, r9
 8006024:	eb43 0b01 	adc.w	fp, r3, r1
 8006028:	f04f 0200 	mov.w	r2, #0
 800602c:	f04f 0300 	mov.w	r3, #0
 8006030:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006034:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006038:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800603c:	4692      	mov	sl, r2
 800603e:	469b      	mov	fp, r3
 8006040:	4643      	mov	r3, r8
 8006042:	eb1a 0303 	adds.w	r3, sl, r3
 8006046:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800604a:	464b      	mov	r3, r9
 800604c:	eb4b 0303 	adc.w	r3, fp, r3
 8006050:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006060:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006064:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006068:	460b      	mov	r3, r1
 800606a:	18db      	adds	r3, r3, r3
 800606c:	643b      	str	r3, [r7, #64]	; 0x40
 800606e:	4613      	mov	r3, r2
 8006070:	eb42 0303 	adc.w	r3, r2, r3
 8006074:	647b      	str	r3, [r7, #68]	; 0x44
 8006076:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800607a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800607e:	f7fa f90f 	bl	80002a0 <__aeabi_uldivmod>
 8006082:	4602      	mov	r2, r0
 8006084:	460b      	mov	r3, r1
 8006086:	4611      	mov	r1, r2
 8006088:	4b3b      	ldr	r3, [pc, #236]	; (8006178 <UART_SetConfig+0x2d4>)
 800608a:	fba3 2301 	umull	r2, r3, r3, r1
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	2264      	movs	r2, #100	; 0x64
 8006092:	fb02 f303 	mul.w	r3, r2, r3
 8006096:	1acb      	subs	r3, r1, r3
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800609e:	4b36      	ldr	r3, [pc, #216]	; (8006178 <UART_SetConfig+0x2d4>)
 80060a0:	fba3 2302 	umull	r2, r3, r3, r2
 80060a4:	095b      	lsrs	r3, r3, #5
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060ac:	441c      	add	r4, r3
 80060ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80060bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80060c0:	4642      	mov	r2, r8
 80060c2:	464b      	mov	r3, r9
 80060c4:	1891      	adds	r1, r2, r2
 80060c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80060c8:	415b      	adcs	r3, r3
 80060ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80060d0:	4641      	mov	r1, r8
 80060d2:	1851      	adds	r1, r2, r1
 80060d4:	6339      	str	r1, [r7, #48]	; 0x30
 80060d6:	4649      	mov	r1, r9
 80060d8:	414b      	adcs	r3, r1
 80060da:	637b      	str	r3, [r7, #52]	; 0x34
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	f04f 0300 	mov.w	r3, #0
 80060e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80060e8:	4659      	mov	r1, fp
 80060ea:	00cb      	lsls	r3, r1, #3
 80060ec:	4651      	mov	r1, sl
 80060ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060f2:	4651      	mov	r1, sl
 80060f4:	00ca      	lsls	r2, r1, #3
 80060f6:	4610      	mov	r0, r2
 80060f8:	4619      	mov	r1, r3
 80060fa:	4603      	mov	r3, r0
 80060fc:	4642      	mov	r2, r8
 80060fe:	189b      	adds	r3, r3, r2
 8006100:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006104:	464b      	mov	r3, r9
 8006106:	460a      	mov	r2, r1
 8006108:	eb42 0303 	adc.w	r3, r2, r3
 800610c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800611c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006120:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006124:	460b      	mov	r3, r1
 8006126:	18db      	adds	r3, r3, r3
 8006128:	62bb      	str	r3, [r7, #40]	; 0x28
 800612a:	4613      	mov	r3, r2
 800612c:	eb42 0303 	adc.w	r3, r2, r3
 8006130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006132:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006136:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800613a:	f7fa f8b1 	bl	80002a0 <__aeabi_uldivmod>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	4b0d      	ldr	r3, [pc, #52]	; (8006178 <UART_SetConfig+0x2d4>)
 8006144:	fba3 1302 	umull	r1, r3, r3, r2
 8006148:	095b      	lsrs	r3, r3, #5
 800614a:	2164      	movs	r1, #100	; 0x64
 800614c:	fb01 f303 	mul.w	r3, r1, r3
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	3332      	adds	r3, #50	; 0x32
 8006156:	4a08      	ldr	r2, [pc, #32]	; (8006178 <UART_SetConfig+0x2d4>)
 8006158:	fba2 2303 	umull	r2, r3, r2, r3
 800615c:	095b      	lsrs	r3, r3, #5
 800615e:	f003 0207 	and.w	r2, r3, #7
 8006162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4422      	add	r2, r4
 800616a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800616c:	e105      	b.n	800637a <UART_SetConfig+0x4d6>
 800616e:	bf00      	nop
 8006170:	40011000 	.word	0x40011000
 8006174:	40011400 	.word	0x40011400
 8006178:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800617c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006180:	2200      	movs	r2, #0
 8006182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006186:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800618a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800618e:	4642      	mov	r2, r8
 8006190:	464b      	mov	r3, r9
 8006192:	1891      	adds	r1, r2, r2
 8006194:	6239      	str	r1, [r7, #32]
 8006196:	415b      	adcs	r3, r3
 8006198:	627b      	str	r3, [r7, #36]	; 0x24
 800619a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800619e:	4641      	mov	r1, r8
 80061a0:	1854      	adds	r4, r2, r1
 80061a2:	4649      	mov	r1, r9
 80061a4:	eb43 0501 	adc.w	r5, r3, r1
 80061a8:	f04f 0200 	mov.w	r2, #0
 80061ac:	f04f 0300 	mov.w	r3, #0
 80061b0:	00eb      	lsls	r3, r5, #3
 80061b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061b6:	00e2      	lsls	r2, r4, #3
 80061b8:	4614      	mov	r4, r2
 80061ba:	461d      	mov	r5, r3
 80061bc:	4643      	mov	r3, r8
 80061be:	18e3      	adds	r3, r4, r3
 80061c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061c4:	464b      	mov	r3, r9
 80061c6:	eb45 0303 	adc.w	r3, r5, r3
 80061ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061de:	f04f 0200 	mov.w	r2, #0
 80061e2:	f04f 0300 	mov.w	r3, #0
 80061e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80061ea:	4629      	mov	r1, r5
 80061ec:	008b      	lsls	r3, r1, #2
 80061ee:	4621      	mov	r1, r4
 80061f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061f4:	4621      	mov	r1, r4
 80061f6:	008a      	lsls	r2, r1, #2
 80061f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80061fc:	f7fa f850 	bl	80002a0 <__aeabi_uldivmod>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4b60      	ldr	r3, [pc, #384]	; (8006388 <UART_SetConfig+0x4e4>)
 8006206:	fba3 2302 	umull	r2, r3, r3, r2
 800620a:	095b      	lsrs	r3, r3, #5
 800620c:	011c      	lsls	r4, r3, #4
 800620e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006212:	2200      	movs	r2, #0
 8006214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006218:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800621c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006220:	4642      	mov	r2, r8
 8006222:	464b      	mov	r3, r9
 8006224:	1891      	adds	r1, r2, r2
 8006226:	61b9      	str	r1, [r7, #24]
 8006228:	415b      	adcs	r3, r3
 800622a:	61fb      	str	r3, [r7, #28]
 800622c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006230:	4641      	mov	r1, r8
 8006232:	1851      	adds	r1, r2, r1
 8006234:	6139      	str	r1, [r7, #16]
 8006236:	4649      	mov	r1, r9
 8006238:	414b      	adcs	r3, r1
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	f04f 0200 	mov.w	r2, #0
 8006240:	f04f 0300 	mov.w	r3, #0
 8006244:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006248:	4659      	mov	r1, fp
 800624a:	00cb      	lsls	r3, r1, #3
 800624c:	4651      	mov	r1, sl
 800624e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006252:	4651      	mov	r1, sl
 8006254:	00ca      	lsls	r2, r1, #3
 8006256:	4610      	mov	r0, r2
 8006258:	4619      	mov	r1, r3
 800625a:	4603      	mov	r3, r0
 800625c:	4642      	mov	r2, r8
 800625e:	189b      	adds	r3, r3, r2
 8006260:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006264:	464b      	mov	r3, r9
 8006266:	460a      	mov	r2, r1
 8006268:	eb42 0303 	adc.w	r3, r2, r3
 800626c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	67bb      	str	r3, [r7, #120]	; 0x78
 800627a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800627c:	f04f 0200 	mov.w	r2, #0
 8006280:	f04f 0300 	mov.w	r3, #0
 8006284:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006288:	4649      	mov	r1, r9
 800628a:	008b      	lsls	r3, r1, #2
 800628c:	4641      	mov	r1, r8
 800628e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006292:	4641      	mov	r1, r8
 8006294:	008a      	lsls	r2, r1, #2
 8006296:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800629a:	f7fa f801 	bl	80002a0 <__aeabi_uldivmod>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4b39      	ldr	r3, [pc, #228]	; (8006388 <UART_SetConfig+0x4e4>)
 80062a4:	fba3 1302 	umull	r1, r3, r3, r2
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	2164      	movs	r1, #100	; 0x64
 80062ac:	fb01 f303 	mul.w	r3, r1, r3
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	011b      	lsls	r3, r3, #4
 80062b4:	3332      	adds	r3, #50	; 0x32
 80062b6:	4a34      	ldr	r2, [pc, #208]	; (8006388 <UART_SetConfig+0x4e4>)
 80062b8:	fba2 2303 	umull	r2, r3, r2, r3
 80062bc:	095b      	lsrs	r3, r3, #5
 80062be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062c2:	441c      	add	r4, r3
 80062c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062c8:	2200      	movs	r2, #0
 80062ca:	673b      	str	r3, [r7, #112]	; 0x70
 80062cc:	677a      	str	r2, [r7, #116]	; 0x74
 80062ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80062d2:	4642      	mov	r2, r8
 80062d4:	464b      	mov	r3, r9
 80062d6:	1891      	adds	r1, r2, r2
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	415b      	adcs	r3, r3
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062e2:	4641      	mov	r1, r8
 80062e4:	1851      	adds	r1, r2, r1
 80062e6:	6039      	str	r1, [r7, #0]
 80062e8:	4649      	mov	r1, r9
 80062ea:	414b      	adcs	r3, r1
 80062ec:	607b      	str	r3, [r7, #4]
 80062ee:	f04f 0200 	mov.w	r2, #0
 80062f2:	f04f 0300 	mov.w	r3, #0
 80062f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062fa:	4659      	mov	r1, fp
 80062fc:	00cb      	lsls	r3, r1, #3
 80062fe:	4651      	mov	r1, sl
 8006300:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006304:	4651      	mov	r1, sl
 8006306:	00ca      	lsls	r2, r1, #3
 8006308:	4610      	mov	r0, r2
 800630a:	4619      	mov	r1, r3
 800630c:	4603      	mov	r3, r0
 800630e:	4642      	mov	r2, r8
 8006310:	189b      	adds	r3, r3, r2
 8006312:	66bb      	str	r3, [r7, #104]	; 0x68
 8006314:	464b      	mov	r3, r9
 8006316:	460a      	mov	r2, r1
 8006318:	eb42 0303 	adc.w	r3, r2, r3
 800631c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800631e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	663b      	str	r3, [r7, #96]	; 0x60
 8006328:	667a      	str	r2, [r7, #100]	; 0x64
 800632a:	f04f 0200 	mov.w	r2, #0
 800632e:	f04f 0300 	mov.w	r3, #0
 8006332:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006336:	4649      	mov	r1, r9
 8006338:	008b      	lsls	r3, r1, #2
 800633a:	4641      	mov	r1, r8
 800633c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006340:	4641      	mov	r1, r8
 8006342:	008a      	lsls	r2, r1, #2
 8006344:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006348:	f7f9 ffaa 	bl	80002a0 <__aeabi_uldivmod>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4b0d      	ldr	r3, [pc, #52]	; (8006388 <UART_SetConfig+0x4e4>)
 8006352:	fba3 1302 	umull	r1, r3, r3, r2
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	2164      	movs	r1, #100	; 0x64
 800635a:	fb01 f303 	mul.w	r3, r1, r3
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	011b      	lsls	r3, r3, #4
 8006362:	3332      	adds	r3, #50	; 0x32
 8006364:	4a08      	ldr	r2, [pc, #32]	; (8006388 <UART_SetConfig+0x4e4>)
 8006366:	fba2 2303 	umull	r2, r3, r2, r3
 800636a:	095b      	lsrs	r3, r3, #5
 800636c:	f003 020f 	and.w	r2, r3, #15
 8006370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4422      	add	r2, r4
 8006378:	609a      	str	r2, [r3, #8]
}
 800637a:	bf00      	nop
 800637c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006380:	46bd      	mov	sp, r7
 8006382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006386:	bf00      	nop
 8006388:	51eb851f 	.word	0x51eb851f

0800638c <__errno>:
 800638c:	4b01      	ldr	r3, [pc, #4]	; (8006394 <__errno+0x8>)
 800638e:	6818      	ldr	r0, [r3, #0]
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	2000001c 	.word	0x2000001c

08006398 <__libc_init_array>:
 8006398:	b570      	push	{r4, r5, r6, lr}
 800639a:	4d0d      	ldr	r5, [pc, #52]	; (80063d0 <__libc_init_array+0x38>)
 800639c:	4c0d      	ldr	r4, [pc, #52]	; (80063d4 <__libc_init_array+0x3c>)
 800639e:	1b64      	subs	r4, r4, r5
 80063a0:	10a4      	asrs	r4, r4, #2
 80063a2:	2600      	movs	r6, #0
 80063a4:	42a6      	cmp	r6, r4
 80063a6:	d109      	bne.n	80063bc <__libc_init_array+0x24>
 80063a8:	4d0b      	ldr	r5, [pc, #44]	; (80063d8 <__libc_init_array+0x40>)
 80063aa:	4c0c      	ldr	r4, [pc, #48]	; (80063dc <__libc_init_array+0x44>)
 80063ac:	f001 fa34 	bl	8007818 <_init>
 80063b0:	1b64      	subs	r4, r4, r5
 80063b2:	10a4      	asrs	r4, r4, #2
 80063b4:	2600      	movs	r6, #0
 80063b6:	42a6      	cmp	r6, r4
 80063b8:	d105      	bne.n	80063c6 <__libc_init_array+0x2e>
 80063ba:	bd70      	pop	{r4, r5, r6, pc}
 80063bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c0:	4798      	blx	r3
 80063c2:	3601      	adds	r6, #1
 80063c4:	e7ee      	b.n	80063a4 <__libc_init_array+0xc>
 80063c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ca:	4798      	blx	r3
 80063cc:	3601      	adds	r6, #1
 80063ce:	e7f2      	b.n	80063b6 <__libc_init_array+0x1e>
 80063d0:	080079c8 	.word	0x080079c8
 80063d4:	080079c8 	.word	0x080079c8
 80063d8:	080079c8 	.word	0x080079c8
 80063dc:	080079cc 	.word	0x080079cc

080063e0 <memset>:
 80063e0:	4402      	add	r2, r0
 80063e2:	4603      	mov	r3, r0
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d100      	bne.n	80063ea <memset+0xa>
 80063e8:	4770      	bx	lr
 80063ea:	f803 1b01 	strb.w	r1, [r3], #1
 80063ee:	e7f9      	b.n	80063e4 <memset+0x4>

080063f0 <iprintf>:
 80063f0:	b40f      	push	{r0, r1, r2, r3}
 80063f2:	4b0a      	ldr	r3, [pc, #40]	; (800641c <iprintf+0x2c>)
 80063f4:	b513      	push	{r0, r1, r4, lr}
 80063f6:	681c      	ldr	r4, [r3, #0]
 80063f8:	b124      	cbz	r4, 8006404 <iprintf+0x14>
 80063fa:	69a3      	ldr	r3, [r4, #24]
 80063fc:	b913      	cbnz	r3, 8006404 <iprintf+0x14>
 80063fe:	4620      	mov	r0, r4
 8006400:	f000 fab2 	bl	8006968 <__sinit>
 8006404:	ab05      	add	r3, sp, #20
 8006406:	9a04      	ldr	r2, [sp, #16]
 8006408:	68a1      	ldr	r1, [r4, #8]
 800640a:	9301      	str	r3, [sp, #4]
 800640c:	4620      	mov	r0, r4
 800640e:	f000 fe17 	bl	8007040 <_vfiprintf_r>
 8006412:	b002      	add	sp, #8
 8006414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006418:	b004      	add	sp, #16
 800641a:	4770      	bx	lr
 800641c:	2000001c 	.word	0x2000001c

08006420 <_puts_r>:
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	460e      	mov	r6, r1
 8006424:	4605      	mov	r5, r0
 8006426:	b118      	cbz	r0, 8006430 <_puts_r+0x10>
 8006428:	6983      	ldr	r3, [r0, #24]
 800642a:	b90b      	cbnz	r3, 8006430 <_puts_r+0x10>
 800642c:	f000 fa9c 	bl	8006968 <__sinit>
 8006430:	69ab      	ldr	r3, [r5, #24]
 8006432:	68ac      	ldr	r4, [r5, #8]
 8006434:	b913      	cbnz	r3, 800643c <_puts_r+0x1c>
 8006436:	4628      	mov	r0, r5
 8006438:	f000 fa96 	bl	8006968 <__sinit>
 800643c:	4b2c      	ldr	r3, [pc, #176]	; (80064f0 <_puts_r+0xd0>)
 800643e:	429c      	cmp	r4, r3
 8006440:	d120      	bne.n	8006484 <_puts_r+0x64>
 8006442:	686c      	ldr	r4, [r5, #4]
 8006444:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006446:	07db      	lsls	r3, r3, #31
 8006448:	d405      	bmi.n	8006456 <_puts_r+0x36>
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	0598      	lsls	r0, r3, #22
 800644e:	d402      	bmi.n	8006456 <_puts_r+0x36>
 8006450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006452:	f000 fb27 	bl	8006aa4 <__retarget_lock_acquire_recursive>
 8006456:	89a3      	ldrh	r3, [r4, #12]
 8006458:	0719      	lsls	r1, r3, #28
 800645a:	d51d      	bpl.n	8006498 <_puts_r+0x78>
 800645c:	6923      	ldr	r3, [r4, #16]
 800645e:	b1db      	cbz	r3, 8006498 <_puts_r+0x78>
 8006460:	3e01      	subs	r6, #1
 8006462:	68a3      	ldr	r3, [r4, #8]
 8006464:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006468:	3b01      	subs	r3, #1
 800646a:	60a3      	str	r3, [r4, #8]
 800646c:	bb39      	cbnz	r1, 80064be <_puts_r+0x9e>
 800646e:	2b00      	cmp	r3, #0
 8006470:	da38      	bge.n	80064e4 <_puts_r+0xc4>
 8006472:	4622      	mov	r2, r4
 8006474:	210a      	movs	r1, #10
 8006476:	4628      	mov	r0, r5
 8006478:	f000 f89c 	bl	80065b4 <__swbuf_r>
 800647c:	3001      	adds	r0, #1
 800647e:	d011      	beq.n	80064a4 <_puts_r+0x84>
 8006480:	250a      	movs	r5, #10
 8006482:	e011      	b.n	80064a8 <_puts_r+0x88>
 8006484:	4b1b      	ldr	r3, [pc, #108]	; (80064f4 <_puts_r+0xd4>)
 8006486:	429c      	cmp	r4, r3
 8006488:	d101      	bne.n	800648e <_puts_r+0x6e>
 800648a:	68ac      	ldr	r4, [r5, #8]
 800648c:	e7da      	b.n	8006444 <_puts_r+0x24>
 800648e:	4b1a      	ldr	r3, [pc, #104]	; (80064f8 <_puts_r+0xd8>)
 8006490:	429c      	cmp	r4, r3
 8006492:	bf08      	it	eq
 8006494:	68ec      	ldreq	r4, [r5, #12]
 8006496:	e7d5      	b.n	8006444 <_puts_r+0x24>
 8006498:	4621      	mov	r1, r4
 800649a:	4628      	mov	r0, r5
 800649c:	f000 f8dc 	bl	8006658 <__swsetup_r>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	d0dd      	beq.n	8006460 <_puts_r+0x40>
 80064a4:	f04f 35ff 	mov.w	r5, #4294967295
 80064a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064aa:	07da      	lsls	r2, r3, #31
 80064ac:	d405      	bmi.n	80064ba <_puts_r+0x9a>
 80064ae:	89a3      	ldrh	r3, [r4, #12]
 80064b0:	059b      	lsls	r3, r3, #22
 80064b2:	d402      	bmi.n	80064ba <_puts_r+0x9a>
 80064b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064b6:	f000 faf6 	bl	8006aa6 <__retarget_lock_release_recursive>
 80064ba:	4628      	mov	r0, r5
 80064bc:	bd70      	pop	{r4, r5, r6, pc}
 80064be:	2b00      	cmp	r3, #0
 80064c0:	da04      	bge.n	80064cc <_puts_r+0xac>
 80064c2:	69a2      	ldr	r2, [r4, #24]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	dc06      	bgt.n	80064d6 <_puts_r+0xb6>
 80064c8:	290a      	cmp	r1, #10
 80064ca:	d004      	beq.n	80064d6 <_puts_r+0xb6>
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	6022      	str	r2, [r4, #0]
 80064d2:	7019      	strb	r1, [r3, #0]
 80064d4:	e7c5      	b.n	8006462 <_puts_r+0x42>
 80064d6:	4622      	mov	r2, r4
 80064d8:	4628      	mov	r0, r5
 80064da:	f000 f86b 	bl	80065b4 <__swbuf_r>
 80064de:	3001      	adds	r0, #1
 80064e0:	d1bf      	bne.n	8006462 <_puts_r+0x42>
 80064e2:	e7df      	b.n	80064a4 <_puts_r+0x84>
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	250a      	movs	r5, #10
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	6022      	str	r2, [r4, #0]
 80064ec:	701d      	strb	r5, [r3, #0]
 80064ee:	e7db      	b.n	80064a8 <_puts_r+0x88>
 80064f0:	0800794c 	.word	0x0800794c
 80064f4:	0800796c 	.word	0x0800796c
 80064f8:	0800792c 	.word	0x0800792c

080064fc <puts>:
 80064fc:	4b02      	ldr	r3, [pc, #8]	; (8006508 <puts+0xc>)
 80064fe:	4601      	mov	r1, r0
 8006500:	6818      	ldr	r0, [r3, #0]
 8006502:	f7ff bf8d 	b.w	8006420 <_puts_r>
 8006506:	bf00      	nop
 8006508:	2000001c 	.word	0x2000001c

0800650c <sniprintf>:
 800650c:	b40c      	push	{r2, r3}
 800650e:	b530      	push	{r4, r5, lr}
 8006510:	4b17      	ldr	r3, [pc, #92]	; (8006570 <sniprintf+0x64>)
 8006512:	1e0c      	subs	r4, r1, #0
 8006514:	681d      	ldr	r5, [r3, #0]
 8006516:	b09d      	sub	sp, #116	; 0x74
 8006518:	da08      	bge.n	800652c <sniprintf+0x20>
 800651a:	238b      	movs	r3, #139	; 0x8b
 800651c:	602b      	str	r3, [r5, #0]
 800651e:	f04f 30ff 	mov.w	r0, #4294967295
 8006522:	b01d      	add	sp, #116	; 0x74
 8006524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006528:	b002      	add	sp, #8
 800652a:	4770      	bx	lr
 800652c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006530:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006534:	bf14      	ite	ne
 8006536:	f104 33ff 	addne.w	r3, r4, #4294967295
 800653a:	4623      	moveq	r3, r4
 800653c:	9304      	str	r3, [sp, #16]
 800653e:	9307      	str	r3, [sp, #28]
 8006540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006544:	9002      	str	r0, [sp, #8]
 8006546:	9006      	str	r0, [sp, #24]
 8006548:	f8ad 3016 	strh.w	r3, [sp, #22]
 800654c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800654e:	ab21      	add	r3, sp, #132	; 0x84
 8006550:	a902      	add	r1, sp, #8
 8006552:	4628      	mov	r0, r5
 8006554:	9301      	str	r3, [sp, #4]
 8006556:	f000 fc49 	bl	8006dec <_svfiprintf_r>
 800655a:	1c43      	adds	r3, r0, #1
 800655c:	bfbc      	itt	lt
 800655e:	238b      	movlt	r3, #139	; 0x8b
 8006560:	602b      	strlt	r3, [r5, #0]
 8006562:	2c00      	cmp	r4, #0
 8006564:	d0dd      	beq.n	8006522 <sniprintf+0x16>
 8006566:	9b02      	ldr	r3, [sp, #8]
 8006568:	2200      	movs	r2, #0
 800656a:	701a      	strb	r2, [r3, #0]
 800656c:	e7d9      	b.n	8006522 <sniprintf+0x16>
 800656e:	bf00      	nop
 8006570:	2000001c 	.word	0x2000001c

08006574 <siprintf>:
 8006574:	b40e      	push	{r1, r2, r3}
 8006576:	b500      	push	{lr}
 8006578:	b09c      	sub	sp, #112	; 0x70
 800657a:	ab1d      	add	r3, sp, #116	; 0x74
 800657c:	9002      	str	r0, [sp, #8]
 800657e:	9006      	str	r0, [sp, #24]
 8006580:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006584:	4809      	ldr	r0, [pc, #36]	; (80065ac <siprintf+0x38>)
 8006586:	9107      	str	r1, [sp, #28]
 8006588:	9104      	str	r1, [sp, #16]
 800658a:	4909      	ldr	r1, [pc, #36]	; (80065b0 <siprintf+0x3c>)
 800658c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006590:	9105      	str	r1, [sp, #20]
 8006592:	6800      	ldr	r0, [r0, #0]
 8006594:	9301      	str	r3, [sp, #4]
 8006596:	a902      	add	r1, sp, #8
 8006598:	f000 fc28 	bl	8006dec <_svfiprintf_r>
 800659c:	9b02      	ldr	r3, [sp, #8]
 800659e:	2200      	movs	r2, #0
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	b01c      	add	sp, #112	; 0x70
 80065a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80065a8:	b003      	add	sp, #12
 80065aa:	4770      	bx	lr
 80065ac:	2000001c 	.word	0x2000001c
 80065b0:	ffff0208 	.word	0xffff0208

080065b4 <__swbuf_r>:
 80065b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b6:	460e      	mov	r6, r1
 80065b8:	4614      	mov	r4, r2
 80065ba:	4605      	mov	r5, r0
 80065bc:	b118      	cbz	r0, 80065c6 <__swbuf_r+0x12>
 80065be:	6983      	ldr	r3, [r0, #24]
 80065c0:	b90b      	cbnz	r3, 80065c6 <__swbuf_r+0x12>
 80065c2:	f000 f9d1 	bl	8006968 <__sinit>
 80065c6:	4b21      	ldr	r3, [pc, #132]	; (800664c <__swbuf_r+0x98>)
 80065c8:	429c      	cmp	r4, r3
 80065ca:	d12b      	bne.n	8006624 <__swbuf_r+0x70>
 80065cc:	686c      	ldr	r4, [r5, #4]
 80065ce:	69a3      	ldr	r3, [r4, #24]
 80065d0:	60a3      	str	r3, [r4, #8]
 80065d2:	89a3      	ldrh	r3, [r4, #12]
 80065d4:	071a      	lsls	r2, r3, #28
 80065d6:	d52f      	bpl.n	8006638 <__swbuf_r+0x84>
 80065d8:	6923      	ldr	r3, [r4, #16]
 80065da:	b36b      	cbz	r3, 8006638 <__swbuf_r+0x84>
 80065dc:	6923      	ldr	r3, [r4, #16]
 80065de:	6820      	ldr	r0, [r4, #0]
 80065e0:	1ac0      	subs	r0, r0, r3
 80065e2:	6963      	ldr	r3, [r4, #20]
 80065e4:	b2f6      	uxtb	r6, r6
 80065e6:	4283      	cmp	r3, r0
 80065e8:	4637      	mov	r7, r6
 80065ea:	dc04      	bgt.n	80065f6 <__swbuf_r+0x42>
 80065ec:	4621      	mov	r1, r4
 80065ee:	4628      	mov	r0, r5
 80065f0:	f000 f926 	bl	8006840 <_fflush_r>
 80065f4:	bb30      	cbnz	r0, 8006644 <__swbuf_r+0x90>
 80065f6:	68a3      	ldr	r3, [r4, #8]
 80065f8:	3b01      	subs	r3, #1
 80065fa:	60a3      	str	r3, [r4, #8]
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	6022      	str	r2, [r4, #0]
 8006602:	701e      	strb	r6, [r3, #0]
 8006604:	6963      	ldr	r3, [r4, #20]
 8006606:	3001      	adds	r0, #1
 8006608:	4283      	cmp	r3, r0
 800660a:	d004      	beq.n	8006616 <__swbuf_r+0x62>
 800660c:	89a3      	ldrh	r3, [r4, #12]
 800660e:	07db      	lsls	r3, r3, #31
 8006610:	d506      	bpl.n	8006620 <__swbuf_r+0x6c>
 8006612:	2e0a      	cmp	r6, #10
 8006614:	d104      	bne.n	8006620 <__swbuf_r+0x6c>
 8006616:	4621      	mov	r1, r4
 8006618:	4628      	mov	r0, r5
 800661a:	f000 f911 	bl	8006840 <_fflush_r>
 800661e:	b988      	cbnz	r0, 8006644 <__swbuf_r+0x90>
 8006620:	4638      	mov	r0, r7
 8006622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006624:	4b0a      	ldr	r3, [pc, #40]	; (8006650 <__swbuf_r+0x9c>)
 8006626:	429c      	cmp	r4, r3
 8006628:	d101      	bne.n	800662e <__swbuf_r+0x7a>
 800662a:	68ac      	ldr	r4, [r5, #8]
 800662c:	e7cf      	b.n	80065ce <__swbuf_r+0x1a>
 800662e:	4b09      	ldr	r3, [pc, #36]	; (8006654 <__swbuf_r+0xa0>)
 8006630:	429c      	cmp	r4, r3
 8006632:	bf08      	it	eq
 8006634:	68ec      	ldreq	r4, [r5, #12]
 8006636:	e7ca      	b.n	80065ce <__swbuf_r+0x1a>
 8006638:	4621      	mov	r1, r4
 800663a:	4628      	mov	r0, r5
 800663c:	f000 f80c 	bl	8006658 <__swsetup_r>
 8006640:	2800      	cmp	r0, #0
 8006642:	d0cb      	beq.n	80065dc <__swbuf_r+0x28>
 8006644:	f04f 37ff 	mov.w	r7, #4294967295
 8006648:	e7ea      	b.n	8006620 <__swbuf_r+0x6c>
 800664a:	bf00      	nop
 800664c:	0800794c 	.word	0x0800794c
 8006650:	0800796c 	.word	0x0800796c
 8006654:	0800792c 	.word	0x0800792c

08006658 <__swsetup_r>:
 8006658:	4b32      	ldr	r3, [pc, #200]	; (8006724 <__swsetup_r+0xcc>)
 800665a:	b570      	push	{r4, r5, r6, lr}
 800665c:	681d      	ldr	r5, [r3, #0]
 800665e:	4606      	mov	r6, r0
 8006660:	460c      	mov	r4, r1
 8006662:	b125      	cbz	r5, 800666e <__swsetup_r+0x16>
 8006664:	69ab      	ldr	r3, [r5, #24]
 8006666:	b913      	cbnz	r3, 800666e <__swsetup_r+0x16>
 8006668:	4628      	mov	r0, r5
 800666a:	f000 f97d 	bl	8006968 <__sinit>
 800666e:	4b2e      	ldr	r3, [pc, #184]	; (8006728 <__swsetup_r+0xd0>)
 8006670:	429c      	cmp	r4, r3
 8006672:	d10f      	bne.n	8006694 <__swsetup_r+0x3c>
 8006674:	686c      	ldr	r4, [r5, #4]
 8006676:	89a3      	ldrh	r3, [r4, #12]
 8006678:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800667c:	0719      	lsls	r1, r3, #28
 800667e:	d42c      	bmi.n	80066da <__swsetup_r+0x82>
 8006680:	06dd      	lsls	r5, r3, #27
 8006682:	d411      	bmi.n	80066a8 <__swsetup_r+0x50>
 8006684:	2309      	movs	r3, #9
 8006686:	6033      	str	r3, [r6, #0]
 8006688:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800668c:	81a3      	strh	r3, [r4, #12]
 800668e:	f04f 30ff 	mov.w	r0, #4294967295
 8006692:	e03e      	b.n	8006712 <__swsetup_r+0xba>
 8006694:	4b25      	ldr	r3, [pc, #148]	; (800672c <__swsetup_r+0xd4>)
 8006696:	429c      	cmp	r4, r3
 8006698:	d101      	bne.n	800669e <__swsetup_r+0x46>
 800669a:	68ac      	ldr	r4, [r5, #8]
 800669c:	e7eb      	b.n	8006676 <__swsetup_r+0x1e>
 800669e:	4b24      	ldr	r3, [pc, #144]	; (8006730 <__swsetup_r+0xd8>)
 80066a0:	429c      	cmp	r4, r3
 80066a2:	bf08      	it	eq
 80066a4:	68ec      	ldreq	r4, [r5, #12]
 80066a6:	e7e6      	b.n	8006676 <__swsetup_r+0x1e>
 80066a8:	0758      	lsls	r0, r3, #29
 80066aa:	d512      	bpl.n	80066d2 <__swsetup_r+0x7a>
 80066ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066ae:	b141      	cbz	r1, 80066c2 <__swsetup_r+0x6a>
 80066b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066b4:	4299      	cmp	r1, r3
 80066b6:	d002      	beq.n	80066be <__swsetup_r+0x66>
 80066b8:	4630      	mov	r0, r6
 80066ba:	f000 fa5b 	bl	8006b74 <_free_r>
 80066be:	2300      	movs	r3, #0
 80066c0:	6363      	str	r3, [r4, #52]	; 0x34
 80066c2:	89a3      	ldrh	r3, [r4, #12]
 80066c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066c8:	81a3      	strh	r3, [r4, #12]
 80066ca:	2300      	movs	r3, #0
 80066cc:	6063      	str	r3, [r4, #4]
 80066ce:	6923      	ldr	r3, [r4, #16]
 80066d0:	6023      	str	r3, [r4, #0]
 80066d2:	89a3      	ldrh	r3, [r4, #12]
 80066d4:	f043 0308 	orr.w	r3, r3, #8
 80066d8:	81a3      	strh	r3, [r4, #12]
 80066da:	6923      	ldr	r3, [r4, #16]
 80066dc:	b94b      	cbnz	r3, 80066f2 <__swsetup_r+0x9a>
 80066de:	89a3      	ldrh	r3, [r4, #12]
 80066e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e8:	d003      	beq.n	80066f2 <__swsetup_r+0x9a>
 80066ea:	4621      	mov	r1, r4
 80066ec:	4630      	mov	r0, r6
 80066ee:	f000 fa01 	bl	8006af4 <__smakebuf_r>
 80066f2:	89a0      	ldrh	r0, [r4, #12]
 80066f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066f8:	f010 0301 	ands.w	r3, r0, #1
 80066fc:	d00a      	beq.n	8006714 <__swsetup_r+0xbc>
 80066fe:	2300      	movs	r3, #0
 8006700:	60a3      	str	r3, [r4, #8]
 8006702:	6963      	ldr	r3, [r4, #20]
 8006704:	425b      	negs	r3, r3
 8006706:	61a3      	str	r3, [r4, #24]
 8006708:	6923      	ldr	r3, [r4, #16]
 800670a:	b943      	cbnz	r3, 800671e <__swsetup_r+0xc6>
 800670c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006710:	d1ba      	bne.n	8006688 <__swsetup_r+0x30>
 8006712:	bd70      	pop	{r4, r5, r6, pc}
 8006714:	0781      	lsls	r1, r0, #30
 8006716:	bf58      	it	pl
 8006718:	6963      	ldrpl	r3, [r4, #20]
 800671a:	60a3      	str	r3, [r4, #8]
 800671c:	e7f4      	b.n	8006708 <__swsetup_r+0xb0>
 800671e:	2000      	movs	r0, #0
 8006720:	e7f7      	b.n	8006712 <__swsetup_r+0xba>
 8006722:	bf00      	nop
 8006724:	2000001c 	.word	0x2000001c
 8006728:	0800794c 	.word	0x0800794c
 800672c:	0800796c 	.word	0x0800796c
 8006730:	0800792c 	.word	0x0800792c

08006734 <__sflush_r>:
 8006734:	898a      	ldrh	r2, [r1, #12]
 8006736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800673a:	4605      	mov	r5, r0
 800673c:	0710      	lsls	r0, r2, #28
 800673e:	460c      	mov	r4, r1
 8006740:	d458      	bmi.n	80067f4 <__sflush_r+0xc0>
 8006742:	684b      	ldr	r3, [r1, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	dc05      	bgt.n	8006754 <__sflush_r+0x20>
 8006748:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800674a:	2b00      	cmp	r3, #0
 800674c:	dc02      	bgt.n	8006754 <__sflush_r+0x20>
 800674e:	2000      	movs	r0, #0
 8006750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006756:	2e00      	cmp	r6, #0
 8006758:	d0f9      	beq.n	800674e <__sflush_r+0x1a>
 800675a:	2300      	movs	r3, #0
 800675c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006760:	682f      	ldr	r7, [r5, #0]
 8006762:	602b      	str	r3, [r5, #0]
 8006764:	d032      	beq.n	80067cc <__sflush_r+0x98>
 8006766:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006768:	89a3      	ldrh	r3, [r4, #12]
 800676a:	075a      	lsls	r2, r3, #29
 800676c:	d505      	bpl.n	800677a <__sflush_r+0x46>
 800676e:	6863      	ldr	r3, [r4, #4]
 8006770:	1ac0      	subs	r0, r0, r3
 8006772:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006774:	b10b      	cbz	r3, 800677a <__sflush_r+0x46>
 8006776:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006778:	1ac0      	subs	r0, r0, r3
 800677a:	2300      	movs	r3, #0
 800677c:	4602      	mov	r2, r0
 800677e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006780:	6a21      	ldr	r1, [r4, #32]
 8006782:	4628      	mov	r0, r5
 8006784:	47b0      	blx	r6
 8006786:	1c43      	adds	r3, r0, #1
 8006788:	89a3      	ldrh	r3, [r4, #12]
 800678a:	d106      	bne.n	800679a <__sflush_r+0x66>
 800678c:	6829      	ldr	r1, [r5, #0]
 800678e:	291d      	cmp	r1, #29
 8006790:	d82c      	bhi.n	80067ec <__sflush_r+0xb8>
 8006792:	4a2a      	ldr	r2, [pc, #168]	; (800683c <__sflush_r+0x108>)
 8006794:	40ca      	lsrs	r2, r1
 8006796:	07d6      	lsls	r6, r2, #31
 8006798:	d528      	bpl.n	80067ec <__sflush_r+0xb8>
 800679a:	2200      	movs	r2, #0
 800679c:	6062      	str	r2, [r4, #4]
 800679e:	04d9      	lsls	r1, r3, #19
 80067a0:	6922      	ldr	r2, [r4, #16]
 80067a2:	6022      	str	r2, [r4, #0]
 80067a4:	d504      	bpl.n	80067b0 <__sflush_r+0x7c>
 80067a6:	1c42      	adds	r2, r0, #1
 80067a8:	d101      	bne.n	80067ae <__sflush_r+0x7a>
 80067aa:	682b      	ldr	r3, [r5, #0]
 80067ac:	b903      	cbnz	r3, 80067b0 <__sflush_r+0x7c>
 80067ae:	6560      	str	r0, [r4, #84]	; 0x54
 80067b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067b2:	602f      	str	r7, [r5, #0]
 80067b4:	2900      	cmp	r1, #0
 80067b6:	d0ca      	beq.n	800674e <__sflush_r+0x1a>
 80067b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067bc:	4299      	cmp	r1, r3
 80067be:	d002      	beq.n	80067c6 <__sflush_r+0x92>
 80067c0:	4628      	mov	r0, r5
 80067c2:	f000 f9d7 	bl	8006b74 <_free_r>
 80067c6:	2000      	movs	r0, #0
 80067c8:	6360      	str	r0, [r4, #52]	; 0x34
 80067ca:	e7c1      	b.n	8006750 <__sflush_r+0x1c>
 80067cc:	6a21      	ldr	r1, [r4, #32]
 80067ce:	2301      	movs	r3, #1
 80067d0:	4628      	mov	r0, r5
 80067d2:	47b0      	blx	r6
 80067d4:	1c41      	adds	r1, r0, #1
 80067d6:	d1c7      	bne.n	8006768 <__sflush_r+0x34>
 80067d8:	682b      	ldr	r3, [r5, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d0c4      	beq.n	8006768 <__sflush_r+0x34>
 80067de:	2b1d      	cmp	r3, #29
 80067e0:	d001      	beq.n	80067e6 <__sflush_r+0xb2>
 80067e2:	2b16      	cmp	r3, #22
 80067e4:	d101      	bne.n	80067ea <__sflush_r+0xb6>
 80067e6:	602f      	str	r7, [r5, #0]
 80067e8:	e7b1      	b.n	800674e <__sflush_r+0x1a>
 80067ea:	89a3      	ldrh	r3, [r4, #12]
 80067ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067f0:	81a3      	strh	r3, [r4, #12]
 80067f2:	e7ad      	b.n	8006750 <__sflush_r+0x1c>
 80067f4:	690f      	ldr	r7, [r1, #16]
 80067f6:	2f00      	cmp	r7, #0
 80067f8:	d0a9      	beq.n	800674e <__sflush_r+0x1a>
 80067fa:	0793      	lsls	r3, r2, #30
 80067fc:	680e      	ldr	r6, [r1, #0]
 80067fe:	bf08      	it	eq
 8006800:	694b      	ldreq	r3, [r1, #20]
 8006802:	600f      	str	r7, [r1, #0]
 8006804:	bf18      	it	ne
 8006806:	2300      	movne	r3, #0
 8006808:	eba6 0807 	sub.w	r8, r6, r7
 800680c:	608b      	str	r3, [r1, #8]
 800680e:	f1b8 0f00 	cmp.w	r8, #0
 8006812:	dd9c      	ble.n	800674e <__sflush_r+0x1a>
 8006814:	6a21      	ldr	r1, [r4, #32]
 8006816:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006818:	4643      	mov	r3, r8
 800681a:	463a      	mov	r2, r7
 800681c:	4628      	mov	r0, r5
 800681e:	47b0      	blx	r6
 8006820:	2800      	cmp	r0, #0
 8006822:	dc06      	bgt.n	8006832 <__sflush_r+0xfe>
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800682a:	81a3      	strh	r3, [r4, #12]
 800682c:	f04f 30ff 	mov.w	r0, #4294967295
 8006830:	e78e      	b.n	8006750 <__sflush_r+0x1c>
 8006832:	4407      	add	r7, r0
 8006834:	eba8 0800 	sub.w	r8, r8, r0
 8006838:	e7e9      	b.n	800680e <__sflush_r+0xda>
 800683a:	bf00      	nop
 800683c:	20400001 	.word	0x20400001

08006840 <_fflush_r>:
 8006840:	b538      	push	{r3, r4, r5, lr}
 8006842:	690b      	ldr	r3, [r1, #16]
 8006844:	4605      	mov	r5, r0
 8006846:	460c      	mov	r4, r1
 8006848:	b913      	cbnz	r3, 8006850 <_fflush_r+0x10>
 800684a:	2500      	movs	r5, #0
 800684c:	4628      	mov	r0, r5
 800684e:	bd38      	pop	{r3, r4, r5, pc}
 8006850:	b118      	cbz	r0, 800685a <_fflush_r+0x1a>
 8006852:	6983      	ldr	r3, [r0, #24]
 8006854:	b90b      	cbnz	r3, 800685a <_fflush_r+0x1a>
 8006856:	f000 f887 	bl	8006968 <__sinit>
 800685a:	4b14      	ldr	r3, [pc, #80]	; (80068ac <_fflush_r+0x6c>)
 800685c:	429c      	cmp	r4, r3
 800685e:	d11b      	bne.n	8006898 <_fflush_r+0x58>
 8006860:	686c      	ldr	r4, [r5, #4]
 8006862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d0ef      	beq.n	800684a <_fflush_r+0xa>
 800686a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800686c:	07d0      	lsls	r0, r2, #31
 800686e:	d404      	bmi.n	800687a <_fflush_r+0x3a>
 8006870:	0599      	lsls	r1, r3, #22
 8006872:	d402      	bmi.n	800687a <_fflush_r+0x3a>
 8006874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006876:	f000 f915 	bl	8006aa4 <__retarget_lock_acquire_recursive>
 800687a:	4628      	mov	r0, r5
 800687c:	4621      	mov	r1, r4
 800687e:	f7ff ff59 	bl	8006734 <__sflush_r>
 8006882:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006884:	07da      	lsls	r2, r3, #31
 8006886:	4605      	mov	r5, r0
 8006888:	d4e0      	bmi.n	800684c <_fflush_r+0xc>
 800688a:	89a3      	ldrh	r3, [r4, #12]
 800688c:	059b      	lsls	r3, r3, #22
 800688e:	d4dd      	bmi.n	800684c <_fflush_r+0xc>
 8006890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006892:	f000 f908 	bl	8006aa6 <__retarget_lock_release_recursive>
 8006896:	e7d9      	b.n	800684c <_fflush_r+0xc>
 8006898:	4b05      	ldr	r3, [pc, #20]	; (80068b0 <_fflush_r+0x70>)
 800689a:	429c      	cmp	r4, r3
 800689c:	d101      	bne.n	80068a2 <_fflush_r+0x62>
 800689e:	68ac      	ldr	r4, [r5, #8]
 80068a0:	e7df      	b.n	8006862 <_fflush_r+0x22>
 80068a2:	4b04      	ldr	r3, [pc, #16]	; (80068b4 <_fflush_r+0x74>)
 80068a4:	429c      	cmp	r4, r3
 80068a6:	bf08      	it	eq
 80068a8:	68ec      	ldreq	r4, [r5, #12]
 80068aa:	e7da      	b.n	8006862 <_fflush_r+0x22>
 80068ac:	0800794c 	.word	0x0800794c
 80068b0:	0800796c 	.word	0x0800796c
 80068b4:	0800792c 	.word	0x0800792c

080068b8 <std>:
 80068b8:	2300      	movs	r3, #0
 80068ba:	b510      	push	{r4, lr}
 80068bc:	4604      	mov	r4, r0
 80068be:	e9c0 3300 	strd	r3, r3, [r0]
 80068c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068c6:	6083      	str	r3, [r0, #8]
 80068c8:	8181      	strh	r1, [r0, #12]
 80068ca:	6643      	str	r3, [r0, #100]	; 0x64
 80068cc:	81c2      	strh	r2, [r0, #14]
 80068ce:	6183      	str	r3, [r0, #24]
 80068d0:	4619      	mov	r1, r3
 80068d2:	2208      	movs	r2, #8
 80068d4:	305c      	adds	r0, #92	; 0x5c
 80068d6:	f7ff fd83 	bl	80063e0 <memset>
 80068da:	4b05      	ldr	r3, [pc, #20]	; (80068f0 <std+0x38>)
 80068dc:	6263      	str	r3, [r4, #36]	; 0x24
 80068de:	4b05      	ldr	r3, [pc, #20]	; (80068f4 <std+0x3c>)
 80068e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80068e2:	4b05      	ldr	r3, [pc, #20]	; (80068f8 <std+0x40>)
 80068e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068e6:	4b05      	ldr	r3, [pc, #20]	; (80068fc <std+0x44>)
 80068e8:	6224      	str	r4, [r4, #32]
 80068ea:	6323      	str	r3, [r4, #48]	; 0x30
 80068ec:	bd10      	pop	{r4, pc}
 80068ee:	bf00      	nop
 80068f0:	080075e9 	.word	0x080075e9
 80068f4:	0800760b 	.word	0x0800760b
 80068f8:	08007643 	.word	0x08007643
 80068fc:	08007667 	.word	0x08007667

08006900 <_cleanup_r>:
 8006900:	4901      	ldr	r1, [pc, #4]	; (8006908 <_cleanup_r+0x8>)
 8006902:	f000 b8af 	b.w	8006a64 <_fwalk_reent>
 8006906:	bf00      	nop
 8006908:	08006841 	.word	0x08006841

0800690c <__sfmoreglue>:
 800690c:	b570      	push	{r4, r5, r6, lr}
 800690e:	2268      	movs	r2, #104	; 0x68
 8006910:	1e4d      	subs	r5, r1, #1
 8006912:	4355      	muls	r5, r2
 8006914:	460e      	mov	r6, r1
 8006916:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800691a:	f000 f997 	bl	8006c4c <_malloc_r>
 800691e:	4604      	mov	r4, r0
 8006920:	b140      	cbz	r0, 8006934 <__sfmoreglue+0x28>
 8006922:	2100      	movs	r1, #0
 8006924:	e9c0 1600 	strd	r1, r6, [r0]
 8006928:	300c      	adds	r0, #12
 800692a:	60a0      	str	r0, [r4, #8]
 800692c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006930:	f7ff fd56 	bl	80063e0 <memset>
 8006934:	4620      	mov	r0, r4
 8006936:	bd70      	pop	{r4, r5, r6, pc}

08006938 <__sfp_lock_acquire>:
 8006938:	4801      	ldr	r0, [pc, #4]	; (8006940 <__sfp_lock_acquire+0x8>)
 800693a:	f000 b8b3 	b.w	8006aa4 <__retarget_lock_acquire_recursive>
 800693e:	bf00      	nop
 8006940:	200002b5 	.word	0x200002b5

08006944 <__sfp_lock_release>:
 8006944:	4801      	ldr	r0, [pc, #4]	; (800694c <__sfp_lock_release+0x8>)
 8006946:	f000 b8ae 	b.w	8006aa6 <__retarget_lock_release_recursive>
 800694a:	bf00      	nop
 800694c:	200002b5 	.word	0x200002b5

08006950 <__sinit_lock_acquire>:
 8006950:	4801      	ldr	r0, [pc, #4]	; (8006958 <__sinit_lock_acquire+0x8>)
 8006952:	f000 b8a7 	b.w	8006aa4 <__retarget_lock_acquire_recursive>
 8006956:	bf00      	nop
 8006958:	200002b6 	.word	0x200002b6

0800695c <__sinit_lock_release>:
 800695c:	4801      	ldr	r0, [pc, #4]	; (8006964 <__sinit_lock_release+0x8>)
 800695e:	f000 b8a2 	b.w	8006aa6 <__retarget_lock_release_recursive>
 8006962:	bf00      	nop
 8006964:	200002b6 	.word	0x200002b6

08006968 <__sinit>:
 8006968:	b510      	push	{r4, lr}
 800696a:	4604      	mov	r4, r0
 800696c:	f7ff fff0 	bl	8006950 <__sinit_lock_acquire>
 8006970:	69a3      	ldr	r3, [r4, #24]
 8006972:	b11b      	cbz	r3, 800697c <__sinit+0x14>
 8006974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006978:	f7ff bff0 	b.w	800695c <__sinit_lock_release>
 800697c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006980:	6523      	str	r3, [r4, #80]	; 0x50
 8006982:	4b13      	ldr	r3, [pc, #76]	; (80069d0 <__sinit+0x68>)
 8006984:	4a13      	ldr	r2, [pc, #76]	; (80069d4 <__sinit+0x6c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	62a2      	str	r2, [r4, #40]	; 0x28
 800698a:	42a3      	cmp	r3, r4
 800698c:	bf04      	itt	eq
 800698e:	2301      	moveq	r3, #1
 8006990:	61a3      	streq	r3, [r4, #24]
 8006992:	4620      	mov	r0, r4
 8006994:	f000 f820 	bl	80069d8 <__sfp>
 8006998:	6060      	str	r0, [r4, #4]
 800699a:	4620      	mov	r0, r4
 800699c:	f000 f81c 	bl	80069d8 <__sfp>
 80069a0:	60a0      	str	r0, [r4, #8]
 80069a2:	4620      	mov	r0, r4
 80069a4:	f000 f818 	bl	80069d8 <__sfp>
 80069a8:	2200      	movs	r2, #0
 80069aa:	60e0      	str	r0, [r4, #12]
 80069ac:	2104      	movs	r1, #4
 80069ae:	6860      	ldr	r0, [r4, #4]
 80069b0:	f7ff ff82 	bl	80068b8 <std>
 80069b4:	68a0      	ldr	r0, [r4, #8]
 80069b6:	2201      	movs	r2, #1
 80069b8:	2109      	movs	r1, #9
 80069ba:	f7ff ff7d 	bl	80068b8 <std>
 80069be:	68e0      	ldr	r0, [r4, #12]
 80069c0:	2202      	movs	r2, #2
 80069c2:	2112      	movs	r1, #18
 80069c4:	f7ff ff78 	bl	80068b8 <std>
 80069c8:	2301      	movs	r3, #1
 80069ca:	61a3      	str	r3, [r4, #24]
 80069cc:	e7d2      	b.n	8006974 <__sinit+0xc>
 80069ce:	bf00      	nop
 80069d0:	08007928 	.word	0x08007928
 80069d4:	08006901 	.word	0x08006901

080069d8 <__sfp>:
 80069d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069da:	4607      	mov	r7, r0
 80069dc:	f7ff ffac 	bl	8006938 <__sfp_lock_acquire>
 80069e0:	4b1e      	ldr	r3, [pc, #120]	; (8006a5c <__sfp+0x84>)
 80069e2:	681e      	ldr	r6, [r3, #0]
 80069e4:	69b3      	ldr	r3, [r6, #24]
 80069e6:	b913      	cbnz	r3, 80069ee <__sfp+0x16>
 80069e8:	4630      	mov	r0, r6
 80069ea:	f7ff ffbd 	bl	8006968 <__sinit>
 80069ee:	3648      	adds	r6, #72	; 0x48
 80069f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80069f4:	3b01      	subs	r3, #1
 80069f6:	d503      	bpl.n	8006a00 <__sfp+0x28>
 80069f8:	6833      	ldr	r3, [r6, #0]
 80069fa:	b30b      	cbz	r3, 8006a40 <__sfp+0x68>
 80069fc:	6836      	ldr	r6, [r6, #0]
 80069fe:	e7f7      	b.n	80069f0 <__sfp+0x18>
 8006a00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a04:	b9d5      	cbnz	r5, 8006a3c <__sfp+0x64>
 8006a06:	4b16      	ldr	r3, [pc, #88]	; (8006a60 <__sfp+0x88>)
 8006a08:	60e3      	str	r3, [r4, #12]
 8006a0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a0e:	6665      	str	r5, [r4, #100]	; 0x64
 8006a10:	f000 f847 	bl	8006aa2 <__retarget_lock_init_recursive>
 8006a14:	f7ff ff96 	bl	8006944 <__sfp_lock_release>
 8006a18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a20:	6025      	str	r5, [r4, #0]
 8006a22:	61a5      	str	r5, [r4, #24]
 8006a24:	2208      	movs	r2, #8
 8006a26:	4629      	mov	r1, r5
 8006a28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a2c:	f7ff fcd8 	bl	80063e0 <memset>
 8006a30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a38:	4620      	mov	r0, r4
 8006a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a3c:	3468      	adds	r4, #104	; 0x68
 8006a3e:	e7d9      	b.n	80069f4 <__sfp+0x1c>
 8006a40:	2104      	movs	r1, #4
 8006a42:	4638      	mov	r0, r7
 8006a44:	f7ff ff62 	bl	800690c <__sfmoreglue>
 8006a48:	4604      	mov	r4, r0
 8006a4a:	6030      	str	r0, [r6, #0]
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d1d5      	bne.n	80069fc <__sfp+0x24>
 8006a50:	f7ff ff78 	bl	8006944 <__sfp_lock_release>
 8006a54:	230c      	movs	r3, #12
 8006a56:	603b      	str	r3, [r7, #0]
 8006a58:	e7ee      	b.n	8006a38 <__sfp+0x60>
 8006a5a:	bf00      	nop
 8006a5c:	08007928 	.word	0x08007928
 8006a60:	ffff0001 	.word	0xffff0001

08006a64 <_fwalk_reent>:
 8006a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a68:	4606      	mov	r6, r0
 8006a6a:	4688      	mov	r8, r1
 8006a6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a70:	2700      	movs	r7, #0
 8006a72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a76:	f1b9 0901 	subs.w	r9, r9, #1
 8006a7a:	d505      	bpl.n	8006a88 <_fwalk_reent+0x24>
 8006a7c:	6824      	ldr	r4, [r4, #0]
 8006a7e:	2c00      	cmp	r4, #0
 8006a80:	d1f7      	bne.n	8006a72 <_fwalk_reent+0xe>
 8006a82:	4638      	mov	r0, r7
 8006a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a88:	89ab      	ldrh	r3, [r5, #12]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d907      	bls.n	8006a9e <_fwalk_reent+0x3a>
 8006a8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a92:	3301      	adds	r3, #1
 8006a94:	d003      	beq.n	8006a9e <_fwalk_reent+0x3a>
 8006a96:	4629      	mov	r1, r5
 8006a98:	4630      	mov	r0, r6
 8006a9a:	47c0      	blx	r8
 8006a9c:	4307      	orrs	r7, r0
 8006a9e:	3568      	adds	r5, #104	; 0x68
 8006aa0:	e7e9      	b.n	8006a76 <_fwalk_reent+0x12>

08006aa2 <__retarget_lock_init_recursive>:
 8006aa2:	4770      	bx	lr

08006aa4 <__retarget_lock_acquire_recursive>:
 8006aa4:	4770      	bx	lr

08006aa6 <__retarget_lock_release_recursive>:
 8006aa6:	4770      	bx	lr

08006aa8 <__swhatbuf_r>:
 8006aa8:	b570      	push	{r4, r5, r6, lr}
 8006aaa:	460e      	mov	r6, r1
 8006aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab0:	2900      	cmp	r1, #0
 8006ab2:	b096      	sub	sp, #88	; 0x58
 8006ab4:	4614      	mov	r4, r2
 8006ab6:	461d      	mov	r5, r3
 8006ab8:	da08      	bge.n	8006acc <__swhatbuf_r+0x24>
 8006aba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	602a      	str	r2, [r5, #0]
 8006ac2:	061a      	lsls	r2, r3, #24
 8006ac4:	d410      	bmi.n	8006ae8 <__swhatbuf_r+0x40>
 8006ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aca:	e00e      	b.n	8006aea <__swhatbuf_r+0x42>
 8006acc:	466a      	mov	r2, sp
 8006ace:	f000 fdf1 	bl	80076b4 <_fstat_r>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	dbf1      	blt.n	8006aba <__swhatbuf_r+0x12>
 8006ad6:	9a01      	ldr	r2, [sp, #4]
 8006ad8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006adc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ae0:	425a      	negs	r2, r3
 8006ae2:	415a      	adcs	r2, r3
 8006ae4:	602a      	str	r2, [r5, #0]
 8006ae6:	e7ee      	b.n	8006ac6 <__swhatbuf_r+0x1e>
 8006ae8:	2340      	movs	r3, #64	; 0x40
 8006aea:	2000      	movs	r0, #0
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	b016      	add	sp, #88	; 0x58
 8006af0:	bd70      	pop	{r4, r5, r6, pc}
	...

08006af4 <__smakebuf_r>:
 8006af4:	898b      	ldrh	r3, [r1, #12]
 8006af6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006af8:	079d      	lsls	r5, r3, #30
 8006afa:	4606      	mov	r6, r0
 8006afc:	460c      	mov	r4, r1
 8006afe:	d507      	bpl.n	8006b10 <__smakebuf_r+0x1c>
 8006b00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	6123      	str	r3, [r4, #16]
 8006b08:	2301      	movs	r3, #1
 8006b0a:	6163      	str	r3, [r4, #20]
 8006b0c:	b002      	add	sp, #8
 8006b0e:	bd70      	pop	{r4, r5, r6, pc}
 8006b10:	ab01      	add	r3, sp, #4
 8006b12:	466a      	mov	r2, sp
 8006b14:	f7ff ffc8 	bl	8006aa8 <__swhatbuf_r>
 8006b18:	9900      	ldr	r1, [sp, #0]
 8006b1a:	4605      	mov	r5, r0
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	f000 f895 	bl	8006c4c <_malloc_r>
 8006b22:	b948      	cbnz	r0, 8006b38 <__smakebuf_r+0x44>
 8006b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b28:	059a      	lsls	r2, r3, #22
 8006b2a:	d4ef      	bmi.n	8006b0c <__smakebuf_r+0x18>
 8006b2c:	f023 0303 	bic.w	r3, r3, #3
 8006b30:	f043 0302 	orr.w	r3, r3, #2
 8006b34:	81a3      	strh	r3, [r4, #12]
 8006b36:	e7e3      	b.n	8006b00 <__smakebuf_r+0xc>
 8006b38:	4b0d      	ldr	r3, [pc, #52]	; (8006b70 <__smakebuf_r+0x7c>)
 8006b3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b3c:	89a3      	ldrh	r3, [r4, #12]
 8006b3e:	6020      	str	r0, [r4, #0]
 8006b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b44:	81a3      	strh	r3, [r4, #12]
 8006b46:	9b00      	ldr	r3, [sp, #0]
 8006b48:	6163      	str	r3, [r4, #20]
 8006b4a:	9b01      	ldr	r3, [sp, #4]
 8006b4c:	6120      	str	r0, [r4, #16]
 8006b4e:	b15b      	cbz	r3, 8006b68 <__smakebuf_r+0x74>
 8006b50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b54:	4630      	mov	r0, r6
 8006b56:	f000 fdbf 	bl	80076d8 <_isatty_r>
 8006b5a:	b128      	cbz	r0, 8006b68 <__smakebuf_r+0x74>
 8006b5c:	89a3      	ldrh	r3, [r4, #12]
 8006b5e:	f023 0303 	bic.w	r3, r3, #3
 8006b62:	f043 0301 	orr.w	r3, r3, #1
 8006b66:	81a3      	strh	r3, [r4, #12]
 8006b68:	89a0      	ldrh	r0, [r4, #12]
 8006b6a:	4305      	orrs	r5, r0
 8006b6c:	81a5      	strh	r5, [r4, #12]
 8006b6e:	e7cd      	b.n	8006b0c <__smakebuf_r+0x18>
 8006b70:	08006901 	.word	0x08006901

08006b74 <_free_r>:
 8006b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b76:	2900      	cmp	r1, #0
 8006b78:	d044      	beq.n	8006c04 <_free_r+0x90>
 8006b7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b7e:	9001      	str	r0, [sp, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f1a1 0404 	sub.w	r4, r1, #4
 8006b86:	bfb8      	it	lt
 8006b88:	18e4      	addlt	r4, r4, r3
 8006b8a:	f000 fdef 	bl	800776c <__malloc_lock>
 8006b8e:	4a1e      	ldr	r2, [pc, #120]	; (8006c08 <_free_r+0x94>)
 8006b90:	9801      	ldr	r0, [sp, #4]
 8006b92:	6813      	ldr	r3, [r2, #0]
 8006b94:	b933      	cbnz	r3, 8006ba4 <_free_r+0x30>
 8006b96:	6063      	str	r3, [r4, #4]
 8006b98:	6014      	str	r4, [r2, #0]
 8006b9a:	b003      	add	sp, #12
 8006b9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ba0:	f000 bdea 	b.w	8007778 <__malloc_unlock>
 8006ba4:	42a3      	cmp	r3, r4
 8006ba6:	d908      	bls.n	8006bba <_free_r+0x46>
 8006ba8:	6825      	ldr	r5, [r4, #0]
 8006baa:	1961      	adds	r1, r4, r5
 8006bac:	428b      	cmp	r3, r1
 8006bae:	bf01      	itttt	eq
 8006bb0:	6819      	ldreq	r1, [r3, #0]
 8006bb2:	685b      	ldreq	r3, [r3, #4]
 8006bb4:	1949      	addeq	r1, r1, r5
 8006bb6:	6021      	streq	r1, [r4, #0]
 8006bb8:	e7ed      	b.n	8006b96 <_free_r+0x22>
 8006bba:	461a      	mov	r2, r3
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	b10b      	cbz	r3, 8006bc4 <_free_r+0x50>
 8006bc0:	42a3      	cmp	r3, r4
 8006bc2:	d9fa      	bls.n	8006bba <_free_r+0x46>
 8006bc4:	6811      	ldr	r1, [r2, #0]
 8006bc6:	1855      	adds	r5, r2, r1
 8006bc8:	42a5      	cmp	r5, r4
 8006bca:	d10b      	bne.n	8006be4 <_free_r+0x70>
 8006bcc:	6824      	ldr	r4, [r4, #0]
 8006bce:	4421      	add	r1, r4
 8006bd0:	1854      	adds	r4, r2, r1
 8006bd2:	42a3      	cmp	r3, r4
 8006bd4:	6011      	str	r1, [r2, #0]
 8006bd6:	d1e0      	bne.n	8006b9a <_free_r+0x26>
 8006bd8:	681c      	ldr	r4, [r3, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	6053      	str	r3, [r2, #4]
 8006bde:	4421      	add	r1, r4
 8006be0:	6011      	str	r1, [r2, #0]
 8006be2:	e7da      	b.n	8006b9a <_free_r+0x26>
 8006be4:	d902      	bls.n	8006bec <_free_r+0x78>
 8006be6:	230c      	movs	r3, #12
 8006be8:	6003      	str	r3, [r0, #0]
 8006bea:	e7d6      	b.n	8006b9a <_free_r+0x26>
 8006bec:	6825      	ldr	r5, [r4, #0]
 8006bee:	1961      	adds	r1, r4, r5
 8006bf0:	428b      	cmp	r3, r1
 8006bf2:	bf04      	itt	eq
 8006bf4:	6819      	ldreq	r1, [r3, #0]
 8006bf6:	685b      	ldreq	r3, [r3, #4]
 8006bf8:	6063      	str	r3, [r4, #4]
 8006bfa:	bf04      	itt	eq
 8006bfc:	1949      	addeq	r1, r1, r5
 8006bfe:	6021      	streq	r1, [r4, #0]
 8006c00:	6054      	str	r4, [r2, #4]
 8006c02:	e7ca      	b.n	8006b9a <_free_r+0x26>
 8006c04:	b003      	add	sp, #12
 8006c06:	bd30      	pop	{r4, r5, pc}
 8006c08:	200002b8 	.word	0x200002b8

08006c0c <sbrk_aligned>:
 8006c0c:	b570      	push	{r4, r5, r6, lr}
 8006c0e:	4e0e      	ldr	r6, [pc, #56]	; (8006c48 <sbrk_aligned+0x3c>)
 8006c10:	460c      	mov	r4, r1
 8006c12:	6831      	ldr	r1, [r6, #0]
 8006c14:	4605      	mov	r5, r0
 8006c16:	b911      	cbnz	r1, 8006c1e <sbrk_aligned+0x12>
 8006c18:	f000 fcd6 	bl	80075c8 <_sbrk_r>
 8006c1c:	6030      	str	r0, [r6, #0]
 8006c1e:	4621      	mov	r1, r4
 8006c20:	4628      	mov	r0, r5
 8006c22:	f000 fcd1 	bl	80075c8 <_sbrk_r>
 8006c26:	1c43      	adds	r3, r0, #1
 8006c28:	d00a      	beq.n	8006c40 <sbrk_aligned+0x34>
 8006c2a:	1cc4      	adds	r4, r0, #3
 8006c2c:	f024 0403 	bic.w	r4, r4, #3
 8006c30:	42a0      	cmp	r0, r4
 8006c32:	d007      	beq.n	8006c44 <sbrk_aligned+0x38>
 8006c34:	1a21      	subs	r1, r4, r0
 8006c36:	4628      	mov	r0, r5
 8006c38:	f000 fcc6 	bl	80075c8 <_sbrk_r>
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	d101      	bne.n	8006c44 <sbrk_aligned+0x38>
 8006c40:	f04f 34ff 	mov.w	r4, #4294967295
 8006c44:	4620      	mov	r0, r4
 8006c46:	bd70      	pop	{r4, r5, r6, pc}
 8006c48:	200002bc 	.word	0x200002bc

08006c4c <_malloc_r>:
 8006c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c50:	1ccd      	adds	r5, r1, #3
 8006c52:	f025 0503 	bic.w	r5, r5, #3
 8006c56:	3508      	adds	r5, #8
 8006c58:	2d0c      	cmp	r5, #12
 8006c5a:	bf38      	it	cc
 8006c5c:	250c      	movcc	r5, #12
 8006c5e:	2d00      	cmp	r5, #0
 8006c60:	4607      	mov	r7, r0
 8006c62:	db01      	blt.n	8006c68 <_malloc_r+0x1c>
 8006c64:	42a9      	cmp	r1, r5
 8006c66:	d905      	bls.n	8006c74 <_malloc_r+0x28>
 8006c68:	230c      	movs	r3, #12
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	2600      	movs	r6, #0
 8006c6e:	4630      	mov	r0, r6
 8006c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c74:	4e2e      	ldr	r6, [pc, #184]	; (8006d30 <_malloc_r+0xe4>)
 8006c76:	f000 fd79 	bl	800776c <__malloc_lock>
 8006c7a:	6833      	ldr	r3, [r6, #0]
 8006c7c:	461c      	mov	r4, r3
 8006c7e:	bb34      	cbnz	r4, 8006cce <_malloc_r+0x82>
 8006c80:	4629      	mov	r1, r5
 8006c82:	4638      	mov	r0, r7
 8006c84:	f7ff ffc2 	bl	8006c0c <sbrk_aligned>
 8006c88:	1c43      	adds	r3, r0, #1
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	d14d      	bne.n	8006d2a <_malloc_r+0xde>
 8006c8e:	6834      	ldr	r4, [r6, #0]
 8006c90:	4626      	mov	r6, r4
 8006c92:	2e00      	cmp	r6, #0
 8006c94:	d140      	bne.n	8006d18 <_malloc_r+0xcc>
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	4631      	mov	r1, r6
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	eb04 0803 	add.w	r8, r4, r3
 8006ca0:	f000 fc92 	bl	80075c8 <_sbrk_r>
 8006ca4:	4580      	cmp	r8, r0
 8006ca6:	d13a      	bne.n	8006d1e <_malloc_r+0xd2>
 8006ca8:	6821      	ldr	r1, [r4, #0]
 8006caa:	3503      	adds	r5, #3
 8006cac:	1a6d      	subs	r5, r5, r1
 8006cae:	f025 0503 	bic.w	r5, r5, #3
 8006cb2:	3508      	adds	r5, #8
 8006cb4:	2d0c      	cmp	r5, #12
 8006cb6:	bf38      	it	cc
 8006cb8:	250c      	movcc	r5, #12
 8006cba:	4629      	mov	r1, r5
 8006cbc:	4638      	mov	r0, r7
 8006cbe:	f7ff ffa5 	bl	8006c0c <sbrk_aligned>
 8006cc2:	3001      	adds	r0, #1
 8006cc4:	d02b      	beq.n	8006d1e <_malloc_r+0xd2>
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	442b      	add	r3, r5
 8006cca:	6023      	str	r3, [r4, #0]
 8006ccc:	e00e      	b.n	8006cec <_malloc_r+0xa0>
 8006cce:	6822      	ldr	r2, [r4, #0]
 8006cd0:	1b52      	subs	r2, r2, r5
 8006cd2:	d41e      	bmi.n	8006d12 <_malloc_r+0xc6>
 8006cd4:	2a0b      	cmp	r2, #11
 8006cd6:	d916      	bls.n	8006d06 <_malloc_r+0xba>
 8006cd8:	1961      	adds	r1, r4, r5
 8006cda:	42a3      	cmp	r3, r4
 8006cdc:	6025      	str	r5, [r4, #0]
 8006cde:	bf18      	it	ne
 8006ce0:	6059      	strne	r1, [r3, #4]
 8006ce2:	6863      	ldr	r3, [r4, #4]
 8006ce4:	bf08      	it	eq
 8006ce6:	6031      	streq	r1, [r6, #0]
 8006ce8:	5162      	str	r2, [r4, r5]
 8006cea:	604b      	str	r3, [r1, #4]
 8006cec:	4638      	mov	r0, r7
 8006cee:	f104 060b 	add.w	r6, r4, #11
 8006cf2:	f000 fd41 	bl	8007778 <__malloc_unlock>
 8006cf6:	f026 0607 	bic.w	r6, r6, #7
 8006cfa:	1d23      	adds	r3, r4, #4
 8006cfc:	1af2      	subs	r2, r6, r3
 8006cfe:	d0b6      	beq.n	8006c6e <_malloc_r+0x22>
 8006d00:	1b9b      	subs	r3, r3, r6
 8006d02:	50a3      	str	r3, [r4, r2]
 8006d04:	e7b3      	b.n	8006c6e <_malloc_r+0x22>
 8006d06:	6862      	ldr	r2, [r4, #4]
 8006d08:	42a3      	cmp	r3, r4
 8006d0a:	bf0c      	ite	eq
 8006d0c:	6032      	streq	r2, [r6, #0]
 8006d0e:	605a      	strne	r2, [r3, #4]
 8006d10:	e7ec      	b.n	8006cec <_malloc_r+0xa0>
 8006d12:	4623      	mov	r3, r4
 8006d14:	6864      	ldr	r4, [r4, #4]
 8006d16:	e7b2      	b.n	8006c7e <_malloc_r+0x32>
 8006d18:	4634      	mov	r4, r6
 8006d1a:	6876      	ldr	r6, [r6, #4]
 8006d1c:	e7b9      	b.n	8006c92 <_malloc_r+0x46>
 8006d1e:	230c      	movs	r3, #12
 8006d20:	603b      	str	r3, [r7, #0]
 8006d22:	4638      	mov	r0, r7
 8006d24:	f000 fd28 	bl	8007778 <__malloc_unlock>
 8006d28:	e7a1      	b.n	8006c6e <_malloc_r+0x22>
 8006d2a:	6025      	str	r5, [r4, #0]
 8006d2c:	e7de      	b.n	8006cec <_malloc_r+0xa0>
 8006d2e:	bf00      	nop
 8006d30:	200002b8 	.word	0x200002b8

08006d34 <__ssputs_r>:
 8006d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d38:	688e      	ldr	r6, [r1, #8]
 8006d3a:	429e      	cmp	r6, r3
 8006d3c:	4682      	mov	sl, r0
 8006d3e:	460c      	mov	r4, r1
 8006d40:	4690      	mov	r8, r2
 8006d42:	461f      	mov	r7, r3
 8006d44:	d838      	bhi.n	8006db8 <__ssputs_r+0x84>
 8006d46:	898a      	ldrh	r2, [r1, #12]
 8006d48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d4c:	d032      	beq.n	8006db4 <__ssputs_r+0x80>
 8006d4e:	6825      	ldr	r5, [r4, #0]
 8006d50:	6909      	ldr	r1, [r1, #16]
 8006d52:	eba5 0901 	sub.w	r9, r5, r1
 8006d56:	6965      	ldr	r5, [r4, #20]
 8006d58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d60:	3301      	adds	r3, #1
 8006d62:	444b      	add	r3, r9
 8006d64:	106d      	asrs	r5, r5, #1
 8006d66:	429d      	cmp	r5, r3
 8006d68:	bf38      	it	cc
 8006d6a:	461d      	movcc	r5, r3
 8006d6c:	0553      	lsls	r3, r2, #21
 8006d6e:	d531      	bpl.n	8006dd4 <__ssputs_r+0xa0>
 8006d70:	4629      	mov	r1, r5
 8006d72:	f7ff ff6b 	bl	8006c4c <_malloc_r>
 8006d76:	4606      	mov	r6, r0
 8006d78:	b950      	cbnz	r0, 8006d90 <__ssputs_r+0x5c>
 8006d7a:	230c      	movs	r3, #12
 8006d7c:	f8ca 3000 	str.w	r3, [sl]
 8006d80:	89a3      	ldrh	r3, [r4, #12]
 8006d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d86:	81a3      	strh	r3, [r4, #12]
 8006d88:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d90:	6921      	ldr	r1, [r4, #16]
 8006d92:	464a      	mov	r2, r9
 8006d94:	f000 fcc2 	bl	800771c <memcpy>
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da2:	81a3      	strh	r3, [r4, #12]
 8006da4:	6126      	str	r6, [r4, #16]
 8006da6:	6165      	str	r5, [r4, #20]
 8006da8:	444e      	add	r6, r9
 8006daa:	eba5 0509 	sub.w	r5, r5, r9
 8006dae:	6026      	str	r6, [r4, #0]
 8006db0:	60a5      	str	r5, [r4, #8]
 8006db2:	463e      	mov	r6, r7
 8006db4:	42be      	cmp	r6, r7
 8006db6:	d900      	bls.n	8006dba <__ssputs_r+0x86>
 8006db8:	463e      	mov	r6, r7
 8006dba:	6820      	ldr	r0, [r4, #0]
 8006dbc:	4632      	mov	r2, r6
 8006dbe:	4641      	mov	r1, r8
 8006dc0:	f000 fcba 	bl	8007738 <memmove>
 8006dc4:	68a3      	ldr	r3, [r4, #8]
 8006dc6:	1b9b      	subs	r3, r3, r6
 8006dc8:	60a3      	str	r3, [r4, #8]
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	4433      	add	r3, r6
 8006dce:	6023      	str	r3, [r4, #0]
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	e7db      	b.n	8006d8c <__ssputs_r+0x58>
 8006dd4:	462a      	mov	r2, r5
 8006dd6:	f000 fcd5 	bl	8007784 <_realloc_r>
 8006dda:	4606      	mov	r6, r0
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d1e1      	bne.n	8006da4 <__ssputs_r+0x70>
 8006de0:	6921      	ldr	r1, [r4, #16]
 8006de2:	4650      	mov	r0, sl
 8006de4:	f7ff fec6 	bl	8006b74 <_free_r>
 8006de8:	e7c7      	b.n	8006d7a <__ssputs_r+0x46>
	...

08006dec <_svfiprintf_r>:
 8006dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df0:	4698      	mov	r8, r3
 8006df2:	898b      	ldrh	r3, [r1, #12]
 8006df4:	061b      	lsls	r3, r3, #24
 8006df6:	b09d      	sub	sp, #116	; 0x74
 8006df8:	4607      	mov	r7, r0
 8006dfa:	460d      	mov	r5, r1
 8006dfc:	4614      	mov	r4, r2
 8006dfe:	d50e      	bpl.n	8006e1e <_svfiprintf_r+0x32>
 8006e00:	690b      	ldr	r3, [r1, #16]
 8006e02:	b963      	cbnz	r3, 8006e1e <_svfiprintf_r+0x32>
 8006e04:	2140      	movs	r1, #64	; 0x40
 8006e06:	f7ff ff21 	bl	8006c4c <_malloc_r>
 8006e0a:	6028      	str	r0, [r5, #0]
 8006e0c:	6128      	str	r0, [r5, #16]
 8006e0e:	b920      	cbnz	r0, 8006e1a <_svfiprintf_r+0x2e>
 8006e10:	230c      	movs	r3, #12
 8006e12:	603b      	str	r3, [r7, #0]
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295
 8006e18:	e0d1      	b.n	8006fbe <_svfiprintf_r+0x1d2>
 8006e1a:	2340      	movs	r3, #64	; 0x40
 8006e1c:	616b      	str	r3, [r5, #20]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	9309      	str	r3, [sp, #36]	; 0x24
 8006e22:	2320      	movs	r3, #32
 8006e24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e28:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e2c:	2330      	movs	r3, #48	; 0x30
 8006e2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006fd8 <_svfiprintf_r+0x1ec>
 8006e32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e36:	f04f 0901 	mov.w	r9, #1
 8006e3a:	4623      	mov	r3, r4
 8006e3c:	469a      	mov	sl, r3
 8006e3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e42:	b10a      	cbz	r2, 8006e48 <_svfiprintf_r+0x5c>
 8006e44:	2a25      	cmp	r2, #37	; 0x25
 8006e46:	d1f9      	bne.n	8006e3c <_svfiprintf_r+0x50>
 8006e48:	ebba 0b04 	subs.w	fp, sl, r4
 8006e4c:	d00b      	beq.n	8006e66 <_svfiprintf_r+0x7a>
 8006e4e:	465b      	mov	r3, fp
 8006e50:	4622      	mov	r2, r4
 8006e52:	4629      	mov	r1, r5
 8006e54:	4638      	mov	r0, r7
 8006e56:	f7ff ff6d 	bl	8006d34 <__ssputs_r>
 8006e5a:	3001      	adds	r0, #1
 8006e5c:	f000 80aa 	beq.w	8006fb4 <_svfiprintf_r+0x1c8>
 8006e60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e62:	445a      	add	r2, fp
 8006e64:	9209      	str	r2, [sp, #36]	; 0x24
 8006e66:	f89a 3000 	ldrb.w	r3, [sl]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f000 80a2 	beq.w	8006fb4 <_svfiprintf_r+0x1c8>
 8006e70:	2300      	movs	r3, #0
 8006e72:	f04f 32ff 	mov.w	r2, #4294967295
 8006e76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e7a:	f10a 0a01 	add.w	sl, sl, #1
 8006e7e:	9304      	str	r3, [sp, #16]
 8006e80:	9307      	str	r3, [sp, #28]
 8006e82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e86:	931a      	str	r3, [sp, #104]	; 0x68
 8006e88:	4654      	mov	r4, sl
 8006e8a:	2205      	movs	r2, #5
 8006e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e90:	4851      	ldr	r0, [pc, #324]	; (8006fd8 <_svfiprintf_r+0x1ec>)
 8006e92:	f7f9 f9b5 	bl	8000200 <memchr>
 8006e96:	9a04      	ldr	r2, [sp, #16]
 8006e98:	b9d8      	cbnz	r0, 8006ed2 <_svfiprintf_r+0xe6>
 8006e9a:	06d0      	lsls	r0, r2, #27
 8006e9c:	bf44      	itt	mi
 8006e9e:	2320      	movmi	r3, #32
 8006ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ea4:	0711      	lsls	r1, r2, #28
 8006ea6:	bf44      	itt	mi
 8006ea8:	232b      	movmi	r3, #43	; 0x2b
 8006eaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eae:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8006eb4:	d015      	beq.n	8006ee2 <_svfiprintf_r+0xf6>
 8006eb6:	9a07      	ldr	r2, [sp, #28]
 8006eb8:	4654      	mov	r4, sl
 8006eba:	2000      	movs	r0, #0
 8006ebc:	f04f 0c0a 	mov.w	ip, #10
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ec6:	3b30      	subs	r3, #48	; 0x30
 8006ec8:	2b09      	cmp	r3, #9
 8006eca:	d94e      	bls.n	8006f6a <_svfiprintf_r+0x17e>
 8006ecc:	b1b0      	cbz	r0, 8006efc <_svfiprintf_r+0x110>
 8006ece:	9207      	str	r2, [sp, #28]
 8006ed0:	e014      	b.n	8006efc <_svfiprintf_r+0x110>
 8006ed2:	eba0 0308 	sub.w	r3, r0, r8
 8006ed6:	fa09 f303 	lsl.w	r3, r9, r3
 8006eda:	4313      	orrs	r3, r2
 8006edc:	9304      	str	r3, [sp, #16]
 8006ede:	46a2      	mov	sl, r4
 8006ee0:	e7d2      	b.n	8006e88 <_svfiprintf_r+0x9c>
 8006ee2:	9b03      	ldr	r3, [sp, #12]
 8006ee4:	1d19      	adds	r1, r3, #4
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	9103      	str	r1, [sp, #12]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	bfbb      	ittet	lt
 8006eee:	425b      	neglt	r3, r3
 8006ef0:	f042 0202 	orrlt.w	r2, r2, #2
 8006ef4:	9307      	strge	r3, [sp, #28]
 8006ef6:	9307      	strlt	r3, [sp, #28]
 8006ef8:	bfb8      	it	lt
 8006efa:	9204      	strlt	r2, [sp, #16]
 8006efc:	7823      	ldrb	r3, [r4, #0]
 8006efe:	2b2e      	cmp	r3, #46	; 0x2e
 8006f00:	d10c      	bne.n	8006f1c <_svfiprintf_r+0x130>
 8006f02:	7863      	ldrb	r3, [r4, #1]
 8006f04:	2b2a      	cmp	r3, #42	; 0x2a
 8006f06:	d135      	bne.n	8006f74 <_svfiprintf_r+0x188>
 8006f08:	9b03      	ldr	r3, [sp, #12]
 8006f0a:	1d1a      	adds	r2, r3, #4
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	9203      	str	r2, [sp, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	bfb8      	it	lt
 8006f14:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f18:	3402      	adds	r4, #2
 8006f1a:	9305      	str	r3, [sp, #20]
 8006f1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006fe8 <_svfiprintf_r+0x1fc>
 8006f20:	7821      	ldrb	r1, [r4, #0]
 8006f22:	2203      	movs	r2, #3
 8006f24:	4650      	mov	r0, sl
 8006f26:	f7f9 f96b 	bl	8000200 <memchr>
 8006f2a:	b140      	cbz	r0, 8006f3e <_svfiprintf_r+0x152>
 8006f2c:	2340      	movs	r3, #64	; 0x40
 8006f2e:	eba0 000a 	sub.w	r0, r0, sl
 8006f32:	fa03 f000 	lsl.w	r0, r3, r0
 8006f36:	9b04      	ldr	r3, [sp, #16]
 8006f38:	4303      	orrs	r3, r0
 8006f3a:	3401      	adds	r4, #1
 8006f3c:	9304      	str	r3, [sp, #16]
 8006f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f42:	4826      	ldr	r0, [pc, #152]	; (8006fdc <_svfiprintf_r+0x1f0>)
 8006f44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f48:	2206      	movs	r2, #6
 8006f4a:	f7f9 f959 	bl	8000200 <memchr>
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	d038      	beq.n	8006fc4 <_svfiprintf_r+0x1d8>
 8006f52:	4b23      	ldr	r3, [pc, #140]	; (8006fe0 <_svfiprintf_r+0x1f4>)
 8006f54:	bb1b      	cbnz	r3, 8006f9e <_svfiprintf_r+0x1b2>
 8006f56:	9b03      	ldr	r3, [sp, #12]
 8006f58:	3307      	adds	r3, #7
 8006f5a:	f023 0307 	bic.w	r3, r3, #7
 8006f5e:	3308      	adds	r3, #8
 8006f60:	9303      	str	r3, [sp, #12]
 8006f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f64:	4433      	add	r3, r6
 8006f66:	9309      	str	r3, [sp, #36]	; 0x24
 8006f68:	e767      	b.n	8006e3a <_svfiprintf_r+0x4e>
 8006f6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f6e:	460c      	mov	r4, r1
 8006f70:	2001      	movs	r0, #1
 8006f72:	e7a5      	b.n	8006ec0 <_svfiprintf_r+0xd4>
 8006f74:	2300      	movs	r3, #0
 8006f76:	3401      	adds	r4, #1
 8006f78:	9305      	str	r3, [sp, #20]
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	f04f 0c0a 	mov.w	ip, #10
 8006f80:	4620      	mov	r0, r4
 8006f82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f86:	3a30      	subs	r2, #48	; 0x30
 8006f88:	2a09      	cmp	r2, #9
 8006f8a:	d903      	bls.n	8006f94 <_svfiprintf_r+0x1a8>
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d0c5      	beq.n	8006f1c <_svfiprintf_r+0x130>
 8006f90:	9105      	str	r1, [sp, #20]
 8006f92:	e7c3      	b.n	8006f1c <_svfiprintf_r+0x130>
 8006f94:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f98:	4604      	mov	r4, r0
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e7f0      	b.n	8006f80 <_svfiprintf_r+0x194>
 8006f9e:	ab03      	add	r3, sp, #12
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	462a      	mov	r2, r5
 8006fa4:	4b0f      	ldr	r3, [pc, #60]	; (8006fe4 <_svfiprintf_r+0x1f8>)
 8006fa6:	a904      	add	r1, sp, #16
 8006fa8:	4638      	mov	r0, r7
 8006faa:	f3af 8000 	nop.w
 8006fae:	1c42      	adds	r2, r0, #1
 8006fb0:	4606      	mov	r6, r0
 8006fb2:	d1d6      	bne.n	8006f62 <_svfiprintf_r+0x176>
 8006fb4:	89ab      	ldrh	r3, [r5, #12]
 8006fb6:	065b      	lsls	r3, r3, #25
 8006fb8:	f53f af2c 	bmi.w	8006e14 <_svfiprintf_r+0x28>
 8006fbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fbe:	b01d      	add	sp, #116	; 0x74
 8006fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc4:	ab03      	add	r3, sp, #12
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	462a      	mov	r2, r5
 8006fca:	4b06      	ldr	r3, [pc, #24]	; (8006fe4 <_svfiprintf_r+0x1f8>)
 8006fcc:	a904      	add	r1, sp, #16
 8006fce:	4638      	mov	r0, r7
 8006fd0:	f000 f9d4 	bl	800737c <_printf_i>
 8006fd4:	e7eb      	b.n	8006fae <_svfiprintf_r+0x1c2>
 8006fd6:	bf00      	nop
 8006fd8:	0800798c 	.word	0x0800798c
 8006fdc:	08007996 	.word	0x08007996
 8006fe0:	00000000 	.word	0x00000000
 8006fe4:	08006d35 	.word	0x08006d35
 8006fe8:	08007992 	.word	0x08007992

08006fec <__sfputc_r>:
 8006fec:	6893      	ldr	r3, [r2, #8]
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	b410      	push	{r4}
 8006ff4:	6093      	str	r3, [r2, #8]
 8006ff6:	da08      	bge.n	800700a <__sfputc_r+0x1e>
 8006ff8:	6994      	ldr	r4, [r2, #24]
 8006ffa:	42a3      	cmp	r3, r4
 8006ffc:	db01      	blt.n	8007002 <__sfputc_r+0x16>
 8006ffe:	290a      	cmp	r1, #10
 8007000:	d103      	bne.n	800700a <__sfputc_r+0x1e>
 8007002:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007006:	f7ff bad5 	b.w	80065b4 <__swbuf_r>
 800700a:	6813      	ldr	r3, [r2, #0]
 800700c:	1c58      	adds	r0, r3, #1
 800700e:	6010      	str	r0, [r2, #0]
 8007010:	7019      	strb	r1, [r3, #0]
 8007012:	4608      	mov	r0, r1
 8007014:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007018:	4770      	bx	lr

0800701a <__sfputs_r>:
 800701a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701c:	4606      	mov	r6, r0
 800701e:	460f      	mov	r7, r1
 8007020:	4614      	mov	r4, r2
 8007022:	18d5      	adds	r5, r2, r3
 8007024:	42ac      	cmp	r4, r5
 8007026:	d101      	bne.n	800702c <__sfputs_r+0x12>
 8007028:	2000      	movs	r0, #0
 800702a:	e007      	b.n	800703c <__sfputs_r+0x22>
 800702c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007030:	463a      	mov	r2, r7
 8007032:	4630      	mov	r0, r6
 8007034:	f7ff ffda 	bl	8006fec <__sfputc_r>
 8007038:	1c43      	adds	r3, r0, #1
 800703a:	d1f3      	bne.n	8007024 <__sfputs_r+0xa>
 800703c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007040 <_vfiprintf_r>:
 8007040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007044:	460d      	mov	r5, r1
 8007046:	b09d      	sub	sp, #116	; 0x74
 8007048:	4614      	mov	r4, r2
 800704a:	4698      	mov	r8, r3
 800704c:	4606      	mov	r6, r0
 800704e:	b118      	cbz	r0, 8007058 <_vfiprintf_r+0x18>
 8007050:	6983      	ldr	r3, [r0, #24]
 8007052:	b90b      	cbnz	r3, 8007058 <_vfiprintf_r+0x18>
 8007054:	f7ff fc88 	bl	8006968 <__sinit>
 8007058:	4b89      	ldr	r3, [pc, #548]	; (8007280 <_vfiprintf_r+0x240>)
 800705a:	429d      	cmp	r5, r3
 800705c:	d11b      	bne.n	8007096 <_vfiprintf_r+0x56>
 800705e:	6875      	ldr	r5, [r6, #4]
 8007060:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007062:	07d9      	lsls	r1, r3, #31
 8007064:	d405      	bmi.n	8007072 <_vfiprintf_r+0x32>
 8007066:	89ab      	ldrh	r3, [r5, #12]
 8007068:	059a      	lsls	r2, r3, #22
 800706a:	d402      	bmi.n	8007072 <_vfiprintf_r+0x32>
 800706c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800706e:	f7ff fd19 	bl	8006aa4 <__retarget_lock_acquire_recursive>
 8007072:	89ab      	ldrh	r3, [r5, #12]
 8007074:	071b      	lsls	r3, r3, #28
 8007076:	d501      	bpl.n	800707c <_vfiprintf_r+0x3c>
 8007078:	692b      	ldr	r3, [r5, #16]
 800707a:	b9eb      	cbnz	r3, 80070b8 <_vfiprintf_r+0x78>
 800707c:	4629      	mov	r1, r5
 800707e:	4630      	mov	r0, r6
 8007080:	f7ff faea 	bl	8006658 <__swsetup_r>
 8007084:	b1c0      	cbz	r0, 80070b8 <_vfiprintf_r+0x78>
 8007086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007088:	07dc      	lsls	r4, r3, #31
 800708a:	d50e      	bpl.n	80070aa <_vfiprintf_r+0x6a>
 800708c:	f04f 30ff 	mov.w	r0, #4294967295
 8007090:	b01d      	add	sp, #116	; 0x74
 8007092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007096:	4b7b      	ldr	r3, [pc, #492]	; (8007284 <_vfiprintf_r+0x244>)
 8007098:	429d      	cmp	r5, r3
 800709a:	d101      	bne.n	80070a0 <_vfiprintf_r+0x60>
 800709c:	68b5      	ldr	r5, [r6, #8]
 800709e:	e7df      	b.n	8007060 <_vfiprintf_r+0x20>
 80070a0:	4b79      	ldr	r3, [pc, #484]	; (8007288 <_vfiprintf_r+0x248>)
 80070a2:	429d      	cmp	r5, r3
 80070a4:	bf08      	it	eq
 80070a6:	68f5      	ldreq	r5, [r6, #12]
 80070a8:	e7da      	b.n	8007060 <_vfiprintf_r+0x20>
 80070aa:	89ab      	ldrh	r3, [r5, #12]
 80070ac:	0598      	lsls	r0, r3, #22
 80070ae:	d4ed      	bmi.n	800708c <_vfiprintf_r+0x4c>
 80070b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070b2:	f7ff fcf8 	bl	8006aa6 <__retarget_lock_release_recursive>
 80070b6:	e7e9      	b.n	800708c <_vfiprintf_r+0x4c>
 80070b8:	2300      	movs	r3, #0
 80070ba:	9309      	str	r3, [sp, #36]	; 0x24
 80070bc:	2320      	movs	r3, #32
 80070be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80070c6:	2330      	movs	r3, #48	; 0x30
 80070c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800728c <_vfiprintf_r+0x24c>
 80070cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070d0:	f04f 0901 	mov.w	r9, #1
 80070d4:	4623      	mov	r3, r4
 80070d6:	469a      	mov	sl, r3
 80070d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070dc:	b10a      	cbz	r2, 80070e2 <_vfiprintf_r+0xa2>
 80070de:	2a25      	cmp	r2, #37	; 0x25
 80070e0:	d1f9      	bne.n	80070d6 <_vfiprintf_r+0x96>
 80070e2:	ebba 0b04 	subs.w	fp, sl, r4
 80070e6:	d00b      	beq.n	8007100 <_vfiprintf_r+0xc0>
 80070e8:	465b      	mov	r3, fp
 80070ea:	4622      	mov	r2, r4
 80070ec:	4629      	mov	r1, r5
 80070ee:	4630      	mov	r0, r6
 80070f0:	f7ff ff93 	bl	800701a <__sfputs_r>
 80070f4:	3001      	adds	r0, #1
 80070f6:	f000 80aa 	beq.w	800724e <_vfiprintf_r+0x20e>
 80070fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070fc:	445a      	add	r2, fp
 80070fe:	9209      	str	r2, [sp, #36]	; 0x24
 8007100:	f89a 3000 	ldrb.w	r3, [sl]
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 80a2 	beq.w	800724e <_vfiprintf_r+0x20e>
 800710a:	2300      	movs	r3, #0
 800710c:	f04f 32ff 	mov.w	r2, #4294967295
 8007110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007114:	f10a 0a01 	add.w	sl, sl, #1
 8007118:	9304      	str	r3, [sp, #16]
 800711a:	9307      	str	r3, [sp, #28]
 800711c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007120:	931a      	str	r3, [sp, #104]	; 0x68
 8007122:	4654      	mov	r4, sl
 8007124:	2205      	movs	r2, #5
 8007126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800712a:	4858      	ldr	r0, [pc, #352]	; (800728c <_vfiprintf_r+0x24c>)
 800712c:	f7f9 f868 	bl	8000200 <memchr>
 8007130:	9a04      	ldr	r2, [sp, #16]
 8007132:	b9d8      	cbnz	r0, 800716c <_vfiprintf_r+0x12c>
 8007134:	06d1      	lsls	r1, r2, #27
 8007136:	bf44      	itt	mi
 8007138:	2320      	movmi	r3, #32
 800713a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800713e:	0713      	lsls	r3, r2, #28
 8007140:	bf44      	itt	mi
 8007142:	232b      	movmi	r3, #43	; 0x2b
 8007144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007148:	f89a 3000 	ldrb.w	r3, [sl]
 800714c:	2b2a      	cmp	r3, #42	; 0x2a
 800714e:	d015      	beq.n	800717c <_vfiprintf_r+0x13c>
 8007150:	9a07      	ldr	r2, [sp, #28]
 8007152:	4654      	mov	r4, sl
 8007154:	2000      	movs	r0, #0
 8007156:	f04f 0c0a 	mov.w	ip, #10
 800715a:	4621      	mov	r1, r4
 800715c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007160:	3b30      	subs	r3, #48	; 0x30
 8007162:	2b09      	cmp	r3, #9
 8007164:	d94e      	bls.n	8007204 <_vfiprintf_r+0x1c4>
 8007166:	b1b0      	cbz	r0, 8007196 <_vfiprintf_r+0x156>
 8007168:	9207      	str	r2, [sp, #28]
 800716a:	e014      	b.n	8007196 <_vfiprintf_r+0x156>
 800716c:	eba0 0308 	sub.w	r3, r0, r8
 8007170:	fa09 f303 	lsl.w	r3, r9, r3
 8007174:	4313      	orrs	r3, r2
 8007176:	9304      	str	r3, [sp, #16]
 8007178:	46a2      	mov	sl, r4
 800717a:	e7d2      	b.n	8007122 <_vfiprintf_r+0xe2>
 800717c:	9b03      	ldr	r3, [sp, #12]
 800717e:	1d19      	adds	r1, r3, #4
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	9103      	str	r1, [sp, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	bfbb      	ittet	lt
 8007188:	425b      	neglt	r3, r3
 800718a:	f042 0202 	orrlt.w	r2, r2, #2
 800718e:	9307      	strge	r3, [sp, #28]
 8007190:	9307      	strlt	r3, [sp, #28]
 8007192:	bfb8      	it	lt
 8007194:	9204      	strlt	r2, [sp, #16]
 8007196:	7823      	ldrb	r3, [r4, #0]
 8007198:	2b2e      	cmp	r3, #46	; 0x2e
 800719a:	d10c      	bne.n	80071b6 <_vfiprintf_r+0x176>
 800719c:	7863      	ldrb	r3, [r4, #1]
 800719e:	2b2a      	cmp	r3, #42	; 0x2a
 80071a0:	d135      	bne.n	800720e <_vfiprintf_r+0x1ce>
 80071a2:	9b03      	ldr	r3, [sp, #12]
 80071a4:	1d1a      	adds	r2, r3, #4
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	9203      	str	r2, [sp, #12]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	bfb8      	it	lt
 80071ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80071b2:	3402      	adds	r4, #2
 80071b4:	9305      	str	r3, [sp, #20]
 80071b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800729c <_vfiprintf_r+0x25c>
 80071ba:	7821      	ldrb	r1, [r4, #0]
 80071bc:	2203      	movs	r2, #3
 80071be:	4650      	mov	r0, sl
 80071c0:	f7f9 f81e 	bl	8000200 <memchr>
 80071c4:	b140      	cbz	r0, 80071d8 <_vfiprintf_r+0x198>
 80071c6:	2340      	movs	r3, #64	; 0x40
 80071c8:	eba0 000a 	sub.w	r0, r0, sl
 80071cc:	fa03 f000 	lsl.w	r0, r3, r0
 80071d0:	9b04      	ldr	r3, [sp, #16]
 80071d2:	4303      	orrs	r3, r0
 80071d4:	3401      	adds	r4, #1
 80071d6:	9304      	str	r3, [sp, #16]
 80071d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071dc:	482c      	ldr	r0, [pc, #176]	; (8007290 <_vfiprintf_r+0x250>)
 80071de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071e2:	2206      	movs	r2, #6
 80071e4:	f7f9 f80c 	bl	8000200 <memchr>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d03f      	beq.n	800726c <_vfiprintf_r+0x22c>
 80071ec:	4b29      	ldr	r3, [pc, #164]	; (8007294 <_vfiprintf_r+0x254>)
 80071ee:	bb1b      	cbnz	r3, 8007238 <_vfiprintf_r+0x1f8>
 80071f0:	9b03      	ldr	r3, [sp, #12]
 80071f2:	3307      	adds	r3, #7
 80071f4:	f023 0307 	bic.w	r3, r3, #7
 80071f8:	3308      	adds	r3, #8
 80071fa:	9303      	str	r3, [sp, #12]
 80071fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071fe:	443b      	add	r3, r7
 8007200:	9309      	str	r3, [sp, #36]	; 0x24
 8007202:	e767      	b.n	80070d4 <_vfiprintf_r+0x94>
 8007204:	fb0c 3202 	mla	r2, ip, r2, r3
 8007208:	460c      	mov	r4, r1
 800720a:	2001      	movs	r0, #1
 800720c:	e7a5      	b.n	800715a <_vfiprintf_r+0x11a>
 800720e:	2300      	movs	r3, #0
 8007210:	3401      	adds	r4, #1
 8007212:	9305      	str	r3, [sp, #20]
 8007214:	4619      	mov	r1, r3
 8007216:	f04f 0c0a 	mov.w	ip, #10
 800721a:	4620      	mov	r0, r4
 800721c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007220:	3a30      	subs	r2, #48	; 0x30
 8007222:	2a09      	cmp	r2, #9
 8007224:	d903      	bls.n	800722e <_vfiprintf_r+0x1ee>
 8007226:	2b00      	cmp	r3, #0
 8007228:	d0c5      	beq.n	80071b6 <_vfiprintf_r+0x176>
 800722a:	9105      	str	r1, [sp, #20]
 800722c:	e7c3      	b.n	80071b6 <_vfiprintf_r+0x176>
 800722e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007232:	4604      	mov	r4, r0
 8007234:	2301      	movs	r3, #1
 8007236:	e7f0      	b.n	800721a <_vfiprintf_r+0x1da>
 8007238:	ab03      	add	r3, sp, #12
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	462a      	mov	r2, r5
 800723e:	4b16      	ldr	r3, [pc, #88]	; (8007298 <_vfiprintf_r+0x258>)
 8007240:	a904      	add	r1, sp, #16
 8007242:	4630      	mov	r0, r6
 8007244:	f3af 8000 	nop.w
 8007248:	4607      	mov	r7, r0
 800724a:	1c78      	adds	r0, r7, #1
 800724c:	d1d6      	bne.n	80071fc <_vfiprintf_r+0x1bc>
 800724e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007250:	07d9      	lsls	r1, r3, #31
 8007252:	d405      	bmi.n	8007260 <_vfiprintf_r+0x220>
 8007254:	89ab      	ldrh	r3, [r5, #12]
 8007256:	059a      	lsls	r2, r3, #22
 8007258:	d402      	bmi.n	8007260 <_vfiprintf_r+0x220>
 800725a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800725c:	f7ff fc23 	bl	8006aa6 <__retarget_lock_release_recursive>
 8007260:	89ab      	ldrh	r3, [r5, #12]
 8007262:	065b      	lsls	r3, r3, #25
 8007264:	f53f af12 	bmi.w	800708c <_vfiprintf_r+0x4c>
 8007268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800726a:	e711      	b.n	8007090 <_vfiprintf_r+0x50>
 800726c:	ab03      	add	r3, sp, #12
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	462a      	mov	r2, r5
 8007272:	4b09      	ldr	r3, [pc, #36]	; (8007298 <_vfiprintf_r+0x258>)
 8007274:	a904      	add	r1, sp, #16
 8007276:	4630      	mov	r0, r6
 8007278:	f000 f880 	bl	800737c <_printf_i>
 800727c:	e7e4      	b.n	8007248 <_vfiprintf_r+0x208>
 800727e:	bf00      	nop
 8007280:	0800794c 	.word	0x0800794c
 8007284:	0800796c 	.word	0x0800796c
 8007288:	0800792c 	.word	0x0800792c
 800728c:	0800798c 	.word	0x0800798c
 8007290:	08007996 	.word	0x08007996
 8007294:	00000000 	.word	0x00000000
 8007298:	0800701b 	.word	0x0800701b
 800729c:	08007992 	.word	0x08007992

080072a0 <_printf_common>:
 80072a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a4:	4616      	mov	r6, r2
 80072a6:	4699      	mov	r9, r3
 80072a8:	688a      	ldr	r2, [r1, #8]
 80072aa:	690b      	ldr	r3, [r1, #16]
 80072ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072b0:	4293      	cmp	r3, r2
 80072b2:	bfb8      	it	lt
 80072b4:	4613      	movlt	r3, r2
 80072b6:	6033      	str	r3, [r6, #0]
 80072b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072bc:	4607      	mov	r7, r0
 80072be:	460c      	mov	r4, r1
 80072c0:	b10a      	cbz	r2, 80072c6 <_printf_common+0x26>
 80072c2:	3301      	adds	r3, #1
 80072c4:	6033      	str	r3, [r6, #0]
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	0699      	lsls	r1, r3, #26
 80072ca:	bf42      	ittt	mi
 80072cc:	6833      	ldrmi	r3, [r6, #0]
 80072ce:	3302      	addmi	r3, #2
 80072d0:	6033      	strmi	r3, [r6, #0]
 80072d2:	6825      	ldr	r5, [r4, #0]
 80072d4:	f015 0506 	ands.w	r5, r5, #6
 80072d8:	d106      	bne.n	80072e8 <_printf_common+0x48>
 80072da:	f104 0a19 	add.w	sl, r4, #25
 80072de:	68e3      	ldr	r3, [r4, #12]
 80072e0:	6832      	ldr	r2, [r6, #0]
 80072e2:	1a9b      	subs	r3, r3, r2
 80072e4:	42ab      	cmp	r3, r5
 80072e6:	dc26      	bgt.n	8007336 <_printf_common+0x96>
 80072e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072ec:	1e13      	subs	r3, r2, #0
 80072ee:	6822      	ldr	r2, [r4, #0]
 80072f0:	bf18      	it	ne
 80072f2:	2301      	movne	r3, #1
 80072f4:	0692      	lsls	r2, r2, #26
 80072f6:	d42b      	bmi.n	8007350 <_printf_common+0xb0>
 80072f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072fc:	4649      	mov	r1, r9
 80072fe:	4638      	mov	r0, r7
 8007300:	47c0      	blx	r8
 8007302:	3001      	adds	r0, #1
 8007304:	d01e      	beq.n	8007344 <_printf_common+0xa4>
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	68e5      	ldr	r5, [r4, #12]
 800730a:	6832      	ldr	r2, [r6, #0]
 800730c:	f003 0306 	and.w	r3, r3, #6
 8007310:	2b04      	cmp	r3, #4
 8007312:	bf08      	it	eq
 8007314:	1aad      	subeq	r5, r5, r2
 8007316:	68a3      	ldr	r3, [r4, #8]
 8007318:	6922      	ldr	r2, [r4, #16]
 800731a:	bf0c      	ite	eq
 800731c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007320:	2500      	movne	r5, #0
 8007322:	4293      	cmp	r3, r2
 8007324:	bfc4      	itt	gt
 8007326:	1a9b      	subgt	r3, r3, r2
 8007328:	18ed      	addgt	r5, r5, r3
 800732a:	2600      	movs	r6, #0
 800732c:	341a      	adds	r4, #26
 800732e:	42b5      	cmp	r5, r6
 8007330:	d11a      	bne.n	8007368 <_printf_common+0xc8>
 8007332:	2000      	movs	r0, #0
 8007334:	e008      	b.n	8007348 <_printf_common+0xa8>
 8007336:	2301      	movs	r3, #1
 8007338:	4652      	mov	r2, sl
 800733a:	4649      	mov	r1, r9
 800733c:	4638      	mov	r0, r7
 800733e:	47c0      	blx	r8
 8007340:	3001      	adds	r0, #1
 8007342:	d103      	bne.n	800734c <_printf_common+0xac>
 8007344:	f04f 30ff 	mov.w	r0, #4294967295
 8007348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800734c:	3501      	adds	r5, #1
 800734e:	e7c6      	b.n	80072de <_printf_common+0x3e>
 8007350:	18e1      	adds	r1, r4, r3
 8007352:	1c5a      	adds	r2, r3, #1
 8007354:	2030      	movs	r0, #48	; 0x30
 8007356:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800735a:	4422      	add	r2, r4
 800735c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007360:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007364:	3302      	adds	r3, #2
 8007366:	e7c7      	b.n	80072f8 <_printf_common+0x58>
 8007368:	2301      	movs	r3, #1
 800736a:	4622      	mov	r2, r4
 800736c:	4649      	mov	r1, r9
 800736e:	4638      	mov	r0, r7
 8007370:	47c0      	blx	r8
 8007372:	3001      	adds	r0, #1
 8007374:	d0e6      	beq.n	8007344 <_printf_common+0xa4>
 8007376:	3601      	adds	r6, #1
 8007378:	e7d9      	b.n	800732e <_printf_common+0x8e>
	...

0800737c <_printf_i>:
 800737c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007380:	7e0f      	ldrb	r7, [r1, #24]
 8007382:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007384:	2f78      	cmp	r7, #120	; 0x78
 8007386:	4691      	mov	r9, r2
 8007388:	4680      	mov	r8, r0
 800738a:	460c      	mov	r4, r1
 800738c:	469a      	mov	sl, r3
 800738e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007392:	d807      	bhi.n	80073a4 <_printf_i+0x28>
 8007394:	2f62      	cmp	r7, #98	; 0x62
 8007396:	d80a      	bhi.n	80073ae <_printf_i+0x32>
 8007398:	2f00      	cmp	r7, #0
 800739a:	f000 80d8 	beq.w	800754e <_printf_i+0x1d2>
 800739e:	2f58      	cmp	r7, #88	; 0x58
 80073a0:	f000 80a3 	beq.w	80074ea <_printf_i+0x16e>
 80073a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073ac:	e03a      	b.n	8007424 <_printf_i+0xa8>
 80073ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073b2:	2b15      	cmp	r3, #21
 80073b4:	d8f6      	bhi.n	80073a4 <_printf_i+0x28>
 80073b6:	a101      	add	r1, pc, #4	; (adr r1, 80073bc <_printf_i+0x40>)
 80073b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073bc:	08007415 	.word	0x08007415
 80073c0:	08007429 	.word	0x08007429
 80073c4:	080073a5 	.word	0x080073a5
 80073c8:	080073a5 	.word	0x080073a5
 80073cc:	080073a5 	.word	0x080073a5
 80073d0:	080073a5 	.word	0x080073a5
 80073d4:	08007429 	.word	0x08007429
 80073d8:	080073a5 	.word	0x080073a5
 80073dc:	080073a5 	.word	0x080073a5
 80073e0:	080073a5 	.word	0x080073a5
 80073e4:	080073a5 	.word	0x080073a5
 80073e8:	08007535 	.word	0x08007535
 80073ec:	08007459 	.word	0x08007459
 80073f0:	08007517 	.word	0x08007517
 80073f4:	080073a5 	.word	0x080073a5
 80073f8:	080073a5 	.word	0x080073a5
 80073fc:	08007557 	.word	0x08007557
 8007400:	080073a5 	.word	0x080073a5
 8007404:	08007459 	.word	0x08007459
 8007408:	080073a5 	.word	0x080073a5
 800740c:	080073a5 	.word	0x080073a5
 8007410:	0800751f 	.word	0x0800751f
 8007414:	682b      	ldr	r3, [r5, #0]
 8007416:	1d1a      	adds	r2, r3, #4
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	602a      	str	r2, [r5, #0]
 800741c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007420:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007424:	2301      	movs	r3, #1
 8007426:	e0a3      	b.n	8007570 <_printf_i+0x1f4>
 8007428:	6820      	ldr	r0, [r4, #0]
 800742a:	6829      	ldr	r1, [r5, #0]
 800742c:	0606      	lsls	r6, r0, #24
 800742e:	f101 0304 	add.w	r3, r1, #4
 8007432:	d50a      	bpl.n	800744a <_printf_i+0xce>
 8007434:	680e      	ldr	r6, [r1, #0]
 8007436:	602b      	str	r3, [r5, #0]
 8007438:	2e00      	cmp	r6, #0
 800743a:	da03      	bge.n	8007444 <_printf_i+0xc8>
 800743c:	232d      	movs	r3, #45	; 0x2d
 800743e:	4276      	negs	r6, r6
 8007440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007444:	485e      	ldr	r0, [pc, #376]	; (80075c0 <_printf_i+0x244>)
 8007446:	230a      	movs	r3, #10
 8007448:	e019      	b.n	800747e <_printf_i+0x102>
 800744a:	680e      	ldr	r6, [r1, #0]
 800744c:	602b      	str	r3, [r5, #0]
 800744e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007452:	bf18      	it	ne
 8007454:	b236      	sxthne	r6, r6
 8007456:	e7ef      	b.n	8007438 <_printf_i+0xbc>
 8007458:	682b      	ldr	r3, [r5, #0]
 800745a:	6820      	ldr	r0, [r4, #0]
 800745c:	1d19      	adds	r1, r3, #4
 800745e:	6029      	str	r1, [r5, #0]
 8007460:	0601      	lsls	r1, r0, #24
 8007462:	d501      	bpl.n	8007468 <_printf_i+0xec>
 8007464:	681e      	ldr	r6, [r3, #0]
 8007466:	e002      	b.n	800746e <_printf_i+0xf2>
 8007468:	0646      	lsls	r6, r0, #25
 800746a:	d5fb      	bpl.n	8007464 <_printf_i+0xe8>
 800746c:	881e      	ldrh	r6, [r3, #0]
 800746e:	4854      	ldr	r0, [pc, #336]	; (80075c0 <_printf_i+0x244>)
 8007470:	2f6f      	cmp	r7, #111	; 0x6f
 8007472:	bf0c      	ite	eq
 8007474:	2308      	moveq	r3, #8
 8007476:	230a      	movne	r3, #10
 8007478:	2100      	movs	r1, #0
 800747a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800747e:	6865      	ldr	r5, [r4, #4]
 8007480:	60a5      	str	r5, [r4, #8]
 8007482:	2d00      	cmp	r5, #0
 8007484:	bfa2      	ittt	ge
 8007486:	6821      	ldrge	r1, [r4, #0]
 8007488:	f021 0104 	bicge.w	r1, r1, #4
 800748c:	6021      	strge	r1, [r4, #0]
 800748e:	b90e      	cbnz	r6, 8007494 <_printf_i+0x118>
 8007490:	2d00      	cmp	r5, #0
 8007492:	d04d      	beq.n	8007530 <_printf_i+0x1b4>
 8007494:	4615      	mov	r5, r2
 8007496:	fbb6 f1f3 	udiv	r1, r6, r3
 800749a:	fb03 6711 	mls	r7, r3, r1, r6
 800749e:	5dc7      	ldrb	r7, [r0, r7]
 80074a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074a4:	4637      	mov	r7, r6
 80074a6:	42bb      	cmp	r3, r7
 80074a8:	460e      	mov	r6, r1
 80074aa:	d9f4      	bls.n	8007496 <_printf_i+0x11a>
 80074ac:	2b08      	cmp	r3, #8
 80074ae:	d10b      	bne.n	80074c8 <_printf_i+0x14c>
 80074b0:	6823      	ldr	r3, [r4, #0]
 80074b2:	07de      	lsls	r6, r3, #31
 80074b4:	d508      	bpl.n	80074c8 <_printf_i+0x14c>
 80074b6:	6923      	ldr	r3, [r4, #16]
 80074b8:	6861      	ldr	r1, [r4, #4]
 80074ba:	4299      	cmp	r1, r3
 80074bc:	bfde      	ittt	le
 80074be:	2330      	movle	r3, #48	; 0x30
 80074c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074c8:	1b52      	subs	r2, r2, r5
 80074ca:	6122      	str	r2, [r4, #16]
 80074cc:	f8cd a000 	str.w	sl, [sp]
 80074d0:	464b      	mov	r3, r9
 80074d2:	aa03      	add	r2, sp, #12
 80074d4:	4621      	mov	r1, r4
 80074d6:	4640      	mov	r0, r8
 80074d8:	f7ff fee2 	bl	80072a0 <_printf_common>
 80074dc:	3001      	adds	r0, #1
 80074de:	d14c      	bne.n	800757a <_printf_i+0x1fe>
 80074e0:	f04f 30ff 	mov.w	r0, #4294967295
 80074e4:	b004      	add	sp, #16
 80074e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ea:	4835      	ldr	r0, [pc, #212]	; (80075c0 <_printf_i+0x244>)
 80074ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074f0:	6829      	ldr	r1, [r5, #0]
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80074f8:	6029      	str	r1, [r5, #0]
 80074fa:	061d      	lsls	r5, r3, #24
 80074fc:	d514      	bpl.n	8007528 <_printf_i+0x1ac>
 80074fe:	07df      	lsls	r7, r3, #31
 8007500:	bf44      	itt	mi
 8007502:	f043 0320 	orrmi.w	r3, r3, #32
 8007506:	6023      	strmi	r3, [r4, #0]
 8007508:	b91e      	cbnz	r6, 8007512 <_printf_i+0x196>
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	f023 0320 	bic.w	r3, r3, #32
 8007510:	6023      	str	r3, [r4, #0]
 8007512:	2310      	movs	r3, #16
 8007514:	e7b0      	b.n	8007478 <_printf_i+0xfc>
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	f043 0320 	orr.w	r3, r3, #32
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	2378      	movs	r3, #120	; 0x78
 8007520:	4828      	ldr	r0, [pc, #160]	; (80075c4 <_printf_i+0x248>)
 8007522:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007526:	e7e3      	b.n	80074f0 <_printf_i+0x174>
 8007528:	0659      	lsls	r1, r3, #25
 800752a:	bf48      	it	mi
 800752c:	b2b6      	uxthmi	r6, r6
 800752e:	e7e6      	b.n	80074fe <_printf_i+0x182>
 8007530:	4615      	mov	r5, r2
 8007532:	e7bb      	b.n	80074ac <_printf_i+0x130>
 8007534:	682b      	ldr	r3, [r5, #0]
 8007536:	6826      	ldr	r6, [r4, #0]
 8007538:	6961      	ldr	r1, [r4, #20]
 800753a:	1d18      	adds	r0, r3, #4
 800753c:	6028      	str	r0, [r5, #0]
 800753e:	0635      	lsls	r5, r6, #24
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	d501      	bpl.n	8007548 <_printf_i+0x1cc>
 8007544:	6019      	str	r1, [r3, #0]
 8007546:	e002      	b.n	800754e <_printf_i+0x1d2>
 8007548:	0670      	lsls	r0, r6, #25
 800754a:	d5fb      	bpl.n	8007544 <_printf_i+0x1c8>
 800754c:	8019      	strh	r1, [r3, #0]
 800754e:	2300      	movs	r3, #0
 8007550:	6123      	str	r3, [r4, #16]
 8007552:	4615      	mov	r5, r2
 8007554:	e7ba      	b.n	80074cc <_printf_i+0x150>
 8007556:	682b      	ldr	r3, [r5, #0]
 8007558:	1d1a      	adds	r2, r3, #4
 800755a:	602a      	str	r2, [r5, #0]
 800755c:	681d      	ldr	r5, [r3, #0]
 800755e:	6862      	ldr	r2, [r4, #4]
 8007560:	2100      	movs	r1, #0
 8007562:	4628      	mov	r0, r5
 8007564:	f7f8 fe4c 	bl	8000200 <memchr>
 8007568:	b108      	cbz	r0, 800756e <_printf_i+0x1f2>
 800756a:	1b40      	subs	r0, r0, r5
 800756c:	6060      	str	r0, [r4, #4]
 800756e:	6863      	ldr	r3, [r4, #4]
 8007570:	6123      	str	r3, [r4, #16]
 8007572:	2300      	movs	r3, #0
 8007574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007578:	e7a8      	b.n	80074cc <_printf_i+0x150>
 800757a:	6923      	ldr	r3, [r4, #16]
 800757c:	462a      	mov	r2, r5
 800757e:	4649      	mov	r1, r9
 8007580:	4640      	mov	r0, r8
 8007582:	47d0      	blx	sl
 8007584:	3001      	adds	r0, #1
 8007586:	d0ab      	beq.n	80074e0 <_printf_i+0x164>
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	079b      	lsls	r3, r3, #30
 800758c:	d413      	bmi.n	80075b6 <_printf_i+0x23a>
 800758e:	68e0      	ldr	r0, [r4, #12]
 8007590:	9b03      	ldr	r3, [sp, #12]
 8007592:	4298      	cmp	r0, r3
 8007594:	bfb8      	it	lt
 8007596:	4618      	movlt	r0, r3
 8007598:	e7a4      	b.n	80074e4 <_printf_i+0x168>
 800759a:	2301      	movs	r3, #1
 800759c:	4632      	mov	r2, r6
 800759e:	4649      	mov	r1, r9
 80075a0:	4640      	mov	r0, r8
 80075a2:	47d0      	blx	sl
 80075a4:	3001      	adds	r0, #1
 80075a6:	d09b      	beq.n	80074e0 <_printf_i+0x164>
 80075a8:	3501      	adds	r5, #1
 80075aa:	68e3      	ldr	r3, [r4, #12]
 80075ac:	9903      	ldr	r1, [sp, #12]
 80075ae:	1a5b      	subs	r3, r3, r1
 80075b0:	42ab      	cmp	r3, r5
 80075b2:	dcf2      	bgt.n	800759a <_printf_i+0x21e>
 80075b4:	e7eb      	b.n	800758e <_printf_i+0x212>
 80075b6:	2500      	movs	r5, #0
 80075b8:	f104 0619 	add.w	r6, r4, #25
 80075bc:	e7f5      	b.n	80075aa <_printf_i+0x22e>
 80075be:	bf00      	nop
 80075c0:	0800799d 	.word	0x0800799d
 80075c4:	080079ae 	.word	0x080079ae

080075c8 <_sbrk_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4d06      	ldr	r5, [pc, #24]	; (80075e4 <_sbrk_r+0x1c>)
 80075cc:	2300      	movs	r3, #0
 80075ce:	4604      	mov	r4, r0
 80075d0:	4608      	mov	r0, r1
 80075d2:	602b      	str	r3, [r5, #0]
 80075d4:	f7fa f9b0 	bl	8001938 <_sbrk>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d102      	bne.n	80075e2 <_sbrk_r+0x1a>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	b103      	cbz	r3, 80075e2 <_sbrk_r+0x1a>
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	200002c0 	.word	0x200002c0

080075e8 <__sread>:
 80075e8:	b510      	push	{r4, lr}
 80075ea:	460c      	mov	r4, r1
 80075ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f0:	f000 f8f8 	bl	80077e4 <_read_r>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	bfab      	itete	ge
 80075f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075fa:	89a3      	ldrhlt	r3, [r4, #12]
 80075fc:	181b      	addge	r3, r3, r0
 80075fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007602:	bfac      	ite	ge
 8007604:	6563      	strge	r3, [r4, #84]	; 0x54
 8007606:	81a3      	strhlt	r3, [r4, #12]
 8007608:	bd10      	pop	{r4, pc}

0800760a <__swrite>:
 800760a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800760e:	461f      	mov	r7, r3
 8007610:	898b      	ldrh	r3, [r1, #12]
 8007612:	05db      	lsls	r3, r3, #23
 8007614:	4605      	mov	r5, r0
 8007616:	460c      	mov	r4, r1
 8007618:	4616      	mov	r6, r2
 800761a:	d505      	bpl.n	8007628 <__swrite+0x1e>
 800761c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007620:	2302      	movs	r3, #2
 8007622:	2200      	movs	r2, #0
 8007624:	f000 f868 	bl	80076f8 <_lseek_r>
 8007628:	89a3      	ldrh	r3, [r4, #12]
 800762a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800762e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007632:	81a3      	strh	r3, [r4, #12]
 8007634:	4632      	mov	r2, r6
 8007636:	463b      	mov	r3, r7
 8007638:	4628      	mov	r0, r5
 800763a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800763e:	f000 b817 	b.w	8007670 <_write_r>

08007642 <__sseek>:
 8007642:	b510      	push	{r4, lr}
 8007644:	460c      	mov	r4, r1
 8007646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800764a:	f000 f855 	bl	80076f8 <_lseek_r>
 800764e:	1c43      	adds	r3, r0, #1
 8007650:	89a3      	ldrh	r3, [r4, #12]
 8007652:	bf15      	itete	ne
 8007654:	6560      	strne	r0, [r4, #84]	; 0x54
 8007656:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800765a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800765e:	81a3      	strheq	r3, [r4, #12]
 8007660:	bf18      	it	ne
 8007662:	81a3      	strhne	r3, [r4, #12]
 8007664:	bd10      	pop	{r4, pc}

08007666 <__sclose>:
 8007666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800766a:	f000 b813 	b.w	8007694 <_close_r>
	...

08007670 <_write_r>:
 8007670:	b538      	push	{r3, r4, r5, lr}
 8007672:	4d07      	ldr	r5, [pc, #28]	; (8007690 <_write_r+0x20>)
 8007674:	4604      	mov	r4, r0
 8007676:	4608      	mov	r0, r1
 8007678:	4611      	mov	r1, r2
 800767a:	2200      	movs	r2, #0
 800767c:	602a      	str	r2, [r5, #0]
 800767e:	461a      	mov	r2, r3
 8007680:	f7fa f909 	bl	8001896 <_write>
 8007684:	1c43      	adds	r3, r0, #1
 8007686:	d102      	bne.n	800768e <_write_r+0x1e>
 8007688:	682b      	ldr	r3, [r5, #0]
 800768a:	b103      	cbz	r3, 800768e <_write_r+0x1e>
 800768c:	6023      	str	r3, [r4, #0]
 800768e:	bd38      	pop	{r3, r4, r5, pc}
 8007690:	200002c0 	.word	0x200002c0

08007694 <_close_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	4d06      	ldr	r5, [pc, #24]	; (80076b0 <_close_r+0x1c>)
 8007698:	2300      	movs	r3, #0
 800769a:	4604      	mov	r4, r0
 800769c:	4608      	mov	r0, r1
 800769e:	602b      	str	r3, [r5, #0]
 80076a0:	f7fa f915 	bl	80018ce <_close>
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	d102      	bne.n	80076ae <_close_r+0x1a>
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	b103      	cbz	r3, 80076ae <_close_r+0x1a>
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	bd38      	pop	{r3, r4, r5, pc}
 80076b0:	200002c0 	.word	0x200002c0

080076b4 <_fstat_r>:
 80076b4:	b538      	push	{r3, r4, r5, lr}
 80076b6:	4d07      	ldr	r5, [pc, #28]	; (80076d4 <_fstat_r+0x20>)
 80076b8:	2300      	movs	r3, #0
 80076ba:	4604      	mov	r4, r0
 80076bc:	4608      	mov	r0, r1
 80076be:	4611      	mov	r1, r2
 80076c0:	602b      	str	r3, [r5, #0]
 80076c2:	f7fa f910 	bl	80018e6 <_fstat>
 80076c6:	1c43      	adds	r3, r0, #1
 80076c8:	d102      	bne.n	80076d0 <_fstat_r+0x1c>
 80076ca:	682b      	ldr	r3, [r5, #0]
 80076cc:	b103      	cbz	r3, 80076d0 <_fstat_r+0x1c>
 80076ce:	6023      	str	r3, [r4, #0]
 80076d0:	bd38      	pop	{r3, r4, r5, pc}
 80076d2:	bf00      	nop
 80076d4:	200002c0 	.word	0x200002c0

080076d8 <_isatty_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4d06      	ldr	r5, [pc, #24]	; (80076f4 <_isatty_r+0x1c>)
 80076dc:	2300      	movs	r3, #0
 80076de:	4604      	mov	r4, r0
 80076e0:	4608      	mov	r0, r1
 80076e2:	602b      	str	r3, [r5, #0]
 80076e4:	f7fa f90f 	bl	8001906 <_isatty>
 80076e8:	1c43      	adds	r3, r0, #1
 80076ea:	d102      	bne.n	80076f2 <_isatty_r+0x1a>
 80076ec:	682b      	ldr	r3, [r5, #0]
 80076ee:	b103      	cbz	r3, 80076f2 <_isatty_r+0x1a>
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	bd38      	pop	{r3, r4, r5, pc}
 80076f4:	200002c0 	.word	0x200002c0

080076f8 <_lseek_r>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	4d07      	ldr	r5, [pc, #28]	; (8007718 <_lseek_r+0x20>)
 80076fc:	4604      	mov	r4, r0
 80076fe:	4608      	mov	r0, r1
 8007700:	4611      	mov	r1, r2
 8007702:	2200      	movs	r2, #0
 8007704:	602a      	str	r2, [r5, #0]
 8007706:	461a      	mov	r2, r3
 8007708:	f7fa f908 	bl	800191c <_lseek>
 800770c:	1c43      	adds	r3, r0, #1
 800770e:	d102      	bne.n	8007716 <_lseek_r+0x1e>
 8007710:	682b      	ldr	r3, [r5, #0]
 8007712:	b103      	cbz	r3, 8007716 <_lseek_r+0x1e>
 8007714:	6023      	str	r3, [r4, #0]
 8007716:	bd38      	pop	{r3, r4, r5, pc}
 8007718:	200002c0 	.word	0x200002c0

0800771c <memcpy>:
 800771c:	440a      	add	r2, r1
 800771e:	4291      	cmp	r1, r2
 8007720:	f100 33ff 	add.w	r3, r0, #4294967295
 8007724:	d100      	bne.n	8007728 <memcpy+0xc>
 8007726:	4770      	bx	lr
 8007728:	b510      	push	{r4, lr}
 800772a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800772e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007732:	4291      	cmp	r1, r2
 8007734:	d1f9      	bne.n	800772a <memcpy+0xe>
 8007736:	bd10      	pop	{r4, pc}

08007738 <memmove>:
 8007738:	4288      	cmp	r0, r1
 800773a:	b510      	push	{r4, lr}
 800773c:	eb01 0402 	add.w	r4, r1, r2
 8007740:	d902      	bls.n	8007748 <memmove+0x10>
 8007742:	4284      	cmp	r4, r0
 8007744:	4623      	mov	r3, r4
 8007746:	d807      	bhi.n	8007758 <memmove+0x20>
 8007748:	1e43      	subs	r3, r0, #1
 800774a:	42a1      	cmp	r1, r4
 800774c:	d008      	beq.n	8007760 <memmove+0x28>
 800774e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007752:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007756:	e7f8      	b.n	800774a <memmove+0x12>
 8007758:	4402      	add	r2, r0
 800775a:	4601      	mov	r1, r0
 800775c:	428a      	cmp	r2, r1
 800775e:	d100      	bne.n	8007762 <memmove+0x2a>
 8007760:	bd10      	pop	{r4, pc}
 8007762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007766:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800776a:	e7f7      	b.n	800775c <memmove+0x24>

0800776c <__malloc_lock>:
 800776c:	4801      	ldr	r0, [pc, #4]	; (8007774 <__malloc_lock+0x8>)
 800776e:	f7ff b999 	b.w	8006aa4 <__retarget_lock_acquire_recursive>
 8007772:	bf00      	nop
 8007774:	200002b4 	.word	0x200002b4

08007778 <__malloc_unlock>:
 8007778:	4801      	ldr	r0, [pc, #4]	; (8007780 <__malloc_unlock+0x8>)
 800777a:	f7ff b994 	b.w	8006aa6 <__retarget_lock_release_recursive>
 800777e:	bf00      	nop
 8007780:	200002b4 	.word	0x200002b4

08007784 <_realloc_r>:
 8007784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007788:	4680      	mov	r8, r0
 800778a:	4614      	mov	r4, r2
 800778c:	460e      	mov	r6, r1
 800778e:	b921      	cbnz	r1, 800779a <_realloc_r+0x16>
 8007790:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007794:	4611      	mov	r1, r2
 8007796:	f7ff ba59 	b.w	8006c4c <_malloc_r>
 800779a:	b92a      	cbnz	r2, 80077a8 <_realloc_r+0x24>
 800779c:	f7ff f9ea 	bl	8006b74 <_free_r>
 80077a0:	4625      	mov	r5, r4
 80077a2:	4628      	mov	r0, r5
 80077a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077a8:	f000 f82e 	bl	8007808 <_malloc_usable_size_r>
 80077ac:	4284      	cmp	r4, r0
 80077ae:	4607      	mov	r7, r0
 80077b0:	d802      	bhi.n	80077b8 <_realloc_r+0x34>
 80077b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80077b6:	d812      	bhi.n	80077de <_realloc_r+0x5a>
 80077b8:	4621      	mov	r1, r4
 80077ba:	4640      	mov	r0, r8
 80077bc:	f7ff fa46 	bl	8006c4c <_malloc_r>
 80077c0:	4605      	mov	r5, r0
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d0ed      	beq.n	80077a2 <_realloc_r+0x1e>
 80077c6:	42bc      	cmp	r4, r7
 80077c8:	4622      	mov	r2, r4
 80077ca:	4631      	mov	r1, r6
 80077cc:	bf28      	it	cs
 80077ce:	463a      	movcs	r2, r7
 80077d0:	f7ff ffa4 	bl	800771c <memcpy>
 80077d4:	4631      	mov	r1, r6
 80077d6:	4640      	mov	r0, r8
 80077d8:	f7ff f9cc 	bl	8006b74 <_free_r>
 80077dc:	e7e1      	b.n	80077a2 <_realloc_r+0x1e>
 80077de:	4635      	mov	r5, r6
 80077e0:	e7df      	b.n	80077a2 <_realloc_r+0x1e>
	...

080077e4 <_read_r>:
 80077e4:	b538      	push	{r3, r4, r5, lr}
 80077e6:	4d07      	ldr	r5, [pc, #28]	; (8007804 <_read_r+0x20>)
 80077e8:	4604      	mov	r4, r0
 80077ea:	4608      	mov	r0, r1
 80077ec:	4611      	mov	r1, r2
 80077ee:	2200      	movs	r2, #0
 80077f0:	602a      	str	r2, [r5, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	f7fa f832 	bl	800185c <_read>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	d102      	bne.n	8007802 <_read_r+0x1e>
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	b103      	cbz	r3, 8007802 <_read_r+0x1e>
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	200002c0 	.word	0x200002c0

08007808 <_malloc_usable_size_r>:
 8007808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800780c:	1f18      	subs	r0, r3, #4
 800780e:	2b00      	cmp	r3, #0
 8007810:	bfbc      	itt	lt
 8007812:	580b      	ldrlt	r3, [r1, r0]
 8007814:	18c0      	addlt	r0, r0, r3
 8007816:	4770      	bx	lr

08007818 <_init>:
 8007818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781a:	bf00      	nop
 800781c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800781e:	bc08      	pop	{r3}
 8007820:	469e      	mov	lr, r3
 8007822:	4770      	bx	lr

08007824 <_fini>:
 8007824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007826:	bf00      	nop
 8007828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800782a:	bc08      	pop	{r3}
 800782c:	469e      	mov	lr, r3
 800782e:	4770      	bx	lr
