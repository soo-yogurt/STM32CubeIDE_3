
22_06_10_Userbutton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000727c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800742c  0800742c  0001742c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075b4  080075b4  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080075b4  080075b4  000175b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075bc  080075bc  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075bc  080075bc  000175bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075c0  080075c0  000175c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080075c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000220  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002a0  200002a0  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000170ac  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003325  00000000  00000000  0003715c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  0003a488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001220  00000000  00000000  0003b808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ea8  00000000  00000000  0003ca28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019b5e  00000000  00000000  000648d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0942  00000000  00000000  0007e42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016ed70  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b10  00000000  00000000  0016edc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007414 	.word	0x08007414

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08007414 	.word	0x08007414

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	463b      	mov	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b6:	4b21      	ldr	r3, [pc, #132]	; (800063c <MX_ADC1_Init+0x98>)
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_ADC1_Init+0x98>)
 80005be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <MX_ADC1_Init+0x98>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_ADC1_Init+0x98>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_ADC1_Init+0x98>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_ADC1_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <MX_ADC1_Init+0x98>)
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <MX_ADC1_Init+0xa0>)
 80005e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_ADC1_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_ADC1_Init+0x98>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_ADC1_Init+0x98>)
 8000600:	2201      	movs	r2, #1
 8000602:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <MX_ADC1_Init+0x98>)
 8000606:	f001 f9e3 	bl	80019d0 <HAL_ADC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000610:	f000 fe28 	bl	8001264 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000614:	2303      	movs	r3, #3
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_ADC1_Init+0x98>)
 8000626:	f001 faf7 	bl	8001c18 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000630:	f000 fe18 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	2000009c 	.word	0x2000009c
 8000640:	40012000 	.word	0x40012000
 8000644:	0f000001 	.word	0x0f000001

08000648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <HAL_ADC_MspInit+0x7c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d127      	bne.n	80006ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6453      	str	r3, [r2, #68]	; 0x44
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006a2:	2308      	movs	r3, #8
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <HAL_ADC_MspInit+0x84>)
 80006b6:	f001 fe81 	bl	80023bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000

080006d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <MX_GPIO_Init+0xd4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a2d      	ldr	r2, [pc, #180]	; (80007a4 <MX_GPIO_Init+0xd4>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <MX_GPIO_Init+0xd4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a26      	ldr	r2, [pc, #152]	; (80007a4 <MX_GPIO_Init+0xd4>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_GPIO_Init+0xd4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800075c:	4812      	ldr	r0, [pc, #72]	; (80007a8 <MX_GPIO_Init+0xd8>)
 800075e:	f001 fff1 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000768:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800076c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_GPIO_Init+0xdc>)
 800077a:	f001 fe1f 	bl	80023bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 800077e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_GPIO_Init+0xd8>)
 8000798:	f001 fe10 	bl	80023bc <HAL_GPIO_Init>

}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020400 	.word	0x40020400
 80007ac:	40020800 	.word	0x40020800

080007b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_I2C1_Init+0x78>)
 80007b6:	4a1d      	ldr	r2, [pc, #116]	; (800082c <MX_I2C1_Init+0x7c>)
 80007b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_I2C1_Init+0x78>)
 80007bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80007c0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_I2C1_Init+0x78>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_I2C1_Init+0x78>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_I2C1_Init+0x78>)
 80007d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_I2C1_Init+0x78>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2C1_Init+0x78>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_I2C1_Init+0x78>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_I2C1_Init+0x78>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ee:	480e      	ldr	r0, [pc, #56]	; (8000828 <MX_I2C1_Init+0x78>)
 80007f0:	f001 ffda 	bl	80027a8 <HAL_I2C_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80007fa:	f000 fd33 	bl	8001264 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007fe:	2100      	movs	r1, #0
 8000800:	4809      	ldr	r0, [pc, #36]	; (8000828 <MX_I2C1_Init+0x78>)
 8000802:	f002 fd4a 	bl	800329a <HAL_I2CEx_ConfigAnalogFilter>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 800080c:	f000 fd2a 	bl	8001264 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000810:	2100      	movs	r1, #0
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_I2C1_Init+0x78>)
 8000814:	f002 fd7d 	bl	8003312 <HAL_I2CEx_ConfigDigitalFilter>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 800081e:	f000 fd21 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200000e4 	.word	0x200000e4
 800082c:	40005400 	.word	0x40005400

08000830 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a19      	ldr	r2, [pc, #100]	; (80008b4 <HAL_I2C_MspInit+0x84>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d12c      	bne.n	80008ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800086e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000874:	2312      	movs	r3, #18
 8000876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000878:	2301      	movs	r3, #1
 800087a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000880:	2304      	movs	r3, #4
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	480c      	ldr	r0, [pc, #48]	; (80008bc <HAL_I2C_MspInit+0x8c>)
 800088c:	f001 fd96 	bl	80023bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 800089a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800089e:	6413      	str	r3, [r2, #64]	; 0x40
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	; 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40005400 	.word	0x40005400
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020400 	.word	0x40020400

080008c0 <__io_putchar>:
void SetTime(const int *location);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ch, 1, 100);
 80008c8:	6879      	ldr	r1, [r7, #4]
 80008ca:	2364      	movs	r3, #100	; 0x64
 80008cc:	2201      	movs	r2, #1
 80008ce:	4804      	ldr	r0, [pc, #16]	; (80008e0 <__io_putchar+0x20>)
 80008d0:	f004 fb93 	bl	8004ffa <HAL_UART_Transmit>
	return ch;
 80008d4:	687b      	ldr	r3, [r7, #4]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000248 	.word	0x20000248

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b5b0      	push	{r4, r5, r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	int location = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
	uint8_t adc_point = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	71fb      	strb	r3, [r7, #7]
	int i = 1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f6:	f000 ffd5 	bl	80018a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fa:	f000 f92b 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fe:	f7ff fee7 	bl	80006d0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000902:	f000 fcb5 	bl	8001270 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000906:	f000 fefd 	bl	8001704 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800090a:	f000 fe5b 	bl	80015c4 <MX_TIM3_Init>
  MX_ADC1_Init();
 800090e:	f7ff fe49 	bl	80005a4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000912:	f000 fecd 	bl	80016b0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000916:	f7ff ff4b 	bl	80007b0 <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800091a:	f000 f98d 	bl	8000c38 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	init();
 800091e:	f000 fb6a 	bl	8000ff6 <init>
	HAL_TIM_Base_Init(&htim3);
 8000922:	487c      	ldr	r0, [pc, #496]	; (8000b14 <main+0x230>)
 8000924:	f003 fe9a 	bl	800465c <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim3);
 8000928:	487a      	ldr	r0, [pc, #488]	; (8000b14 <main+0x230>)
 800092a:	f003 fee7 	bl	80046fc <HAL_TIM_Base_Start_IT>

	sTime.Hours = 12;
 800092e:	4b7a      	ldr	r3, [pc, #488]	; (8000b18 <main+0x234>)
 8000930:	220c      	movs	r2, #12
 8000932:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 0;
 8000934:	4b78      	ldr	r3, [pc, #480]	; (8000b18 <main+0x234>)
 8000936:	2200      	movs	r2, #0
 8000938:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0;
 800093a:	4b77      	ldr	r3, [pc, #476]	; (8000b18 <main+0x234>)
 800093c:	2200      	movs	r2, #0
 800093e:	709a      	strb	r2, [r3, #2]
	sTime.TimeFormat = 0;
 8000940:	4b75      	ldr	r3, [pc, #468]	; (8000b18 <main+0x234>)
 8000942:	2200      	movs	r2, #0
 8000944:	70da      	strb	r2, [r3, #3]

	sDate.Year = 22;
 8000946:	4b75      	ldr	r3, [pc, #468]	; (8000b1c <main+0x238>)
 8000948:	2216      	movs	r2, #22
 800094a:	70da      	strb	r2, [r3, #3]
	sDate.Month = 6;
 800094c:	4b73      	ldr	r3, [pc, #460]	; (8000b1c <main+0x238>)
 800094e:	2206      	movs	r2, #6
 8000950:	705a      	strb	r2, [r3, #1]
	sDate.Date = 20;
 8000952:	4b72      	ldr	r3, [pc, #456]	; (8000b1c <main+0x238>)
 8000954:	2214      	movs	r2, #20
 8000956:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000958:	2200      	movs	r2, #0
 800095a:	496f      	ldr	r1, [pc, #444]	; (8000b18 <main+0x234>)
 800095c:	4870      	ldr	r0, [pc, #448]	; (8000b20 <main+0x23c>)
 800095e:	f003 fbf5 	bl	800414c <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000962:	2200      	movs	r2, #0
 8000964:	496d      	ldr	r1, [pc, #436]	; (8000b1c <main+0x238>)
 8000966:	486e      	ldr	r0, [pc, #440]	; (8000b20 <main+0x23c>)
 8000968:	f003 fce8 	bl	800433c <HAL_RTC_SetDate>
	memset(buf, 0, sizeof(buf));
 800096c:	2219      	movs	r2, #25
 800096e:	2100      	movs	r1, #0
 8000970:	486c      	ldr	r0, [pc, #432]	; (8000b24 <main+0x240>)
 8000972:	f005 fb33 	bl	8005fdc <memset>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//clock
		if (flag == 0) {
 8000976:	4b6c      	ldr	r3, [pc, #432]	; (8000b28 <main+0x244>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d142      	bne.n	8000a04 <main+0x120>
			//********************** cursor ****************************************
			bufferState();
 800097e:	f000 f96f 	bl	8000c60 <bufferState>
			//********************* Display ** LINE 1 ******************************
			LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000982:	2180      	movs	r1, #128	; 0x80
 8000984:	204e      	movs	r0, #78	; 0x4e
 8000986:	f000 fadb 	bl	8000f40 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, " @   LCD Clock  ");
 800098a:	4968      	ldr	r1, [pc, #416]	; (8000b2c <main+0x248>)
 800098c:	204e      	movs	r0, #78	; 0x4e
 800098e:	f000 fb18 	bl	8000fc2 <LCD_SendString>
			//********************* Display ** LINE 2 ******************************
			while (flag == 0) {
 8000992:	e032      	b.n	80009fa <main+0x116>
				HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000994:	2200      	movs	r2, #0
 8000996:	4960      	ldr	r1, [pc, #384]	; (8000b18 <main+0x234>)
 8000998:	4861      	ldr	r0, [pc, #388]	; (8000b20 <main+0x23c>)
 800099a:	f003 fc71 	bl	8004280 <HAL_RTC_GetTime>
				HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800099e:	2200      	movs	r2, #0
 80009a0:	495e      	ldr	r1, [pc, #376]	; (8000b1c <main+0x238>)
 80009a2:	485f      	ldr	r0, [pc, #380]	; (8000b20 <main+0x23c>)
 80009a4:	f003 fd4e 	bl	8004444 <HAL_RTC_GetDate>
				HAL_UART_Transmit(&huart3, (uint8_t*) buf, sizeof(buf), 2000);
 80009a8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009ac:	2219      	movs	r2, #25
 80009ae:	495d      	ldr	r1, [pc, #372]	; (8000b24 <main+0x240>)
 80009b0:	485f      	ldr	r0, [pc, #380]	; (8000b30 <main+0x24c>)
 80009b2:	f004 fb22 	bl	8004ffa <HAL_UART_Transmit>
				sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 80009b6:	4b58      	ldr	r3, [pc, #352]	; (8000b18 <main+0x234>)
 80009b8:	78db      	ldrb	r3, [r3, #3]
 80009ba:	461a      	mov	r2, r3
 80009bc:	4613      	mov	r3, r2
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	4413      	add	r3, r2
 80009c2:	4a5c      	ldr	r2, [pc, #368]	; (8000b34 <main+0x250>)
 80009c4:	441a      	add	r2, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 80009c6:	4b54      	ldr	r3, [pc, #336]	; (8000b18 <main+0x234>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
				sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 80009ca:	4618      	mov	r0, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 80009cc:	4b52      	ldr	r3, [pc, #328]	; (8000b18 <main+0x234>)
 80009ce:	785b      	ldrb	r3, [r3, #1]
				sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 80009d0:	4619      	mov	r1, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 80009d2:	4b51      	ldr	r3, [pc, #324]	; (8000b18 <main+0x234>)
 80009d4:	789b      	ldrb	r3, [r3, #2]
				sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 80009d6:	9301      	str	r3, [sp, #4]
 80009d8:	9100      	str	r1, [sp, #0]
 80009da:	4603      	mov	r3, r0
 80009dc:	4956      	ldr	r1, [pc, #344]	; (8000b38 <main+0x254>)
 80009de:	4851      	ldr	r0, [pc, #324]	; (8000b24 <main+0x240>)
 80009e0:	f005 fbc6 	bl	8006170 <siprintf>
				printf("\r\n");
 80009e4:	4855      	ldr	r0, [pc, #340]	; (8000b3c <main+0x258>)
 80009e6:	f005 fb87 	bl	80060f8 <puts>
				LCD_SendCommand(LCD_ADDR, 0b11000000);
 80009ea:	21c0      	movs	r1, #192	; 0xc0
 80009ec:	204e      	movs	r0, #78	; 0x4e
 80009ee:	f000 faa7 	bl	8000f40 <LCD_SendCommand>
				LCD_SendString(LCD_ADDR, buf);
 80009f2:	494c      	ldr	r1, [pc, #304]	; (8000b24 <main+0x240>)
 80009f4:	204e      	movs	r0, #78	; 0x4e
 80009f6:	f000 fae4 	bl	8000fc2 <LCD_SendString>
			while (flag == 0) {
 80009fa:	4b4b      	ldr	r3, [pc, #300]	; (8000b28 <main+0x244>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0c8      	beq.n	8000994 <main+0xb0>
 8000a02:	e7b8      	b.n	8000976 <main+0x92>
			//**********************************************************************
			}
		}
		//set Time
		else if (flag == 1) {
 8000a04:	4b48      	ldr	r3, [pc, #288]	; (8000b28 <main+0x244>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d137      	bne.n	8000a7c <main+0x198>
			//********************* Display ** LINE 1 ******************************
			LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000a0c:	2180      	movs	r1, #128	; 0x80
 8000a0e:	204e      	movs	r0, #78	; 0x4e
 8000a10:	f000 fa96 	bl	8000f40 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, " @   Set Time  ");
 8000a14:	494a      	ldr	r1, [pc, #296]	; (8000b40 <main+0x25c>)
 8000a16:	204e      	movs	r0, #78	; 0x4e
 8000a18:	f000 fad3 	bl	8000fc2 <LCD_SendString>
			//********************* Display ** LINE 2 ******************************
			sprintf(buf, "%s %02d:%02d:%02d Save", ampm[sTime.TimeFormat],
 8000a1c:	4b3e      	ldr	r3, [pc, #248]	; (8000b18 <main+0x234>)
 8000a1e:	78db      	ldrb	r3, [r3, #3]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4613      	mov	r3, r2
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	4413      	add	r3, r2
 8000a28:	4a42      	ldr	r2, [pc, #264]	; (8000b34 <main+0x250>)
 8000a2a:	441a      	add	r2, r3
									sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000a2c:	4b3a      	ldr	r3, [pc, #232]	; (8000b18 <main+0x234>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
			sprintf(buf, "%s %02d:%02d:%02d Save", ampm[sTime.TimeFormat],
 8000a30:	4618      	mov	r0, r3
									sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000a32:	4b39      	ldr	r3, [pc, #228]	; (8000b18 <main+0x234>)
 8000a34:	785b      	ldrb	r3, [r3, #1]
			sprintf(buf, "%s %02d:%02d:%02d Save", ampm[sTime.TimeFormat],
 8000a36:	4619      	mov	r1, r3
									sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000a38:	4b37      	ldr	r3, [pc, #220]	; (8000b18 <main+0x234>)
 8000a3a:	789b      	ldrb	r3, [r3, #2]
			sprintf(buf, "%s %02d:%02d:%02d Save", ampm[sTime.TimeFormat],
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	9100      	str	r1, [sp, #0]
 8000a40:	4603      	mov	r3, r0
 8000a42:	4940      	ldr	r1, [pc, #256]	; (8000b44 <main+0x260>)
 8000a44:	4837      	ldr	r0, [pc, #220]	; (8000b24 <main+0x240>)
 8000a46:	f005 fb93 	bl	8006170 <siprintf>
			LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000a4a:	21c0      	movs	r1, #192	; 0xc0
 8000a4c:	204e      	movs	r0, #78	; 0x4e
 8000a4e:	f000 fa77 	bl	8000f40 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, buf);
 8000a52:	4934      	ldr	r1, [pc, #208]	; (8000b24 <main+0x240>)
 8000a54:	204e      	movs	r0, #78	; 0x4e
 8000a56:	f000 fab4 	bl	8000fc2 <LCD_SendString>
			//********************** cursor ****************************************
			bufferState();
 8000a5a:	f000 f901 	bl	8000c60 <bufferState>
			location = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
			//**********************************************************************
			while (flag == 1) {
 8000a62:	e006      	b.n	8000a72 <main+0x18e>
				AdcSwitch(&adc_point, &location);
 8000a64:	f107 0208 	add.w	r2, r7, #8
 8000a68:	1dfb      	adds	r3, r7, #7
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 fb2d 	bl	80010cc <AdcSwitch>
			while (flag == 1) {
 8000a72:	4b2d      	ldr	r3, [pc, #180]	; (8000b28 <main+0x244>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d0f4      	beq.n	8000a64 <main+0x180>
 8000a7a:	e77c      	b.n	8000976 <main+0x92>
			}
			//**********************************************************************
		}
		//alarm
		else if (flag == 2) {
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <main+0x244>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d13d      	bne.n	8000b00 <main+0x21c>
			//********************* Display ** LINE 1 ******************************
			LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	204e      	movs	r0, #78	; 0x4e
 8000a88:	f000 fa5a 	bl	8000f40 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, " @   alarm     ");
 8000a8c:	492e      	ldr	r1, [pc, #184]	; (8000b48 <main+0x264>)
 8000a8e:	204e      	movs	r0, #78	; 0x4e
 8000a90:	f000 fa97 	bl	8000fc2 <LCD_SendString>
			//********************* Display ** LINE 2 ******************************
			sprintf(buf, "%s %02d:%02d:%02d %s ", ampm[sTime.TimeFormat],
 8000a94:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <main+0x234>)
 8000a96:	78db      	ldrb	r3, [r3, #3]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a24      	ldr	r2, [pc, #144]	; (8000b34 <main+0x250>)
 8000aa2:	441a      	add	r2, r3
									sTime.Hours, sTime.Minutes, sTime.Seconds, alarmSet[i]);
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <main+0x234>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
			sprintf(buf, "%s %02d:%02d:%02d %s ", ampm[sTime.TimeFormat],
 8000aa8:	461d      	mov	r5, r3
									sTime.Hours, sTime.Minutes, sTime.Seconds, alarmSet[i]);
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <main+0x234>)
 8000aac:	785b      	ldrb	r3, [r3, #1]
			sprintf(buf, "%s %02d:%02d:%02d %s ", ampm[sTime.TimeFormat],
 8000aae:	4618      	mov	r0, r3
									sTime.Hours, sTime.Minutes, sTime.Seconds, alarmSet[i]);
 8000ab0:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <main+0x234>)
 8000ab2:	789b      	ldrb	r3, [r3, #2]
			sprintf(buf, "%s %02d:%02d:%02d %s ", ampm[sTime.TimeFormat],
 8000ab4:	461c      	mov	r4, r3
									sTime.Hours, sTime.Minutes, sTime.Seconds, alarmSet[i]);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	4924      	ldr	r1, [pc, #144]	; (8000b4c <main+0x268>)
 8000abc:	440b      	add	r3, r1
			sprintf(buf, "%s %02d:%02d:%02d %s ", ampm[sTime.TimeFormat],
 8000abe:	9302      	str	r3, [sp, #8]
 8000ac0:	9401      	str	r4, [sp, #4]
 8000ac2:	9000      	str	r0, [sp, #0]
 8000ac4:	462b      	mov	r3, r5
 8000ac6:	4922      	ldr	r1, [pc, #136]	; (8000b50 <main+0x26c>)
 8000ac8:	4816      	ldr	r0, [pc, #88]	; (8000b24 <main+0x240>)
 8000aca:	f005 fb51 	bl	8006170 <siprintf>
			LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000ace:	21c0      	movs	r1, #192	; 0xc0
 8000ad0:	204e      	movs	r0, #78	; 0x4e
 8000ad2:	f000 fa35 	bl	8000f40 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, buf);
 8000ad6:	4913      	ldr	r1, [pc, #76]	; (8000b24 <main+0x240>)
 8000ad8:	204e      	movs	r0, #78	; 0x4e
 8000ada:	f000 fa72 	bl	8000fc2 <LCD_SendString>
			//********************** cursor ****************************************
			bufferState();
 8000ade:	f000 f8bf 	bl	8000c60 <bufferState>
			location = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
			//**********************************************************************
			while (flag == 2) {
 8000ae6:	e006      	b.n	8000af6 <main+0x212>
				AdcSwitch(&adc_point, &location);
 8000ae8:	f107 0208 	add.w	r2, r7, #8
 8000aec:	1dfb      	adds	r3, r7, #7
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 faeb 	bl	80010cc <AdcSwitch>
			while (flag == 2) {
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <main+0x244>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d0f4      	beq.n	8000ae8 <main+0x204>
 8000afe:	e73a      	b.n	8000976 <main+0x92>
			}
			//**********************************************************************
		} else if (flag > 2)
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <main+0x244>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	f67f af36 	bls.w	8000976 <main+0x92>
			flag = 0;
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <main+0x244>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
		if (flag == 0) {
 8000b10:	e731      	b.n	8000976 <main+0x92>
 8000b12:	bf00      	nop
 8000b14:	200001bc 	.word	0x200001bc
 8000b18:	20000164 	.word	0x20000164
 8000b1c:	20000178 	.word	0x20000178
 8000b20:	20000198 	.word	0x20000198
 8000b24:	2000017c 	.word	0x2000017c
 8000b28:	20000160 	.word	0x20000160
 8000b2c:	0800742c 	.word	0x0800742c
 8000b30:	20000248 	.word	0x20000248
 8000b34:	20000000 	.word	0x20000000
 8000b38:	08007440 	.word	0x08007440
 8000b3c:	08007458 	.word	0x08007458
 8000b40:	0800745c 	.word	0x0800745c
 8000b44:	0800746c 	.word	0x0800746c
 8000b48:	08007484 	.word	0x08007484
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	08007494 	.word	0x08007494

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	; 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0320 	add.w	r3, r7, #32
 8000b5e:	2230      	movs	r2, #48	; 0x30
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f005 fa3a 	bl	8005fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <SystemClock_Config+0xdc>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	4a2b      	ldr	r2, [pc, #172]	; (8000c30 <SystemClock_Config+0xdc>)
 8000b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b86:	6413      	str	r3, [r2, #64]	; 0x40
 8000b88:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <SystemClock_Config+0xdc>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <SystemClock_Config+0xe0>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a25      	ldr	r2, [pc, #148]	; (8000c34 <SystemClock_Config+0xe0>)
 8000b9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <SystemClock_Config+0xe0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000bb0:	2306      	movs	r3, #6
 8000bb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bc8:	2308      	movs	r3, #8
 8000bca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000bcc:	23b4      	movs	r3, #180	; 0xb4
 8000bce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd8:	f107 0320 	add.w	r3, r7, #32
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f002 fc27 	bl	8003430 <HAL_RCC_OscConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000be8:	f000 fb3c 	bl	8001264 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bec:	f002 fbd0 	bl	8003390 <HAL_PWREx_EnableOverDrive>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000bf6:	f000 fb35 	bl	8001264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfa:	230f      	movs	r3, #15
 8000bfc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	2105      	movs	r1, #5
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 fe81 	bl	8003920 <HAL_RCC_ClockConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c24:	f000 fb1e 	bl	8001264 <Error_Handler>
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3750      	adds	r7, #80	; 0x50
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40007000 	.word	0x40007000

08000c38 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	2027      	movs	r0, #39	; 0x27
 8000c42:	f001 faf2 	bl	800222a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c46:	2027      	movs	r0, #39	; 0x27
 8000c48:	f001 fb0b 	bl	8002262 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2028      	movs	r0, #40	; 0x28
 8000c52:	f001 faea 	bl	800222a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c56:	2028      	movs	r0, #40	; 0x28
 8000c58:	f001 fb03 	bl	8002262 <HAL_NVIC_EnableIRQ>
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <bufferState>:

/* USER CODE BEGIN 4 */
void bufferState() {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	if (flag == 2 || flag == 1) {
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <bufferState+0x34>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d003      	beq.n	8000c74 <bufferState+0x14>
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <bufferState+0x34>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d108      	bne.n	8000c86 <bufferState+0x26>
		LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000c74:	21c0      	movs	r1, #192	; 0xc0
 8000c76:	204e      	movs	r0, #78	; 0x4e
 8000c78:	f000 f962 	bl	8000f40 <LCD_SendCommand>
		LCD_SendCommand(LCD_ADDR, 0b00001111);
 8000c7c:	210f      	movs	r1, #15
 8000c7e:	204e      	movs	r0, #78	; 0x4e
 8000c80:	f000 f95e 	bl	8000f40 <LCD_SendCommand>
 8000c84:	e004      	b.n	8000c90 <bufferState+0x30>
	} else
		LCD_SendCommand(LCD_ADDR, 0b00001110);
 8000c86:	210e      	movs	r1, #14
 8000c88:	204e      	movs	r0, #78	; 0x4e
 8000c8a:	f000 f959 	bl	8000f40 <LCD_SendCommand>
}
 8000c8e:	bf00      	nop
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000160 	.word	0x20000160

08000c98 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState pin;

	if (GPIO_Pin == GPIO_PIN_13) {
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ca8:	d153      	bne.n	8000d52 <HAL_GPIO_EXTI_Callback+0xba>
		current_time = HAL_GetTick();
 8000caa:	f000 fe61 	bl	8001970 <HAL_GetTick>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000cb4:	601a      	str	r2, [r3, #0]
		time_interval = current_time - last_time;
 8000cb6:	4b29      	ldr	r3, [pc, #164]	; (8000d5c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	4a28      	ldr	r2, [pc, #160]	; (8000d64 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000cc2:	6013      	str	r3, [r2, #0]
		last_time = current_time;
 8000cc4:	4b25      	ldr	r3, [pc, #148]	; (8000d5c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a25      	ldr	r2, [pc, #148]	; (8000d60 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000cca:	6013      	str	r3, [r2, #0]

		pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000ccc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd0:	4825      	ldr	r0, [pc, #148]	; (8000d68 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000cd2:	f001 fd1f 	bl	8002714 <HAL_GPIO_ReadPin>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	73fb      	strb	r3, [r7, #15]

		if (time_interval <= 2) {
 8000cda:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	dc07      	bgt.n	8000cf2 <HAL_GPIO_EXTI_Callback+0x5a>
			printf("Noise %d, %d\r\n", pin, time_interval);
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	4a1f      	ldr	r2, [pc, #124]	; (8000d64 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000ce6:	6812      	ldr	r2, [r2, #0]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4820      	ldr	r0, [pc, #128]	; (8000d6c <HAL_GPIO_EXTI_Callback+0xd4>)
 8000cec:	f005 f97e 	bl	8005fec <iprintf>
 8000cf0:	e00e      	b.n	8000d10 <HAL_GPIO_EXTI_Callback+0x78>
		} else {

			click[1].time = click[0].time;
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a1e      	ldr	r2, [pc, #120]	; (8000d70 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000cf8:	6093      	str	r3, [r2, #8]
			click[1].level = click[0].level;
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000cfc:	791a      	ldrb	r2, [r3, #4]
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000d00:	731a      	strb	r2, [r3, #12]

			click[0].time = time_interval;
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a1a      	ldr	r2, [pc, #104]	; (8000d70 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000d08:	6013      	str	r3, [r2, #0]
			click[0].level = pin;
 8000d0a:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	7113      	strb	r3, [r2, #4]
		}
		if (click[0].level == GPIO_PIN_RESET && click[0].time >= LONG_CLICK_MIN) // long click
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000d12:	791b      	ldrb	r3, [r3, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d108      	bne.n	8000d2a <HAL_GPIO_EXTI_Callback+0x92>
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000d20:	db03      	blt.n	8000d2a <HAL_GPIO_EXTI_Callback+0x92>
		{
			printf("Long Key\r\n");
 8000d22:	4814      	ldr	r0, [pc, #80]	; (8000d74 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000d24:	f005 f9e8 	bl	80060f8 <puts>
				&& click[1].level == GPIO_PIN_SET) {
			printf("Select Key, %d\r\n", click[0].time);
			flag++;
		}
	}
}
 8000d28:	e013      	b.n	8000d52 <HAL_GPIO_EXTI_Callback+0xba>
		} else if (click[0].level == GPIO_PIN_RESET
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000d2c:	791b      	ldrb	r3, [r3, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d10f      	bne.n	8000d52 <HAL_GPIO_EXTI_Callback+0xba>
				&& click[1].level == GPIO_PIN_SET) {
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000d34:	7b1b      	ldrb	r3, [r3, #12]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d10b      	bne.n	8000d52 <HAL_GPIO_EXTI_Callback+0xba>
			printf("Select Key, %d\r\n", click[0].time);
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000d42:	f005 f953 	bl	8005fec <iprintf>
			flag++;
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <HAL_GPIO_EXTI_Callback+0xe4>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_GPIO_EXTI_Callback+0xe4>)
 8000d50:	701a      	strb	r2, [r3, #0]
}
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000150 	.word	0x20000150
 8000d60:	20000158 	.word	0x20000158
 8000d64:	20000154 	.word	0x20000154
 8000d68:	40020800 	.word	0x40020800
 8000d6c:	080074ac 	.word	0x080074ac
 8000d70:	20000138 	.word	0x20000138
 8000d74:	080074bc 	.word	0x080074bc
 8000d78:	080074c8 	.word	0x080074c8
 8000d7c:	20000160 	.word	0x20000160

08000d80 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d109      	bne.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_ADC_Start(&hadc1);
 8000d92:	4808      	ldr	r0, [pc, #32]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000d94:	f000 fe60 	bl	8001a58 <HAL_ADC_Start>
		ADC_value = HAL_ADC_GetValue(&hadc1);
 8000d98:	4806      	ldr	r0, [pc, #24]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000d9a:	f000 ff2f 	bl	8001bfc <HAL_ADC_GetValue>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000da4:	601a      	str	r2, [r3, #0]
		//	printf("ADC_value = %d\r\n", ADC_value);

	}
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40000400 	.word	0x40000400
 8000db4:	2000009c 	.word	0x2000009c
 8000db8:	2000015c 	.word	0x2000015c

08000dbc <I2C_Scan>:

void I2C_Scan() {
 8000dbc:	b5b0      	push	{r4, r5, r7, lr}
 8000dbe:	b098      	sub	sp, #96	; 0x60
 8000dc0:	af00      	add	r7, sp, #0
	char info[] = "Scanning I2C bus...\r\n";
 8000dc2:	4b2e      	ldr	r3, [pc, #184]	; (8000e7c <I2C_Scan+0xc0>)
 8000dc4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000dc8:	461d      	mov	r5, r3
 8000dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dce:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dd2:	6020      	str	r0, [r4, #0]
 8000dd4:	3404      	adds	r4, #4
 8000dd6:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) info, strlen(info), HAL_MAX_DELAY);
 8000dd8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fa07 	bl	80001f0 <strlen>
 8000de2:	4603      	mov	r3, r0
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	4824      	ldr	r0, [pc, #144]	; (8000e80 <I2C_Scan+0xc4>)
 8000df0:	f004 f903 	bl	8004ffa <HAL_UART_Transmit>

	HAL_StatusTypeDef res;
	for (uint16_t i = 0; i < 128; i++) {
 8000df4:	2300      	movs	r3, #0
 8000df6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000dfa:	e02f      	b.n	8000e5c <I2C_Scan+0xa0>
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000dfc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	b299      	uxth	r1, r3
 8000e04:	230a      	movs	r3, #10
 8000e06:	2201      	movs	r2, #1
 8000e08:	481e      	ldr	r0, [pc, #120]	; (8000e84 <I2C_Scan+0xc8>)
 8000e0a:	f001 ff0f 	bl	8002c2c <HAL_I2C_IsDeviceReady>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		if (res == HAL_OK) {
 8000e14:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d113      	bne.n	8000e44 <I2C_Scan+0x88>
			char msg[64];
			snprintf(msg, sizeof(msg), "0x%02X", i);
 8000e1c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000e20:	1d38      	adds	r0, r7, #4
 8000e22:	4a19      	ldr	r2, [pc, #100]	; (8000e88 <I2C_Scan+0xcc>)
 8000e24:	2140      	movs	r1, #64	; 0x40
 8000e26:	f005 f96f 	bl	8006108 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff f9df 	bl	80001f0 <strlen>
 8000e32:	4603      	mov	r3, r0
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	1d39      	adds	r1, r7, #4
 8000e38:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3c:	4810      	ldr	r0, [pc, #64]	; (8000e80 <I2C_Scan+0xc4>)
 8000e3e:	f004 f8dc 	bl	8004ffa <HAL_UART_Transmit>
 8000e42:	e006      	b.n	8000e52 <I2C_Scan+0x96>
			HAL_MAX_DELAY);
		} else {
			HAL_UART_Transmit(&huart2, (uint8_t*) ".", 1, HAL_MAX_DELAY);
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4910      	ldr	r1, [pc, #64]	; (8000e8c <I2C_Scan+0xd0>)
 8000e4c:	480c      	ldr	r0, [pc, #48]	; (8000e80 <I2C_Scan+0xc4>)
 8000e4e:	f004 f8d4 	bl	8004ffa <HAL_UART_Transmit>
	for (uint16_t i = 0; i < 128; i++) {
 8000e52:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000e56:	3301      	adds	r3, #1
 8000e58:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000e5c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000e60:	2b7f      	cmp	r3, #127	; 0x7f
 8000e62:	d9cb      	bls.n	8000dfc <I2C_Scan+0x40>
		}
	}

	HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 8000e64:	f04f 33ff 	mov.w	r3, #4294967295
 8000e68:	2202      	movs	r2, #2
 8000e6a:	4909      	ldr	r1, [pc, #36]	; (8000e90 <I2C_Scan+0xd4>)
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <I2C_Scan+0xc4>)
 8000e6e:	f004 f8c4 	bl	8004ffa <HAL_UART_Transmit>
}
 8000e72:	bf00      	nop
 8000e74:	3760      	adds	r7, #96	; 0x60
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bdb0      	pop	{r4, r5, r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	080074ec 	.word	0x080074ec
 8000e80:	20000204 	.word	0x20000204
 8000e84:	200000e4 	.word	0x200000e4
 8000e88:	080074dc 	.word	0x080074dc
 8000e8c:	080074e4 	.word	0x080074e4
 8000e90:	080074e8 	.word	0x080074e8

08000e94 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af02      	add	r7, sp, #8
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	71bb      	strb	r3, [r7, #6]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	b299      	uxth	r1, r3
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4822      	ldr	r0, [pc, #136]	; (8000f3c <LCD_SendInternal+0xa8>)
 8000eb2:	f001 febb 	bl	8002c2c <HAL_I2C_IsDeviceReady>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d000      	beq.n	8000ec2 <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000ec0:	e7f1      	b.n	8000ea6 <LCD_SendInternal+0x12>
			break;
 8000ec2:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	f023 030f 	bic.w	r3, r3, #15
 8000eca:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	011b      	lsls	r3, r3, #4
 8000ed0:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | BACKLIGHT | PIN_EN;
 8000ed2:	7bba      	ldrb	r2, [r7, #14]
 8000ed4:	797b      	ldrb	r3, [r7, #5]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	f043 030c 	orr.w	r3, r3, #12
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | BACKLIGHT;
 8000ee2:	7bba      	ldrb	r2, [r7, #14]
 8000ee4:	797b      	ldrb	r3, [r7, #5]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	f043 0308 	orr.w	r3, r3, #8
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | BACKLIGHT | PIN_EN;
 8000ef2:	7b7a      	ldrb	r2, [r7, #13]
 8000ef4:	797b      	ldrb	r3, [r7, #5]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	f043 030c 	orr.w	r3, r3, #12
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | BACKLIGHT;
 8000f02:	7b7a      	ldrb	r2, [r7, #13]
 8000f04:	797b      	ldrb	r3, [r7, #5]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	f043 0308 	orr.w	r3, r3, #8
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	b299      	uxth	r1, r3
 8000f16:	f107 0208 	add.w	r2, r7, #8
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2304      	movs	r3, #4
 8000f22:	4806      	ldr	r0, [pc, #24]	; (8000f3c <LCD_SendInternal+0xa8>)
 8000f24:	f001 fd84 	bl	8002a30 <HAL_I2C_Master_Transmit>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8000f2c:	2005      	movs	r0, #5
 8000f2e:	f000 fd2b 	bl	8001988 <HAL_Delay>
	return res;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200000e4 	.word	0x200000e4

08000f40 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	460a      	mov	r2, r1
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 8000f50:	79b9      	ldrb	r1, [r7, #6]
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2200      	movs	r2, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ff9c 	bl	8000e94 <LCD_SendInternal>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	460a      	mov	r2, r1
 8000f6e:	71fb      	strb	r3, [r7, #7]
 8000f70:	4613      	mov	r3, r2
 8000f72:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000f74:	79b9      	ldrb	r1, [r7, #6]
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ff8a 	bl	8000e94 <LCD_SendInternal>
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0b00110000);
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2130      	movs	r1, #48	; 0x30
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ffd2 	bl	8000f40 <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0b00000010);
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ffcd 	bl	8000f40 <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, 0b00001100);
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	210c      	movs	r1, #12
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ffc8 	bl	8000f40 <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, 0b00000001);
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ffc3 	bl	8000f40 <LCD_SendCommand>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	6039      	str	r1, [r7, #0]
 8000fcc:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 8000fce:	e009      	b.n	8000fe4 <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	781a      	ldrb	r2, [r3, #0]
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ffc3 	bl	8000f64 <LCD_SendData>
		str++;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f1      	bne.n	8000fd0 <LCD_SendString+0xe>
	}
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <init>:

void init() {
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	af00      	add	r7, sp, #0
	I2C_Scan();
 8000ffa:	f7ff fedf 	bl	8000dbc <I2C_Scan>
	LCD_Init(LCD_ADDR);
 8000ffe:	204e      	movs	r0, #78	; 0x4e
 8001000:	f7ff ffc2 	bl	8000f88 <LCD_Init>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <SetTime>:

void loop() {
	HAL_Delay(100);
}
void SetTime(const int *location)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af02      	add	r7, sp, #8
 800100e:	6078      	str	r0, [r7, #4]
	if(*location == 3)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b03      	cmp	r3, #3
 8001016:	d106      	bne.n	8001026 <SetTime+0x1e>
		sTime.Hours += 10;
 8001018:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <SetTime+0xac>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	330a      	adds	r3, #10
 800101e:	b2da      	uxtb	r2, r3
 8001020:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <SetTime+0xac>)
 8001022:	701a      	strb	r2, [r3, #0]
 8001024:	e009      	b.n	800103a <SetTime+0x32>
	else if(*location == 4)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b04      	cmp	r3, #4
 800102c:	d105      	bne.n	800103a <SetTime+0x32>
		sTime.Hours += 1;
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <SetTime+0xac>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <SetTime+0xac>)
 8001038:	701a      	strb	r2, [r3, #0]

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800103a:	2200      	movs	r2, #0
 800103c:	491d      	ldr	r1, [pc, #116]	; (80010b4 <SetTime+0xac>)
 800103e:	481e      	ldr	r0, [pc, #120]	; (80010b8 <SetTime+0xb0>)
 8001040:	f003 f91e 	bl	8004280 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001044:	2200      	movs	r2, #0
 8001046:	491d      	ldr	r1, [pc, #116]	; (80010bc <SetTime+0xb4>)
 8001048:	481b      	ldr	r0, [pc, #108]	; (80010b8 <SetTime+0xb0>)
 800104a:	f003 f9fb 	bl	8004444 <HAL_RTC_GetDate>

	sprintf(buf, "%s %02d:%02d:%02d Save", ampm[sTime.TimeFormat],
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <SetTime+0xac>)
 8001050:	78db      	ldrb	r3, [r3, #3]
 8001052:	461a      	mov	r2, r3
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	4a19      	ldr	r2, [pc, #100]	; (80010c0 <SetTime+0xb8>)
 800105c:	441a      	add	r2, r3
							sTime.Hours, sTime.Minutes, sTime.Seconds);
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <SetTime+0xac>)
 8001060:	781b      	ldrb	r3, [r3, #0]
	sprintf(buf, "%s %02d:%02d:%02d Save", ampm[sTime.TimeFormat],
 8001062:	4618      	mov	r0, r3
							sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <SetTime+0xac>)
 8001066:	785b      	ldrb	r3, [r3, #1]
	sprintf(buf, "%s %02d:%02d:%02d Save", ampm[sTime.TimeFormat],
 8001068:	4619      	mov	r1, r3
							sTime.Hours, sTime.Minutes, sTime.Seconds);
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <SetTime+0xac>)
 800106c:	789b      	ldrb	r3, [r3, #2]
	sprintf(buf, "%s %02d:%02d:%02d Save", ampm[sTime.TimeFormat],
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	9100      	str	r1, [sp, #0]
 8001072:	4603      	mov	r3, r0
 8001074:	4913      	ldr	r1, [pc, #76]	; (80010c4 <SetTime+0xbc>)
 8001076:	4814      	ldr	r0, [pc, #80]	; (80010c8 <SetTime+0xc0>)
 8001078:	f005 f87a 	bl	8006170 <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 800107c:	21c0      	movs	r1, #192	; 0xc0
 800107e:	204e      	movs	r0, #78	; 0x4e
 8001080:	f7ff ff5e 	bl	8000f40 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, buf);
 8001084:	4910      	ldr	r1, [pc, #64]	; (80010c8 <SetTime+0xc0>)
 8001086:	204e      	movs	r0, #78	; 0x4e
 8001088:	f7ff ff9b 	bl	8000fc2 <LCD_SendString>

	for(int j = 15; j <= (*location); j--)
 800108c:	230f      	movs	r3, #15
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	e006      	b.n	80010a0 <SetTime+0x98>
	{
		LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001092:	2110      	movs	r1, #16
 8001094:	204e      	movs	r0, #78	; 0x4e
 8001096:	f7ff ff53 	bl	8000f40 <LCD_SendCommand>
	for(int j = 15; j <= (*location); j--)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	3b01      	subs	r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	ddf3      	ble.n	8001092 <SetTime+0x8a>
	}

}
 80010aa:	bf00      	nop
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000164 	.word	0x20000164
 80010b8:	20000198 	.word	0x20000198
 80010bc:	20000178 	.word	0x20000178
 80010c0:	20000000 	.word	0x20000000
 80010c4:	0800746c 	.word	0x0800746c
 80010c8:	2000017c 	.word	0x2000017c

080010cc <AdcSwitch>:

void AdcSwitch(uint8_t *adc_point, int *location)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
	//***************** UP *************************************************
	if ((ADC_value <= UP_KEY_MAX) && (*adc_point != 1)){
 80010d6:	4b62      	ldr	r3, [pc, #392]	; (8001260 <AdcSwitch+0x194>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b0f      	cmp	r3, #15
 80010dc:	dc09      	bgt.n	80010f2 <AdcSwitch+0x26>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d005      	beq.n	80010f2 <AdcSwitch+0x26>
		*adc_point = 1;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
		SetTime(location);
 80010ec:	6838      	ldr	r0, [r7, #0]
 80010ee:	f7ff ff8b 	bl	8001008 <SetTime>
	}
	//***************** DOWN ***********************************************
	if ((ADC_value >= DOWN_KEY_MIN && ADC_value <= DOWN_KEY_MAX)
 80010f2:	4b5b      	ldr	r3, [pc, #364]	; (8001260 <AdcSwitch+0x194>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f240 323d 	movw	r2, #829	; 0x33d
 80010fa:	4293      	cmp	r3, r2
 80010fc:	dd0c      	ble.n	8001118 <AdcSwitch+0x4c>
 80010fe:	4b58      	ldr	r3, [pc, #352]	; (8001260 <AdcSwitch+0x194>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f240 3266 	movw	r2, #870	; 0x366
 8001106:	4293      	cmp	r3, r2
 8001108:	dc06      	bgt.n	8001118 <AdcSwitch+0x4c>
			&& (*adc_point != 2)) {
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d002      	beq.n	8001118 <AdcSwitch+0x4c>
		*adc_point = 2;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2202      	movs	r2, #2
 8001116:	701a      	strb	r2, [r3, #0]
	}
	//****************** LEFT **********************************************
	if ((ADC_value >= LEFT_KEY_MIN && ADC_value <= LEFT_KEY_MAX)
 8001118:	4b51      	ldr	r3, [pc, #324]	; (8001260 <AdcSwitch+0x194>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f240 7275 	movw	r2, #1909	; 0x775
 8001120:	4293      	cmp	r3, r2
 8001122:	dd42      	ble.n	80011aa <AdcSwitch+0xde>
 8001124:	4b4e      	ldr	r3, [pc, #312]	; (8001260 <AdcSwitch+0x194>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f5b3 6ff5 	cmp.w	r3, #1960	; 0x7a8
 800112c:	dc3d      	bgt.n	80011aa <AdcSwitch+0xde>
			&& (*adc_point != 3)) {
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d039      	beq.n	80011aa <AdcSwitch+0xde>
		*adc_point = 3;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2203      	movs	r2, #3
 800113a:	701a      	strb	r2, [r3, #0]
	//****************** LEFT **********************************************
		if(*location <= 0)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	dc03      	bgt.n	800114c <AdcSwitch+0x80>
			*location = 0;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	e02e      	b.n	80011aa <AdcSwitch+0xde>
		else
		{
			if(*location == 3)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b03      	cmp	r3, #3
 8001152:	d10c      	bne.n	800116e <AdcSwitch+0xa2>
			{
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001154:	2110      	movs	r1, #16
 8001156:	204e      	movs	r0, #78	; 0x4e
 8001158:	f7ff fef2 	bl	8000f40 <LCD_SendCommand>
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 800115c:	2110      	movs	r1, #16
 800115e:	204e      	movs	r0, #78	; 0x4e
 8001160:	f7ff feee 	bl	8000f40 <LCD_SendCommand>
				(*location) -= 2;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	1e9a      	subs	r2, r3, #2
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	601a      	str	r2, [r3, #0]
			}
			if(*location == 6 || *location == 9 || *location == 12)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b06      	cmp	r3, #6
 8001174:	d007      	beq.n	8001186 <AdcSwitch+0xba>
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b09      	cmp	r3, #9
 800117c:	d003      	beq.n	8001186 <AdcSwitch+0xba>
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b0c      	cmp	r3, #12
 8001184:	d108      	bne.n	8001198 <AdcSwitch+0xcc>
			{
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001186:	2110      	movs	r1, #16
 8001188:	204e      	movs	r0, #78	; 0x4e
 800118a:	f7ff fed9 	bl	8000f40 <LCD_SendCommand>
				(*location) -= 1;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	1e5a      	subs	r2, r3, #1
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	601a      	str	r2, [r3, #0]
			}
			LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001198:	2110      	movs	r1, #16
 800119a:	204e      	movs	r0, #78	; 0x4e
 800119c:	f7ff fed0 	bl	8000f40 <LCD_SendCommand>
			(*location)--;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	1e5a      	subs	r2, r3, #1
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	601a      	str	r2, [r3, #0]
		}
	}
	//***************** RIGHT **********************************************
	if ((ADC_value >= RIGHT_KEY_MIN && ADC_value <= RIGHT_KEY_MAX)
 80011aa:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <AdcSwitch+0x194>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f640 3267 	movw	r2, #2919	; 0xb67
 80011b2:	4293      	cmp	r3, r2
 80011b4:	dd43      	ble.n	800123e <AdcSwitch+0x172>
 80011b6:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <AdcSwitch+0x194>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f640 32c2 	movw	r2, #3010	; 0xbc2
 80011be:	4293      	cmp	r3, r2
 80011c0:	dc3d      	bgt.n	800123e <AdcSwitch+0x172>
			&& (*adc_point != 4)) {
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d039      	beq.n	800123e <AdcSwitch+0x172>
		*adc_point = 4;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2204      	movs	r2, #4
 80011ce:	701a      	strb	r2, [r3, #0]
	//***************** RIGHT **********************************************
		if (*location >= 12)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b0b      	cmp	r3, #11
 80011d6:	dd03      	ble.n	80011e0 <AdcSwitch+0x114>
			*location = 12;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	220c      	movs	r2, #12
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	e02e      	b.n	800123e <AdcSwitch+0x172>
		else
		{
			if(*location == 0)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10c      	bne.n	8001202 <AdcSwitch+0x136>
			{
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 80011e8:	2114      	movs	r1, #20
 80011ea:	204e      	movs	r0, #78	; 0x4e
 80011ec:	f7ff fea8 	bl	8000f40 <LCD_SendCommand>
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 80011f0:	2114      	movs	r1, #20
 80011f2:	204e      	movs	r0, #78	; 0x4e
 80011f4:	f7ff fea4 	bl	8000f40 <LCD_SendCommand>
				(*location) += 2;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	1c9a      	adds	r2, r3, #2
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	601a      	str	r2, [r3, #0]
			}
			if(*location == 4 || *location == 7 || *location == 10)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b04      	cmp	r3, #4
 8001208:	d007      	beq.n	800121a <AdcSwitch+0x14e>
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b07      	cmp	r3, #7
 8001210:	d003      	beq.n	800121a <AdcSwitch+0x14e>
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b0a      	cmp	r3, #10
 8001218:	d108      	bne.n	800122c <AdcSwitch+0x160>
			{
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 800121a:	2114      	movs	r1, #20
 800121c:	204e      	movs	r0, #78	; 0x4e
 800121e:	f7ff fe8f 	bl	8000f40 <LCD_SendCommand>
				(*location) += 1;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	601a      	str	r2, [r3, #0]
			}
			LCD_SendCommand(LCD_ADDR, 0b00010100);
 800122c:	2114      	movs	r1, #20
 800122e:	204e      	movs	r0, #78	; 0x4e
 8001230:	f7ff fe86 	bl	8000f40 <LCD_SendCommand>
			(*location)++;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	1c5a      	adds	r2, r3, #1
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	601a      	str	r2, [r3, #0]
		}
	}
	if (ADC_value > RIGHT_KEY_MAX && *adc_point != 0) {
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <AdcSwitch+0x194>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f640 32c2 	movw	r2, #3010	; 0xbc2
 8001246:	4293      	cmp	r3, r2
 8001248:	dd06      	ble.n	8001258 <AdcSwitch+0x18c>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d002      	beq.n	8001258 <AdcSwitch+0x18c>
		*adc_point = 0;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
	}
	//**********************************************************************

}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000015c 	.word	0x2000015c

08001264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
}
 800126a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800126c:	e7fe      	b.n	800126c <Error_Handler+0x8>
	...

08001270 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001284:	2300      	movs	r3, #0
 8001286:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001288:	4b25      	ldr	r3, [pc, #148]	; (8001320 <MX_RTC_Init+0xb0>)
 800128a:	4a26      	ldr	r2, [pc, #152]	; (8001324 <MX_RTC_Init+0xb4>)
 800128c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800128e:	4b24      	ldr	r3, [pc, #144]	; (8001320 <MX_RTC_Init+0xb0>)
 8001290:	2240      	movs	r2, #64	; 0x40
 8001292:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001294:	4b22      	ldr	r3, [pc, #136]	; (8001320 <MX_RTC_Init+0xb0>)
 8001296:	227f      	movs	r2, #127	; 0x7f
 8001298:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800129a:	4b21      	ldr	r3, [pc, #132]	; (8001320 <MX_RTC_Init+0xb0>)
 800129c:	22ff      	movs	r2, #255	; 0xff
 800129e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012a0:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <MX_RTC_Init+0xb0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012a6:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <MX_RTC_Init+0xb0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012ac:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <MX_RTC_Init+0xb0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012b2:	481b      	ldr	r0, [pc, #108]	; (8001320 <MX_RTC_Init+0xb0>)
 80012b4:	f002 fed4 	bl	8004060 <HAL_RTC_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80012be:	f7ff ffd1 	bl	8001264 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 80012c2:	2301      	movs	r3, #1
 80012c4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80012ce:	2300      	movs	r3, #0
 80012d0:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	480f      	ldr	r0, [pc, #60]	; (8001320 <MX_RTC_Init+0xb0>)
 80012e2:	f002 ff33 	bl	800414c <HAL_RTC_SetTime>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 80012ec:	f7ff ffba 	bl	8001264 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80012f0:	2301      	movs	r3, #1
 80012f2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80012f4:	2301      	movs	r3, #1
 80012f6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001300:	463b      	mov	r3, r7
 8001302:	2200      	movs	r2, #0
 8001304:	4619      	mov	r1, r3
 8001306:	4806      	ldr	r0, [pc, #24]	; (8001320 <MX_RTC_Init+0xb0>)
 8001308:	f003 f818 	bl	800433c <HAL_RTC_SetDate>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8001312:	f7ff ffa7 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000198 	.word	0x20000198
 8001324:	40002800 	.word	0x40002800

08001328 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08e      	sub	sp, #56	; 0x38
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	2230      	movs	r2, #48	; 0x30
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f004 fe4f 	bl	8005fdc <memset>
  if(rtcHandle->Instance==RTC)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a0c      	ldr	r2, [pc, #48]	; (8001374 <HAL_RTC_MspInit+0x4c>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d111      	bne.n	800136c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001348:	2320      	movs	r3, #32
 800134a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800134c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	4618      	mov	r0, r3
 8001358:	f002 fcc2 	bl	8003ce0 <HAL_RCCEx_PeriphCLKConfig>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001362:	f7ff ff7f 	bl	8001264 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <HAL_RTC_MspInit+0x50>)
 8001368:	2201      	movs	r2, #1
 800136a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800136c:	bf00      	nop
 800136e:	3738      	adds	r7, #56	; 0x38
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40002800 	.word	0x40002800
 8001378:	42470e3c 	.word	0x42470e3c

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <HAL_MspInit+0x4c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <HAL_MspInit+0x4c>)
 800138c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001390:	6453      	str	r3, [r2, #68]	; 0x44
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <HAL_MspInit+0x4c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_MspInit+0x4c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <HAL_MspInit+0x4c>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_MspInit+0x4c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <NMI_Handler+0x4>

080013d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <HardFault_Handler+0x4>

080013d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <MemManage_Handler+0x4>

080013de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001418:	f000 fa96 	bl	8001948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <TIM3_IRQHandler+0x10>)
 8001426:	f003 f9d9 	bl	80047dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200001bc 	.word	0x200001bc

08001434 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <USART3_IRQHandler+0x10>)
 800143a:	f003 fe71 	bl	8005120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000248 	.word	0x20000248

08001448 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800144c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001450:	f001 f992 	bl	8002778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	e00a      	b.n	8001480 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800146a:	f3af 8000 	nop.w
 800146e:	4601      	mov	r1, r0
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	60ba      	str	r2, [r7, #8]
 8001476:	b2ca      	uxtb	r2, r1
 8001478:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	3301      	adds	r3, #1
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	dbf0      	blt.n	800146a <_read+0x12>
	}

return len;
 8001488:	687b      	ldr	r3, [r7, #4]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	e009      	b.n	80014b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	60ba      	str	r2, [r7, #8]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fa07 	bl	80008c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	429a      	cmp	r2, r3
 80014be:	dbf1      	blt.n	80014a4 <_write+0x12>
	}
	return len;
 80014c0:	687b      	ldr	r3, [r7, #4]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <_close>:

int _close(int file)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
	return -1;
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014f2:	605a      	str	r2, [r3, #4]
	return 0;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <_isatty>:

int _isatty(int file)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
	return 1;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
	return 0;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800153c:	4a14      	ldr	r2, [pc, #80]	; (8001590 <_sbrk+0x5c>)
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <_sbrk+0x60>)
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001548:	4b13      	ldr	r3, [pc, #76]	; (8001598 <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d102      	bne.n	8001556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <_sbrk+0x64>)
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <_sbrk+0x68>)
 8001554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	429a      	cmp	r2, r3
 8001562:	d207      	bcs.n	8001574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001564:	f004 fd10 	bl	8005f88 <__errno>
 8001568:	4603      	mov	r3, r0
 800156a:	220c      	movs	r2, #12
 800156c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
 8001572:	e009      	b.n	8001588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <_sbrk+0x64>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <_sbrk+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	4a05      	ldr	r2, [pc, #20]	; (8001598 <_sbrk+0x64>)
 8001584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001586:	68fb      	ldr	r3, [r7, #12]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20030000 	.word	0x20030000
 8001594:	00000400 	.word	0x00000400
 8001598:	200001b8 	.word	0x200001b8
 800159c:	200002a0 	.word	0x200002a0

080015a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <SystemInit+0x20>)
 80015a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <SystemInit+0x20>)
 80015ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	463b      	mov	r3, r7
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <MX_TIM3_Init+0x94>)
 80015e2:	4a1e      	ldr	r2, [pc, #120]	; (800165c <MX_TIM3_Init+0x98>)
 80015e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <MX_TIM3_Init+0x94>)
 80015e8:	f242 7210 	movw	r2, #10000	; 0x2710
 80015ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_TIM3_Init+0x94>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 900;
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <MX_TIM3_Init+0x94>)
 80015f6:	f44f 7261 	mov.w	r2, #900	; 0x384
 80015fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <MX_TIM3_Init+0x94>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MX_TIM3_Init+0x94>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001608:	4813      	ldr	r0, [pc, #76]	; (8001658 <MX_TIM3_Init+0x94>)
 800160a:	f003 f827 	bl	800465c <HAL_TIM_Base_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001614:	f7ff fe26 	bl	8001264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	4619      	mov	r1, r3
 8001624:	480c      	ldr	r0, [pc, #48]	; (8001658 <MX_TIM3_Init+0x94>)
 8001626:	f003 f9e1 	bl	80049ec <HAL_TIM_ConfigClockSource>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001630:	f7ff fe18 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001634:	2300      	movs	r3, #0
 8001636:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800163c:	463b      	mov	r3, r7
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_TIM3_Init+0x94>)
 8001642:	f003 fbfd 	bl	8004e40 <HAL_TIMEx_MasterConfigSynchronization>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800164c:	f7ff fe0a 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200001bc 	.word	0x200001bc
 800165c:	40000400 	.word	0x40000400

08001660 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <HAL_TIM_Base_MspInit+0x48>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d115      	bne.n	800169e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <HAL_TIM_Base_MspInit+0x4c>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a0c      	ldr	r2, [pc, #48]	; (80016ac <HAL_TIM_Base_MspInit+0x4c>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_TIM_Base_MspInit+0x4c>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	201d      	movs	r0, #29
 8001694:	f000 fdc9 	bl	800222a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001698:	201d      	movs	r0, #29
 800169a:	f000 fde2 	bl	8002262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40000400 	.word	0x40000400
 80016ac:	40023800 	.word	0x40023800

080016b0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_USART2_UART_Init+0x4c>)
 80016b6:	4a12      	ldr	r2, [pc, #72]	; (8001700 <MX_USART2_UART_Init+0x50>)
 80016b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <MX_USART2_UART_Init+0x4c>)
 80016bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <MX_USART2_UART_Init+0x4c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <MX_USART2_UART_Init+0x4c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <MX_USART2_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <MX_USART2_UART_Init+0x4c>)
 80016d6:	220c      	movs	r2, #12
 80016d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <MX_USART2_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <MX_USART2_UART_Init+0x4c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_USART2_UART_Init+0x4c>)
 80016e8:	f003 fc3a 	bl	8004f60 <HAL_UART_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016f2:	f7ff fdb7 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000204 	.word	0x20000204
 8001700:	40004400 	.word	0x40004400

08001704 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_USART3_UART_Init+0x4c>)
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <MX_USART3_UART_Init+0x50>)
 800170c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <MX_USART3_UART_Init+0x4c>)
 8001710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001714:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MX_USART3_UART_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <MX_USART3_UART_Init+0x4c>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <MX_USART3_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <MX_USART3_UART_Init+0x4c>)
 800172a:	220c      	movs	r2, #12
 800172c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <MX_USART3_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <MX_USART3_UART_Init+0x4c>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_USART3_UART_Init+0x4c>)
 800173c:	f003 fc10 	bl	8004f60 <HAL_UART_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001746:	f7ff fd8d 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000248 	.word	0x20000248
 8001754:	40004800 	.word	0x40004800

08001758 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08c      	sub	sp, #48	; 0x30
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 031c 	add.w	r3, r7, #28
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a32      	ldr	r2, [pc, #200]	; (8001840 <HAL_UART_MspInit+0xe8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d12c      	bne.n	80017d4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
 800177e:	4b31      	ldr	r3, [pc, #196]	; (8001844 <HAL_UART_MspInit+0xec>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	4a30      	ldr	r2, [pc, #192]	; (8001844 <HAL_UART_MspInit+0xec>)
 8001784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001788:	6413      	str	r3, [r2, #64]	; 0x40
 800178a:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <HAL_UART_MspInit+0xec>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	61bb      	str	r3, [r7, #24]
 8001794:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <HAL_UART_MspInit+0xec>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a29      	ldr	r2, [pc, #164]	; (8001844 <HAL_UART_MspInit+0xec>)
 80017a0:	f043 0308 	orr.w	r3, r3, #8
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b27      	ldr	r3, [pc, #156]	; (8001844 <HAL_UART_MspInit+0xec>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80017b2:	2360      	movs	r3, #96	; 0x60
 80017b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017be:	2303      	movs	r3, #3
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017c2:	2307      	movs	r3, #7
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c6:	f107 031c 	add.w	r3, r7, #28
 80017ca:	4619      	mov	r1, r3
 80017cc:	481e      	ldr	r0, [pc, #120]	; (8001848 <HAL_UART_MspInit+0xf0>)
 80017ce:	f000 fdf5 	bl	80023bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80017d2:	e031      	b.n	8001838 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1c      	ldr	r2, [pc, #112]	; (800184c <HAL_UART_MspInit+0xf4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d12c      	bne.n	8001838 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <HAL_UART_MspInit+0xec>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	4a17      	ldr	r2, [pc, #92]	; (8001844 <HAL_UART_MspInit+0xec>)
 80017e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ec:	6413      	str	r3, [r2, #64]	; 0x40
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_UART_MspInit+0xec>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_UART_MspInit+0xec>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a10      	ldr	r2, [pc, #64]	; (8001844 <HAL_UART_MspInit+0xec>)
 8001804:	f043 0308 	orr.w	r3, r3, #8
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <HAL_UART_MspInit+0xec>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001816:	f44f 7340 	mov.w	r3, #768	; 0x300
 800181a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001828:	2307      	movs	r3, #7
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	4619      	mov	r1, r3
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <HAL_UART_MspInit+0xf0>)
 8001834:	f000 fdc2 	bl	80023bc <HAL_GPIO_Init>
}
 8001838:	bf00      	nop
 800183a:	3730      	adds	r7, #48	; 0x30
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40004400 	.word	0x40004400
 8001844:	40023800 	.word	0x40023800
 8001848:	40020c00 	.word	0x40020c00
 800184c:	40004800 	.word	0x40004800

08001850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001888 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001854:	480d      	ldr	r0, [pc, #52]	; (800188c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001856:	490e      	ldr	r1, [pc, #56]	; (8001890 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001858:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800185c:	e002      	b.n	8001864 <LoopCopyDataInit>

0800185e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001862:	3304      	adds	r3, #4

08001864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001868:	d3f9      	bcc.n	800185e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186a:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800186c:	4c0b      	ldr	r4, [pc, #44]	; (800189c <LoopFillZerobss+0x26>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001870:	e001      	b.n	8001876 <LoopFillZerobss>

08001872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001874:	3204      	adds	r2, #4

08001876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001878:	d3fb      	bcc.n	8001872 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800187a:	f7ff fe91 	bl	80015a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800187e:	f004 fb89 	bl	8005f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001882:	f7ff f82f 	bl	80008e4 <main>
  bx  lr    
 8001886:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001888:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800188c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001890:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001894:	080075c4 	.word	0x080075c4
  ldr r2, =_sbss
 8001898:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800189c:	200002a0 	.word	0x200002a0

080018a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a0:	e7fe      	b.n	80018a0 <ADC_IRQHandler>
	...

080018a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a8:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <HAL_Init+0x40>)
 80018ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_Init+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <HAL_Init+0x40>)
 80018ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <HAL_Init+0x40>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <HAL_Init+0x40>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f000 fca1 	bl	8002214 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d2:	200f      	movs	r0, #15
 80018d4:	f000 f808 	bl	80018e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d8:	f7ff fd50 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00

080018e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_InitTick+0x54>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_InitTick+0x58>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f000 fcb9 	bl	800227e <HAL_SYSTICK_Config>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e00e      	b.n	8001934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b0f      	cmp	r3, #15
 800191a:	d80a      	bhi.n	8001932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191c:	2200      	movs	r2, #0
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f000 fc81 	bl	800222a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001928:	4a06      	ldr	r2, [pc, #24]	; (8001944 <HAL_InitTick+0x5c>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000010 	.word	0x20000010
 8001940:	20000018 	.word	0x20000018
 8001944:	20000014 	.word	0x20000014

08001948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x20>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x24>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a04      	ldr	r2, [pc, #16]	; (800196c <HAL_IncTick+0x24>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000018 	.word	0x20000018
 800196c:	2000028c 	.word	0x2000028c

08001970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <HAL_GetTick+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	2000028c 	.word	0x2000028c

08001988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff ffee 	bl	8001970 <HAL_GetTick>
 8001994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a0:	d005      	beq.n	80019ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_Delay+0x44>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ae:	bf00      	nop
 80019b0:	f7ff ffde 	bl	8001970 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d8f7      	bhi.n	80019b0 <HAL_Delay+0x28>
  {
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000018 	.word	0x20000018

080019d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e033      	b.n	8001a4e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7fe fe2a 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d118      	bne.n	8001a40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a16:	f023 0302 	bic.w	r3, r3, #2
 8001a1a:	f043 0202 	orr.w	r2, r3, #2
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 fa2a 	bl	8001e7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f023 0303 	bic.w	r3, r3, #3
 8001a36:	f043 0201 	orr.w	r2, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a3e:	e001      	b.n	8001a44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <HAL_ADC_Start+0x1a>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e0b2      	b.n	8001bd8 <HAL_ADC_Start+0x180>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d018      	beq.n	8001aba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0201 	orr.w	r2, r2, #1
 8001a96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a98:	4b52      	ldr	r3, [pc, #328]	; (8001be4 <HAL_ADC_Start+0x18c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a52      	ldr	r2, [pc, #328]	; (8001be8 <HAL_ADC_Start+0x190>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	0c9a      	lsrs	r2, r3, #18
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001aac:	e002      	b.n	8001ab4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f9      	bne.n	8001aae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d17a      	bne.n	8001bbe <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d007      	beq.n	8001afa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001af2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b06:	d106      	bne.n	8001b16 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0c:	f023 0206 	bic.w	r2, r3, #6
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	645a      	str	r2, [r3, #68]	; 0x44
 8001b14:	e002      	b.n	8001b1c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b24:	4b31      	ldr	r3, [pc, #196]	; (8001bec <HAL_ADC_Start+0x194>)
 8001b26:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b30:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d12a      	bne.n	8001b94 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a2b      	ldr	r2, [pc, #172]	; (8001bf0 <HAL_ADC_Start+0x198>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d015      	beq.n	8001b74 <HAL_ADC_Start+0x11c>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a29      	ldr	r2, [pc, #164]	; (8001bf4 <HAL_ADC_Start+0x19c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d105      	bne.n	8001b5e <HAL_ADC_Start+0x106>
 8001b52:	4b26      	ldr	r3, [pc, #152]	; (8001bec <HAL_ADC_Start+0x194>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00a      	beq.n	8001b74 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a25      	ldr	r2, [pc, #148]	; (8001bf8 <HAL_ADC_Start+0x1a0>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d136      	bne.n	8001bd6 <HAL_ADC_Start+0x17e>
 8001b68:	4b20      	ldr	r3, [pc, #128]	; (8001bec <HAL_ADC_Start+0x194>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0310 	and.w	r3, r3, #16
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d130      	bne.n	8001bd6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d129      	bne.n	8001bd6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	e020      	b.n	8001bd6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a15      	ldr	r2, [pc, #84]	; (8001bf0 <HAL_ADC_Start+0x198>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d11b      	bne.n	8001bd6 <HAL_ADC_Start+0x17e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d114      	bne.n	8001bd6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	e00b      	b.n	8001bd6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f043 0210 	orr.w	r2, r3, #16
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	f043 0201 	orr.w	r2, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	20000010 	.word	0x20000010
 8001be8:	431bde83 	.word	0x431bde83
 8001bec:	40012300 	.word	0x40012300
 8001bf0:	40012000 	.word	0x40012000
 8001bf4:	40012100 	.word	0x40012100
 8001bf8:	40012200 	.word	0x40012200

08001bfc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x1c>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e113      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x244>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b09      	cmp	r3, #9
 8001c42:	d925      	bls.n	8001c90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68d9      	ldr	r1, [r3, #12]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	3b1e      	subs	r3, #30
 8001c5a:	2207      	movs	r2, #7
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43da      	mvns	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	400a      	ands	r2, r1
 8001c68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68d9      	ldr	r1, [r3, #12]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4403      	add	r3, r0
 8001c82:	3b1e      	subs	r3, #30
 8001c84:	409a      	lsls	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	e022      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6919      	ldr	r1, [r3, #16]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6919      	ldr	r1, [r3, #16]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4403      	add	r3, r0
 8001ccc:	409a      	lsls	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b06      	cmp	r3, #6
 8001cdc:	d824      	bhi.n	8001d28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	3b05      	subs	r3, #5
 8001cf0:	221f      	movs	r2, #31
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	400a      	ands	r2, r1
 8001cfe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	3b05      	subs	r3, #5
 8001d1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	635a      	str	r2, [r3, #52]	; 0x34
 8001d26:	e04c      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b0c      	cmp	r3, #12
 8001d2e:	d824      	bhi.n	8001d7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	3b23      	subs	r3, #35	; 0x23
 8001d42:	221f      	movs	r2, #31
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43da      	mvns	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	400a      	ands	r2, r1
 8001d50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	4618      	mov	r0, r3
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	3b23      	subs	r3, #35	; 0x23
 8001d6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	631a      	str	r2, [r3, #48]	; 0x30
 8001d78:	e023      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	3b41      	subs	r3, #65	; 0x41
 8001d8c:	221f      	movs	r2, #31
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	400a      	ands	r2, r1
 8001d9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	4618      	mov	r0, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	3b41      	subs	r3, #65	; 0x41
 8001db6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dc2:	4b29      	ldr	r3, [pc, #164]	; (8001e68 <HAL_ADC_ConfigChannel+0x250>)
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a28      	ldr	r2, [pc, #160]	; (8001e6c <HAL_ADC_ConfigChannel+0x254>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d10f      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x1d8>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b12      	cmp	r3, #18
 8001dd6:	d10b      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a1d      	ldr	r2, [pc, #116]	; (8001e6c <HAL_ADC_ConfigChannel+0x254>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d12b      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x23a>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1c      	ldr	r2, [pc, #112]	; (8001e70 <HAL_ADC_ConfigChannel+0x258>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d003      	beq.n	8001e0c <HAL_ADC_ConfigChannel+0x1f4>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b11      	cmp	r3, #17
 8001e0a:	d122      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a11      	ldr	r2, [pc, #68]	; (8001e70 <HAL_ADC_ConfigChannel+0x258>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d111      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <HAL_ADC_ConfigChannel+0x25c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <HAL_ADC_ConfigChannel+0x260>)
 8001e34:	fba2 2303 	umull	r2, r3, r2, r3
 8001e38:	0c9a      	lsrs	r2, r3, #18
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e44:	e002      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f9      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	40012300 	.word	0x40012300
 8001e6c:	40012000 	.word	0x40012000
 8001e70:	10000012 	.word	0x10000012
 8001e74:	20000010 	.word	0x20000010
 8001e78:	431bde83 	.word	0x431bde83

08001e7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e84:	4b79      	ldr	r3, [pc, #484]	; (800206c <ADC_Init+0x1f0>)
 8001e86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6859      	ldr	r1, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	021a      	lsls	r2, r3, #8
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ed4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6859      	ldr	r1, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ef6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6899      	ldr	r1, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0e:	4a58      	ldr	r2, [pc, #352]	; (8002070 <ADC_Init+0x1f4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d022      	beq.n	8001f5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6899      	ldr	r1, [r3, #8]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6899      	ldr	r1, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	e00f      	b.n	8001f7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0202 	bic.w	r2, r2, #2
 8001f88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6899      	ldr	r1, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7e1b      	ldrb	r3, [r3, #24]
 8001f94:	005a      	lsls	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d01b      	beq.n	8001fe0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6859      	ldr	r1, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	035a      	lsls	r2, r3, #13
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	e007      	b.n	8001ff0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	3b01      	subs	r3, #1
 800200c:	051a      	lsls	r2, r3, #20
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002024:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6899      	ldr	r1, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002032:	025a      	lsls	r2, r3, #9
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800204a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6899      	ldr	r1, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	029a      	lsls	r2, r3, #10
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	609a      	str	r2, [r3, #8]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	40012300 	.word	0x40012300
 8002070:	0f000001 	.word	0x0f000001

08002074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002090:	4013      	ands	r3, r2
 8002092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800209c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020a6:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <__NVIC_SetPriorityGrouping+0x44>)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	60d3      	str	r3, [r2, #12]
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <__NVIC_GetPriorityGrouping+0x18>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	f003 0307 	and.w	r3, r3, #7
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	db0b      	blt.n	8002102 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	f003 021f 	and.w	r2, r3, #31
 80020f0:	4907      	ldr	r1, [pc, #28]	; (8002110 <__NVIC_EnableIRQ+0x38>)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	2001      	movs	r0, #1
 80020fa:	fa00 f202 	lsl.w	r2, r0, r2
 80020fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000e100 	.word	0xe000e100

08002114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	6039      	str	r1, [r7, #0]
 800211e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002124:	2b00      	cmp	r3, #0
 8002126:	db0a      	blt.n	800213e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	490c      	ldr	r1, [pc, #48]	; (8002160 <__NVIC_SetPriority+0x4c>)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	0112      	lsls	r2, r2, #4
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	440b      	add	r3, r1
 8002138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800213c:	e00a      	b.n	8002154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	b2da      	uxtb	r2, r3
 8002142:	4908      	ldr	r1, [pc, #32]	; (8002164 <__NVIC_SetPriority+0x50>)
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	3b04      	subs	r3, #4
 800214c:	0112      	lsls	r2, r2, #4
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	440b      	add	r3, r1
 8002152:	761a      	strb	r2, [r3, #24]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000e100 	.word	0xe000e100
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002168:	b480      	push	{r7}
 800216a:	b089      	sub	sp, #36	; 0x24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f1c3 0307 	rsb	r3, r3, #7
 8002182:	2b04      	cmp	r3, #4
 8002184:	bf28      	it	cs
 8002186:	2304      	movcs	r3, #4
 8002188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3304      	adds	r3, #4
 800218e:	2b06      	cmp	r3, #6
 8002190:	d902      	bls.n	8002198 <NVIC_EncodePriority+0x30>
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3b03      	subs	r3, #3
 8002196:	e000      	b.n	800219a <NVIC_EncodePriority+0x32>
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800219c:	f04f 32ff 	mov.w	r2, #4294967295
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43da      	mvns	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	401a      	ands	r2, r3
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b0:	f04f 31ff 	mov.w	r1, #4294967295
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ba:	43d9      	mvns	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c0:	4313      	orrs	r3, r2
         );
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3724      	adds	r7, #36	; 0x24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e0:	d301      	bcc.n	80021e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00f      	b.n	8002206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <SysTick_Config+0x40>)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ee:	210f      	movs	r1, #15
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295
 80021f4:	f7ff ff8e 	bl	8002114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <SysTick_Config+0x40>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021fe:	4b04      	ldr	r3, [pc, #16]	; (8002210 <SysTick_Config+0x40>)
 8002200:	2207      	movs	r2, #7
 8002202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	e000e010 	.word	0xe000e010

08002214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff ff29 	bl	8002074 <__NVIC_SetPriorityGrouping>
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800222a:	b580      	push	{r7, lr}
 800222c:	b086      	sub	sp, #24
 800222e:	af00      	add	r7, sp, #0
 8002230:	4603      	mov	r3, r0
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
 8002236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800223c:	f7ff ff3e 	bl	80020bc <__NVIC_GetPriorityGrouping>
 8002240:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68b9      	ldr	r1, [r7, #8]
 8002246:	6978      	ldr	r0, [r7, #20]
 8002248:	f7ff ff8e 	bl	8002168 <NVIC_EncodePriority>
 800224c:	4602      	mov	r2, r0
 800224e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002252:	4611      	mov	r1, r2
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff5d 	bl	8002114 <__NVIC_SetPriority>
}
 800225a:	bf00      	nop
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	4603      	mov	r3, r0
 800226a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800226c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff31 	bl	80020d8 <__NVIC_EnableIRQ>
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff ffa2 	bl	80021d0 <SysTick_Config>
 800228c:	4603      	mov	r3, r0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022a4:	f7ff fb64 	bl	8001970 <HAL_GetTick>
 80022a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d008      	beq.n	80022c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2280      	movs	r2, #128	; 0x80
 80022ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e052      	b.n	800236e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0216 	bic.w	r2, r2, #22
 80022d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695a      	ldr	r2, [r3, #20]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d103      	bne.n	80022f8 <HAL_DMA_Abort+0x62>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d007      	beq.n	8002308 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0208 	bic.w	r2, r2, #8
 8002306:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0201 	bic.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002318:	e013      	b.n	8002342 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800231a:	f7ff fb29 	bl	8001970 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b05      	cmp	r3, #5
 8002326:	d90c      	bls.n	8002342 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2220      	movs	r2, #32
 800232c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2203      	movs	r2, #3
 8002332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e015      	b.n	800236e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1e4      	bne.n	800231a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002354:	223f      	movs	r2, #63	; 0x3f
 8002356:	409a      	lsls	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d004      	beq.n	8002394 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2280      	movs	r2, #128	; 0x80
 800238e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e00c      	b.n	80023ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2205      	movs	r2, #5
 8002398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	; 0x24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
 80023d6:	e177      	b.n	80026c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023d8:	2201      	movs	r2, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	f040 8166 	bne.w	80026c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d005      	beq.n	800240e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240a:	2b02      	cmp	r3, #2
 800240c:	d130      	bne.n	8002470 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	2203      	movs	r2, #3
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002444:	2201      	movs	r2, #1
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f003 0201 	and.w	r2, r3, #1
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b03      	cmp	r3, #3
 800247a:	d017      	beq.n	80024ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	2203      	movs	r2, #3
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d123      	bne.n	8002500 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	08da      	lsrs	r2, r3, #3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3208      	adds	r2, #8
 80024c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	220f      	movs	r2, #15
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	08da      	lsrs	r2, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3208      	adds	r2, #8
 80024fa:	69b9      	ldr	r1, [r7, #24]
 80024fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	2203      	movs	r2, #3
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0203 	and.w	r2, r3, #3
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80c0 	beq.w	80026c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	4b66      	ldr	r3, [pc, #408]	; (80026e0 <HAL_GPIO_Init+0x324>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	4a65      	ldr	r2, [pc, #404]	; (80026e0 <HAL_GPIO_Init+0x324>)
 800254c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002550:	6453      	str	r3, [r2, #68]	; 0x44
 8002552:	4b63      	ldr	r3, [pc, #396]	; (80026e0 <HAL_GPIO_Init+0x324>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800255e:	4a61      	ldr	r2, [pc, #388]	; (80026e4 <HAL_GPIO_Init+0x328>)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	089b      	lsrs	r3, r3, #2
 8002564:	3302      	adds	r3, #2
 8002566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	220f      	movs	r2, #15
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a58      	ldr	r2, [pc, #352]	; (80026e8 <HAL_GPIO_Init+0x32c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d037      	beq.n	80025fa <HAL_GPIO_Init+0x23e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a57      	ldr	r2, [pc, #348]	; (80026ec <HAL_GPIO_Init+0x330>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d031      	beq.n	80025f6 <HAL_GPIO_Init+0x23a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a56      	ldr	r2, [pc, #344]	; (80026f0 <HAL_GPIO_Init+0x334>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d02b      	beq.n	80025f2 <HAL_GPIO_Init+0x236>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a55      	ldr	r2, [pc, #340]	; (80026f4 <HAL_GPIO_Init+0x338>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d025      	beq.n	80025ee <HAL_GPIO_Init+0x232>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a54      	ldr	r2, [pc, #336]	; (80026f8 <HAL_GPIO_Init+0x33c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d01f      	beq.n	80025ea <HAL_GPIO_Init+0x22e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a53      	ldr	r2, [pc, #332]	; (80026fc <HAL_GPIO_Init+0x340>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d019      	beq.n	80025e6 <HAL_GPIO_Init+0x22a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a52      	ldr	r2, [pc, #328]	; (8002700 <HAL_GPIO_Init+0x344>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d013      	beq.n	80025e2 <HAL_GPIO_Init+0x226>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a51      	ldr	r2, [pc, #324]	; (8002704 <HAL_GPIO_Init+0x348>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00d      	beq.n	80025de <HAL_GPIO_Init+0x222>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a50      	ldr	r2, [pc, #320]	; (8002708 <HAL_GPIO_Init+0x34c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d007      	beq.n	80025da <HAL_GPIO_Init+0x21e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4f      	ldr	r2, [pc, #316]	; (800270c <HAL_GPIO_Init+0x350>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d101      	bne.n	80025d6 <HAL_GPIO_Init+0x21a>
 80025d2:	2309      	movs	r3, #9
 80025d4:	e012      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025d6:	230a      	movs	r3, #10
 80025d8:	e010      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025da:	2308      	movs	r3, #8
 80025dc:	e00e      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025de:	2307      	movs	r3, #7
 80025e0:	e00c      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025e2:	2306      	movs	r3, #6
 80025e4:	e00a      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025e6:	2305      	movs	r3, #5
 80025e8:	e008      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025ea:	2304      	movs	r3, #4
 80025ec:	e006      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025ee:	2303      	movs	r3, #3
 80025f0:	e004      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e002      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025fa:	2300      	movs	r3, #0
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	f002 0203 	and.w	r2, r2, #3
 8002602:	0092      	lsls	r2, r2, #2
 8002604:	4093      	lsls	r3, r2
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800260c:	4935      	ldr	r1, [pc, #212]	; (80026e4 <HAL_GPIO_Init+0x328>)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	089b      	lsrs	r3, r3, #2
 8002612:	3302      	adds	r3, #2
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800261a:	4b3d      	ldr	r3, [pc, #244]	; (8002710 <HAL_GPIO_Init+0x354>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800263e:	4a34      	ldr	r2, [pc, #208]	; (8002710 <HAL_GPIO_Init+0x354>)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002644:	4b32      	ldr	r3, [pc, #200]	; (8002710 <HAL_GPIO_Init+0x354>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002668:	4a29      	ldr	r2, [pc, #164]	; (8002710 <HAL_GPIO_Init+0x354>)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800266e:	4b28      	ldr	r3, [pc, #160]	; (8002710 <HAL_GPIO_Init+0x354>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002692:	4a1f      	ldr	r2, [pc, #124]	; (8002710 <HAL_GPIO_Init+0x354>)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002698:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <HAL_GPIO_Init+0x354>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026bc:	4a14      	ldr	r2, [pc, #80]	; (8002710 <HAL_GPIO_Init+0x354>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3301      	adds	r3, #1
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	2b0f      	cmp	r3, #15
 80026cc:	f67f ae84 	bls.w	80023d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	3724      	adds	r7, #36	; 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40013800 	.word	0x40013800
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40020400 	.word	0x40020400
 80026f0:	40020800 	.word	0x40020800
 80026f4:	40020c00 	.word	0x40020c00
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40021400 	.word	0x40021400
 8002700:	40021800 	.word	0x40021800
 8002704:	40021c00 	.word	0x40021c00
 8002708:	40022000 	.word	0x40022000
 800270c:	40022400 	.word	0x40022400
 8002710:	40013c00 	.word	0x40013c00

08002714 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	887b      	ldrh	r3, [r7, #2]
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
 8002730:	e001      	b.n	8002736 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002732:	2300      	movs	r3, #0
 8002734:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	807b      	strh	r3, [r7, #2]
 8002750:	4613      	mov	r3, r2
 8002752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002754:	787b      	ldrb	r3, [r7, #1]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002760:	e003      	b.n	800276a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002762:	887b      	ldrh	r3, [r7, #2]
 8002764:	041a      	lsls	r2, r3, #16
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	619a      	str	r2, [r3, #24]
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002782:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002784:	695a      	ldr	r2, [r3, #20]
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	4013      	ands	r3, r2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d006      	beq.n	800279c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800278e:	4a05      	ldr	r2, [pc, #20]	; (80027a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002794:	88fb      	ldrh	r3, [r7, #6]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fa7e 	bl	8000c98 <HAL_GPIO_EXTI_Callback>
  }
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40013c00 	.word	0x40013c00

080027a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e12b      	b.n	8002a12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe f82e 	bl	8000830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2224      	movs	r2, #36	; 0x24
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0201 	bic.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800280a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800280c:	f001 fa40 	bl	8003c90 <HAL_RCC_GetPCLK1Freq>
 8002810:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4a81      	ldr	r2, [pc, #516]	; (8002a1c <HAL_I2C_Init+0x274>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d807      	bhi.n	800282c <HAL_I2C_Init+0x84>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4a80      	ldr	r2, [pc, #512]	; (8002a20 <HAL_I2C_Init+0x278>)
 8002820:	4293      	cmp	r3, r2
 8002822:	bf94      	ite	ls
 8002824:	2301      	movls	r3, #1
 8002826:	2300      	movhi	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	e006      	b.n	800283a <HAL_I2C_Init+0x92>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4a7d      	ldr	r2, [pc, #500]	; (8002a24 <HAL_I2C_Init+0x27c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	bf94      	ite	ls
 8002834:	2301      	movls	r3, #1
 8002836:	2300      	movhi	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e0e7      	b.n	8002a12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4a78      	ldr	r2, [pc, #480]	; (8002a28 <HAL_I2C_Init+0x280>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	0c9b      	lsrs	r3, r3, #18
 800284c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	430a      	orrs	r2, r1
 8002860:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4a6a      	ldr	r2, [pc, #424]	; (8002a1c <HAL_I2C_Init+0x274>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d802      	bhi.n	800287c <HAL_I2C_Init+0xd4>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	3301      	adds	r3, #1
 800287a:	e009      	b.n	8002890 <HAL_I2C_Init+0xe8>
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002882:	fb02 f303 	mul.w	r3, r2, r3
 8002886:	4a69      	ldr	r2, [pc, #420]	; (8002a2c <HAL_I2C_Init+0x284>)
 8002888:	fba2 2303 	umull	r2, r3, r2, r3
 800288c:	099b      	lsrs	r3, r3, #6
 800288e:	3301      	adds	r3, #1
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	430b      	orrs	r3, r1
 8002896:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	495c      	ldr	r1, [pc, #368]	; (8002a1c <HAL_I2C_Init+0x274>)
 80028ac:	428b      	cmp	r3, r1
 80028ae:	d819      	bhi.n	80028e4 <HAL_I2C_Init+0x13c>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1e59      	subs	r1, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80028be:	1c59      	adds	r1, r3, #1
 80028c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028c4:	400b      	ands	r3, r1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_I2C_Init+0x138>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1e59      	subs	r1, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80028d8:	3301      	adds	r3, #1
 80028da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028de:	e051      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 80028e0:	2304      	movs	r3, #4
 80028e2:	e04f      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d111      	bne.n	8002910 <HAL_I2C_Init+0x168>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1e58      	subs	r0, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	440b      	add	r3, r1
 80028fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80028fe:	3301      	adds	r3, #1
 8002900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	e012      	b.n	8002936 <HAL_I2C_Init+0x18e>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1e58      	subs	r0, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	0099      	lsls	r1, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	fbb0 f3f3 	udiv	r3, r0, r3
 8002926:	3301      	adds	r3, #1
 8002928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292c:	2b00      	cmp	r3, #0
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_I2C_Init+0x196>
 800293a:	2301      	movs	r3, #1
 800293c:	e022      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10e      	bne.n	8002964 <HAL_I2C_Init+0x1bc>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1e58      	subs	r0, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6859      	ldr	r1, [r3, #4]
 800294e:	460b      	mov	r3, r1
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	440b      	add	r3, r1
 8002954:	fbb0 f3f3 	udiv	r3, r0, r3
 8002958:	3301      	adds	r3, #1
 800295a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002962:	e00f      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	1e58      	subs	r0, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	0099      	lsls	r1, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	fbb0 f3f3 	udiv	r3, r0, r3
 800297a:	3301      	adds	r3, #1
 800297c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002980:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	6809      	ldr	r1, [r1, #0]
 8002988:	4313      	orrs	r3, r2
 800298a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69da      	ldr	r2, [r3, #28]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6911      	ldr	r1, [r2, #16]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68d2      	ldr	r2, [r2, #12]
 80029be:	4311      	orrs	r1, r2
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	000186a0 	.word	0x000186a0
 8002a20:	001e847f 	.word	0x001e847f
 8002a24:	003d08ff 	.word	0x003d08ff
 8002a28:	431bde83 	.word	0x431bde83
 8002a2c:	10624dd3 	.word	0x10624dd3

08002a30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	817b      	strh	r3, [r7, #10]
 8002a40:	4613      	mov	r3, r2
 8002a42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a44:	f7fe ff94 	bl	8001970 <HAL_GetTick>
 8002a48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	f040 80e0 	bne.w	8002c18 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	2319      	movs	r3, #25
 8002a5e:	2201      	movs	r2, #1
 8002a60:	4970      	ldr	r1, [pc, #448]	; (8002c24 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 fa92 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e0d3      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_I2C_Master_Transmit+0x50>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e0cc      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d007      	beq.n	8002aa6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0201 	orr.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ab4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2221      	movs	r2, #33	; 0x21
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2210      	movs	r2, #16
 8002ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	893a      	ldrh	r2, [r7, #8]
 8002ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4a50      	ldr	r2, [pc, #320]	; (8002c28 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ae6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ae8:	8979      	ldrh	r1, [r7, #10]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	6a3a      	ldr	r2, [r7, #32]
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f9ca 	bl	8002e88 <I2C_MasterRequestWrite>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e08d      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b14:	e066      	b.n	8002be4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	6a39      	ldr	r1, [r7, #32]
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 fb0c 	bl	8003138 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00d      	beq.n	8002b42 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d107      	bne.n	8002b3e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e06b      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	781a      	ldrb	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d11b      	bne.n	8002bb8 <HAL_I2C_Master_Transmit+0x188>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d017      	beq.n	8002bb8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	781a      	ldrb	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	6a39      	ldr	r1, [r7, #32]
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fafc 	bl	80031ba <I2C_WaitOnBTFFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00d      	beq.n	8002be4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d107      	bne.n	8002be0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bde:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e01a      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d194      	bne.n	8002b16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	e000      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c18:	2302      	movs	r3, #2
  }
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	00100002 	.word	0x00100002
 8002c28:	ffff0000 	.word	0xffff0000

08002c2c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08a      	sub	sp, #40	; 0x28
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002c3c:	f7fe fe98 	bl	8001970 <HAL_GetTick>
 8002c40:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	f040 8111 	bne.w	8002e76 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	2319      	movs	r3, #25
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	4988      	ldr	r1, [pc, #544]	; (8002e80 <HAL_I2C_IsDeviceReady+0x254>)
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f994 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e104      	b.n	8002e78 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_I2C_IsDeviceReady+0x50>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e0fd      	b.n	8002e78 <HAL_I2C_IsDeviceReady+0x24c>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d007      	beq.n	8002ca2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2224      	movs	r2, #36	; 0x24
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4a70      	ldr	r2, [pc, #448]	; (8002e84 <HAL_I2C_IsDeviceReady+0x258>)
 8002cc4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cd4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f952 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00d      	beq.n	8002d0a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cfc:	d103      	bne.n	8002d06 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e0b6      	b.n	8002e78 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d0a:	897b      	ldrh	r3, [r7, #10]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d18:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002d1a:	f7fe fe29 	bl	8001970 <HAL_GetTick>
 8002d1e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	bf0c      	ite	eq
 8002d2e:	2301      	moveq	r3, #1
 8002d30:	2300      	movne	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d44:	bf0c      	ite	eq
 8002d46:	2301      	moveq	r3, #1
 8002d48:	2300      	movne	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d4e:	e025      	b.n	8002d9c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d50:	f7fe fe0e 	bl	8001970 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d302      	bcc.n	8002d66 <HAL_I2C_IsDeviceReady+0x13a>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d103      	bne.n	8002d6e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	22a0      	movs	r2, #160	; 0xa0
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	bf0c      	ite	eq
 8002d7c:	2301      	moveq	r3, #1
 8002d7e:	2300      	movne	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d92:	bf0c      	ite	eq
 8002d94:	2301      	moveq	r3, #1
 8002d96:	2300      	movne	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2ba0      	cmp	r3, #160	; 0xa0
 8002da6:	d005      	beq.n	8002db4 <HAL_I2C_IsDeviceReady+0x188>
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d102      	bne.n	8002db4 <HAL_I2C_IsDeviceReady+0x188>
 8002dae:	7dbb      	ldrb	r3, [r7, #22]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0cd      	beq.n	8002d50 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d129      	bne.n	8002e1e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dda:	2300      	movs	r3, #0
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	2319      	movs	r3, #25
 8002df6:	2201      	movs	r2, #1
 8002df8:	4921      	ldr	r1, [pc, #132]	; (8002e80 <HAL_I2C_IsDeviceReady+0x254>)
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f8c6 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e036      	b.n	8002e78 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e02c      	b.n	8002e78 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e36:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	2319      	movs	r3, #25
 8002e3e:	2201      	movs	r2, #1
 8002e40:	490f      	ldr	r1, [pc, #60]	; (8002e80 <HAL_I2C_IsDeviceReady+0x254>)
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f8a2 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e012      	b.n	8002e78 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	3301      	adds	r3, #1
 8002e56:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	f4ff af32 	bcc.w	8002cc6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002e76:	2302      	movs	r3, #2
  }
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3720      	adds	r7, #32
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	00100002 	.word	0x00100002
 8002e84:	ffff0000 	.word	0xffff0000

08002e88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	607a      	str	r2, [r7, #4]
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	460b      	mov	r3, r1
 8002e96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d006      	beq.n	8002eb2 <I2C_MasterRequestWrite+0x2a>
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d003      	beq.n	8002eb2 <I2C_MasterRequestWrite+0x2a>
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002eb0:	d108      	bne.n	8002ec4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	e00b      	b.n	8002edc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	2b12      	cmp	r3, #18
 8002eca:	d107      	bne.n	8002edc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f84f 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00d      	beq.n	8002f10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f02:	d103      	bne.n	8002f0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e035      	b.n	8002f7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f18:	d108      	bne.n	8002f2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f1a:	897b      	ldrh	r3, [r7, #10]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f28:	611a      	str	r2, [r3, #16]
 8002f2a:	e01b      	b.n	8002f64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f2c:	897b      	ldrh	r3, [r7, #10]
 8002f2e:	11db      	asrs	r3, r3, #7
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f003 0306 	and.w	r3, r3, #6
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	f063 030f 	orn	r3, r3, #15
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	490e      	ldr	r1, [pc, #56]	; (8002f84 <I2C_MasterRequestWrite+0xfc>)
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f875 	bl	800303a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e010      	b.n	8002f7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f5a:	897b      	ldrh	r3, [r7, #10]
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	4907      	ldr	r1, [pc, #28]	; (8002f88 <I2C_MasterRequestWrite+0x100>)
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f865 	bl	800303a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	00010008 	.word	0x00010008
 8002f88:	00010002 	.word	0x00010002

08002f8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f9c:	e025      	b.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa4:	d021      	beq.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa6:	f7fe fce3 	bl	8001970 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d302      	bcc.n	8002fbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d116      	bne.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f043 0220 	orr.w	r2, r3, #32
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e023      	b.n	8003032 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	0c1b      	lsrs	r3, r3, #16
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d10d      	bne.n	8003010 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4013      	ands	r3, r2
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	bf0c      	ite	eq
 8003006:	2301      	moveq	r3, #1
 8003008:	2300      	movne	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	e00c      	b.n	800302a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	43da      	mvns	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4013      	ands	r3, r2
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	bf0c      	ite	eq
 8003022:	2301      	moveq	r3, #1
 8003024:	2300      	movne	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	429a      	cmp	r2, r3
 800302e:	d0b6      	beq.n	8002f9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003048:	e051      	b.n	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003058:	d123      	bne.n	80030a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003068:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003072:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f043 0204 	orr.w	r2, r3, #4
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e046      	b.n	8003130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a8:	d021      	beq.n	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030aa:	f7fe fc61 	bl	8001970 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d302      	bcc.n	80030c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d116      	bne.n	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f043 0220 	orr.w	r2, r3, #32
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e020      	b.n	8003130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	0c1b      	lsrs	r3, r3, #16
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d10c      	bne.n	8003112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	43da      	mvns	r2, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4013      	ands	r3, r2
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	bf14      	ite	ne
 800310a:	2301      	movne	r3, #1
 800310c:	2300      	moveq	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	e00b      	b.n	800312a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	43da      	mvns	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	4013      	ands	r3, r2
 800311e:	b29b      	uxth	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf14      	ite	ne
 8003124:	2301      	movne	r3, #1
 8003126:	2300      	moveq	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d18d      	bne.n	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003144:	e02d      	b.n	80031a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f878 	bl	800323c <I2C_IsAcknowledgeFailed>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e02d      	b.n	80031b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315c:	d021      	beq.n	80031a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315e:	f7fe fc07 	bl	8001970 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	429a      	cmp	r2, r3
 800316c:	d302      	bcc.n	8003174 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d116      	bne.n	80031a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f043 0220 	orr.w	r2, r3, #32
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e007      	b.n	80031b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ac:	2b80      	cmp	r3, #128	; 0x80
 80031ae:	d1ca      	bne.n	8003146 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031c6:	e02d      	b.n	8003224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f837 	bl	800323c <I2C_IsAcknowledgeFailed>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e02d      	b.n	8003234 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031de:	d021      	beq.n	8003224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e0:	f7fe fbc6 	bl	8001970 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d302      	bcc.n	80031f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d116      	bne.n	8003224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	f043 0220 	orr.w	r2, r3, #32
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e007      	b.n	8003234 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b04      	cmp	r3, #4
 8003230:	d1ca      	bne.n	80031c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003252:	d11b      	bne.n	800328c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800325c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	f043 0204 	orr.w	r2, r3, #4
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	d129      	bne.n	8003304 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2224      	movs	r2, #36	; 0x24
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0201 	bic.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0210 	bic.w	r2, r2, #16
 80032d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	e000      	b.n	8003306 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003304:	2302      	movs	r3, #2
  }
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003312:	b480      	push	{r7}
 8003314:	b085      	sub	sp, #20
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800331c:	2300      	movs	r3, #0
 800331e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b20      	cmp	r3, #32
 800332a:	d12a      	bne.n	8003382 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2224      	movs	r2, #36	; 0x24
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0201 	bic.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800334c:	89fb      	ldrh	r3, [r7, #14]
 800334e:	f023 030f 	bic.w	r3, r3, #15
 8003352:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	b29a      	uxth	r2, r3
 8003358:	89fb      	ldrh	r3, [r7, #14]
 800335a:	4313      	orrs	r3, r2
 800335c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	89fa      	ldrh	r2, [r7, #14]
 8003364:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0201 	orr.w	r2, r2, #1
 8003374:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	e000      	b.n	8003384 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003382:	2302      	movs	r3, #2
  }
}
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	4b20      	ldr	r3, [pc, #128]	; (8003420 <HAL_PWREx_EnableOverDrive+0x90>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	4a1f      	ldr	r2, [pc, #124]	; (8003420 <HAL_PWREx_EnableOverDrive+0x90>)
 80033a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a8:	6413      	str	r3, [r2, #64]	; 0x40
 80033aa:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <HAL_PWREx_EnableOverDrive+0x90>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033b6:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_PWREx_EnableOverDrive+0x94>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033bc:	f7fe fad8 	bl	8001970 <HAL_GetTick>
 80033c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033c2:	e009      	b.n	80033d8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033c4:	f7fe fad4 	bl	8001970 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033d2:	d901      	bls.n	80033d8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e01f      	b.n	8003418 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033d8:	4b13      	ldr	r3, [pc, #76]	; (8003428 <HAL_PWREx_EnableOverDrive+0x98>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e4:	d1ee      	bne.n	80033c4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033e6:	4b11      	ldr	r3, [pc, #68]	; (800342c <HAL_PWREx_EnableOverDrive+0x9c>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033ec:	f7fe fac0 	bl	8001970 <HAL_GetTick>
 80033f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033f2:	e009      	b.n	8003408 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033f4:	f7fe fabc 	bl	8001970 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003402:	d901      	bls.n	8003408 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e007      	b.n	8003418 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003408:	4b07      	ldr	r3, [pc, #28]	; (8003428 <HAL_PWREx_EnableOverDrive+0x98>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003414:	d1ee      	bne.n	80033f4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40023800 	.word	0x40023800
 8003424:	420e0040 	.word	0x420e0040
 8003428:	40007000 	.word	0x40007000
 800342c:	420e0044 	.word	0x420e0044

08003430 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e267      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d075      	beq.n	800353a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800344e:	4b88      	ldr	r3, [pc, #544]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	2b04      	cmp	r3, #4
 8003458:	d00c      	beq.n	8003474 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800345a:	4b85      	ldr	r3, [pc, #532]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003462:	2b08      	cmp	r3, #8
 8003464:	d112      	bne.n	800348c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003466:	4b82      	ldr	r3, [pc, #520]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003472:	d10b      	bne.n	800348c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003474:	4b7e      	ldr	r3, [pc, #504]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d05b      	beq.n	8003538 <HAL_RCC_OscConfig+0x108>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d157      	bne.n	8003538 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e242      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003494:	d106      	bne.n	80034a4 <HAL_RCC_OscConfig+0x74>
 8003496:	4b76      	ldr	r3, [pc, #472]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a75      	ldr	r2, [pc, #468]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 800349c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e01d      	b.n	80034e0 <HAL_RCC_OscConfig+0xb0>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x98>
 80034ae:	4b70      	ldr	r3, [pc, #448]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a6f      	ldr	r2, [pc, #444]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 80034b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	4b6d      	ldr	r3, [pc, #436]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a6c      	ldr	r2, [pc, #432]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 80034c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e00b      	b.n	80034e0 <HAL_RCC_OscConfig+0xb0>
 80034c8:	4b69      	ldr	r3, [pc, #420]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a68      	ldr	r2, [pc, #416]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 80034ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	4b66      	ldr	r3, [pc, #408]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a65      	ldr	r2, [pc, #404]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 80034da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d013      	beq.n	8003510 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7fe fa42 	bl	8001970 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f0:	f7fe fa3e 	bl	8001970 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	; 0x64
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e207      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	4b5b      	ldr	r3, [pc, #364]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0xc0>
 800350e:	e014      	b.n	800353a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7fe fa2e 	bl	8001970 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003518:	f7fe fa2a 	bl	8001970 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	; 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e1f3      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352a:	4b51      	ldr	r3, [pc, #324]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0xe8>
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d063      	beq.n	800360e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003546:	4b4a      	ldr	r3, [pc, #296]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00b      	beq.n	800356a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003552:	4b47      	ldr	r3, [pc, #284]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800355a:	2b08      	cmp	r3, #8
 800355c:	d11c      	bne.n	8003598 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800355e:	4b44      	ldr	r3, [pc, #272]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d116      	bne.n	8003598 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356a:	4b41      	ldr	r3, [pc, #260]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <HAL_RCC_OscConfig+0x152>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d001      	beq.n	8003582 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e1c7      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003582:	4b3b      	ldr	r3, [pc, #236]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4937      	ldr	r1, [pc, #220]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003596:	e03a      	b.n	800360e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d020      	beq.n	80035e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035a0:	4b34      	ldr	r3, [pc, #208]	; (8003674 <HAL_RCC_OscConfig+0x244>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a6:	f7fe f9e3 	bl	8001970 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ae:	f7fe f9df 	bl	8001970 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e1a8      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c0:	4b2b      	ldr	r3, [pc, #172]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035cc:	4b28      	ldr	r3, [pc, #160]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4925      	ldr	r1, [pc, #148]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	600b      	str	r3, [r1, #0]
 80035e0:	e015      	b.n	800360e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035e2:	4b24      	ldr	r3, [pc, #144]	; (8003674 <HAL_RCC_OscConfig+0x244>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fe f9c2 	bl	8001970 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035f0:	f7fe f9be 	bl	8001970 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e187      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003602:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d036      	beq.n	8003688 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d016      	beq.n	8003650 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003622:	4b15      	ldr	r3, [pc, #84]	; (8003678 <HAL_RCC_OscConfig+0x248>)
 8003624:	2201      	movs	r2, #1
 8003626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fe f9a2 	bl	8001970 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003630:	f7fe f99e 	bl	8001970 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e167      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003642:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <HAL_RCC_OscConfig+0x240>)
 8003644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0x200>
 800364e:	e01b      	b.n	8003688 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003650:	4b09      	ldr	r3, [pc, #36]	; (8003678 <HAL_RCC_OscConfig+0x248>)
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003656:	f7fe f98b 	bl	8001970 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800365c:	e00e      	b.n	800367c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800365e:	f7fe f987 	bl	8001970 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d907      	bls.n	800367c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e150      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 8003670:	40023800 	.word	0x40023800
 8003674:	42470000 	.word	0x42470000
 8003678:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800367c:	4b88      	ldr	r3, [pc, #544]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 800367e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1ea      	bne.n	800365e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 8097 	beq.w	80037c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003696:	2300      	movs	r3, #0
 8003698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800369a:	4b81      	ldr	r3, [pc, #516]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10f      	bne.n	80036c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	4b7d      	ldr	r3, [pc, #500]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	4a7c      	ldr	r2, [pc, #496]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 80036b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b4:	6413      	str	r3, [r2, #64]	; 0x40
 80036b6:	4b7a      	ldr	r3, [pc, #488]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036be:	60bb      	str	r3, [r7, #8]
 80036c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c2:	2301      	movs	r3, #1
 80036c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c6:	4b77      	ldr	r3, [pc, #476]	; (80038a4 <HAL_RCC_OscConfig+0x474>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d118      	bne.n	8003704 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036d2:	4b74      	ldr	r3, [pc, #464]	; (80038a4 <HAL_RCC_OscConfig+0x474>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a73      	ldr	r2, [pc, #460]	; (80038a4 <HAL_RCC_OscConfig+0x474>)
 80036d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036de:	f7fe f947 	bl	8001970 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e6:	f7fe f943 	bl	8001970 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e10c      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f8:	4b6a      	ldr	r3, [pc, #424]	; (80038a4 <HAL_RCC_OscConfig+0x474>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d106      	bne.n	800371a <HAL_RCC_OscConfig+0x2ea>
 800370c:	4b64      	ldr	r3, [pc, #400]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003710:	4a63      	ldr	r2, [pc, #396]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6713      	str	r3, [r2, #112]	; 0x70
 8003718:	e01c      	b.n	8003754 <HAL_RCC_OscConfig+0x324>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b05      	cmp	r3, #5
 8003720:	d10c      	bne.n	800373c <HAL_RCC_OscConfig+0x30c>
 8003722:	4b5f      	ldr	r3, [pc, #380]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	4a5e      	ldr	r2, [pc, #376]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003728:	f043 0304 	orr.w	r3, r3, #4
 800372c:	6713      	str	r3, [r2, #112]	; 0x70
 800372e:	4b5c      	ldr	r3, [pc, #368]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003732:	4a5b      	ldr	r2, [pc, #364]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	6713      	str	r3, [r2, #112]	; 0x70
 800373a:	e00b      	b.n	8003754 <HAL_RCC_OscConfig+0x324>
 800373c:	4b58      	ldr	r3, [pc, #352]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 800373e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003740:	4a57      	ldr	r2, [pc, #348]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003742:	f023 0301 	bic.w	r3, r3, #1
 8003746:	6713      	str	r3, [r2, #112]	; 0x70
 8003748:	4b55      	ldr	r3, [pc, #340]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 800374a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374c:	4a54      	ldr	r2, [pc, #336]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 800374e:	f023 0304 	bic.w	r3, r3, #4
 8003752:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d015      	beq.n	8003788 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375c:	f7fe f908 	bl	8001970 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003762:	e00a      	b.n	800377a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003764:	f7fe f904 	bl	8001970 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e0cb      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377a:	4b49      	ldr	r3, [pc, #292]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0ee      	beq.n	8003764 <HAL_RCC_OscConfig+0x334>
 8003786:	e014      	b.n	80037b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003788:	f7fe f8f2 	bl	8001970 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800378e:	e00a      	b.n	80037a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003790:	f7fe f8ee 	bl	8001970 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	f241 3288 	movw	r2, #5000	; 0x1388
 800379e:	4293      	cmp	r3, r2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e0b5      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a6:	4b3e      	ldr	r3, [pc, #248]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1ee      	bne.n	8003790 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d105      	bne.n	80037c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b8:	4b39      	ldr	r3, [pc, #228]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	4a38      	ldr	r2, [pc, #224]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 80037be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80a1 	beq.w	8003910 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037ce:	4b34      	ldr	r3, [pc, #208]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d05c      	beq.n	8003894 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d141      	bne.n	8003866 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e2:	4b31      	ldr	r3, [pc, #196]	; (80038a8 <HAL_RCC_OscConfig+0x478>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e8:	f7fe f8c2 	bl	8001970 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f0:	f7fe f8be 	bl	8001970 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e087      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003802:	4b27      	ldr	r3, [pc, #156]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f0      	bne.n	80037f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69da      	ldr	r2, [r3, #28]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	019b      	lsls	r3, r3, #6
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	085b      	lsrs	r3, r3, #1
 8003826:	3b01      	subs	r3, #1
 8003828:	041b      	lsls	r3, r3, #16
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	061b      	lsls	r3, r3, #24
 8003832:	491b      	ldr	r1, [pc, #108]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003834:	4313      	orrs	r3, r2
 8003836:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003838:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <HAL_RCC_OscConfig+0x478>)
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383e:	f7fe f897 	bl	8001970 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003846:	f7fe f893 	bl	8001970 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e05c      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003858:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0f0      	beq.n	8003846 <HAL_RCC_OscConfig+0x416>
 8003864:	e054      	b.n	8003910 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003866:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <HAL_RCC_OscConfig+0x478>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7fe f880 	bl	8001970 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003874:	f7fe f87c 	bl	8001970 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e045      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003886:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0x444>
 8003892:	e03d      	b.n	8003910 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d107      	bne.n	80038ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e038      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40007000 	.word	0x40007000
 80038a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038ac:	4b1b      	ldr	r3, [pc, #108]	; (800391c <HAL_RCC_OscConfig+0x4ec>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d028      	beq.n	800390c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d121      	bne.n	800390c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d11a      	bne.n	800390c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038dc:	4013      	ands	r3, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d111      	bne.n	800390c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f2:	085b      	lsrs	r3, r3, #1
 80038f4:	3b01      	subs	r3, #1
 80038f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d107      	bne.n	800390c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800

08003920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0cc      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003934:	4b68      	ldr	r3, [pc, #416]	; (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d90c      	bls.n	800395c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003942:	4b65      	ldr	r3, [pc, #404]	; (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800394a:	4b63      	ldr	r3, [pc, #396]	; (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d001      	beq.n	800395c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0b8      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d020      	beq.n	80039aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003974:	4b59      	ldr	r3, [pc, #356]	; (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	4a58      	ldr	r2, [pc, #352]	; (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800397e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800398c:	4b53      	ldr	r3, [pc, #332]	; (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	4a52      	ldr	r2, [pc, #328]	; (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003996:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003998:	4b50      	ldr	r3, [pc, #320]	; (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	494d      	ldr	r1, [pc, #308]	; (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d044      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d107      	bne.n	80039ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039be:	4b47      	ldr	r3, [pc, #284]	; (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d119      	bne.n	80039fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e07f      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d003      	beq.n	80039de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d107      	bne.n	80039ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039de:	4b3f      	ldr	r3, [pc, #252]	; (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e06f      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ee:	4b3b      	ldr	r3, [pc, #236]	; (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e067      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039fe:	4b37      	ldr	r3, [pc, #220]	; (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f023 0203 	bic.w	r2, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4934      	ldr	r1, [pc, #208]	; (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a10:	f7fd ffae 	bl	8001970 <HAL_GetTick>
 8003a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a16:	e00a      	b.n	8003a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a18:	f7fd ffaa 	bl	8001970 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e04f      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2e:	4b2b      	ldr	r3, [pc, #172]	; (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 020c 	and.w	r2, r3, #12
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d1eb      	bne.n	8003a18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a40:	4b25      	ldr	r3, [pc, #148]	; (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 030f 	and.w	r3, r3, #15
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d20c      	bcs.n	8003a68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4e:	4b22      	ldr	r3, [pc, #136]	; (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a56:	4b20      	ldr	r3, [pc, #128]	; (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d001      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e032      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a74:	4b19      	ldr	r3, [pc, #100]	; (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	4916      	ldr	r1, [pc, #88]	; (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a92:	4b12      	ldr	r3, [pc, #72]	; (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	490e      	ldr	r1, [pc, #56]	; (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003aa6:	f000 f821 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	091b      	lsrs	r3, r3, #4
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	490a      	ldr	r1, [pc, #40]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab8:	5ccb      	ldrb	r3, [r1, r3]
 8003aba:	fa22 f303 	lsr.w	r3, r2, r3
 8003abe:	4a09      	ldr	r2, [pc, #36]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ac2:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fd ff0e 	bl	80018e8 <HAL_InitTick>

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40023c00 	.word	0x40023c00
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	08007504 	.word	0x08007504
 8003ae4:	20000010 	.word	0x20000010
 8003ae8:	20000014 	.word	0x20000014

08003aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af0:	b090      	sub	sp, #64	; 0x40
 8003af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	637b      	str	r3, [r7, #52]	; 0x34
 8003af8:	2300      	movs	r3, #0
 8003afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003afc:	2300      	movs	r3, #0
 8003afe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b04:	4b59      	ldr	r3, [pc, #356]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 030c 	and.w	r3, r3, #12
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d00d      	beq.n	8003b2c <HAL_RCC_GetSysClockFreq+0x40>
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	f200 80a1 	bhi.w	8003c58 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_RCC_GetSysClockFreq+0x34>
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d003      	beq.n	8003b26 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b1e:	e09b      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b20:	4b53      	ldr	r3, [pc, #332]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b22:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003b24:	e09b      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b26:	4b53      	ldr	r3, [pc, #332]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b2a:	e098      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b2c:	4b4f      	ldr	r3, [pc, #316]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b34:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b36:	4b4d      	ldr	r3, [pc, #308]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d028      	beq.n	8003b94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b42:	4b4a      	ldr	r3, [pc, #296]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	099b      	lsrs	r3, r3, #6
 8003b48:	2200      	movs	r2, #0
 8003b4a:	623b      	str	r3, [r7, #32]
 8003b4c:	627a      	str	r2, [r7, #36]	; 0x24
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b54:	2100      	movs	r1, #0
 8003b56:	4b47      	ldr	r3, [pc, #284]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b58:	fb03 f201 	mul.w	r2, r3, r1
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	fb00 f303 	mul.w	r3, r0, r3
 8003b62:	4413      	add	r3, r2
 8003b64:	4a43      	ldr	r2, [pc, #268]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b66:	fba0 1202 	umull	r1, r2, r0, r2
 8003b6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b6c:	460a      	mov	r2, r1
 8003b6e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b72:	4413      	add	r3, r2
 8003b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b78:	2200      	movs	r2, #0
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	61fa      	str	r2, [r7, #28]
 8003b7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b86:	f7fc fb8b 	bl	80002a0 <__aeabi_uldivmod>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4613      	mov	r3, r2
 8003b90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b92:	e053      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b94:	4b35      	ldr	r3, [pc, #212]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	099b      	lsrs	r3, r3, #6
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	617a      	str	r2, [r7, #20]
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ba6:	f04f 0b00 	mov.w	fp, #0
 8003baa:	4652      	mov	r2, sl
 8003bac:	465b      	mov	r3, fp
 8003bae:	f04f 0000 	mov.w	r0, #0
 8003bb2:	f04f 0100 	mov.w	r1, #0
 8003bb6:	0159      	lsls	r1, r3, #5
 8003bb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bbc:	0150      	lsls	r0, r2, #5
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	ebb2 080a 	subs.w	r8, r2, sl
 8003bc6:	eb63 090b 	sbc.w	r9, r3, fp
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003bd6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bde:	ebb2 0408 	subs.w	r4, r2, r8
 8003be2:	eb63 0509 	sbc.w	r5, r3, r9
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	00eb      	lsls	r3, r5, #3
 8003bf0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bf4:	00e2      	lsls	r2, r4, #3
 8003bf6:	4614      	mov	r4, r2
 8003bf8:	461d      	mov	r5, r3
 8003bfa:	eb14 030a 	adds.w	r3, r4, sl
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	eb45 030b 	adc.w	r3, r5, fp
 8003c04:	607b      	str	r3, [r7, #4]
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c12:	4629      	mov	r1, r5
 8003c14:	028b      	lsls	r3, r1, #10
 8003c16:	4621      	mov	r1, r4
 8003c18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	028a      	lsls	r2, r1, #10
 8003c20:	4610      	mov	r0, r2
 8003c22:	4619      	mov	r1, r3
 8003c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c26:	2200      	movs	r2, #0
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	60fa      	str	r2, [r7, #12]
 8003c2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c30:	f7fc fb36 	bl	80002a0 <__aeabi_uldivmod>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4613      	mov	r3, r2
 8003c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	0c1b      	lsrs	r3, r3, #16
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	3301      	adds	r3, #1
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c56:	e002      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3740      	adds	r7, #64	; 0x40
 8003c64:	46bd      	mov	sp, r7
 8003c66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	00f42400 	.word	0x00f42400
 8003c74:	017d7840 	.word	0x017d7840

08003c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c7c:	4b03      	ldr	r3, [pc, #12]	; (8003c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	20000010 	.word	0x20000010

08003c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c94:	f7ff fff0 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	0a9b      	lsrs	r3, r3, #10
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	4903      	ldr	r1, [pc, #12]	; (8003cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ca6:	5ccb      	ldrb	r3, [r1, r3]
 8003ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	08007514 	.word	0x08007514

08003cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cbc:	f7ff ffdc 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	0b5b      	lsrs	r3, r3, #13
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	4903      	ldr	r1, [pc, #12]	; (8003cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cce:	5ccb      	ldrb	r3, [r1, r3]
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	08007514 	.word	0x08007514

08003ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10b      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d105      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d075      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d14:	4b91      	ldr	r3, [pc, #580]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d1a:	f7fd fe29 	bl	8001970 <HAL_GetTick>
 8003d1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d20:	e008      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d22:	f7fd fe25 	bl	8001970 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e189      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d34:	4b8a      	ldr	r3, [pc, #552]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f0      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d009      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	019a      	lsls	r2, r3, #6
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	071b      	lsls	r3, r3, #28
 8003d58:	4981      	ldr	r1, [pc, #516]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01f      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d6c:	4b7c      	ldr	r3, [pc, #496]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d72:	0f1b      	lsrs	r3, r3, #28
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	019a      	lsls	r2, r3, #6
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	061b      	lsls	r3, r3, #24
 8003d86:	431a      	orrs	r2, r3
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	071b      	lsls	r3, r3, #28
 8003d8c:	4974      	ldr	r1, [pc, #464]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d94:	4b72      	ldr	r3, [pc, #456]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d9a:	f023 021f 	bic.w	r2, r3, #31
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	496e      	ldr	r1, [pc, #440]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00d      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	019a      	lsls	r2, r3, #6
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	061b      	lsls	r3, r3, #24
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	071b      	lsls	r3, r3, #28
 8003dcc:	4964      	ldr	r1, [pc, #400]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003dd4:	4b61      	ldr	r3, [pc, #388]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dda:	f7fd fdc9 	bl	8001970 <HAL_GetTick>
 8003dde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003de0:	e008      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003de2:	f7fd fdc5 	bl	8001970 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e129      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003df4:	4b5a      	ldr	r3, [pc, #360]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d105      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d079      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e18:	4b52      	ldr	r3, [pc, #328]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e1e:	f7fd fda7 	bl	8001970 <HAL_GetTick>
 8003e22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e24:	e008      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e26:	f7fd fda3 	bl	8001970 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e107      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e38:	4b49      	ldr	r3, [pc, #292]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e44:	d0ef      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d020      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e52:	4b43      	ldr	r3, [pc, #268]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e58:	0f1b      	lsrs	r3, r3, #28
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	019a      	lsls	r2, r3, #6
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	061b      	lsls	r3, r3, #24
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	071b      	lsls	r3, r3, #28
 8003e72:	493b      	ldr	r1, [pc, #236]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e7a:	4b39      	ldr	r3, [pc, #228]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e80:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	021b      	lsls	r3, r3, #8
 8003e8c:	4934      	ldr	r1, [pc, #208]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01e      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ea0:	4b2f      	ldr	r3, [pc, #188]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	0e1b      	lsrs	r3, r3, #24
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	019a      	lsls	r2, r3, #6
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	061b      	lsls	r3, r3, #24
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	071b      	lsls	r3, r3, #28
 8003ec0:	4927      	ldr	r1, [pc, #156]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ec8:	4b25      	ldr	r3, [pc, #148]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ece:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	4922      	ldr	r1, [pc, #136]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ede:	4b21      	ldr	r3, [pc, #132]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ee4:	f7fd fd44 	bl	8001970 <HAL_GetTick>
 8003ee8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003eec:	f7fd fd40 	bl	8001970 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e0a4      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003efe:	4b18      	ldr	r3, [pc, #96]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f0a:	d1ef      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 808b 	beq.w	8004030 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	4b10      	ldr	r3, [pc, #64]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	4a0f      	ldr	r2, [pc, #60]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f28:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2a:	4b0d      	ldr	r3, [pc, #52]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f36:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a0b      	ldr	r2, [pc, #44]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f40:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f42:	f7fd fd15 	bl	8001970 <HAL_GetTick>
 8003f46:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f48:	e010      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f4a:	f7fd fd11 	bl	8001970 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d909      	bls.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e075      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003f5c:	42470068 	.word	0x42470068
 8003f60:	40023800 	.word	0x40023800
 8003f64:	42470070 	.word	0x42470070
 8003f68:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f6c:	4b38      	ldr	r3, [pc, #224]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0e8      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f78:	4b36      	ldr	r3, [pc, #216]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f80:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d02f      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d028      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f96:	4b2f      	ldr	r3, [pc, #188]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f9e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fa0:	4b2d      	ldr	r3, [pc, #180]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fa6:	4b2c      	ldr	r3, [pc, #176]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003fac:	4a29      	ldr	r2, [pc, #164]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fb2:	4b28      	ldr	r3, [pc, #160]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d114      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003fbe:	f7fd fcd7 	bl	8001970 <HAL_GetTick>
 8003fc2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc4:	e00a      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fc6:	f7fd fcd3 	bl	8001970 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e035      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fdc:	4b1d      	ldr	r3, [pc, #116]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0ee      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ff4:	d10d      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003ff6:	4b17      	ldr	r3, [pc, #92]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004002:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800400a:	4912      	ldr	r1, [pc, #72]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800400c:	4313      	orrs	r3, r2
 800400e:	608b      	str	r3, [r1, #8]
 8004010:	e005      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004012:	4b10      	ldr	r3, [pc, #64]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	4a0f      	ldr	r2, [pc, #60]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004018:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800401c:	6093      	str	r3, [r2, #8]
 800401e:	4b0d      	ldr	r3, [pc, #52]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004020:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800402a:	490a      	ldr	r1, [pc, #40]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800402c:	4313      	orrs	r3, r2
 800402e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	2b00      	cmp	r3, #0
 800403a:	d004      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004042:	4b06      	ldr	r3, [pc, #24]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004044:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40007000 	.word	0x40007000
 8004054:	40023800 	.word	0x40023800
 8004058:	42470e40 	.word	0x42470e40
 800405c:	424711e0 	.word	0x424711e0

08004060 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e066      	b.n	8004144 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	7f5b      	ldrb	r3, [r3, #29]
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d105      	bne.n	800408c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fd f94e 	bl	8001328 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	22ca      	movs	r2, #202	; 0xca
 8004098:	625a      	str	r2, [r3, #36]	; 0x24
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2253      	movs	r2, #83	; 0x53
 80040a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fa45 	bl	8004532 <RTC_EnterInitMode>
 80040a8:	4603      	mov	r3, r0
 80040aa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d12c      	bne.n	800410c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80040c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040c4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6899      	ldr	r1, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	68d2      	ldr	r2, [r2, #12]
 80040ec:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6919      	ldr	r1, [r3, #16]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	041a      	lsls	r2, r3, #16
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fa4c 	bl	80045a0 <RTC_ExitInitMode>
 8004108:	4603      	mov	r3, r0
 800410a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d113      	bne.n	800413a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004120:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699a      	ldr	r2, [r3, #24]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	22ff      	movs	r2, #255	; 0xff
 8004140:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004142:	7bfb      	ldrb	r3, [r7, #15]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800414c:	b590      	push	{r4, r7, lr}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	7f1b      	ldrb	r3, [r3, #28]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_RTC_SetTime+0x1c>
 8004164:	2302      	movs	r3, #2
 8004166:	e087      	b.n	8004278 <HAL_RTC_SetTime+0x12c>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2201      	movs	r2, #1
 800416c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2202      	movs	r2, #2
 8004172:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d126      	bne.n	80041c8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004184:	2b00      	cmp	r3, #0
 8004186:	d102      	bne.n	800418e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2200      	movs	r2, #0
 800418c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fa29 	bl	80045ea <RTC_ByteToBcd2>
 8004198:	4603      	mov	r3, r0
 800419a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	785b      	ldrb	r3, [r3, #1]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 fa22 	bl	80045ea <RTC_ByteToBcd2>
 80041a6:	4603      	mov	r3, r0
 80041a8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041aa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	789b      	ldrb	r3, [r3, #2]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fa1a 	bl	80045ea <RTC_ByteToBcd2>
 80041b6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041b8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	78db      	ldrb	r3, [r3, #3]
 80041c0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	e018      	b.n	80041fa <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d102      	bne.n	80041dc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2200      	movs	r2, #0
 80041da:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	785b      	ldrb	r3, [r3, #1]
 80041e6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041e8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80041ee:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	78db      	ldrb	r3, [r3, #3]
 80041f4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041f6:	4313      	orrs	r3, r2
 80041f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	22ca      	movs	r2, #202	; 0xca
 8004200:	625a      	str	r2, [r3, #36]	; 0x24
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2253      	movs	r2, #83	; 0x53
 8004208:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 f991 	bl	8004532 <RTC_EnterInitMode>
 8004210:	4603      	mov	r3, r0
 8004212:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004214:	7cfb      	ldrb	r3, [r7, #19]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d120      	bne.n	800425c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004224:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004228:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004238:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6899      	ldr	r1, [r3, #8]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	431a      	orrs	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f9a4 	bl	80045a0 <RTC_ExitInitMode>
 8004258:	4603      	mov	r3, r0
 800425a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800425c:	7cfb      	ldrb	r3, [r7, #19]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d102      	bne.n	8004268 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2201      	movs	r2, #1
 8004266:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	22ff      	movs	r2, #255	; 0xff
 800426e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	771a      	strb	r2, [r3, #28]

  return status;
 8004276:	7cfb      	ldrb	r3, [r7, #19]
}
 8004278:	4618      	mov	r0, r3
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	bd90      	pop	{r4, r7, pc}

08004280 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80042b2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80042b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	0c1b      	lsrs	r3, r3, #16
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	0a1b      	lsrs	r3, r3, #8
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	0d9b      	lsrs	r3, r3, #22
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d11a      	bne.n	8004332 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f000 f98f 	bl	8004624 <RTC_Bcd2ToByte>
 8004306:	4603      	mov	r3, r0
 8004308:	461a      	mov	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	785b      	ldrb	r3, [r3, #1]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 f986 	bl	8004624 <RTC_Bcd2ToByte>
 8004318:	4603      	mov	r3, r0
 800431a:	461a      	mov	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	789b      	ldrb	r3, [r3, #2]
 8004324:	4618      	mov	r0, r3
 8004326:	f000 f97d 	bl	8004624 <RTC_Bcd2ToByte>
 800432a:	4603      	mov	r3, r0
 800432c:	461a      	mov	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800433c:	b590      	push	{r4, r7, lr}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	7f1b      	ldrb	r3, [r3, #28]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <HAL_RTC_SetDate+0x1c>
 8004354:	2302      	movs	r3, #2
 8004356:	e071      	b.n	800443c <HAL_RTC_SetDate+0x100>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2201      	movs	r2, #1
 800435c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2202      	movs	r2, #2
 8004362:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10e      	bne.n	8004388 <HAL_RTC_SetDate+0x4c>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	785b      	ldrb	r3, [r3, #1]
 800436e:	f003 0310 	and.w	r3, r3, #16
 8004372:	2b00      	cmp	r3, #0
 8004374:	d008      	beq.n	8004388 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	785b      	ldrb	r3, [r3, #1]
 800437a:	f023 0310 	bic.w	r3, r3, #16
 800437e:	b2db      	uxtb	r3, r3
 8004380:	330a      	adds	r3, #10
 8004382:	b2da      	uxtb	r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d11c      	bne.n	80043c8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	78db      	ldrb	r3, [r3, #3]
 8004392:	4618      	mov	r0, r3
 8004394:	f000 f929 	bl	80045ea <RTC_ByteToBcd2>
 8004398:	4603      	mov	r3, r0
 800439a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	785b      	ldrb	r3, [r3, #1]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 f922 	bl	80045ea <RTC_ByteToBcd2>
 80043a6:	4603      	mov	r3, r0
 80043a8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043aa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	789b      	ldrb	r3, [r3, #2]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 f91a 	bl	80045ea <RTC_ByteToBcd2>
 80043b6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80043b8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	e00e      	b.n	80043e6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	78db      	ldrb	r3, [r3, #3]
 80043cc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	785b      	ldrb	r3, [r3, #1]
 80043d2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043d4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80043da:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043e2:	4313      	orrs	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	22ca      	movs	r2, #202	; 0xca
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2253      	movs	r2, #83	; 0x53
 80043f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f89b 	bl	8004532 <RTC_EnterInitMode>
 80043fc:	4603      	mov	r3, r0
 80043fe:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004400:	7cfb      	ldrb	r3, [r7, #19]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10c      	bne.n	8004420 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004410:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004414:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 f8c2 	bl	80045a0 <RTC_ExitInitMode>
 800441c:	4603      	mov	r3, r0
 800441e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004420:	7cfb      	ldrb	r3, [r7, #19]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d102      	bne.n	800442c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	22ff      	movs	r2, #255	; 0xff
 8004432:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	771a      	strb	r2, [r3, #28]

  return status;
 800443a:	7cfb      	ldrb	r3, [r7, #19]
}
 800443c:	4618      	mov	r0, r3
 800443e:	371c      	adds	r7, #28
 8004440:	46bd      	mov	sp, r7
 8004442:	bd90      	pop	{r4, r7, pc}

08004444 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800445e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004462:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	0c1b      	lsrs	r3, r3, #16
 8004468:	b2da      	uxtb	r2, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	0a1b      	lsrs	r3, r3, #8
 8004472:	b2db      	uxtb	r3, r3
 8004474:	f003 031f 	and.w	r3, r3, #31
 8004478:	b2da      	uxtb	r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004486:	b2da      	uxtb	r2, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	0b5b      	lsrs	r3, r3, #13
 8004490:	b2db      	uxtb	r3, r3
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	b2da      	uxtb	r2, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d11a      	bne.n	80044d8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	78db      	ldrb	r3, [r3, #3]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 f8bc 	bl	8004624 <RTC_Bcd2ToByte>
 80044ac:	4603      	mov	r3, r0
 80044ae:	461a      	mov	r2, r3
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	785b      	ldrb	r3, [r3, #1]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 f8b3 	bl	8004624 <RTC_Bcd2ToByte>
 80044be:	4603      	mov	r3, r0
 80044c0:	461a      	mov	r2, r3
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	789b      	ldrb	r3, [r3, #2]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 f8aa 	bl	8004624 <RTC_Bcd2ToByte>
 80044d0:	4603      	mov	r3, r0
 80044d2:	461a      	mov	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044fc:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044fe:	f7fd fa37 	bl	8001970 <HAL_GetTick>
 8004502:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004504:	e009      	b.n	800451a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004506:	f7fd fa33 	bl	8001970 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004514:	d901      	bls.n	800451a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e007      	b.n	800452a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0ee      	beq.n	8004506 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454c:	2b00      	cmp	r3, #0
 800454e:	d122      	bne.n	8004596 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800455e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004560:	f7fd fa06 	bl	8001970 <HAL_GetTick>
 8004564:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004566:	e00c      	b.n	8004582 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004568:	f7fd fa02 	bl	8001970 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004576:	d904      	bls.n	8004582 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2204      	movs	r2, #4
 800457c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458c:	2b00      	cmp	r3, #0
 800458e:	d102      	bne.n	8004596 <RTC_EnterInitMode+0x64>
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d1e8      	bne.n	8004568 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004596:	7bfb      	ldrb	r3, [r7, #15]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ba:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10a      	bne.n	80045e0 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7ff ff89 	bl	80044e2 <HAL_RTC_WaitForSynchro>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d004      	beq.n	80045e0 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2204      	movs	r2, #4
 80045da:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b085      	sub	sp, #20
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	4603      	mov	r3, r0
 80045f2:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80045f8:	e005      	b.n	8004606 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	3301      	adds	r3, #1
 80045fe:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004600:	79fb      	ldrb	r3, [r7, #7]
 8004602:	3b0a      	subs	r3, #10
 8004604:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	2b09      	cmp	r3, #9
 800460a:	d8f6      	bhi.n	80045fa <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	b2da      	uxtb	r2, r3
 8004612:	79fb      	ldrb	r3, [r7, #7]
 8004614:	4313      	orrs	r3, r2
 8004616:	b2db      	uxtb	r3, r3
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800462e:	2300      	movs	r3, #0
 8004630:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	091b      	lsrs	r3, r3, #4
 8004636:	b2db      	uxtb	r3, r3
 8004638:	461a      	mov	r2, r3
 800463a:	0092      	lsls	r2, r2, #2
 800463c:	4413      	add	r3, r2
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	f003 030f 	and.w	r3, r3, #15
 8004648:	b2da      	uxtb	r2, r3
 800464a:	7bfb      	ldrb	r3, [r7, #15]
 800464c:	4413      	add	r3, r2
 800464e:	b2db      	uxtb	r3, r3
}
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e041      	b.n	80046f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fc ffec 	bl	8001660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3304      	adds	r3, #4
 8004698:	4619      	mov	r1, r3
 800469a:	4610      	mov	r0, r2
 800469c:	f000 fa96 	bl	8004bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b01      	cmp	r3, #1
 800470e:	d001      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e04e      	b.n	80047b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a23      	ldr	r2, [pc, #140]	; (80047c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d022      	beq.n	800477c <HAL_TIM_Base_Start_IT+0x80>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473e:	d01d      	beq.n	800477c <HAL_TIM_Base_Start_IT+0x80>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a1f      	ldr	r2, [pc, #124]	; (80047c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d018      	beq.n	800477c <HAL_TIM_Base_Start_IT+0x80>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a1e      	ldr	r2, [pc, #120]	; (80047c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d013      	beq.n	800477c <HAL_TIM_Base_Start_IT+0x80>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a1c      	ldr	r2, [pc, #112]	; (80047cc <HAL_TIM_Base_Start_IT+0xd0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00e      	beq.n	800477c <HAL_TIM_Base_Start_IT+0x80>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1b      	ldr	r2, [pc, #108]	; (80047d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d009      	beq.n	800477c <HAL_TIM_Base_Start_IT+0x80>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a19      	ldr	r2, [pc, #100]	; (80047d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <HAL_TIM_Base_Start_IT+0x80>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a18      	ldr	r2, [pc, #96]	; (80047d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d111      	bne.n	80047a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b06      	cmp	r3, #6
 800478c:	d010      	beq.n	80047b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0201 	orr.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479e:	e007      	b.n	80047b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0201 	orr.w	r2, r2, #1
 80047ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40010000 	.word	0x40010000
 80047c4:	40000400 	.word	0x40000400
 80047c8:	40000800 	.word	0x40000800
 80047cc:	40000c00 	.word	0x40000c00
 80047d0:	40010400 	.word	0x40010400
 80047d4:	40014000 	.word	0x40014000
 80047d8:	40001800 	.word	0x40001800

080047dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d122      	bne.n	8004838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d11b      	bne.n	8004838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0202 	mvn.w	r2, #2
 8004808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f9b5 	bl	8004b8e <HAL_TIM_IC_CaptureCallback>
 8004824:	e005      	b.n	8004832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f9a7 	bl	8004b7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f9b8 	bl	8004ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b04      	cmp	r3, #4
 8004844:	d122      	bne.n	800488c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b04      	cmp	r3, #4
 8004852:	d11b      	bne.n	800488c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f06f 0204 	mvn.w	r2, #4
 800485c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2202      	movs	r2, #2
 8004862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f98b 	bl	8004b8e <HAL_TIM_IC_CaptureCallback>
 8004878:	e005      	b.n	8004886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f97d 	bl	8004b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f98e 	bl	8004ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b08      	cmp	r3, #8
 8004898:	d122      	bne.n	80048e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d11b      	bne.n	80048e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f06f 0208 	mvn.w	r2, #8
 80048b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2204      	movs	r2, #4
 80048b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f961 	bl	8004b8e <HAL_TIM_IC_CaptureCallback>
 80048cc:	e005      	b.n	80048da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f953 	bl	8004b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f964 	bl	8004ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b10      	cmp	r3, #16
 80048ec:	d122      	bne.n	8004934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f003 0310 	and.w	r3, r3, #16
 80048f8:	2b10      	cmp	r3, #16
 80048fa:	d11b      	bne.n	8004934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f06f 0210 	mvn.w	r2, #16
 8004904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2208      	movs	r2, #8
 800490a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f937 	bl	8004b8e <HAL_TIM_IC_CaptureCallback>
 8004920:	e005      	b.n	800492e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f929 	bl	8004b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f93a 	bl	8004ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b01      	cmp	r3, #1
 8004940:	d10e      	bne.n	8004960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b01      	cmp	r3, #1
 800494e:	d107      	bne.n	8004960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0201 	mvn.w	r2, #1
 8004958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fc fa10 	bl	8000d80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496a:	2b80      	cmp	r3, #128	; 0x80
 800496c:	d10e      	bne.n	800498c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004978:	2b80      	cmp	r3, #128	; 0x80
 800497a:	d107      	bne.n	800498c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fae0 	bl	8004f4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004996:	2b40      	cmp	r3, #64	; 0x40
 8004998:	d10e      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a4:	2b40      	cmp	r3, #64	; 0x40
 80049a6:	d107      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f8ff 	bl	8004bb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	d10e      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	d107      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0220 	mvn.w	r2, #32
 80049dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 faaa 	bl	8004f38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049e4:	bf00      	nop
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_TIM_ConfigClockSource+0x1c>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e0b4      	b.n	8004b72 <HAL_TIM_ConfigClockSource+0x186>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a40:	d03e      	beq.n	8004ac0 <HAL_TIM_ConfigClockSource+0xd4>
 8004a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a46:	f200 8087 	bhi.w	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4e:	f000 8086 	beq.w	8004b5e <HAL_TIM_ConfigClockSource+0x172>
 8004a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a56:	d87f      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a58:	2b70      	cmp	r3, #112	; 0x70
 8004a5a:	d01a      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0xa6>
 8004a5c:	2b70      	cmp	r3, #112	; 0x70
 8004a5e:	d87b      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a60:	2b60      	cmp	r3, #96	; 0x60
 8004a62:	d050      	beq.n	8004b06 <HAL_TIM_ConfigClockSource+0x11a>
 8004a64:	2b60      	cmp	r3, #96	; 0x60
 8004a66:	d877      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a68:	2b50      	cmp	r3, #80	; 0x50
 8004a6a:	d03c      	beq.n	8004ae6 <HAL_TIM_ConfigClockSource+0xfa>
 8004a6c:	2b50      	cmp	r3, #80	; 0x50
 8004a6e:	d873      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a70:	2b40      	cmp	r3, #64	; 0x40
 8004a72:	d058      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x13a>
 8004a74:	2b40      	cmp	r3, #64	; 0x40
 8004a76:	d86f      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a78:	2b30      	cmp	r3, #48	; 0x30
 8004a7a:	d064      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x15a>
 8004a7c:	2b30      	cmp	r3, #48	; 0x30
 8004a7e:	d86b      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a80:	2b20      	cmp	r3, #32
 8004a82:	d060      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x15a>
 8004a84:	2b20      	cmp	r3, #32
 8004a86:	d867      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d05c      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x15a>
 8004a8c:	2b10      	cmp	r3, #16
 8004a8e:	d05a      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x15a>
 8004a90:	e062      	b.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6818      	ldr	r0, [r3, #0]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	6899      	ldr	r1, [r3, #8]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f000 f9ad 	bl	8004e00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ab4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	609a      	str	r2, [r3, #8]
      break;
 8004abe:	e04f      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	6899      	ldr	r1, [r3, #8]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f000 f996 	bl	8004e00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ae2:	609a      	str	r2, [r3, #8]
      break;
 8004ae4:	e03c      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6859      	ldr	r1, [r3, #4]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	461a      	mov	r2, r3
 8004af4:	f000 f90a 	bl	8004d0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2150      	movs	r1, #80	; 0x50
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 f963 	bl	8004dca <TIM_ITRx_SetConfig>
      break;
 8004b04:	e02c      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6859      	ldr	r1, [r3, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	461a      	mov	r2, r3
 8004b14:	f000 f929 	bl	8004d6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2160      	movs	r1, #96	; 0x60
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 f953 	bl	8004dca <TIM_ITRx_SetConfig>
      break;
 8004b24:	e01c      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	6859      	ldr	r1, [r3, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	461a      	mov	r2, r3
 8004b34:	f000 f8ea 	bl	8004d0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2140      	movs	r1, #64	; 0x40
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 f943 	bl	8004dca <TIM_ITRx_SetConfig>
      break;
 8004b44:	e00c      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4610      	mov	r0, r2
 8004b52:	f000 f93a 	bl	8004dca <TIM_ITRx_SetConfig>
      break;
 8004b56:	e003      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b5c:	e000      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
	...

08004bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a40      	ldr	r2, [pc, #256]	; (8004ce0 <TIM_Base_SetConfig+0x114>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d013      	beq.n	8004c0c <TIM_Base_SetConfig+0x40>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bea:	d00f      	beq.n	8004c0c <TIM_Base_SetConfig+0x40>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a3d      	ldr	r2, [pc, #244]	; (8004ce4 <TIM_Base_SetConfig+0x118>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00b      	beq.n	8004c0c <TIM_Base_SetConfig+0x40>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a3c      	ldr	r2, [pc, #240]	; (8004ce8 <TIM_Base_SetConfig+0x11c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d007      	beq.n	8004c0c <TIM_Base_SetConfig+0x40>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a3b      	ldr	r2, [pc, #236]	; (8004cec <TIM_Base_SetConfig+0x120>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d003      	beq.n	8004c0c <TIM_Base_SetConfig+0x40>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a3a      	ldr	r2, [pc, #232]	; (8004cf0 <TIM_Base_SetConfig+0x124>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d108      	bne.n	8004c1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a2f      	ldr	r2, [pc, #188]	; (8004ce0 <TIM_Base_SetConfig+0x114>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d02b      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2c:	d027      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a2c      	ldr	r2, [pc, #176]	; (8004ce4 <TIM_Base_SetConfig+0x118>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d023      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a2b      	ldr	r2, [pc, #172]	; (8004ce8 <TIM_Base_SetConfig+0x11c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d01f      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a2a      	ldr	r2, [pc, #168]	; (8004cec <TIM_Base_SetConfig+0x120>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d01b      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a29      	ldr	r2, [pc, #164]	; (8004cf0 <TIM_Base_SetConfig+0x124>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d017      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a28      	ldr	r2, [pc, #160]	; (8004cf4 <TIM_Base_SetConfig+0x128>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d013      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a27      	ldr	r2, [pc, #156]	; (8004cf8 <TIM_Base_SetConfig+0x12c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00f      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a26      	ldr	r2, [pc, #152]	; (8004cfc <TIM_Base_SetConfig+0x130>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00b      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a25      	ldr	r2, [pc, #148]	; (8004d00 <TIM_Base_SetConfig+0x134>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d007      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a24      	ldr	r2, [pc, #144]	; (8004d04 <TIM_Base_SetConfig+0x138>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d003      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a23      	ldr	r2, [pc, #140]	; (8004d08 <TIM_Base_SetConfig+0x13c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d108      	bne.n	8004c90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a0a      	ldr	r2, [pc, #40]	; (8004ce0 <TIM_Base_SetConfig+0x114>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d003      	beq.n	8004cc4 <TIM_Base_SetConfig+0xf8>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a0c      	ldr	r2, [pc, #48]	; (8004cf0 <TIM_Base_SetConfig+0x124>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d103      	bne.n	8004ccc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	615a      	str	r2, [r3, #20]
}
 8004cd2:	bf00      	nop
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40010000 	.word	0x40010000
 8004ce4:	40000400 	.word	0x40000400
 8004ce8:	40000800 	.word	0x40000800
 8004cec:	40000c00 	.word	0x40000c00
 8004cf0:	40010400 	.word	0x40010400
 8004cf4:	40014000 	.word	0x40014000
 8004cf8:	40014400 	.word	0x40014400
 8004cfc:	40014800 	.word	0x40014800
 8004d00:	40001800 	.word	0x40001800
 8004d04:	40001c00 	.word	0x40001c00
 8004d08:	40002000 	.word	0x40002000

08004d0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	f023 0201 	bic.w	r2, r3, #1
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f023 030a 	bic.w	r3, r3, #10
 8004d48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	621a      	str	r2, [r3, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b087      	sub	sp, #28
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	f023 0210 	bic.w	r2, r3, #16
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	031b      	lsls	r3, r3, #12
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004da6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	011b      	lsls	r3, r3, #4
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	621a      	str	r2, [r3, #32]
}
 8004dbe:	bf00      	nop
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b085      	sub	sp, #20
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f043 0307 	orr.w	r3, r3, #7
 8004dec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	609a      	str	r2, [r3, #8]
}
 8004df4:	bf00      	nop
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	021a      	lsls	r2, r3, #8
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	609a      	str	r2, [r3, #8]
}
 8004e34:	bf00      	nop
 8004e36:	371c      	adds	r7, #28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e05a      	b.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a21      	ldr	r2, [pc, #132]	; (8004f1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d022      	beq.n	8004ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea4:	d01d      	beq.n	8004ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a1d      	ldr	r2, [pc, #116]	; (8004f20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d018      	beq.n	8004ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a1b      	ldr	r2, [pc, #108]	; (8004f24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d013      	beq.n	8004ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a1a      	ldr	r2, [pc, #104]	; (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d00e      	beq.n	8004ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a18      	ldr	r2, [pc, #96]	; (8004f2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d009      	beq.n	8004ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a17      	ldr	r2, [pc, #92]	; (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d004      	beq.n	8004ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a15      	ldr	r2, [pc, #84]	; (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d10c      	bne.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ee8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40010000 	.word	0x40010000
 8004f20:	40000400 	.word	0x40000400
 8004f24:	40000800 	.word	0x40000800
 8004f28:	40000c00 	.word	0x40000c00
 8004f2c:	40010400 	.word	0x40010400
 8004f30:	40014000 	.word	0x40014000
 8004f34:	40001800 	.word	0x40001800

08004f38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e03f      	b.n	8004ff2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d106      	bne.n	8004f8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7fc fbe6 	bl	8001758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2224      	movs	r2, #36	; 0x24
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fd7b 	bl	8005aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695a      	ldr	r2, [r3, #20]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2220      	movs	r2, #32
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b08a      	sub	sp, #40	; 0x28
 8004ffe:	af02      	add	r7, sp, #8
 8005000:	60f8      	str	r0, [r7, #12]
 8005002:	60b9      	str	r1, [r7, #8]
 8005004:	603b      	str	r3, [r7, #0]
 8005006:	4613      	mov	r3, r2
 8005008:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b20      	cmp	r3, #32
 8005018:	d17c      	bne.n	8005114 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <HAL_UART_Transmit+0x2c>
 8005020:	88fb      	ldrh	r3, [r7, #6]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e075      	b.n	8005116 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_UART_Transmit+0x3e>
 8005034:	2302      	movs	r3, #2
 8005036:	e06e      	b.n	8005116 <HAL_UART_Transmit+0x11c>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2221      	movs	r2, #33	; 0x21
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800504e:	f7fc fc8f 	bl	8001970 <HAL_GetTick>
 8005052:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	88fa      	ldrh	r2, [r7, #6]
 8005058:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	88fa      	ldrh	r2, [r7, #6]
 800505e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005068:	d108      	bne.n	800507c <HAL_UART_Transmit+0x82>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d104      	bne.n	800507c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005072:	2300      	movs	r3, #0
 8005074:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	61bb      	str	r3, [r7, #24]
 800507a:	e003      	b.n	8005084 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005080:	2300      	movs	r3, #0
 8005082:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800508c:	e02a      	b.n	80050e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2200      	movs	r2, #0
 8005096:	2180      	movs	r1, #128	; 0x80
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 faf9 	bl	8005690 <UART_WaitOnFlagUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e036      	b.n	8005116 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10b      	bne.n	80050c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	461a      	mov	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	3302      	adds	r3, #2
 80050c2:	61bb      	str	r3, [r7, #24]
 80050c4:	e007      	b.n	80050d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	781a      	ldrb	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	3301      	adds	r3, #1
 80050d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1cf      	bne.n	800508e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2200      	movs	r2, #0
 80050f6:	2140      	movs	r1, #64	; 0x40
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 fac9 	bl	8005690 <UART_WaitOnFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e006      	b.n	8005116 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005110:	2300      	movs	r3, #0
 8005112:	e000      	b.n	8005116 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005114:	2302      	movs	r3, #2
  }
}
 8005116:	4618      	mov	r0, r3
 8005118:	3720      	adds	r7, #32
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b0ba      	sub	sp, #232	; 0xe8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005146:	2300      	movs	r3, #0
 8005148:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800514c:	2300      	movs	r3, #0
 800514e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800515e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10f      	bne.n	8005186 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b00      	cmp	r3, #0
 8005170:	d009      	beq.n	8005186 <HAL_UART_IRQHandler+0x66>
 8005172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005176:	f003 0320 	and.w	r3, r3, #32
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fbd3 	bl	800592a <UART_Receive_IT>
      return;
 8005184:	e256      	b.n	8005634 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005186:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 80de 	beq.w	800534c <HAL_UART_IRQHandler+0x22c>
 8005190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	d106      	bne.n	80051aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800519c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 80d1 	beq.w	800534c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00b      	beq.n	80051ce <HAL_UART_IRQHandler+0xae>
 80051b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d005      	beq.n	80051ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f043 0201 	orr.w	r2, r3, #1
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00b      	beq.n	80051f2 <HAL_UART_IRQHandler+0xd2>
 80051da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d005      	beq.n	80051f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	f043 0202 	orr.w	r2, r3, #2
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00b      	beq.n	8005216 <HAL_UART_IRQHandler+0xf6>
 80051fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d005      	beq.n	8005216 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	f043 0204 	orr.w	r2, r3, #4
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d011      	beq.n	8005246 <HAL_UART_IRQHandler+0x126>
 8005222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005226:	f003 0320 	and.w	r3, r3, #32
 800522a:	2b00      	cmp	r3, #0
 800522c:	d105      	bne.n	800523a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800522e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d005      	beq.n	8005246 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	f043 0208 	orr.w	r2, r3, #8
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 81ed 	beq.w	800562a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005254:	f003 0320 	and.w	r3, r3, #32
 8005258:	2b00      	cmp	r3, #0
 800525a:	d008      	beq.n	800526e <HAL_UART_IRQHandler+0x14e>
 800525c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005260:	f003 0320 	and.w	r3, r3, #32
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fb5e 	bl	800592a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005278:	2b40      	cmp	r3, #64	; 0x40
 800527a:	bf0c      	ite	eq
 800527c:	2301      	moveq	r3, #1
 800527e:	2300      	movne	r3, #0
 8005280:	b2db      	uxtb	r3, r3
 8005282:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d103      	bne.n	800529a <HAL_UART_IRQHandler+0x17a>
 8005292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005296:	2b00      	cmp	r3, #0
 8005298:	d04f      	beq.n	800533a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fa66 	bl	800576c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052aa:	2b40      	cmp	r3, #64	; 0x40
 80052ac:	d141      	bne.n	8005332 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3314      	adds	r3, #20
 80052b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052bc:	e853 3f00 	ldrex	r3, [r3]
 80052c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80052c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3314      	adds	r3, #20
 80052d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80052da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80052de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80052e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80052f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1d9      	bne.n	80052ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d013      	beq.n	800532a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005306:	4a7d      	ldr	r2, [pc, #500]	; (80054fc <HAL_UART_IRQHandler+0x3dc>)
 8005308:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530e:	4618      	mov	r0, r3
 8005310:	f7fd f831 	bl	8002376 <HAL_DMA_Abort_IT>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d016      	beq.n	8005348 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005324:	4610      	mov	r0, r2
 8005326:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005328:	e00e      	b.n	8005348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f99a 	bl	8005664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005330:	e00a      	b.n	8005348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f996 	bl	8005664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005338:	e006      	b.n	8005348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f992 	bl	8005664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005346:	e170      	b.n	800562a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005348:	bf00      	nop
    return;
 800534a:	e16e      	b.n	800562a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005350:	2b01      	cmp	r3, #1
 8005352:	f040 814a 	bne.w	80055ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800535a:	f003 0310 	and.w	r3, r3, #16
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 8143 	beq.w	80055ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005368:	f003 0310 	and.w	r3, r3, #16
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 813c 	beq.w	80055ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005372:	2300      	movs	r3, #0
 8005374:	60bb      	str	r3, [r7, #8]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	60bb      	str	r3, [r7, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	60bb      	str	r3, [r7, #8]
 8005386:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005392:	2b40      	cmp	r3, #64	; 0x40
 8005394:	f040 80b4 	bne.w	8005500 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 8140 	beq.w	800562e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053b6:	429a      	cmp	r2, r3
 80053b8:	f080 8139 	bcs.w	800562e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ce:	f000 8088 	beq.w	80054e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	330c      	adds	r3, #12
 80053d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80053e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	330c      	adds	r3, #12
 80053fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80053fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005402:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005406:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800540a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800540e:	e841 2300 	strex	r3, r2, [r1]
 8005412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005416:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1d9      	bne.n	80053d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3314      	adds	r3, #20
 8005424:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800542e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005430:	f023 0301 	bic.w	r3, r3, #1
 8005434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3314      	adds	r3, #20
 800543e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005442:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005446:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800544a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800544e:	e841 2300 	strex	r3, r2, [r1]
 8005452:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1e1      	bne.n	800541e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3314      	adds	r3, #20
 8005460:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800546a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800546c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005470:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3314      	adds	r3, #20
 800547a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800547e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005480:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005484:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800548c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e3      	bne.n	800545a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2220      	movs	r2, #32
 8005496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	330c      	adds	r3, #12
 80054a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054aa:	e853 3f00 	ldrex	r3, [r3]
 80054ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054b2:	f023 0310 	bic.w	r3, r3, #16
 80054b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	330c      	adds	r3, #12
 80054c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80054c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80054c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054cc:	e841 2300 	strex	r3, r2, [r1]
 80054d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1e3      	bne.n	80054a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fc feda 	bl	8002296 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	4619      	mov	r1, r3
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f8c0 	bl	8005678 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054f8:	e099      	b.n	800562e <HAL_UART_IRQHandler+0x50e>
 80054fa:	bf00      	nop
 80054fc:	08005833 	.word	0x08005833
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005508:	b29b      	uxth	r3, r3
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005514:	b29b      	uxth	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 808b 	beq.w	8005632 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800551c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 8086 	beq.w	8005632 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	330c      	adds	r3, #12
 800552c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005530:	e853 3f00 	ldrex	r3, [r3]
 8005534:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005538:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800553c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	330c      	adds	r3, #12
 8005546:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800554a:	647a      	str	r2, [r7, #68]	; 0x44
 800554c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005550:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005552:	e841 2300 	strex	r3, r2, [r1]
 8005556:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1e3      	bne.n	8005526 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3314      	adds	r3, #20
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	e853 3f00 	ldrex	r3, [r3]
 800556c:	623b      	str	r3, [r7, #32]
   return(result);
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	f023 0301 	bic.w	r3, r3, #1
 8005574:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3314      	adds	r3, #20
 800557e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005582:	633a      	str	r2, [r7, #48]	; 0x30
 8005584:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e3      	bne.n	800555e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	330c      	adds	r3, #12
 80055aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0310 	bic.w	r3, r3, #16
 80055ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	330c      	adds	r3, #12
 80055c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80055c8:	61fa      	str	r2, [r7, #28]
 80055ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055cc:	69b9      	ldr	r1, [r7, #24]
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	e841 2300 	strex	r3, r2, [r1]
 80055d4:	617b      	str	r3, [r7, #20]
   return(result);
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e3      	bne.n	80055a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055e0:	4619      	mov	r1, r3
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f848 	bl	8005678 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055e8:	e023      	b.n	8005632 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d009      	beq.n	800560a <HAL_UART_IRQHandler+0x4ea>
 80055f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f929 	bl	800585a <UART_Transmit_IT>
    return;
 8005608:	e014      	b.n	8005634 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800560a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800560e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00e      	beq.n	8005634 <HAL_UART_IRQHandler+0x514>
 8005616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800561a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561e:	2b00      	cmp	r3, #0
 8005620:	d008      	beq.n	8005634 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f969 	bl	80058fa <UART_EndTransmit_IT>
    return;
 8005628:	e004      	b.n	8005634 <HAL_UART_IRQHandler+0x514>
    return;
 800562a:	bf00      	nop
 800562c:	e002      	b.n	8005634 <HAL_UART_IRQHandler+0x514>
      return;
 800562e:	bf00      	nop
 8005630:	e000      	b.n	8005634 <HAL_UART_IRQHandler+0x514>
      return;
 8005632:	bf00      	nop
  }
}
 8005634:	37e8      	adds	r7, #232	; 0xe8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop

0800563c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	460b      	mov	r3, r1
 8005682:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b090      	sub	sp, #64	; 0x40
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	603b      	str	r3, [r7, #0]
 800569c:	4613      	mov	r3, r2
 800569e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056a0:	e050      	b.n	8005744 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a8:	d04c      	beq.n	8005744 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d007      	beq.n	80056c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80056b0:	f7fc f95e 	bl	8001970 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056bc:	429a      	cmp	r2, r3
 80056be:	d241      	bcs.n	8005744 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	330c      	adds	r3, #12
 80056c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ca:	e853 3f00 	ldrex	r3, [r3]
 80056ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	330c      	adds	r3, #12
 80056de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056e0:	637a      	str	r2, [r7, #52]	; 0x34
 80056e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056e8:	e841 2300 	strex	r3, r2, [r1]
 80056ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1e5      	bne.n	80056c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3314      	adds	r3, #20
 80056fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	e853 3f00 	ldrex	r3, [r3]
 8005702:	613b      	str	r3, [r7, #16]
   return(result);
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f023 0301 	bic.w	r3, r3, #1
 800570a:	63bb      	str	r3, [r7, #56]	; 0x38
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3314      	adds	r3, #20
 8005712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005714:	623a      	str	r2, [r7, #32]
 8005716:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005718:	69f9      	ldr	r1, [r7, #28]
 800571a:	6a3a      	ldr	r2, [r7, #32]
 800571c:	e841 2300 	strex	r3, r2, [r1]
 8005720:	61bb      	str	r3, [r7, #24]
   return(result);
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1e5      	bne.n	80056f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2220      	movs	r2, #32
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e00f      	b.n	8005764 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	4013      	ands	r3, r2
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	429a      	cmp	r2, r3
 8005752:	bf0c      	ite	eq
 8005754:	2301      	moveq	r3, #1
 8005756:	2300      	movne	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	461a      	mov	r2, r3
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	429a      	cmp	r2, r3
 8005760:	d09f      	beq.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3740      	adds	r7, #64	; 0x40
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800576c:	b480      	push	{r7}
 800576e:	b095      	sub	sp, #84	; 0x54
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	330c      	adds	r3, #12
 800577a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005786:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800578a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	330c      	adds	r3, #12
 8005792:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005794:	643a      	str	r2, [r7, #64]	; 0x40
 8005796:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800579a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800579c:	e841 2300 	strex	r3, r2, [r1]
 80057a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e5      	bne.n	8005774 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3314      	adds	r3, #20
 80057ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	f023 0301 	bic.w	r3, r3, #1
 80057be:	64bb      	str	r3, [r7, #72]	; 0x48
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3314      	adds	r3, #20
 80057c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e5      	bne.n	80057a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d119      	bne.n	8005818 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	330c      	adds	r3, #12
 80057ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f023 0310 	bic.w	r3, r3, #16
 80057fa:	647b      	str	r3, [r7, #68]	; 0x44
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	330c      	adds	r3, #12
 8005802:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005804:	61ba      	str	r2, [r7, #24]
 8005806:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005808:	6979      	ldr	r1, [r7, #20]
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	e841 2300 	strex	r3, r2, [r1]
 8005810:	613b      	str	r3, [r7, #16]
   return(result);
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e5      	bne.n	80057e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005826:	bf00      	nop
 8005828:	3754      	adds	r7, #84	; 0x54
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b084      	sub	sp, #16
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f7ff ff09 	bl	8005664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800585a:	b480      	push	{r7}
 800585c:	b085      	sub	sp, #20
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b21      	cmp	r3, #33	; 0x21
 800586c:	d13e      	bne.n	80058ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005876:	d114      	bne.n	80058a2 <UART_Transmit_IT+0x48>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d110      	bne.n	80058a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005894:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	1c9a      	adds	r2, r3, #2
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	621a      	str	r2, [r3, #32]
 80058a0:	e008      	b.n	80058b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	1c59      	adds	r1, r3, #1
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6211      	str	r1, [r2, #32]
 80058ac:	781a      	ldrb	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29b      	uxth	r3, r3
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	4619      	mov	r1, r3
 80058c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10f      	bne.n	80058e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	e000      	b.n	80058ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80058ec:	2302      	movs	r3, #2
  }
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b082      	sub	sp, #8
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68da      	ldr	r2, [r3, #12]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005910:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2220      	movs	r2, #32
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff fe8e 	bl	800563c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b08c      	sub	sp, #48	; 0x30
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b22      	cmp	r3, #34	; 0x22
 800593c:	f040 80ab 	bne.w	8005a96 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005948:	d117      	bne.n	800597a <UART_Receive_IT+0x50>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d113      	bne.n	800597a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005952:	2300      	movs	r3, #0
 8005954:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	b29b      	uxth	r3, r3
 8005964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005968:	b29a      	uxth	r2, r3
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005972:	1c9a      	adds	r2, r3, #2
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	629a      	str	r2, [r3, #40]	; 0x28
 8005978:	e026      	b.n	80059c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005980:	2300      	movs	r3, #0
 8005982:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598c:	d007      	beq.n	800599e <UART_Receive_IT+0x74>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10a      	bne.n	80059ac <UART_Receive_IT+0x82>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	e008      	b.n	80059be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c2:	1c5a      	adds	r2, r3, #1
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	4619      	mov	r1, r3
 80059d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d15a      	bne.n	8005a92 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 0220 	bic.w	r2, r2, #32
 80059ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695a      	ldr	r2, [r3, #20]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0201 	bic.w	r2, r2, #1
 8005a0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d135      	bne.n	8005a88 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	330c      	adds	r3, #12
 8005a28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	613b      	str	r3, [r7, #16]
   return(result);
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f023 0310 	bic.w	r3, r3, #16
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	330c      	adds	r3, #12
 8005a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a42:	623a      	str	r2, [r7, #32]
 8005a44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	69f9      	ldr	r1, [r7, #28]
 8005a48:	6a3a      	ldr	r2, [r7, #32]
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e5      	bne.n	8005a22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0310 	and.w	r3, r3, #16
 8005a60:	2b10      	cmp	r3, #16
 8005a62:	d10a      	bne.n	8005a7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a64:	2300      	movs	r3, #0
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a7e:	4619      	mov	r1, r3
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7ff fdf9 	bl	8005678 <HAL_UARTEx_RxEventCallback>
 8005a86:	e002      	b.n	8005a8e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7ff fde1 	bl	8005650 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	e002      	b.n	8005a98 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	e000      	b.n	8005a98 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005a96:	2302      	movs	r3, #2
  }
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3730      	adds	r7, #48	; 0x30
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005aa4:	b0c0      	sub	sp, #256	; 0x100
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005abc:	68d9      	ldr	r1, [r3, #12]
 8005abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	ea40 0301 	orr.w	r3, r0, r1
 8005ac8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005af8:	f021 010c 	bic.w	r1, r1, #12
 8005afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b06:	430b      	orrs	r3, r1
 8005b08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1a:	6999      	ldr	r1, [r3, #24]
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	ea40 0301 	orr.w	r3, r0, r1
 8005b26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	4b8f      	ldr	r3, [pc, #572]	; (8005d6c <UART_SetConfig+0x2cc>)
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d005      	beq.n	8005b40 <UART_SetConfig+0xa0>
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	4b8d      	ldr	r3, [pc, #564]	; (8005d70 <UART_SetConfig+0x2d0>)
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d104      	bne.n	8005b4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b40:	f7fe f8ba 	bl	8003cb8 <HAL_RCC_GetPCLK2Freq>
 8005b44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b48:	e003      	b.n	8005b52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b4a:	f7fe f8a1 	bl	8003c90 <HAL_RCC_GetPCLK1Freq>
 8005b4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b5c:	f040 810c 	bne.w	8005d78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b64:	2200      	movs	r2, #0
 8005b66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b72:	4622      	mov	r2, r4
 8005b74:	462b      	mov	r3, r5
 8005b76:	1891      	adds	r1, r2, r2
 8005b78:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b7a:	415b      	adcs	r3, r3
 8005b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b82:	4621      	mov	r1, r4
 8005b84:	eb12 0801 	adds.w	r8, r2, r1
 8005b88:	4629      	mov	r1, r5
 8005b8a:	eb43 0901 	adc.w	r9, r3, r1
 8005b8e:	f04f 0200 	mov.w	r2, #0
 8005b92:	f04f 0300 	mov.w	r3, #0
 8005b96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ba2:	4690      	mov	r8, r2
 8005ba4:	4699      	mov	r9, r3
 8005ba6:	4623      	mov	r3, r4
 8005ba8:	eb18 0303 	adds.w	r3, r8, r3
 8005bac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bb0:	462b      	mov	r3, r5
 8005bb2:	eb49 0303 	adc.w	r3, r9, r3
 8005bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005bca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005bce:	460b      	mov	r3, r1
 8005bd0:	18db      	adds	r3, r3, r3
 8005bd2:	653b      	str	r3, [r7, #80]	; 0x50
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	eb42 0303 	adc.w	r3, r2, r3
 8005bda:	657b      	str	r3, [r7, #84]	; 0x54
 8005bdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005be0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005be4:	f7fa fb5c 	bl	80002a0 <__aeabi_uldivmod>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4b61      	ldr	r3, [pc, #388]	; (8005d74 <UART_SetConfig+0x2d4>)
 8005bee:	fba3 2302 	umull	r2, r3, r3, r2
 8005bf2:	095b      	lsrs	r3, r3, #5
 8005bf4:	011c      	lsls	r4, r3, #4
 8005bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c08:	4642      	mov	r2, r8
 8005c0a:	464b      	mov	r3, r9
 8005c0c:	1891      	adds	r1, r2, r2
 8005c0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c10:	415b      	adcs	r3, r3
 8005c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c18:	4641      	mov	r1, r8
 8005c1a:	eb12 0a01 	adds.w	sl, r2, r1
 8005c1e:	4649      	mov	r1, r9
 8005c20:	eb43 0b01 	adc.w	fp, r3, r1
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	f04f 0300 	mov.w	r3, #0
 8005c2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c38:	4692      	mov	sl, r2
 8005c3a:	469b      	mov	fp, r3
 8005c3c:	4643      	mov	r3, r8
 8005c3e:	eb1a 0303 	adds.w	r3, sl, r3
 8005c42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c46:	464b      	mov	r3, r9
 8005c48:	eb4b 0303 	adc.w	r3, fp, r3
 8005c4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c64:	460b      	mov	r3, r1
 8005c66:	18db      	adds	r3, r3, r3
 8005c68:	643b      	str	r3, [r7, #64]	; 0x40
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	eb42 0303 	adc.w	r3, r2, r3
 8005c70:	647b      	str	r3, [r7, #68]	; 0x44
 8005c72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c7a:	f7fa fb11 	bl	80002a0 <__aeabi_uldivmod>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	4611      	mov	r1, r2
 8005c84:	4b3b      	ldr	r3, [pc, #236]	; (8005d74 <UART_SetConfig+0x2d4>)
 8005c86:	fba3 2301 	umull	r2, r3, r3, r1
 8005c8a:	095b      	lsrs	r3, r3, #5
 8005c8c:	2264      	movs	r2, #100	; 0x64
 8005c8e:	fb02 f303 	mul.w	r3, r2, r3
 8005c92:	1acb      	subs	r3, r1, r3
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c9a:	4b36      	ldr	r3, [pc, #216]	; (8005d74 <UART_SetConfig+0x2d4>)
 8005c9c:	fba3 2302 	umull	r2, r3, r3, r2
 8005ca0:	095b      	lsrs	r3, r3, #5
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ca8:	441c      	add	r4, r3
 8005caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005cb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005cbc:	4642      	mov	r2, r8
 8005cbe:	464b      	mov	r3, r9
 8005cc0:	1891      	adds	r1, r2, r2
 8005cc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cc4:	415b      	adcs	r3, r3
 8005cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ccc:	4641      	mov	r1, r8
 8005cce:	1851      	adds	r1, r2, r1
 8005cd0:	6339      	str	r1, [r7, #48]	; 0x30
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	414b      	adcs	r3, r1
 8005cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	f04f 0300 	mov.w	r3, #0
 8005ce0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ce4:	4659      	mov	r1, fp
 8005ce6:	00cb      	lsls	r3, r1, #3
 8005ce8:	4651      	mov	r1, sl
 8005cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cee:	4651      	mov	r1, sl
 8005cf0:	00ca      	lsls	r2, r1, #3
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	4642      	mov	r2, r8
 8005cfa:	189b      	adds	r3, r3, r2
 8005cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d00:	464b      	mov	r3, r9
 8005d02:	460a      	mov	r2, r1
 8005d04:	eb42 0303 	adc.w	r3, r2, r3
 8005d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d20:	460b      	mov	r3, r1
 8005d22:	18db      	adds	r3, r3, r3
 8005d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d26:	4613      	mov	r3, r2
 8005d28:	eb42 0303 	adc.w	r3, r2, r3
 8005d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d36:	f7fa fab3 	bl	80002a0 <__aeabi_uldivmod>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4b0d      	ldr	r3, [pc, #52]	; (8005d74 <UART_SetConfig+0x2d4>)
 8005d40:	fba3 1302 	umull	r1, r3, r3, r2
 8005d44:	095b      	lsrs	r3, r3, #5
 8005d46:	2164      	movs	r1, #100	; 0x64
 8005d48:	fb01 f303 	mul.w	r3, r1, r3
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	3332      	adds	r3, #50	; 0x32
 8005d52:	4a08      	ldr	r2, [pc, #32]	; (8005d74 <UART_SetConfig+0x2d4>)
 8005d54:	fba2 2303 	umull	r2, r3, r2, r3
 8005d58:	095b      	lsrs	r3, r3, #5
 8005d5a:	f003 0207 	and.w	r2, r3, #7
 8005d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4422      	add	r2, r4
 8005d66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d68:	e105      	b.n	8005f76 <UART_SetConfig+0x4d6>
 8005d6a:	bf00      	nop
 8005d6c:	40011000 	.word	0x40011000
 8005d70:	40011400 	.word	0x40011400
 8005d74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d8a:	4642      	mov	r2, r8
 8005d8c:	464b      	mov	r3, r9
 8005d8e:	1891      	adds	r1, r2, r2
 8005d90:	6239      	str	r1, [r7, #32]
 8005d92:	415b      	adcs	r3, r3
 8005d94:	627b      	str	r3, [r7, #36]	; 0x24
 8005d96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d9a:	4641      	mov	r1, r8
 8005d9c:	1854      	adds	r4, r2, r1
 8005d9e:	4649      	mov	r1, r9
 8005da0:	eb43 0501 	adc.w	r5, r3, r1
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	f04f 0300 	mov.w	r3, #0
 8005dac:	00eb      	lsls	r3, r5, #3
 8005dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005db2:	00e2      	lsls	r2, r4, #3
 8005db4:	4614      	mov	r4, r2
 8005db6:	461d      	mov	r5, r3
 8005db8:	4643      	mov	r3, r8
 8005dba:	18e3      	adds	r3, r4, r3
 8005dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005dc0:	464b      	mov	r3, r9
 8005dc2:	eb45 0303 	adc.w	r3, r5, r3
 8005dc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005dd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005dda:	f04f 0200 	mov.w	r2, #0
 8005dde:	f04f 0300 	mov.w	r3, #0
 8005de2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005de6:	4629      	mov	r1, r5
 8005de8:	008b      	lsls	r3, r1, #2
 8005dea:	4621      	mov	r1, r4
 8005dec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005df0:	4621      	mov	r1, r4
 8005df2:	008a      	lsls	r2, r1, #2
 8005df4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005df8:	f7fa fa52 	bl	80002a0 <__aeabi_uldivmod>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4b60      	ldr	r3, [pc, #384]	; (8005f84 <UART_SetConfig+0x4e4>)
 8005e02:	fba3 2302 	umull	r2, r3, r3, r2
 8005e06:	095b      	lsrs	r3, r3, #5
 8005e08:	011c      	lsls	r4, r3, #4
 8005e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e1c:	4642      	mov	r2, r8
 8005e1e:	464b      	mov	r3, r9
 8005e20:	1891      	adds	r1, r2, r2
 8005e22:	61b9      	str	r1, [r7, #24]
 8005e24:	415b      	adcs	r3, r3
 8005e26:	61fb      	str	r3, [r7, #28]
 8005e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e2c:	4641      	mov	r1, r8
 8005e2e:	1851      	adds	r1, r2, r1
 8005e30:	6139      	str	r1, [r7, #16]
 8005e32:	4649      	mov	r1, r9
 8005e34:	414b      	adcs	r3, r1
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	f04f 0200 	mov.w	r2, #0
 8005e3c:	f04f 0300 	mov.w	r3, #0
 8005e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e44:	4659      	mov	r1, fp
 8005e46:	00cb      	lsls	r3, r1, #3
 8005e48:	4651      	mov	r1, sl
 8005e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e4e:	4651      	mov	r1, sl
 8005e50:	00ca      	lsls	r2, r1, #3
 8005e52:	4610      	mov	r0, r2
 8005e54:	4619      	mov	r1, r3
 8005e56:	4603      	mov	r3, r0
 8005e58:	4642      	mov	r2, r8
 8005e5a:	189b      	adds	r3, r3, r2
 8005e5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e60:	464b      	mov	r3, r9
 8005e62:	460a      	mov	r2, r1
 8005e64:	eb42 0303 	adc.w	r3, r2, r3
 8005e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e84:	4649      	mov	r1, r9
 8005e86:	008b      	lsls	r3, r1, #2
 8005e88:	4641      	mov	r1, r8
 8005e8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e8e:	4641      	mov	r1, r8
 8005e90:	008a      	lsls	r2, r1, #2
 8005e92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e96:	f7fa fa03 	bl	80002a0 <__aeabi_uldivmod>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4b39      	ldr	r3, [pc, #228]	; (8005f84 <UART_SetConfig+0x4e4>)
 8005ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ea4:	095b      	lsrs	r3, r3, #5
 8005ea6:	2164      	movs	r1, #100	; 0x64
 8005ea8:	fb01 f303 	mul.w	r3, r1, r3
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	3332      	adds	r3, #50	; 0x32
 8005eb2:	4a34      	ldr	r2, [pc, #208]	; (8005f84 <UART_SetConfig+0x4e4>)
 8005eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb8:	095b      	lsrs	r3, r3, #5
 8005eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ebe:	441c      	add	r4, r3
 8005ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	673b      	str	r3, [r7, #112]	; 0x70
 8005ec8:	677a      	str	r2, [r7, #116]	; 0x74
 8005eca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ece:	4642      	mov	r2, r8
 8005ed0:	464b      	mov	r3, r9
 8005ed2:	1891      	adds	r1, r2, r2
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	415b      	adcs	r3, r3
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ede:	4641      	mov	r1, r8
 8005ee0:	1851      	adds	r1, r2, r1
 8005ee2:	6039      	str	r1, [r7, #0]
 8005ee4:	4649      	mov	r1, r9
 8005ee6:	414b      	adcs	r3, r1
 8005ee8:	607b      	str	r3, [r7, #4]
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	f04f 0300 	mov.w	r3, #0
 8005ef2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ef6:	4659      	mov	r1, fp
 8005ef8:	00cb      	lsls	r3, r1, #3
 8005efa:	4651      	mov	r1, sl
 8005efc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f00:	4651      	mov	r1, sl
 8005f02:	00ca      	lsls	r2, r1, #3
 8005f04:	4610      	mov	r0, r2
 8005f06:	4619      	mov	r1, r3
 8005f08:	4603      	mov	r3, r0
 8005f0a:	4642      	mov	r2, r8
 8005f0c:	189b      	adds	r3, r3, r2
 8005f0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f10:	464b      	mov	r3, r9
 8005f12:	460a      	mov	r2, r1
 8005f14:	eb42 0303 	adc.w	r3, r2, r3
 8005f18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	663b      	str	r3, [r7, #96]	; 0x60
 8005f24:	667a      	str	r2, [r7, #100]	; 0x64
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	f04f 0300 	mov.w	r3, #0
 8005f2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f32:	4649      	mov	r1, r9
 8005f34:	008b      	lsls	r3, r1, #2
 8005f36:	4641      	mov	r1, r8
 8005f38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f3c:	4641      	mov	r1, r8
 8005f3e:	008a      	lsls	r2, r1, #2
 8005f40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f44:	f7fa f9ac 	bl	80002a0 <__aeabi_uldivmod>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4b0d      	ldr	r3, [pc, #52]	; (8005f84 <UART_SetConfig+0x4e4>)
 8005f4e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	2164      	movs	r1, #100	; 0x64
 8005f56:	fb01 f303 	mul.w	r3, r1, r3
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	3332      	adds	r3, #50	; 0x32
 8005f60:	4a08      	ldr	r2, [pc, #32]	; (8005f84 <UART_SetConfig+0x4e4>)
 8005f62:	fba2 2303 	umull	r2, r3, r2, r3
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	f003 020f 	and.w	r2, r3, #15
 8005f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4422      	add	r2, r4
 8005f74:	609a      	str	r2, [r3, #8]
}
 8005f76:	bf00      	nop
 8005f78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f82:	bf00      	nop
 8005f84:	51eb851f 	.word	0x51eb851f

08005f88 <__errno>:
 8005f88:	4b01      	ldr	r3, [pc, #4]	; (8005f90 <__errno+0x8>)
 8005f8a:	6818      	ldr	r0, [r3, #0]
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	2000001c 	.word	0x2000001c

08005f94 <__libc_init_array>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	4d0d      	ldr	r5, [pc, #52]	; (8005fcc <__libc_init_array+0x38>)
 8005f98:	4c0d      	ldr	r4, [pc, #52]	; (8005fd0 <__libc_init_array+0x3c>)
 8005f9a:	1b64      	subs	r4, r4, r5
 8005f9c:	10a4      	asrs	r4, r4, #2
 8005f9e:	2600      	movs	r6, #0
 8005fa0:	42a6      	cmp	r6, r4
 8005fa2:	d109      	bne.n	8005fb8 <__libc_init_array+0x24>
 8005fa4:	4d0b      	ldr	r5, [pc, #44]	; (8005fd4 <__libc_init_array+0x40>)
 8005fa6:	4c0c      	ldr	r4, [pc, #48]	; (8005fd8 <__libc_init_array+0x44>)
 8005fa8:	f001 fa34 	bl	8007414 <_init>
 8005fac:	1b64      	subs	r4, r4, r5
 8005fae:	10a4      	asrs	r4, r4, #2
 8005fb0:	2600      	movs	r6, #0
 8005fb2:	42a6      	cmp	r6, r4
 8005fb4:	d105      	bne.n	8005fc2 <__libc_init_array+0x2e>
 8005fb6:	bd70      	pop	{r4, r5, r6, pc}
 8005fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fbc:	4798      	blx	r3
 8005fbe:	3601      	adds	r6, #1
 8005fc0:	e7ee      	b.n	8005fa0 <__libc_init_array+0xc>
 8005fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc6:	4798      	blx	r3
 8005fc8:	3601      	adds	r6, #1
 8005fca:	e7f2      	b.n	8005fb2 <__libc_init_array+0x1e>
 8005fcc:	080075bc 	.word	0x080075bc
 8005fd0:	080075bc 	.word	0x080075bc
 8005fd4:	080075bc 	.word	0x080075bc
 8005fd8:	080075c0 	.word	0x080075c0

08005fdc <memset>:
 8005fdc:	4402      	add	r2, r0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d100      	bne.n	8005fe6 <memset+0xa>
 8005fe4:	4770      	bx	lr
 8005fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fea:	e7f9      	b.n	8005fe0 <memset+0x4>

08005fec <iprintf>:
 8005fec:	b40f      	push	{r0, r1, r2, r3}
 8005fee:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <iprintf+0x2c>)
 8005ff0:	b513      	push	{r0, r1, r4, lr}
 8005ff2:	681c      	ldr	r4, [r3, #0]
 8005ff4:	b124      	cbz	r4, 8006000 <iprintf+0x14>
 8005ff6:	69a3      	ldr	r3, [r4, #24]
 8005ff8:	b913      	cbnz	r3, 8006000 <iprintf+0x14>
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f000 fab2 	bl	8006564 <__sinit>
 8006000:	ab05      	add	r3, sp, #20
 8006002:	9a04      	ldr	r2, [sp, #16]
 8006004:	68a1      	ldr	r1, [r4, #8]
 8006006:	9301      	str	r3, [sp, #4]
 8006008:	4620      	mov	r0, r4
 800600a:	f000 fe17 	bl	8006c3c <_vfiprintf_r>
 800600e:	b002      	add	sp, #8
 8006010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006014:	b004      	add	sp, #16
 8006016:	4770      	bx	lr
 8006018:	2000001c 	.word	0x2000001c

0800601c <_puts_r>:
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	460e      	mov	r6, r1
 8006020:	4605      	mov	r5, r0
 8006022:	b118      	cbz	r0, 800602c <_puts_r+0x10>
 8006024:	6983      	ldr	r3, [r0, #24]
 8006026:	b90b      	cbnz	r3, 800602c <_puts_r+0x10>
 8006028:	f000 fa9c 	bl	8006564 <__sinit>
 800602c:	69ab      	ldr	r3, [r5, #24]
 800602e:	68ac      	ldr	r4, [r5, #8]
 8006030:	b913      	cbnz	r3, 8006038 <_puts_r+0x1c>
 8006032:	4628      	mov	r0, r5
 8006034:	f000 fa96 	bl	8006564 <__sinit>
 8006038:	4b2c      	ldr	r3, [pc, #176]	; (80060ec <_puts_r+0xd0>)
 800603a:	429c      	cmp	r4, r3
 800603c:	d120      	bne.n	8006080 <_puts_r+0x64>
 800603e:	686c      	ldr	r4, [r5, #4]
 8006040:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006042:	07db      	lsls	r3, r3, #31
 8006044:	d405      	bmi.n	8006052 <_puts_r+0x36>
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	0598      	lsls	r0, r3, #22
 800604a:	d402      	bmi.n	8006052 <_puts_r+0x36>
 800604c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800604e:	f000 fb27 	bl	80066a0 <__retarget_lock_acquire_recursive>
 8006052:	89a3      	ldrh	r3, [r4, #12]
 8006054:	0719      	lsls	r1, r3, #28
 8006056:	d51d      	bpl.n	8006094 <_puts_r+0x78>
 8006058:	6923      	ldr	r3, [r4, #16]
 800605a:	b1db      	cbz	r3, 8006094 <_puts_r+0x78>
 800605c:	3e01      	subs	r6, #1
 800605e:	68a3      	ldr	r3, [r4, #8]
 8006060:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006064:	3b01      	subs	r3, #1
 8006066:	60a3      	str	r3, [r4, #8]
 8006068:	bb39      	cbnz	r1, 80060ba <_puts_r+0x9e>
 800606a:	2b00      	cmp	r3, #0
 800606c:	da38      	bge.n	80060e0 <_puts_r+0xc4>
 800606e:	4622      	mov	r2, r4
 8006070:	210a      	movs	r1, #10
 8006072:	4628      	mov	r0, r5
 8006074:	f000 f89c 	bl	80061b0 <__swbuf_r>
 8006078:	3001      	adds	r0, #1
 800607a:	d011      	beq.n	80060a0 <_puts_r+0x84>
 800607c:	250a      	movs	r5, #10
 800607e:	e011      	b.n	80060a4 <_puts_r+0x88>
 8006080:	4b1b      	ldr	r3, [pc, #108]	; (80060f0 <_puts_r+0xd4>)
 8006082:	429c      	cmp	r4, r3
 8006084:	d101      	bne.n	800608a <_puts_r+0x6e>
 8006086:	68ac      	ldr	r4, [r5, #8]
 8006088:	e7da      	b.n	8006040 <_puts_r+0x24>
 800608a:	4b1a      	ldr	r3, [pc, #104]	; (80060f4 <_puts_r+0xd8>)
 800608c:	429c      	cmp	r4, r3
 800608e:	bf08      	it	eq
 8006090:	68ec      	ldreq	r4, [r5, #12]
 8006092:	e7d5      	b.n	8006040 <_puts_r+0x24>
 8006094:	4621      	mov	r1, r4
 8006096:	4628      	mov	r0, r5
 8006098:	f000 f8dc 	bl	8006254 <__swsetup_r>
 800609c:	2800      	cmp	r0, #0
 800609e:	d0dd      	beq.n	800605c <_puts_r+0x40>
 80060a0:	f04f 35ff 	mov.w	r5, #4294967295
 80060a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060a6:	07da      	lsls	r2, r3, #31
 80060a8:	d405      	bmi.n	80060b6 <_puts_r+0x9a>
 80060aa:	89a3      	ldrh	r3, [r4, #12]
 80060ac:	059b      	lsls	r3, r3, #22
 80060ae:	d402      	bmi.n	80060b6 <_puts_r+0x9a>
 80060b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060b2:	f000 faf6 	bl	80066a2 <__retarget_lock_release_recursive>
 80060b6:	4628      	mov	r0, r5
 80060b8:	bd70      	pop	{r4, r5, r6, pc}
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	da04      	bge.n	80060c8 <_puts_r+0xac>
 80060be:	69a2      	ldr	r2, [r4, #24]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	dc06      	bgt.n	80060d2 <_puts_r+0xb6>
 80060c4:	290a      	cmp	r1, #10
 80060c6:	d004      	beq.n	80060d2 <_puts_r+0xb6>
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	1c5a      	adds	r2, r3, #1
 80060cc:	6022      	str	r2, [r4, #0]
 80060ce:	7019      	strb	r1, [r3, #0]
 80060d0:	e7c5      	b.n	800605e <_puts_r+0x42>
 80060d2:	4622      	mov	r2, r4
 80060d4:	4628      	mov	r0, r5
 80060d6:	f000 f86b 	bl	80061b0 <__swbuf_r>
 80060da:	3001      	adds	r0, #1
 80060dc:	d1bf      	bne.n	800605e <_puts_r+0x42>
 80060de:	e7df      	b.n	80060a0 <_puts_r+0x84>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	250a      	movs	r5, #10
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	6022      	str	r2, [r4, #0]
 80060e8:	701d      	strb	r5, [r3, #0]
 80060ea:	e7db      	b.n	80060a4 <_puts_r+0x88>
 80060ec:	08007540 	.word	0x08007540
 80060f0:	08007560 	.word	0x08007560
 80060f4:	08007520 	.word	0x08007520

080060f8 <puts>:
 80060f8:	4b02      	ldr	r3, [pc, #8]	; (8006104 <puts+0xc>)
 80060fa:	4601      	mov	r1, r0
 80060fc:	6818      	ldr	r0, [r3, #0]
 80060fe:	f7ff bf8d 	b.w	800601c <_puts_r>
 8006102:	bf00      	nop
 8006104:	2000001c 	.word	0x2000001c

08006108 <sniprintf>:
 8006108:	b40c      	push	{r2, r3}
 800610a:	b530      	push	{r4, r5, lr}
 800610c:	4b17      	ldr	r3, [pc, #92]	; (800616c <sniprintf+0x64>)
 800610e:	1e0c      	subs	r4, r1, #0
 8006110:	681d      	ldr	r5, [r3, #0]
 8006112:	b09d      	sub	sp, #116	; 0x74
 8006114:	da08      	bge.n	8006128 <sniprintf+0x20>
 8006116:	238b      	movs	r3, #139	; 0x8b
 8006118:	602b      	str	r3, [r5, #0]
 800611a:	f04f 30ff 	mov.w	r0, #4294967295
 800611e:	b01d      	add	sp, #116	; 0x74
 8006120:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006124:	b002      	add	sp, #8
 8006126:	4770      	bx	lr
 8006128:	f44f 7302 	mov.w	r3, #520	; 0x208
 800612c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006130:	bf14      	ite	ne
 8006132:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006136:	4623      	moveq	r3, r4
 8006138:	9304      	str	r3, [sp, #16]
 800613a:	9307      	str	r3, [sp, #28]
 800613c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006140:	9002      	str	r0, [sp, #8]
 8006142:	9006      	str	r0, [sp, #24]
 8006144:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006148:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800614a:	ab21      	add	r3, sp, #132	; 0x84
 800614c:	a902      	add	r1, sp, #8
 800614e:	4628      	mov	r0, r5
 8006150:	9301      	str	r3, [sp, #4]
 8006152:	f000 fc49 	bl	80069e8 <_svfiprintf_r>
 8006156:	1c43      	adds	r3, r0, #1
 8006158:	bfbc      	itt	lt
 800615a:	238b      	movlt	r3, #139	; 0x8b
 800615c:	602b      	strlt	r3, [r5, #0]
 800615e:	2c00      	cmp	r4, #0
 8006160:	d0dd      	beq.n	800611e <sniprintf+0x16>
 8006162:	9b02      	ldr	r3, [sp, #8]
 8006164:	2200      	movs	r2, #0
 8006166:	701a      	strb	r2, [r3, #0]
 8006168:	e7d9      	b.n	800611e <sniprintf+0x16>
 800616a:	bf00      	nop
 800616c:	2000001c 	.word	0x2000001c

08006170 <siprintf>:
 8006170:	b40e      	push	{r1, r2, r3}
 8006172:	b500      	push	{lr}
 8006174:	b09c      	sub	sp, #112	; 0x70
 8006176:	ab1d      	add	r3, sp, #116	; 0x74
 8006178:	9002      	str	r0, [sp, #8]
 800617a:	9006      	str	r0, [sp, #24]
 800617c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006180:	4809      	ldr	r0, [pc, #36]	; (80061a8 <siprintf+0x38>)
 8006182:	9107      	str	r1, [sp, #28]
 8006184:	9104      	str	r1, [sp, #16]
 8006186:	4909      	ldr	r1, [pc, #36]	; (80061ac <siprintf+0x3c>)
 8006188:	f853 2b04 	ldr.w	r2, [r3], #4
 800618c:	9105      	str	r1, [sp, #20]
 800618e:	6800      	ldr	r0, [r0, #0]
 8006190:	9301      	str	r3, [sp, #4]
 8006192:	a902      	add	r1, sp, #8
 8006194:	f000 fc28 	bl	80069e8 <_svfiprintf_r>
 8006198:	9b02      	ldr	r3, [sp, #8]
 800619a:	2200      	movs	r2, #0
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	b01c      	add	sp, #112	; 0x70
 80061a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80061a4:	b003      	add	sp, #12
 80061a6:	4770      	bx	lr
 80061a8:	2000001c 	.word	0x2000001c
 80061ac:	ffff0208 	.word	0xffff0208

080061b0 <__swbuf_r>:
 80061b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b2:	460e      	mov	r6, r1
 80061b4:	4614      	mov	r4, r2
 80061b6:	4605      	mov	r5, r0
 80061b8:	b118      	cbz	r0, 80061c2 <__swbuf_r+0x12>
 80061ba:	6983      	ldr	r3, [r0, #24]
 80061bc:	b90b      	cbnz	r3, 80061c2 <__swbuf_r+0x12>
 80061be:	f000 f9d1 	bl	8006564 <__sinit>
 80061c2:	4b21      	ldr	r3, [pc, #132]	; (8006248 <__swbuf_r+0x98>)
 80061c4:	429c      	cmp	r4, r3
 80061c6:	d12b      	bne.n	8006220 <__swbuf_r+0x70>
 80061c8:	686c      	ldr	r4, [r5, #4]
 80061ca:	69a3      	ldr	r3, [r4, #24]
 80061cc:	60a3      	str	r3, [r4, #8]
 80061ce:	89a3      	ldrh	r3, [r4, #12]
 80061d0:	071a      	lsls	r2, r3, #28
 80061d2:	d52f      	bpl.n	8006234 <__swbuf_r+0x84>
 80061d4:	6923      	ldr	r3, [r4, #16]
 80061d6:	b36b      	cbz	r3, 8006234 <__swbuf_r+0x84>
 80061d8:	6923      	ldr	r3, [r4, #16]
 80061da:	6820      	ldr	r0, [r4, #0]
 80061dc:	1ac0      	subs	r0, r0, r3
 80061de:	6963      	ldr	r3, [r4, #20]
 80061e0:	b2f6      	uxtb	r6, r6
 80061e2:	4283      	cmp	r3, r0
 80061e4:	4637      	mov	r7, r6
 80061e6:	dc04      	bgt.n	80061f2 <__swbuf_r+0x42>
 80061e8:	4621      	mov	r1, r4
 80061ea:	4628      	mov	r0, r5
 80061ec:	f000 f926 	bl	800643c <_fflush_r>
 80061f0:	bb30      	cbnz	r0, 8006240 <__swbuf_r+0x90>
 80061f2:	68a3      	ldr	r3, [r4, #8]
 80061f4:	3b01      	subs	r3, #1
 80061f6:	60a3      	str	r3, [r4, #8]
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	6022      	str	r2, [r4, #0]
 80061fe:	701e      	strb	r6, [r3, #0]
 8006200:	6963      	ldr	r3, [r4, #20]
 8006202:	3001      	adds	r0, #1
 8006204:	4283      	cmp	r3, r0
 8006206:	d004      	beq.n	8006212 <__swbuf_r+0x62>
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	07db      	lsls	r3, r3, #31
 800620c:	d506      	bpl.n	800621c <__swbuf_r+0x6c>
 800620e:	2e0a      	cmp	r6, #10
 8006210:	d104      	bne.n	800621c <__swbuf_r+0x6c>
 8006212:	4621      	mov	r1, r4
 8006214:	4628      	mov	r0, r5
 8006216:	f000 f911 	bl	800643c <_fflush_r>
 800621a:	b988      	cbnz	r0, 8006240 <__swbuf_r+0x90>
 800621c:	4638      	mov	r0, r7
 800621e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006220:	4b0a      	ldr	r3, [pc, #40]	; (800624c <__swbuf_r+0x9c>)
 8006222:	429c      	cmp	r4, r3
 8006224:	d101      	bne.n	800622a <__swbuf_r+0x7a>
 8006226:	68ac      	ldr	r4, [r5, #8]
 8006228:	e7cf      	b.n	80061ca <__swbuf_r+0x1a>
 800622a:	4b09      	ldr	r3, [pc, #36]	; (8006250 <__swbuf_r+0xa0>)
 800622c:	429c      	cmp	r4, r3
 800622e:	bf08      	it	eq
 8006230:	68ec      	ldreq	r4, [r5, #12]
 8006232:	e7ca      	b.n	80061ca <__swbuf_r+0x1a>
 8006234:	4621      	mov	r1, r4
 8006236:	4628      	mov	r0, r5
 8006238:	f000 f80c 	bl	8006254 <__swsetup_r>
 800623c:	2800      	cmp	r0, #0
 800623e:	d0cb      	beq.n	80061d8 <__swbuf_r+0x28>
 8006240:	f04f 37ff 	mov.w	r7, #4294967295
 8006244:	e7ea      	b.n	800621c <__swbuf_r+0x6c>
 8006246:	bf00      	nop
 8006248:	08007540 	.word	0x08007540
 800624c:	08007560 	.word	0x08007560
 8006250:	08007520 	.word	0x08007520

08006254 <__swsetup_r>:
 8006254:	4b32      	ldr	r3, [pc, #200]	; (8006320 <__swsetup_r+0xcc>)
 8006256:	b570      	push	{r4, r5, r6, lr}
 8006258:	681d      	ldr	r5, [r3, #0]
 800625a:	4606      	mov	r6, r0
 800625c:	460c      	mov	r4, r1
 800625e:	b125      	cbz	r5, 800626a <__swsetup_r+0x16>
 8006260:	69ab      	ldr	r3, [r5, #24]
 8006262:	b913      	cbnz	r3, 800626a <__swsetup_r+0x16>
 8006264:	4628      	mov	r0, r5
 8006266:	f000 f97d 	bl	8006564 <__sinit>
 800626a:	4b2e      	ldr	r3, [pc, #184]	; (8006324 <__swsetup_r+0xd0>)
 800626c:	429c      	cmp	r4, r3
 800626e:	d10f      	bne.n	8006290 <__swsetup_r+0x3c>
 8006270:	686c      	ldr	r4, [r5, #4]
 8006272:	89a3      	ldrh	r3, [r4, #12]
 8006274:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006278:	0719      	lsls	r1, r3, #28
 800627a:	d42c      	bmi.n	80062d6 <__swsetup_r+0x82>
 800627c:	06dd      	lsls	r5, r3, #27
 800627e:	d411      	bmi.n	80062a4 <__swsetup_r+0x50>
 8006280:	2309      	movs	r3, #9
 8006282:	6033      	str	r3, [r6, #0]
 8006284:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006288:	81a3      	strh	r3, [r4, #12]
 800628a:	f04f 30ff 	mov.w	r0, #4294967295
 800628e:	e03e      	b.n	800630e <__swsetup_r+0xba>
 8006290:	4b25      	ldr	r3, [pc, #148]	; (8006328 <__swsetup_r+0xd4>)
 8006292:	429c      	cmp	r4, r3
 8006294:	d101      	bne.n	800629a <__swsetup_r+0x46>
 8006296:	68ac      	ldr	r4, [r5, #8]
 8006298:	e7eb      	b.n	8006272 <__swsetup_r+0x1e>
 800629a:	4b24      	ldr	r3, [pc, #144]	; (800632c <__swsetup_r+0xd8>)
 800629c:	429c      	cmp	r4, r3
 800629e:	bf08      	it	eq
 80062a0:	68ec      	ldreq	r4, [r5, #12]
 80062a2:	e7e6      	b.n	8006272 <__swsetup_r+0x1e>
 80062a4:	0758      	lsls	r0, r3, #29
 80062a6:	d512      	bpl.n	80062ce <__swsetup_r+0x7a>
 80062a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062aa:	b141      	cbz	r1, 80062be <__swsetup_r+0x6a>
 80062ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062b0:	4299      	cmp	r1, r3
 80062b2:	d002      	beq.n	80062ba <__swsetup_r+0x66>
 80062b4:	4630      	mov	r0, r6
 80062b6:	f000 fa5b 	bl	8006770 <_free_r>
 80062ba:	2300      	movs	r3, #0
 80062bc:	6363      	str	r3, [r4, #52]	; 0x34
 80062be:	89a3      	ldrh	r3, [r4, #12]
 80062c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062c4:	81a3      	strh	r3, [r4, #12]
 80062c6:	2300      	movs	r3, #0
 80062c8:	6063      	str	r3, [r4, #4]
 80062ca:	6923      	ldr	r3, [r4, #16]
 80062cc:	6023      	str	r3, [r4, #0]
 80062ce:	89a3      	ldrh	r3, [r4, #12]
 80062d0:	f043 0308 	orr.w	r3, r3, #8
 80062d4:	81a3      	strh	r3, [r4, #12]
 80062d6:	6923      	ldr	r3, [r4, #16]
 80062d8:	b94b      	cbnz	r3, 80062ee <__swsetup_r+0x9a>
 80062da:	89a3      	ldrh	r3, [r4, #12]
 80062dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062e4:	d003      	beq.n	80062ee <__swsetup_r+0x9a>
 80062e6:	4621      	mov	r1, r4
 80062e8:	4630      	mov	r0, r6
 80062ea:	f000 fa01 	bl	80066f0 <__smakebuf_r>
 80062ee:	89a0      	ldrh	r0, [r4, #12]
 80062f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062f4:	f010 0301 	ands.w	r3, r0, #1
 80062f8:	d00a      	beq.n	8006310 <__swsetup_r+0xbc>
 80062fa:	2300      	movs	r3, #0
 80062fc:	60a3      	str	r3, [r4, #8]
 80062fe:	6963      	ldr	r3, [r4, #20]
 8006300:	425b      	negs	r3, r3
 8006302:	61a3      	str	r3, [r4, #24]
 8006304:	6923      	ldr	r3, [r4, #16]
 8006306:	b943      	cbnz	r3, 800631a <__swsetup_r+0xc6>
 8006308:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800630c:	d1ba      	bne.n	8006284 <__swsetup_r+0x30>
 800630e:	bd70      	pop	{r4, r5, r6, pc}
 8006310:	0781      	lsls	r1, r0, #30
 8006312:	bf58      	it	pl
 8006314:	6963      	ldrpl	r3, [r4, #20]
 8006316:	60a3      	str	r3, [r4, #8]
 8006318:	e7f4      	b.n	8006304 <__swsetup_r+0xb0>
 800631a:	2000      	movs	r0, #0
 800631c:	e7f7      	b.n	800630e <__swsetup_r+0xba>
 800631e:	bf00      	nop
 8006320:	2000001c 	.word	0x2000001c
 8006324:	08007540 	.word	0x08007540
 8006328:	08007560 	.word	0x08007560
 800632c:	08007520 	.word	0x08007520

08006330 <__sflush_r>:
 8006330:	898a      	ldrh	r2, [r1, #12]
 8006332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006336:	4605      	mov	r5, r0
 8006338:	0710      	lsls	r0, r2, #28
 800633a:	460c      	mov	r4, r1
 800633c:	d458      	bmi.n	80063f0 <__sflush_r+0xc0>
 800633e:	684b      	ldr	r3, [r1, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	dc05      	bgt.n	8006350 <__sflush_r+0x20>
 8006344:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006346:	2b00      	cmp	r3, #0
 8006348:	dc02      	bgt.n	8006350 <__sflush_r+0x20>
 800634a:	2000      	movs	r0, #0
 800634c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006352:	2e00      	cmp	r6, #0
 8006354:	d0f9      	beq.n	800634a <__sflush_r+0x1a>
 8006356:	2300      	movs	r3, #0
 8006358:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800635c:	682f      	ldr	r7, [r5, #0]
 800635e:	602b      	str	r3, [r5, #0]
 8006360:	d032      	beq.n	80063c8 <__sflush_r+0x98>
 8006362:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006364:	89a3      	ldrh	r3, [r4, #12]
 8006366:	075a      	lsls	r2, r3, #29
 8006368:	d505      	bpl.n	8006376 <__sflush_r+0x46>
 800636a:	6863      	ldr	r3, [r4, #4]
 800636c:	1ac0      	subs	r0, r0, r3
 800636e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006370:	b10b      	cbz	r3, 8006376 <__sflush_r+0x46>
 8006372:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006374:	1ac0      	subs	r0, r0, r3
 8006376:	2300      	movs	r3, #0
 8006378:	4602      	mov	r2, r0
 800637a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800637c:	6a21      	ldr	r1, [r4, #32]
 800637e:	4628      	mov	r0, r5
 8006380:	47b0      	blx	r6
 8006382:	1c43      	adds	r3, r0, #1
 8006384:	89a3      	ldrh	r3, [r4, #12]
 8006386:	d106      	bne.n	8006396 <__sflush_r+0x66>
 8006388:	6829      	ldr	r1, [r5, #0]
 800638a:	291d      	cmp	r1, #29
 800638c:	d82c      	bhi.n	80063e8 <__sflush_r+0xb8>
 800638e:	4a2a      	ldr	r2, [pc, #168]	; (8006438 <__sflush_r+0x108>)
 8006390:	40ca      	lsrs	r2, r1
 8006392:	07d6      	lsls	r6, r2, #31
 8006394:	d528      	bpl.n	80063e8 <__sflush_r+0xb8>
 8006396:	2200      	movs	r2, #0
 8006398:	6062      	str	r2, [r4, #4]
 800639a:	04d9      	lsls	r1, r3, #19
 800639c:	6922      	ldr	r2, [r4, #16]
 800639e:	6022      	str	r2, [r4, #0]
 80063a0:	d504      	bpl.n	80063ac <__sflush_r+0x7c>
 80063a2:	1c42      	adds	r2, r0, #1
 80063a4:	d101      	bne.n	80063aa <__sflush_r+0x7a>
 80063a6:	682b      	ldr	r3, [r5, #0]
 80063a8:	b903      	cbnz	r3, 80063ac <__sflush_r+0x7c>
 80063aa:	6560      	str	r0, [r4, #84]	; 0x54
 80063ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063ae:	602f      	str	r7, [r5, #0]
 80063b0:	2900      	cmp	r1, #0
 80063b2:	d0ca      	beq.n	800634a <__sflush_r+0x1a>
 80063b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063b8:	4299      	cmp	r1, r3
 80063ba:	d002      	beq.n	80063c2 <__sflush_r+0x92>
 80063bc:	4628      	mov	r0, r5
 80063be:	f000 f9d7 	bl	8006770 <_free_r>
 80063c2:	2000      	movs	r0, #0
 80063c4:	6360      	str	r0, [r4, #52]	; 0x34
 80063c6:	e7c1      	b.n	800634c <__sflush_r+0x1c>
 80063c8:	6a21      	ldr	r1, [r4, #32]
 80063ca:	2301      	movs	r3, #1
 80063cc:	4628      	mov	r0, r5
 80063ce:	47b0      	blx	r6
 80063d0:	1c41      	adds	r1, r0, #1
 80063d2:	d1c7      	bne.n	8006364 <__sflush_r+0x34>
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0c4      	beq.n	8006364 <__sflush_r+0x34>
 80063da:	2b1d      	cmp	r3, #29
 80063dc:	d001      	beq.n	80063e2 <__sflush_r+0xb2>
 80063de:	2b16      	cmp	r3, #22
 80063e0:	d101      	bne.n	80063e6 <__sflush_r+0xb6>
 80063e2:	602f      	str	r7, [r5, #0]
 80063e4:	e7b1      	b.n	800634a <__sflush_r+0x1a>
 80063e6:	89a3      	ldrh	r3, [r4, #12]
 80063e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ec:	81a3      	strh	r3, [r4, #12]
 80063ee:	e7ad      	b.n	800634c <__sflush_r+0x1c>
 80063f0:	690f      	ldr	r7, [r1, #16]
 80063f2:	2f00      	cmp	r7, #0
 80063f4:	d0a9      	beq.n	800634a <__sflush_r+0x1a>
 80063f6:	0793      	lsls	r3, r2, #30
 80063f8:	680e      	ldr	r6, [r1, #0]
 80063fa:	bf08      	it	eq
 80063fc:	694b      	ldreq	r3, [r1, #20]
 80063fe:	600f      	str	r7, [r1, #0]
 8006400:	bf18      	it	ne
 8006402:	2300      	movne	r3, #0
 8006404:	eba6 0807 	sub.w	r8, r6, r7
 8006408:	608b      	str	r3, [r1, #8]
 800640a:	f1b8 0f00 	cmp.w	r8, #0
 800640e:	dd9c      	ble.n	800634a <__sflush_r+0x1a>
 8006410:	6a21      	ldr	r1, [r4, #32]
 8006412:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006414:	4643      	mov	r3, r8
 8006416:	463a      	mov	r2, r7
 8006418:	4628      	mov	r0, r5
 800641a:	47b0      	blx	r6
 800641c:	2800      	cmp	r0, #0
 800641e:	dc06      	bgt.n	800642e <__sflush_r+0xfe>
 8006420:	89a3      	ldrh	r3, [r4, #12]
 8006422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006426:	81a3      	strh	r3, [r4, #12]
 8006428:	f04f 30ff 	mov.w	r0, #4294967295
 800642c:	e78e      	b.n	800634c <__sflush_r+0x1c>
 800642e:	4407      	add	r7, r0
 8006430:	eba8 0800 	sub.w	r8, r8, r0
 8006434:	e7e9      	b.n	800640a <__sflush_r+0xda>
 8006436:	bf00      	nop
 8006438:	20400001 	.word	0x20400001

0800643c <_fflush_r>:
 800643c:	b538      	push	{r3, r4, r5, lr}
 800643e:	690b      	ldr	r3, [r1, #16]
 8006440:	4605      	mov	r5, r0
 8006442:	460c      	mov	r4, r1
 8006444:	b913      	cbnz	r3, 800644c <_fflush_r+0x10>
 8006446:	2500      	movs	r5, #0
 8006448:	4628      	mov	r0, r5
 800644a:	bd38      	pop	{r3, r4, r5, pc}
 800644c:	b118      	cbz	r0, 8006456 <_fflush_r+0x1a>
 800644e:	6983      	ldr	r3, [r0, #24]
 8006450:	b90b      	cbnz	r3, 8006456 <_fflush_r+0x1a>
 8006452:	f000 f887 	bl	8006564 <__sinit>
 8006456:	4b14      	ldr	r3, [pc, #80]	; (80064a8 <_fflush_r+0x6c>)
 8006458:	429c      	cmp	r4, r3
 800645a:	d11b      	bne.n	8006494 <_fflush_r+0x58>
 800645c:	686c      	ldr	r4, [r5, #4]
 800645e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d0ef      	beq.n	8006446 <_fflush_r+0xa>
 8006466:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006468:	07d0      	lsls	r0, r2, #31
 800646a:	d404      	bmi.n	8006476 <_fflush_r+0x3a>
 800646c:	0599      	lsls	r1, r3, #22
 800646e:	d402      	bmi.n	8006476 <_fflush_r+0x3a>
 8006470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006472:	f000 f915 	bl	80066a0 <__retarget_lock_acquire_recursive>
 8006476:	4628      	mov	r0, r5
 8006478:	4621      	mov	r1, r4
 800647a:	f7ff ff59 	bl	8006330 <__sflush_r>
 800647e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006480:	07da      	lsls	r2, r3, #31
 8006482:	4605      	mov	r5, r0
 8006484:	d4e0      	bmi.n	8006448 <_fflush_r+0xc>
 8006486:	89a3      	ldrh	r3, [r4, #12]
 8006488:	059b      	lsls	r3, r3, #22
 800648a:	d4dd      	bmi.n	8006448 <_fflush_r+0xc>
 800648c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800648e:	f000 f908 	bl	80066a2 <__retarget_lock_release_recursive>
 8006492:	e7d9      	b.n	8006448 <_fflush_r+0xc>
 8006494:	4b05      	ldr	r3, [pc, #20]	; (80064ac <_fflush_r+0x70>)
 8006496:	429c      	cmp	r4, r3
 8006498:	d101      	bne.n	800649e <_fflush_r+0x62>
 800649a:	68ac      	ldr	r4, [r5, #8]
 800649c:	e7df      	b.n	800645e <_fflush_r+0x22>
 800649e:	4b04      	ldr	r3, [pc, #16]	; (80064b0 <_fflush_r+0x74>)
 80064a0:	429c      	cmp	r4, r3
 80064a2:	bf08      	it	eq
 80064a4:	68ec      	ldreq	r4, [r5, #12]
 80064a6:	e7da      	b.n	800645e <_fflush_r+0x22>
 80064a8:	08007540 	.word	0x08007540
 80064ac:	08007560 	.word	0x08007560
 80064b0:	08007520 	.word	0x08007520

080064b4 <std>:
 80064b4:	2300      	movs	r3, #0
 80064b6:	b510      	push	{r4, lr}
 80064b8:	4604      	mov	r4, r0
 80064ba:	e9c0 3300 	strd	r3, r3, [r0]
 80064be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064c2:	6083      	str	r3, [r0, #8]
 80064c4:	8181      	strh	r1, [r0, #12]
 80064c6:	6643      	str	r3, [r0, #100]	; 0x64
 80064c8:	81c2      	strh	r2, [r0, #14]
 80064ca:	6183      	str	r3, [r0, #24]
 80064cc:	4619      	mov	r1, r3
 80064ce:	2208      	movs	r2, #8
 80064d0:	305c      	adds	r0, #92	; 0x5c
 80064d2:	f7ff fd83 	bl	8005fdc <memset>
 80064d6:	4b05      	ldr	r3, [pc, #20]	; (80064ec <std+0x38>)
 80064d8:	6263      	str	r3, [r4, #36]	; 0x24
 80064da:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <std+0x3c>)
 80064dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80064de:	4b05      	ldr	r3, [pc, #20]	; (80064f4 <std+0x40>)
 80064e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064e2:	4b05      	ldr	r3, [pc, #20]	; (80064f8 <std+0x44>)
 80064e4:	6224      	str	r4, [r4, #32]
 80064e6:	6323      	str	r3, [r4, #48]	; 0x30
 80064e8:	bd10      	pop	{r4, pc}
 80064ea:	bf00      	nop
 80064ec:	080071e5 	.word	0x080071e5
 80064f0:	08007207 	.word	0x08007207
 80064f4:	0800723f 	.word	0x0800723f
 80064f8:	08007263 	.word	0x08007263

080064fc <_cleanup_r>:
 80064fc:	4901      	ldr	r1, [pc, #4]	; (8006504 <_cleanup_r+0x8>)
 80064fe:	f000 b8af 	b.w	8006660 <_fwalk_reent>
 8006502:	bf00      	nop
 8006504:	0800643d 	.word	0x0800643d

08006508 <__sfmoreglue>:
 8006508:	b570      	push	{r4, r5, r6, lr}
 800650a:	2268      	movs	r2, #104	; 0x68
 800650c:	1e4d      	subs	r5, r1, #1
 800650e:	4355      	muls	r5, r2
 8006510:	460e      	mov	r6, r1
 8006512:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006516:	f000 f997 	bl	8006848 <_malloc_r>
 800651a:	4604      	mov	r4, r0
 800651c:	b140      	cbz	r0, 8006530 <__sfmoreglue+0x28>
 800651e:	2100      	movs	r1, #0
 8006520:	e9c0 1600 	strd	r1, r6, [r0]
 8006524:	300c      	adds	r0, #12
 8006526:	60a0      	str	r0, [r4, #8]
 8006528:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800652c:	f7ff fd56 	bl	8005fdc <memset>
 8006530:	4620      	mov	r0, r4
 8006532:	bd70      	pop	{r4, r5, r6, pc}

08006534 <__sfp_lock_acquire>:
 8006534:	4801      	ldr	r0, [pc, #4]	; (800653c <__sfp_lock_acquire+0x8>)
 8006536:	f000 b8b3 	b.w	80066a0 <__retarget_lock_acquire_recursive>
 800653a:	bf00      	nop
 800653c:	20000291 	.word	0x20000291

08006540 <__sfp_lock_release>:
 8006540:	4801      	ldr	r0, [pc, #4]	; (8006548 <__sfp_lock_release+0x8>)
 8006542:	f000 b8ae 	b.w	80066a2 <__retarget_lock_release_recursive>
 8006546:	bf00      	nop
 8006548:	20000291 	.word	0x20000291

0800654c <__sinit_lock_acquire>:
 800654c:	4801      	ldr	r0, [pc, #4]	; (8006554 <__sinit_lock_acquire+0x8>)
 800654e:	f000 b8a7 	b.w	80066a0 <__retarget_lock_acquire_recursive>
 8006552:	bf00      	nop
 8006554:	20000292 	.word	0x20000292

08006558 <__sinit_lock_release>:
 8006558:	4801      	ldr	r0, [pc, #4]	; (8006560 <__sinit_lock_release+0x8>)
 800655a:	f000 b8a2 	b.w	80066a2 <__retarget_lock_release_recursive>
 800655e:	bf00      	nop
 8006560:	20000292 	.word	0x20000292

08006564 <__sinit>:
 8006564:	b510      	push	{r4, lr}
 8006566:	4604      	mov	r4, r0
 8006568:	f7ff fff0 	bl	800654c <__sinit_lock_acquire>
 800656c:	69a3      	ldr	r3, [r4, #24]
 800656e:	b11b      	cbz	r3, 8006578 <__sinit+0x14>
 8006570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006574:	f7ff bff0 	b.w	8006558 <__sinit_lock_release>
 8006578:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800657c:	6523      	str	r3, [r4, #80]	; 0x50
 800657e:	4b13      	ldr	r3, [pc, #76]	; (80065cc <__sinit+0x68>)
 8006580:	4a13      	ldr	r2, [pc, #76]	; (80065d0 <__sinit+0x6c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	62a2      	str	r2, [r4, #40]	; 0x28
 8006586:	42a3      	cmp	r3, r4
 8006588:	bf04      	itt	eq
 800658a:	2301      	moveq	r3, #1
 800658c:	61a3      	streq	r3, [r4, #24]
 800658e:	4620      	mov	r0, r4
 8006590:	f000 f820 	bl	80065d4 <__sfp>
 8006594:	6060      	str	r0, [r4, #4]
 8006596:	4620      	mov	r0, r4
 8006598:	f000 f81c 	bl	80065d4 <__sfp>
 800659c:	60a0      	str	r0, [r4, #8]
 800659e:	4620      	mov	r0, r4
 80065a0:	f000 f818 	bl	80065d4 <__sfp>
 80065a4:	2200      	movs	r2, #0
 80065a6:	60e0      	str	r0, [r4, #12]
 80065a8:	2104      	movs	r1, #4
 80065aa:	6860      	ldr	r0, [r4, #4]
 80065ac:	f7ff ff82 	bl	80064b4 <std>
 80065b0:	68a0      	ldr	r0, [r4, #8]
 80065b2:	2201      	movs	r2, #1
 80065b4:	2109      	movs	r1, #9
 80065b6:	f7ff ff7d 	bl	80064b4 <std>
 80065ba:	68e0      	ldr	r0, [r4, #12]
 80065bc:	2202      	movs	r2, #2
 80065be:	2112      	movs	r1, #18
 80065c0:	f7ff ff78 	bl	80064b4 <std>
 80065c4:	2301      	movs	r3, #1
 80065c6:	61a3      	str	r3, [r4, #24]
 80065c8:	e7d2      	b.n	8006570 <__sinit+0xc>
 80065ca:	bf00      	nop
 80065cc:	0800751c 	.word	0x0800751c
 80065d0:	080064fd 	.word	0x080064fd

080065d4 <__sfp>:
 80065d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d6:	4607      	mov	r7, r0
 80065d8:	f7ff ffac 	bl	8006534 <__sfp_lock_acquire>
 80065dc:	4b1e      	ldr	r3, [pc, #120]	; (8006658 <__sfp+0x84>)
 80065de:	681e      	ldr	r6, [r3, #0]
 80065e0:	69b3      	ldr	r3, [r6, #24]
 80065e2:	b913      	cbnz	r3, 80065ea <__sfp+0x16>
 80065e4:	4630      	mov	r0, r6
 80065e6:	f7ff ffbd 	bl	8006564 <__sinit>
 80065ea:	3648      	adds	r6, #72	; 0x48
 80065ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80065f0:	3b01      	subs	r3, #1
 80065f2:	d503      	bpl.n	80065fc <__sfp+0x28>
 80065f4:	6833      	ldr	r3, [r6, #0]
 80065f6:	b30b      	cbz	r3, 800663c <__sfp+0x68>
 80065f8:	6836      	ldr	r6, [r6, #0]
 80065fa:	e7f7      	b.n	80065ec <__sfp+0x18>
 80065fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006600:	b9d5      	cbnz	r5, 8006638 <__sfp+0x64>
 8006602:	4b16      	ldr	r3, [pc, #88]	; (800665c <__sfp+0x88>)
 8006604:	60e3      	str	r3, [r4, #12]
 8006606:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800660a:	6665      	str	r5, [r4, #100]	; 0x64
 800660c:	f000 f847 	bl	800669e <__retarget_lock_init_recursive>
 8006610:	f7ff ff96 	bl	8006540 <__sfp_lock_release>
 8006614:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006618:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800661c:	6025      	str	r5, [r4, #0]
 800661e:	61a5      	str	r5, [r4, #24]
 8006620:	2208      	movs	r2, #8
 8006622:	4629      	mov	r1, r5
 8006624:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006628:	f7ff fcd8 	bl	8005fdc <memset>
 800662c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006630:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006634:	4620      	mov	r0, r4
 8006636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006638:	3468      	adds	r4, #104	; 0x68
 800663a:	e7d9      	b.n	80065f0 <__sfp+0x1c>
 800663c:	2104      	movs	r1, #4
 800663e:	4638      	mov	r0, r7
 8006640:	f7ff ff62 	bl	8006508 <__sfmoreglue>
 8006644:	4604      	mov	r4, r0
 8006646:	6030      	str	r0, [r6, #0]
 8006648:	2800      	cmp	r0, #0
 800664a:	d1d5      	bne.n	80065f8 <__sfp+0x24>
 800664c:	f7ff ff78 	bl	8006540 <__sfp_lock_release>
 8006650:	230c      	movs	r3, #12
 8006652:	603b      	str	r3, [r7, #0]
 8006654:	e7ee      	b.n	8006634 <__sfp+0x60>
 8006656:	bf00      	nop
 8006658:	0800751c 	.word	0x0800751c
 800665c:	ffff0001 	.word	0xffff0001

08006660 <_fwalk_reent>:
 8006660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006664:	4606      	mov	r6, r0
 8006666:	4688      	mov	r8, r1
 8006668:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800666c:	2700      	movs	r7, #0
 800666e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006672:	f1b9 0901 	subs.w	r9, r9, #1
 8006676:	d505      	bpl.n	8006684 <_fwalk_reent+0x24>
 8006678:	6824      	ldr	r4, [r4, #0]
 800667a:	2c00      	cmp	r4, #0
 800667c:	d1f7      	bne.n	800666e <_fwalk_reent+0xe>
 800667e:	4638      	mov	r0, r7
 8006680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006684:	89ab      	ldrh	r3, [r5, #12]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d907      	bls.n	800669a <_fwalk_reent+0x3a>
 800668a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800668e:	3301      	adds	r3, #1
 8006690:	d003      	beq.n	800669a <_fwalk_reent+0x3a>
 8006692:	4629      	mov	r1, r5
 8006694:	4630      	mov	r0, r6
 8006696:	47c0      	blx	r8
 8006698:	4307      	orrs	r7, r0
 800669a:	3568      	adds	r5, #104	; 0x68
 800669c:	e7e9      	b.n	8006672 <_fwalk_reent+0x12>

0800669e <__retarget_lock_init_recursive>:
 800669e:	4770      	bx	lr

080066a0 <__retarget_lock_acquire_recursive>:
 80066a0:	4770      	bx	lr

080066a2 <__retarget_lock_release_recursive>:
 80066a2:	4770      	bx	lr

080066a4 <__swhatbuf_r>:
 80066a4:	b570      	push	{r4, r5, r6, lr}
 80066a6:	460e      	mov	r6, r1
 80066a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ac:	2900      	cmp	r1, #0
 80066ae:	b096      	sub	sp, #88	; 0x58
 80066b0:	4614      	mov	r4, r2
 80066b2:	461d      	mov	r5, r3
 80066b4:	da08      	bge.n	80066c8 <__swhatbuf_r+0x24>
 80066b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	602a      	str	r2, [r5, #0]
 80066be:	061a      	lsls	r2, r3, #24
 80066c0:	d410      	bmi.n	80066e4 <__swhatbuf_r+0x40>
 80066c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066c6:	e00e      	b.n	80066e6 <__swhatbuf_r+0x42>
 80066c8:	466a      	mov	r2, sp
 80066ca:	f000 fdf1 	bl	80072b0 <_fstat_r>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	dbf1      	blt.n	80066b6 <__swhatbuf_r+0x12>
 80066d2:	9a01      	ldr	r2, [sp, #4]
 80066d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80066d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80066dc:	425a      	negs	r2, r3
 80066de:	415a      	adcs	r2, r3
 80066e0:	602a      	str	r2, [r5, #0]
 80066e2:	e7ee      	b.n	80066c2 <__swhatbuf_r+0x1e>
 80066e4:	2340      	movs	r3, #64	; 0x40
 80066e6:	2000      	movs	r0, #0
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	b016      	add	sp, #88	; 0x58
 80066ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080066f0 <__smakebuf_r>:
 80066f0:	898b      	ldrh	r3, [r1, #12]
 80066f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066f4:	079d      	lsls	r5, r3, #30
 80066f6:	4606      	mov	r6, r0
 80066f8:	460c      	mov	r4, r1
 80066fa:	d507      	bpl.n	800670c <__smakebuf_r+0x1c>
 80066fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006700:	6023      	str	r3, [r4, #0]
 8006702:	6123      	str	r3, [r4, #16]
 8006704:	2301      	movs	r3, #1
 8006706:	6163      	str	r3, [r4, #20]
 8006708:	b002      	add	sp, #8
 800670a:	bd70      	pop	{r4, r5, r6, pc}
 800670c:	ab01      	add	r3, sp, #4
 800670e:	466a      	mov	r2, sp
 8006710:	f7ff ffc8 	bl	80066a4 <__swhatbuf_r>
 8006714:	9900      	ldr	r1, [sp, #0]
 8006716:	4605      	mov	r5, r0
 8006718:	4630      	mov	r0, r6
 800671a:	f000 f895 	bl	8006848 <_malloc_r>
 800671e:	b948      	cbnz	r0, 8006734 <__smakebuf_r+0x44>
 8006720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006724:	059a      	lsls	r2, r3, #22
 8006726:	d4ef      	bmi.n	8006708 <__smakebuf_r+0x18>
 8006728:	f023 0303 	bic.w	r3, r3, #3
 800672c:	f043 0302 	orr.w	r3, r3, #2
 8006730:	81a3      	strh	r3, [r4, #12]
 8006732:	e7e3      	b.n	80066fc <__smakebuf_r+0xc>
 8006734:	4b0d      	ldr	r3, [pc, #52]	; (800676c <__smakebuf_r+0x7c>)
 8006736:	62b3      	str	r3, [r6, #40]	; 0x28
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	6020      	str	r0, [r4, #0]
 800673c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006740:	81a3      	strh	r3, [r4, #12]
 8006742:	9b00      	ldr	r3, [sp, #0]
 8006744:	6163      	str	r3, [r4, #20]
 8006746:	9b01      	ldr	r3, [sp, #4]
 8006748:	6120      	str	r0, [r4, #16]
 800674a:	b15b      	cbz	r3, 8006764 <__smakebuf_r+0x74>
 800674c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006750:	4630      	mov	r0, r6
 8006752:	f000 fdbf 	bl	80072d4 <_isatty_r>
 8006756:	b128      	cbz	r0, 8006764 <__smakebuf_r+0x74>
 8006758:	89a3      	ldrh	r3, [r4, #12]
 800675a:	f023 0303 	bic.w	r3, r3, #3
 800675e:	f043 0301 	orr.w	r3, r3, #1
 8006762:	81a3      	strh	r3, [r4, #12]
 8006764:	89a0      	ldrh	r0, [r4, #12]
 8006766:	4305      	orrs	r5, r0
 8006768:	81a5      	strh	r5, [r4, #12]
 800676a:	e7cd      	b.n	8006708 <__smakebuf_r+0x18>
 800676c:	080064fd 	.word	0x080064fd

08006770 <_free_r>:
 8006770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006772:	2900      	cmp	r1, #0
 8006774:	d044      	beq.n	8006800 <_free_r+0x90>
 8006776:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800677a:	9001      	str	r0, [sp, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	f1a1 0404 	sub.w	r4, r1, #4
 8006782:	bfb8      	it	lt
 8006784:	18e4      	addlt	r4, r4, r3
 8006786:	f000 fdef 	bl	8007368 <__malloc_lock>
 800678a:	4a1e      	ldr	r2, [pc, #120]	; (8006804 <_free_r+0x94>)
 800678c:	9801      	ldr	r0, [sp, #4]
 800678e:	6813      	ldr	r3, [r2, #0]
 8006790:	b933      	cbnz	r3, 80067a0 <_free_r+0x30>
 8006792:	6063      	str	r3, [r4, #4]
 8006794:	6014      	str	r4, [r2, #0]
 8006796:	b003      	add	sp, #12
 8006798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800679c:	f000 bdea 	b.w	8007374 <__malloc_unlock>
 80067a0:	42a3      	cmp	r3, r4
 80067a2:	d908      	bls.n	80067b6 <_free_r+0x46>
 80067a4:	6825      	ldr	r5, [r4, #0]
 80067a6:	1961      	adds	r1, r4, r5
 80067a8:	428b      	cmp	r3, r1
 80067aa:	bf01      	itttt	eq
 80067ac:	6819      	ldreq	r1, [r3, #0]
 80067ae:	685b      	ldreq	r3, [r3, #4]
 80067b0:	1949      	addeq	r1, r1, r5
 80067b2:	6021      	streq	r1, [r4, #0]
 80067b4:	e7ed      	b.n	8006792 <_free_r+0x22>
 80067b6:	461a      	mov	r2, r3
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	b10b      	cbz	r3, 80067c0 <_free_r+0x50>
 80067bc:	42a3      	cmp	r3, r4
 80067be:	d9fa      	bls.n	80067b6 <_free_r+0x46>
 80067c0:	6811      	ldr	r1, [r2, #0]
 80067c2:	1855      	adds	r5, r2, r1
 80067c4:	42a5      	cmp	r5, r4
 80067c6:	d10b      	bne.n	80067e0 <_free_r+0x70>
 80067c8:	6824      	ldr	r4, [r4, #0]
 80067ca:	4421      	add	r1, r4
 80067cc:	1854      	adds	r4, r2, r1
 80067ce:	42a3      	cmp	r3, r4
 80067d0:	6011      	str	r1, [r2, #0]
 80067d2:	d1e0      	bne.n	8006796 <_free_r+0x26>
 80067d4:	681c      	ldr	r4, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	6053      	str	r3, [r2, #4]
 80067da:	4421      	add	r1, r4
 80067dc:	6011      	str	r1, [r2, #0]
 80067de:	e7da      	b.n	8006796 <_free_r+0x26>
 80067e0:	d902      	bls.n	80067e8 <_free_r+0x78>
 80067e2:	230c      	movs	r3, #12
 80067e4:	6003      	str	r3, [r0, #0]
 80067e6:	e7d6      	b.n	8006796 <_free_r+0x26>
 80067e8:	6825      	ldr	r5, [r4, #0]
 80067ea:	1961      	adds	r1, r4, r5
 80067ec:	428b      	cmp	r3, r1
 80067ee:	bf04      	itt	eq
 80067f0:	6819      	ldreq	r1, [r3, #0]
 80067f2:	685b      	ldreq	r3, [r3, #4]
 80067f4:	6063      	str	r3, [r4, #4]
 80067f6:	bf04      	itt	eq
 80067f8:	1949      	addeq	r1, r1, r5
 80067fa:	6021      	streq	r1, [r4, #0]
 80067fc:	6054      	str	r4, [r2, #4]
 80067fe:	e7ca      	b.n	8006796 <_free_r+0x26>
 8006800:	b003      	add	sp, #12
 8006802:	bd30      	pop	{r4, r5, pc}
 8006804:	20000294 	.word	0x20000294

08006808 <sbrk_aligned>:
 8006808:	b570      	push	{r4, r5, r6, lr}
 800680a:	4e0e      	ldr	r6, [pc, #56]	; (8006844 <sbrk_aligned+0x3c>)
 800680c:	460c      	mov	r4, r1
 800680e:	6831      	ldr	r1, [r6, #0]
 8006810:	4605      	mov	r5, r0
 8006812:	b911      	cbnz	r1, 800681a <sbrk_aligned+0x12>
 8006814:	f000 fcd6 	bl	80071c4 <_sbrk_r>
 8006818:	6030      	str	r0, [r6, #0]
 800681a:	4621      	mov	r1, r4
 800681c:	4628      	mov	r0, r5
 800681e:	f000 fcd1 	bl	80071c4 <_sbrk_r>
 8006822:	1c43      	adds	r3, r0, #1
 8006824:	d00a      	beq.n	800683c <sbrk_aligned+0x34>
 8006826:	1cc4      	adds	r4, r0, #3
 8006828:	f024 0403 	bic.w	r4, r4, #3
 800682c:	42a0      	cmp	r0, r4
 800682e:	d007      	beq.n	8006840 <sbrk_aligned+0x38>
 8006830:	1a21      	subs	r1, r4, r0
 8006832:	4628      	mov	r0, r5
 8006834:	f000 fcc6 	bl	80071c4 <_sbrk_r>
 8006838:	3001      	adds	r0, #1
 800683a:	d101      	bne.n	8006840 <sbrk_aligned+0x38>
 800683c:	f04f 34ff 	mov.w	r4, #4294967295
 8006840:	4620      	mov	r0, r4
 8006842:	bd70      	pop	{r4, r5, r6, pc}
 8006844:	20000298 	.word	0x20000298

08006848 <_malloc_r>:
 8006848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800684c:	1ccd      	adds	r5, r1, #3
 800684e:	f025 0503 	bic.w	r5, r5, #3
 8006852:	3508      	adds	r5, #8
 8006854:	2d0c      	cmp	r5, #12
 8006856:	bf38      	it	cc
 8006858:	250c      	movcc	r5, #12
 800685a:	2d00      	cmp	r5, #0
 800685c:	4607      	mov	r7, r0
 800685e:	db01      	blt.n	8006864 <_malloc_r+0x1c>
 8006860:	42a9      	cmp	r1, r5
 8006862:	d905      	bls.n	8006870 <_malloc_r+0x28>
 8006864:	230c      	movs	r3, #12
 8006866:	603b      	str	r3, [r7, #0]
 8006868:	2600      	movs	r6, #0
 800686a:	4630      	mov	r0, r6
 800686c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006870:	4e2e      	ldr	r6, [pc, #184]	; (800692c <_malloc_r+0xe4>)
 8006872:	f000 fd79 	bl	8007368 <__malloc_lock>
 8006876:	6833      	ldr	r3, [r6, #0]
 8006878:	461c      	mov	r4, r3
 800687a:	bb34      	cbnz	r4, 80068ca <_malloc_r+0x82>
 800687c:	4629      	mov	r1, r5
 800687e:	4638      	mov	r0, r7
 8006880:	f7ff ffc2 	bl	8006808 <sbrk_aligned>
 8006884:	1c43      	adds	r3, r0, #1
 8006886:	4604      	mov	r4, r0
 8006888:	d14d      	bne.n	8006926 <_malloc_r+0xde>
 800688a:	6834      	ldr	r4, [r6, #0]
 800688c:	4626      	mov	r6, r4
 800688e:	2e00      	cmp	r6, #0
 8006890:	d140      	bne.n	8006914 <_malloc_r+0xcc>
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	4631      	mov	r1, r6
 8006896:	4638      	mov	r0, r7
 8006898:	eb04 0803 	add.w	r8, r4, r3
 800689c:	f000 fc92 	bl	80071c4 <_sbrk_r>
 80068a0:	4580      	cmp	r8, r0
 80068a2:	d13a      	bne.n	800691a <_malloc_r+0xd2>
 80068a4:	6821      	ldr	r1, [r4, #0]
 80068a6:	3503      	adds	r5, #3
 80068a8:	1a6d      	subs	r5, r5, r1
 80068aa:	f025 0503 	bic.w	r5, r5, #3
 80068ae:	3508      	adds	r5, #8
 80068b0:	2d0c      	cmp	r5, #12
 80068b2:	bf38      	it	cc
 80068b4:	250c      	movcc	r5, #12
 80068b6:	4629      	mov	r1, r5
 80068b8:	4638      	mov	r0, r7
 80068ba:	f7ff ffa5 	bl	8006808 <sbrk_aligned>
 80068be:	3001      	adds	r0, #1
 80068c0:	d02b      	beq.n	800691a <_malloc_r+0xd2>
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	442b      	add	r3, r5
 80068c6:	6023      	str	r3, [r4, #0]
 80068c8:	e00e      	b.n	80068e8 <_malloc_r+0xa0>
 80068ca:	6822      	ldr	r2, [r4, #0]
 80068cc:	1b52      	subs	r2, r2, r5
 80068ce:	d41e      	bmi.n	800690e <_malloc_r+0xc6>
 80068d0:	2a0b      	cmp	r2, #11
 80068d2:	d916      	bls.n	8006902 <_malloc_r+0xba>
 80068d4:	1961      	adds	r1, r4, r5
 80068d6:	42a3      	cmp	r3, r4
 80068d8:	6025      	str	r5, [r4, #0]
 80068da:	bf18      	it	ne
 80068dc:	6059      	strne	r1, [r3, #4]
 80068de:	6863      	ldr	r3, [r4, #4]
 80068e0:	bf08      	it	eq
 80068e2:	6031      	streq	r1, [r6, #0]
 80068e4:	5162      	str	r2, [r4, r5]
 80068e6:	604b      	str	r3, [r1, #4]
 80068e8:	4638      	mov	r0, r7
 80068ea:	f104 060b 	add.w	r6, r4, #11
 80068ee:	f000 fd41 	bl	8007374 <__malloc_unlock>
 80068f2:	f026 0607 	bic.w	r6, r6, #7
 80068f6:	1d23      	adds	r3, r4, #4
 80068f8:	1af2      	subs	r2, r6, r3
 80068fa:	d0b6      	beq.n	800686a <_malloc_r+0x22>
 80068fc:	1b9b      	subs	r3, r3, r6
 80068fe:	50a3      	str	r3, [r4, r2]
 8006900:	e7b3      	b.n	800686a <_malloc_r+0x22>
 8006902:	6862      	ldr	r2, [r4, #4]
 8006904:	42a3      	cmp	r3, r4
 8006906:	bf0c      	ite	eq
 8006908:	6032      	streq	r2, [r6, #0]
 800690a:	605a      	strne	r2, [r3, #4]
 800690c:	e7ec      	b.n	80068e8 <_malloc_r+0xa0>
 800690e:	4623      	mov	r3, r4
 8006910:	6864      	ldr	r4, [r4, #4]
 8006912:	e7b2      	b.n	800687a <_malloc_r+0x32>
 8006914:	4634      	mov	r4, r6
 8006916:	6876      	ldr	r6, [r6, #4]
 8006918:	e7b9      	b.n	800688e <_malloc_r+0x46>
 800691a:	230c      	movs	r3, #12
 800691c:	603b      	str	r3, [r7, #0]
 800691e:	4638      	mov	r0, r7
 8006920:	f000 fd28 	bl	8007374 <__malloc_unlock>
 8006924:	e7a1      	b.n	800686a <_malloc_r+0x22>
 8006926:	6025      	str	r5, [r4, #0]
 8006928:	e7de      	b.n	80068e8 <_malloc_r+0xa0>
 800692a:	bf00      	nop
 800692c:	20000294 	.word	0x20000294

08006930 <__ssputs_r>:
 8006930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006934:	688e      	ldr	r6, [r1, #8]
 8006936:	429e      	cmp	r6, r3
 8006938:	4682      	mov	sl, r0
 800693a:	460c      	mov	r4, r1
 800693c:	4690      	mov	r8, r2
 800693e:	461f      	mov	r7, r3
 8006940:	d838      	bhi.n	80069b4 <__ssputs_r+0x84>
 8006942:	898a      	ldrh	r2, [r1, #12]
 8006944:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006948:	d032      	beq.n	80069b0 <__ssputs_r+0x80>
 800694a:	6825      	ldr	r5, [r4, #0]
 800694c:	6909      	ldr	r1, [r1, #16]
 800694e:	eba5 0901 	sub.w	r9, r5, r1
 8006952:	6965      	ldr	r5, [r4, #20]
 8006954:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006958:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800695c:	3301      	adds	r3, #1
 800695e:	444b      	add	r3, r9
 8006960:	106d      	asrs	r5, r5, #1
 8006962:	429d      	cmp	r5, r3
 8006964:	bf38      	it	cc
 8006966:	461d      	movcc	r5, r3
 8006968:	0553      	lsls	r3, r2, #21
 800696a:	d531      	bpl.n	80069d0 <__ssputs_r+0xa0>
 800696c:	4629      	mov	r1, r5
 800696e:	f7ff ff6b 	bl	8006848 <_malloc_r>
 8006972:	4606      	mov	r6, r0
 8006974:	b950      	cbnz	r0, 800698c <__ssputs_r+0x5c>
 8006976:	230c      	movs	r3, #12
 8006978:	f8ca 3000 	str.w	r3, [sl]
 800697c:	89a3      	ldrh	r3, [r4, #12]
 800697e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006982:	81a3      	strh	r3, [r4, #12]
 8006984:	f04f 30ff 	mov.w	r0, #4294967295
 8006988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800698c:	6921      	ldr	r1, [r4, #16]
 800698e:	464a      	mov	r2, r9
 8006990:	f000 fcc2 	bl	8007318 <memcpy>
 8006994:	89a3      	ldrh	r3, [r4, #12]
 8006996:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800699a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800699e:	81a3      	strh	r3, [r4, #12]
 80069a0:	6126      	str	r6, [r4, #16]
 80069a2:	6165      	str	r5, [r4, #20]
 80069a4:	444e      	add	r6, r9
 80069a6:	eba5 0509 	sub.w	r5, r5, r9
 80069aa:	6026      	str	r6, [r4, #0]
 80069ac:	60a5      	str	r5, [r4, #8]
 80069ae:	463e      	mov	r6, r7
 80069b0:	42be      	cmp	r6, r7
 80069b2:	d900      	bls.n	80069b6 <__ssputs_r+0x86>
 80069b4:	463e      	mov	r6, r7
 80069b6:	6820      	ldr	r0, [r4, #0]
 80069b8:	4632      	mov	r2, r6
 80069ba:	4641      	mov	r1, r8
 80069bc:	f000 fcba 	bl	8007334 <memmove>
 80069c0:	68a3      	ldr	r3, [r4, #8]
 80069c2:	1b9b      	subs	r3, r3, r6
 80069c4:	60a3      	str	r3, [r4, #8]
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	4433      	add	r3, r6
 80069ca:	6023      	str	r3, [r4, #0]
 80069cc:	2000      	movs	r0, #0
 80069ce:	e7db      	b.n	8006988 <__ssputs_r+0x58>
 80069d0:	462a      	mov	r2, r5
 80069d2:	f000 fcd5 	bl	8007380 <_realloc_r>
 80069d6:	4606      	mov	r6, r0
 80069d8:	2800      	cmp	r0, #0
 80069da:	d1e1      	bne.n	80069a0 <__ssputs_r+0x70>
 80069dc:	6921      	ldr	r1, [r4, #16]
 80069de:	4650      	mov	r0, sl
 80069e0:	f7ff fec6 	bl	8006770 <_free_r>
 80069e4:	e7c7      	b.n	8006976 <__ssputs_r+0x46>
	...

080069e8 <_svfiprintf_r>:
 80069e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ec:	4698      	mov	r8, r3
 80069ee:	898b      	ldrh	r3, [r1, #12]
 80069f0:	061b      	lsls	r3, r3, #24
 80069f2:	b09d      	sub	sp, #116	; 0x74
 80069f4:	4607      	mov	r7, r0
 80069f6:	460d      	mov	r5, r1
 80069f8:	4614      	mov	r4, r2
 80069fa:	d50e      	bpl.n	8006a1a <_svfiprintf_r+0x32>
 80069fc:	690b      	ldr	r3, [r1, #16]
 80069fe:	b963      	cbnz	r3, 8006a1a <_svfiprintf_r+0x32>
 8006a00:	2140      	movs	r1, #64	; 0x40
 8006a02:	f7ff ff21 	bl	8006848 <_malloc_r>
 8006a06:	6028      	str	r0, [r5, #0]
 8006a08:	6128      	str	r0, [r5, #16]
 8006a0a:	b920      	cbnz	r0, 8006a16 <_svfiprintf_r+0x2e>
 8006a0c:	230c      	movs	r3, #12
 8006a0e:	603b      	str	r3, [r7, #0]
 8006a10:	f04f 30ff 	mov.w	r0, #4294967295
 8006a14:	e0d1      	b.n	8006bba <_svfiprintf_r+0x1d2>
 8006a16:	2340      	movs	r3, #64	; 0x40
 8006a18:	616b      	str	r3, [r5, #20]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a1e:	2320      	movs	r3, #32
 8006a20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a24:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a28:	2330      	movs	r3, #48	; 0x30
 8006a2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006bd4 <_svfiprintf_r+0x1ec>
 8006a2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a32:	f04f 0901 	mov.w	r9, #1
 8006a36:	4623      	mov	r3, r4
 8006a38:	469a      	mov	sl, r3
 8006a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a3e:	b10a      	cbz	r2, 8006a44 <_svfiprintf_r+0x5c>
 8006a40:	2a25      	cmp	r2, #37	; 0x25
 8006a42:	d1f9      	bne.n	8006a38 <_svfiprintf_r+0x50>
 8006a44:	ebba 0b04 	subs.w	fp, sl, r4
 8006a48:	d00b      	beq.n	8006a62 <_svfiprintf_r+0x7a>
 8006a4a:	465b      	mov	r3, fp
 8006a4c:	4622      	mov	r2, r4
 8006a4e:	4629      	mov	r1, r5
 8006a50:	4638      	mov	r0, r7
 8006a52:	f7ff ff6d 	bl	8006930 <__ssputs_r>
 8006a56:	3001      	adds	r0, #1
 8006a58:	f000 80aa 	beq.w	8006bb0 <_svfiprintf_r+0x1c8>
 8006a5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a5e:	445a      	add	r2, fp
 8006a60:	9209      	str	r2, [sp, #36]	; 0x24
 8006a62:	f89a 3000 	ldrb.w	r3, [sl]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 80a2 	beq.w	8006bb0 <_svfiprintf_r+0x1c8>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a76:	f10a 0a01 	add.w	sl, sl, #1
 8006a7a:	9304      	str	r3, [sp, #16]
 8006a7c:	9307      	str	r3, [sp, #28]
 8006a7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a82:	931a      	str	r3, [sp, #104]	; 0x68
 8006a84:	4654      	mov	r4, sl
 8006a86:	2205      	movs	r2, #5
 8006a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a8c:	4851      	ldr	r0, [pc, #324]	; (8006bd4 <_svfiprintf_r+0x1ec>)
 8006a8e:	f7f9 fbb7 	bl	8000200 <memchr>
 8006a92:	9a04      	ldr	r2, [sp, #16]
 8006a94:	b9d8      	cbnz	r0, 8006ace <_svfiprintf_r+0xe6>
 8006a96:	06d0      	lsls	r0, r2, #27
 8006a98:	bf44      	itt	mi
 8006a9a:	2320      	movmi	r3, #32
 8006a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aa0:	0711      	lsls	r1, r2, #28
 8006aa2:	bf44      	itt	mi
 8006aa4:	232b      	movmi	r3, #43	; 0x2b
 8006aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8006aae:	2b2a      	cmp	r3, #42	; 0x2a
 8006ab0:	d015      	beq.n	8006ade <_svfiprintf_r+0xf6>
 8006ab2:	9a07      	ldr	r2, [sp, #28]
 8006ab4:	4654      	mov	r4, sl
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	f04f 0c0a 	mov.w	ip, #10
 8006abc:	4621      	mov	r1, r4
 8006abe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ac2:	3b30      	subs	r3, #48	; 0x30
 8006ac4:	2b09      	cmp	r3, #9
 8006ac6:	d94e      	bls.n	8006b66 <_svfiprintf_r+0x17e>
 8006ac8:	b1b0      	cbz	r0, 8006af8 <_svfiprintf_r+0x110>
 8006aca:	9207      	str	r2, [sp, #28]
 8006acc:	e014      	b.n	8006af8 <_svfiprintf_r+0x110>
 8006ace:	eba0 0308 	sub.w	r3, r0, r8
 8006ad2:	fa09 f303 	lsl.w	r3, r9, r3
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	9304      	str	r3, [sp, #16]
 8006ada:	46a2      	mov	sl, r4
 8006adc:	e7d2      	b.n	8006a84 <_svfiprintf_r+0x9c>
 8006ade:	9b03      	ldr	r3, [sp, #12]
 8006ae0:	1d19      	adds	r1, r3, #4
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	9103      	str	r1, [sp, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	bfbb      	ittet	lt
 8006aea:	425b      	neglt	r3, r3
 8006aec:	f042 0202 	orrlt.w	r2, r2, #2
 8006af0:	9307      	strge	r3, [sp, #28]
 8006af2:	9307      	strlt	r3, [sp, #28]
 8006af4:	bfb8      	it	lt
 8006af6:	9204      	strlt	r2, [sp, #16]
 8006af8:	7823      	ldrb	r3, [r4, #0]
 8006afa:	2b2e      	cmp	r3, #46	; 0x2e
 8006afc:	d10c      	bne.n	8006b18 <_svfiprintf_r+0x130>
 8006afe:	7863      	ldrb	r3, [r4, #1]
 8006b00:	2b2a      	cmp	r3, #42	; 0x2a
 8006b02:	d135      	bne.n	8006b70 <_svfiprintf_r+0x188>
 8006b04:	9b03      	ldr	r3, [sp, #12]
 8006b06:	1d1a      	adds	r2, r3, #4
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	9203      	str	r2, [sp, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	bfb8      	it	lt
 8006b10:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b14:	3402      	adds	r4, #2
 8006b16:	9305      	str	r3, [sp, #20]
 8006b18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006be4 <_svfiprintf_r+0x1fc>
 8006b1c:	7821      	ldrb	r1, [r4, #0]
 8006b1e:	2203      	movs	r2, #3
 8006b20:	4650      	mov	r0, sl
 8006b22:	f7f9 fb6d 	bl	8000200 <memchr>
 8006b26:	b140      	cbz	r0, 8006b3a <_svfiprintf_r+0x152>
 8006b28:	2340      	movs	r3, #64	; 0x40
 8006b2a:	eba0 000a 	sub.w	r0, r0, sl
 8006b2e:	fa03 f000 	lsl.w	r0, r3, r0
 8006b32:	9b04      	ldr	r3, [sp, #16]
 8006b34:	4303      	orrs	r3, r0
 8006b36:	3401      	adds	r4, #1
 8006b38:	9304      	str	r3, [sp, #16]
 8006b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b3e:	4826      	ldr	r0, [pc, #152]	; (8006bd8 <_svfiprintf_r+0x1f0>)
 8006b40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b44:	2206      	movs	r2, #6
 8006b46:	f7f9 fb5b 	bl	8000200 <memchr>
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	d038      	beq.n	8006bc0 <_svfiprintf_r+0x1d8>
 8006b4e:	4b23      	ldr	r3, [pc, #140]	; (8006bdc <_svfiprintf_r+0x1f4>)
 8006b50:	bb1b      	cbnz	r3, 8006b9a <_svfiprintf_r+0x1b2>
 8006b52:	9b03      	ldr	r3, [sp, #12]
 8006b54:	3307      	adds	r3, #7
 8006b56:	f023 0307 	bic.w	r3, r3, #7
 8006b5a:	3308      	adds	r3, #8
 8006b5c:	9303      	str	r3, [sp, #12]
 8006b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b60:	4433      	add	r3, r6
 8006b62:	9309      	str	r3, [sp, #36]	; 0x24
 8006b64:	e767      	b.n	8006a36 <_svfiprintf_r+0x4e>
 8006b66:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	2001      	movs	r0, #1
 8006b6e:	e7a5      	b.n	8006abc <_svfiprintf_r+0xd4>
 8006b70:	2300      	movs	r3, #0
 8006b72:	3401      	adds	r4, #1
 8006b74:	9305      	str	r3, [sp, #20]
 8006b76:	4619      	mov	r1, r3
 8006b78:	f04f 0c0a 	mov.w	ip, #10
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b82:	3a30      	subs	r2, #48	; 0x30
 8006b84:	2a09      	cmp	r2, #9
 8006b86:	d903      	bls.n	8006b90 <_svfiprintf_r+0x1a8>
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d0c5      	beq.n	8006b18 <_svfiprintf_r+0x130>
 8006b8c:	9105      	str	r1, [sp, #20]
 8006b8e:	e7c3      	b.n	8006b18 <_svfiprintf_r+0x130>
 8006b90:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b94:	4604      	mov	r4, r0
 8006b96:	2301      	movs	r3, #1
 8006b98:	e7f0      	b.n	8006b7c <_svfiprintf_r+0x194>
 8006b9a:	ab03      	add	r3, sp, #12
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	462a      	mov	r2, r5
 8006ba0:	4b0f      	ldr	r3, [pc, #60]	; (8006be0 <_svfiprintf_r+0x1f8>)
 8006ba2:	a904      	add	r1, sp, #16
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	f3af 8000 	nop.w
 8006baa:	1c42      	adds	r2, r0, #1
 8006bac:	4606      	mov	r6, r0
 8006bae:	d1d6      	bne.n	8006b5e <_svfiprintf_r+0x176>
 8006bb0:	89ab      	ldrh	r3, [r5, #12]
 8006bb2:	065b      	lsls	r3, r3, #25
 8006bb4:	f53f af2c 	bmi.w	8006a10 <_svfiprintf_r+0x28>
 8006bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bba:	b01d      	add	sp, #116	; 0x74
 8006bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc0:	ab03      	add	r3, sp, #12
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	462a      	mov	r2, r5
 8006bc6:	4b06      	ldr	r3, [pc, #24]	; (8006be0 <_svfiprintf_r+0x1f8>)
 8006bc8:	a904      	add	r1, sp, #16
 8006bca:	4638      	mov	r0, r7
 8006bcc:	f000 f9d4 	bl	8006f78 <_printf_i>
 8006bd0:	e7eb      	b.n	8006baa <_svfiprintf_r+0x1c2>
 8006bd2:	bf00      	nop
 8006bd4:	08007580 	.word	0x08007580
 8006bd8:	0800758a 	.word	0x0800758a
 8006bdc:	00000000 	.word	0x00000000
 8006be0:	08006931 	.word	0x08006931
 8006be4:	08007586 	.word	0x08007586

08006be8 <__sfputc_r>:
 8006be8:	6893      	ldr	r3, [r2, #8]
 8006bea:	3b01      	subs	r3, #1
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	b410      	push	{r4}
 8006bf0:	6093      	str	r3, [r2, #8]
 8006bf2:	da08      	bge.n	8006c06 <__sfputc_r+0x1e>
 8006bf4:	6994      	ldr	r4, [r2, #24]
 8006bf6:	42a3      	cmp	r3, r4
 8006bf8:	db01      	blt.n	8006bfe <__sfputc_r+0x16>
 8006bfa:	290a      	cmp	r1, #10
 8006bfc:	d103      	bne.n	8006c06 <__sfputc_r+0x1e>
 8006bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c02:	f7ff bad5 	b.w	80061b0 <__swbuf_r>
 8006c06:	6813      	ldr	r3, [r2, #0]
 8006c08:	1c58      	adds	r0, r3, #1
 8006c0a:	6010      	str	r0, [r2, #0]
 8006c0c:	7019      	strb	r1, [r3, #0]
 8006c0e:	4608      	mov	r0, r1
 8006c10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <__sfputs_r>:
 8006c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c18:	4606      	mov	r6, r0
 8006c1a:	460f      	mov	r7, r1
 8006c1c:	4614      	mov	r4, r2
 8006c1e:	18d5      	adds	r5, r2, r3
 8006c20:	42ac      	cmp	r4, r5
 8006c22:	d101      	bne.n	8006c28 <__sfputs_r+0x12>
 8006c24:	2000      	movs	r0, #0
 8006c26:	e007      	b.n	8006c38 <__sfputs_r+0x22>
 8006c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c2c:	463a      	mov	r2, r7
 8006c2e:	4630      	mov	r0, r6
 8006c30:	f7ff ffda 	bl	8006be8 <__sfputc_r>
 8006c34:	1c43      	adds	r3, r0, #1
 8006c36:	d1f3      	bne.n	8006c20 <__sfputs_r+0xa>
 8006c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c3c <_vfiprintf_r>:
 8006c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c40:	460d      	mov	r5, r1
 8006c42:	b09d      	sub	sp, #116	; 0x74
 8006c44:	4614      	mov	r4, r2
 8006c46:	4698      	mov	r8, r3
 8006c48:	4606      	mov	r6, r0
 8006c4a:	b118      	cbz	r0, 8006c54 <_vfiprintf_r+0x18>
 8006c4c:	6983      	ldr	r3, [r0, #24]
 8006c4e:	b90b      	cbnz	r3, 8006c54 <_vfiprintf_r+0x18>
 8006c50:	f7ff fc88 	bl	8006564 <__sinit>
 8006c54:	4b89      	ldr	r3, [pc, #548]	; (8006e7c <_vfiprintf_r+0x240>)
 8006c56:	429d      	cmp	r5, r3
 8006c58:	d11b      	bne.n	8006c92 <_vfiprintf_r+0x56>
 8006c5a:	6875      	ldr	r5, [r6, #4]
 8006c5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c5e:	07d9      	lsls	r1, r3, #31
 8006c60:	d405      	bmi.n	8006c6e <_vfiprintf_r+0x32>
 8006c62:	89ab      	ldrh	r3, [r5, #12]
 8006c64:	059a      	lsls	r2, r3, #22
 8006c66:	d402      	bmi.n	8006c6e <_vfiprintf_r+0x32>
 8006c68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c6a:	f7ff fd19 	bl	80066a0 <__retarget_lock_acquire_recursive>
 8006c6e:	89ab      	ldrh	r3, [r5, #12]
 8006c70:	071b      	lsls	r3, r3, #28
 8006c72:	d501      	bpl.n	8006c78 <_vfiprintf_r+0x3c>
 8006c74:	692b      	ldr	r3, [r5, #16]
 8006c76:	b9eb      	cbnz	r3, 8006cb4 <_vfiprintf_r+0x78>
 8006c78:	4629      	mov	r1, r5
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	f7ff faea 	bl	8006254 <__swsetup_r>
 8006c80:	b1c0      	cbz	r0, 8006cb4 <_vfiprintf_r+0x78>
 8006c82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c84:	07dc      	lsls	r4, r3, #31
 8006c86:	d50e      	bpl.n	8006ca6 <_vfiprintf_r+0x6a>
 8006c88:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8c:	b01d      	add	sp, #116	; 0x74
 8006c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c92:	4b7b      	ldr	r3, [pc, #492]	; (8006e80 <_vfiprintf_r+0x244>)
 8006c94:	429d      	cmp	r5, r3
 8006c96:	d101      	bne.n	8006c9c <_vfiprintf_r+0x60>
 8006c98:	68b5      	ldr	r5, [r6, #8]
 8006c9a:	e7df      	b.n	8006c5c <_vfiprintf_r+0x20>
 8006c9c:	4b79      	ldr	r3, [pc, #484]	; (8006e84 <_vfiprintf_r+0x248>)
 8006c9e:	429d      	cmp	r5, r3
 8006ca0:	bf08      	it	eq
 8006ca2:	68f5      	ldreq	r5, [r6, #12]
 8006ca4:	e7da      	b.n	8006c5c <_vfiprintf_r+0x20>
 8006ca6:	89ab      	ldrh	r3, [r5, #12]
 8006ca8:	0598      	lsls	r0, r3, #22
 8006caa:	d4ed      	bmi.n	8006c88 <_vfiprintf_r+0x4c>
 8006cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cae:	f7ff fcf8 	bl	80066a2 <__retarget_lock_release_recursive>
 8006cb2:	e7e9      	b.n	8006c88 <_vfiprintf_r+0x4c>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8006cb8:	2320      	movs	r3, #32
 8006cba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cc2:	2330      	movs	r3, #48	; 0x30
 8006cc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006e88 <_vfiprintf_r+0x24c>
 8006cc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ccc:	f04f 0901 	mov.w	r9, #1
 8006cd0:	4623      	mov	r3, r4
 8006cd2:	469a      	mov	sl, r3
 8006cd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cd8:	b10a      	cbz	r2, 8006cde <_vfiprintf_r+0xa2>
 8006cda:	2a25      	cmp	r2, #37	; 0x25
 8006cdc:	d1f9      	bne.n	8006cd2 <_vfiprintf_r+0x96>
 8006cde:	ebba 0b04 	subs.w	fp, sl, r4
 8006ce2:	d00b      	beq.n	8006cfc <_vfiprintf_r+0xc0>
 8006ce4:	465b      	mov	r3, fp
 8006ce6:	4622      	mov	r2, r4
 8006ce8:	4629      	mov	r1, r5
 8006cea:	4630      	mov	r0, r6
 8006cec:	f7ff ff93 	bl	8006c16 <__sfputs_r>
 8006cf0:	3001      	adds	r0, #1
 8006cf2:	f000 80aa 	beq.w	8006e4a <_vfiprintf_r+0x20e>
 8006cf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cf8:	445a      	add	r2, fp
 8006cfa:	9209      	str	r2, [sp, #36]	; 0x24
 8006cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 80a2 	beq.w	8006e4a <_vfiprintf_r+0x20e>
 8006d06:	2300      	movs	r3, #0
 8006d08:	f04f 32ff 	mov.w	r2, #4294967295
 8006d0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d10:	f10a 0a01 	add.w	sl, sl, #1
 8006d14:	9304      	str	r3, [sp, #16]
 8006d16:	9307      	str	r3, [sp, #28]
 8006d18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d1c:	931a      	str	r3, [sp, #104]	; 0x68
 8006d1e:	4654      	mov	r4, sl
 8006d20:	2205      	movs	r2, #5
 8006d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d26:	4858      	ldr	r0, [pc, #352]	; (8006e88 <_vfiprintf_r+0x24c>)
 8006d28:	f7f9 fa6a 	bl	8000200 <memchr>
 8006d2c:	9a04      	ldr	r2, [sp, #16]
 8006d2e:	b9d8      	cbnz	r0, 8006d68 <_vfiprintf_r+0x12c>
 8006d30:	06d1      	lsls	r1, r2, #27
 8006d32:	bf44      	itt	mi
 8006d34:	2320      	movmi	r3, #32
 8006d36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d3a:	0713      	lsls	r3, r2, #28
 8006d3c:	bf44      	itt	mi
 8006d3e:	232b      	movmi	r3, #43	; 0x2b
 8006d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d44:	f89a 3000 	ldrb.w	r3, [sl]
 8006d48:	2b2a      	cmp	r3, #42	; 0x2a
 8006d4a:	d015      	beq.n	8006d78 <_vfiprintf_r+0x13c>
 8006d4c:	9a07      	ldr	r2, [sp, #28]
 8006d4e:	4654      	mov	r4, sl
 8006d50:	2000      	movs	r0, #0
 8006d52:	f04f 0c0a 	mov.w	ip, #10
 8006d56:	4621      	mov	r1, r4
 8006d58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d5c:	3b30      	subs	r3, #48	; 0x30
 8006d5e:	2b09      	cmp	r3, #9
 8006d60:	d94e      	bls.n	8006e00 <_vfiprintf_r+0x1c4>
 8006d62:	b1b0      	cbz	r0, 8006d92 <_vfiprintf_r+0x156>
 8006d64:	9207      	str	r2, [sp, #28]
 8006d66:	e014      	b.n	8006d92 <_vfiprintf_r+0x156>
 8006d68:	eba0 0308 	sub.w	r3, r0, r8
 8006d6c:	fa09 f303 	lsl.w	r3, r9, r3
 8006d70:	4313      	orrs	r3, r2
 8006d72:	9304      	str	r3, [sp, #16]
 8006d74:	46a2      	mov	sl, r4
 8006d76:	e7d2      	b.n	8006d1e <_vfiprintf_r+0xe2>
 8006d78:	9b03      	ldr	r3, [sp, #12]
 8006d7a:	1d19      	adds	r1, r3, #4
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	9103      	str	r1, [sp, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	bfbb      	ittet	lt
 8006d84:	425b      	neglt	r3, r3
 8006d86:	f042 0202 	orrlt.w	r2, r2, #2
 8006d8a:	9307      	strge	r3, [sp, #28]
 8006d8c:	9307      	strlt	r3, [sp, #28]
 8006d8e:	bfb8      	it	lt
 8006d90:	9204      	strlt	r2, [sp, #16]
 8006d92:	7823      	ldrb	r3, [r4, #0]
 8006d94:	2b2e      	cmp	r3, #46	; 0x2e
 8006d96:	d10c      	bne.n	8006db2 <_vfiprintf_r+0x176>
 8006d98:	7863      	ldrb	r3, [r4, #1]
 8006d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d9c:	d135      	bne.n	8006e0a <_vfiprintf_r+0x1ce>
 8006d9e:	9b03      	ldr	r3, [sp, #12]
 8006da0:	1d1a      	adds	r2, r3, #4
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	9203      	str	r2, [sp, #12]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	bfb8      	it	lt
 8006daa:	f04f 33ff 	movlt.w	r3, #4294967295
 8006dae:	3402      	adds	r4, #2
 8006db0:	9305      	str	r3, [sp, #20]
 8006db2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e98 <_vfiprintf_r+0x25c>
 8006db6:	7821      	ldrb	r1, [r4, #0]
 8006db8:	2203      	movs	r2, #3
 8006dba:	4650      	mov	r0, sl
 8006dbc:	f7f9 fa20 	bl	8000200 <memchr>
 8006dc0:	b140      	cbz	r0, 8006dd4 <_vfiprintf_r+0x198>
 8006dc2:	2340      	movs	r3, #64	; 0x40
 8006dc4:	eba0 000a 	sub.w	r0, r0, sl
 8006dc8:	fa03 f000 	lsl.w	r0, r3, r0
 8006dcc:	9b04      	ldr	r3, [sp, #16]
 8006dce:	4303      	orrs	r3, r0
 8006dd0:	3401      	adds	r4, #1
 8006dd2:	9304      	str	r3, [sp, #16]
 8006dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dd8:	482c      	ldr	r0, [pc, #176]	; (8006e8c <_vfiprintf_r+0x250>)
 8006dda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dde:	2206      	movs	r2, #6
 8006de0:	f7f9 fa0e 	bl	8000200 <memchr>
 8006de4:	2800      	cmp	r0, #0
 8006de6:	d03f      	beq.n	8006e68 <_vfiprintf_r+0x22c>
 8006de8:	4b29      	ldr	r3, [pc, #164]	; (8006e90 <_vfiprintf_r+0x254>)
 8006dea:	bb1b      	cbnz	r3, 8006e34 <_vfiprintf_r+0x1f8>
 8006dec:	9b03      	ldr	r3, [sp, #12]
 8006dee:	3307      	adds	r3, #7
 8006df0:	f023 0307 	bic.w	r3, r3, #7
 8006df4:	3308      	adds	r3, #8
 8006df6:	9303      	str	r3, [sp, #12]
 8006df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dfa:	443b      	add	r3, r7
 8006dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8006dfe:	e767      	b.n	8006cd0 <_vfiprintf_r+0x94>
 8006e00:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e04:	460c      	mov	r4, r1
 8006e06:	2001      	movs	r0, #1
 8006e08:	e7a5      	b.n	8006d56 <_vfiprintf_r+0x11a>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	3401      	adds	r4, #1
 8006e0e:	9305      	str	r3, [sp, #20]
 8006e10:	4619      	mov	r1, r3
 8006e12:	f04f 0c0a 	mov.w	ip, #10
 8006e16:	4620      	mov	r0, r4
 8006e18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e1c:	3a30      	subs	r2, #48	; 0x30
 8006e1e:	2a09      	cmp	r2, #9
 8006e20:	d903      	bls.n	8006e2a <_vfiprintf_r+0x1ee>
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d0c5      	beq.n	8006db2 <_vfiprintf_r+0x176>
 8006e26:	9105      	str	r1, [sp, #20]
 8006e28:	e7c3      	b.n	8006db2 <_vfiprintf_r+0x176>
 8006e2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e2e:	4604      	mov	r4, r0
 8006e30:	2301      	movs	r3, #1
 8006e32:	e7f0      	b.n	8006e16 <_vfiprintf_r+0x1da>
 8006e34:	ab03      	add	r3, sp, #12
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	462a      	mov	r2, r5
 8006e3a:	4b16      	ldr	r3, [pc, #88]	; (8006e94 <_vfiprintf_r+0x258>)
 8006e3c:	a904      	add	r1, sp, #16
 8006e3e:	4630      	mov	r0, r6
 8006e40:	f3af 8000 	nop.w
 8006e44:	4607      	mov	r7, r0
 8006e46:	1c78      	adds	r0, r7, #1
 8006e48:	d1d6      	bne.n	8006df8 <_vfiprintf_r+0x1bc>
 8006e4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e4c:	07d9      	lsls	r1, r3, #31
 8006e4e:	d405      	bmi.n	8006e5c <_vfiprintf_r+0x220>
 8006e50:	89ab      	ldrh	r3, [r5, #12]
 8006e52:	059a      	lsls	r2, r3, #22
 8006e54:	d402      	bmi.n	8006e5c <_vfiprintf_r+0x220>
 8006e56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e58:	f7ff fc23 	bl	80066a2 <__retarget_lock_release_recursive>
 8006e5c:	89ab      	ldrh	r3, [r5, #12]
 8006e5e:	065b      	lsls	r3, r3, #25
 8006e60:	f53f af12 	bmi.w	8006c88 <_vfiprintf_r+0x4c>
 8006e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e66:	e711      	b.n	8006c8c <_vfiprintf_r+0x50>
 8006e68:	ab03      	add	r3, sp, #12
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	462a      	mov	r2, r5
 8006e6e:	4b09      	ldr	r3, [pc, #36]	; (8006e94 <_vfiprintf_r+0x258>)
 8006e70:	a904      	add	r1, sp, #16
 8006e72:	4630      	mov	r0, r6
 8006e74:	f000 f880 	bl	8006f78 <_printf_i>
 8006e78:	e7e4      	b.n	8006e44 <_vfiprintf_r+0x208>
 8006e7a:	bf00      	nop
 8006e7c:	08007540 	.word	0x08007540
 8006e80:	08007560 	.word	0x08007560
 8006e84:	08007520 	.word	0x08007520
 8006e88:	08007580 	.word	0x08007580
 8006e8c:	0800758a 	.word	0x0800758a
 8006e90:	00000000 	.word	0x00000000
 8006e94:	08006c17 	.word	0x08006c17
 8006e98:	08007586 	.word	0x08007586

08006e9c <_printf_common>:
 8006e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ea0:	4616      	mov	r6, r2
 8006ea2:	4699      	mov	r9, r3
 8006ea4:	688a      	ldr	r2, [r1, #8]
 8006ea6:	690b      	ldr	r3, [r1, #16]
 8006ea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006eac:	4293      	cmp	r3, r2
 8006eae:	bfb8      	it	lt
 8006eb0:	4613      	movlt	r3, r2
 8006eb2:	6033      	str	r3, [r6, #0]
 8006eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006eb8:	4607      	mov	r7, r0
 8006eba:	460c      	mov	r4, r1
 8006ebc:	b10a      	cbz	r2, 8006ec2 <_printf_common+0x26>
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	6033      	str	r3, [r6, #0]
 8006ec2:	6823      	ldr	r3, [r4, #0]
 8006ec4:	0699      	lsls	r1, r3, #26
 8006ec6:	bf42      	ittt	mi
 8006ec8:	6833      	ldrmi	r3, [r6, #0]
 8006eca:	3302      	addmi	r3, #2
 8006ecc:	6033      	strmi	r3, [r6, #0]
 8006ece:	6825      	ldr	r5, [r4, #0]
 8006ed0:	f015 0506 	ands.w	r5, r5, #6
 8006ed4:	d106      	bne.n	8006ee4 <_printf_common+0x48>
 8006ed6:	f104 0a19 	add.w	sl, r4, #25
 8006eda:	68e3      	ldr	r3, [r4, #12]
 8006edc:	6832      	ldr	r2, [r6, #0]
 8006ede:	1a9b      	subs	r3, r3, r2
 8006ee0:	42ab      	cmp	r3, r5
 8006ee2:	dc26      	bgt.n	8006f32 <_printf_common+0x96>
 8006ee4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ee8:	1e13      	subs	r3, r2, #0
 8006eea:	6822      	ldr	r2, [r4, #0]
 8006eec:	bf18      	it	ne
 8006eee:	2301      	movne	r3, #1
 8006ef0:	0692      	lsls	r2, r2, #26
 8006ef2:	d42b      	bmi.n	8006f4c <_printf_common+0xb0>
 8006ef4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ef8:	4649      	mov	r1, r9
 8006efa:	4638      	mov	r0, r7
 8006efc:	47c0      	blx	r8
 8006efe:	3001      	adds	r0, #1
 8006f00:	d01e      	beq.n	8006f40 <_printf_common+0xa4>
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	68e5      	ldr	r5, [r4, #12]
 8006f06:	6832      	ldr	r2, [r6, #0]
 8006f08:	f003 0306 	and.w	r3, r3, #6
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	bf08      	it	eq
 8006f10:	1aad      	subeq	r5, r5, r2
 8006f12:	68a3      	ldr	r3, [r4, #8]
 8006f14:	6922      	ldr	r2, [r4, #16]
 8006f16:	bf0c      	ite	eq
 8006f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f1c:	2500      	movne	r5, #0
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	bfc4      	itt	gt
 8006f22:	1a9b      	subgt	r3, r3, r2
 8006f24:	18ed      	addgt	r5, r5, r3
 8006f26:	2600      	movs	r6, #0
 8006f28:	341a      	adds	r4, #26
 8006f2a:	42b5      	cmp	r5, r6
 8006f2c:	d11a      	bne.n	8006f64 <_printf_common+0xc8>
 8006f2e:	2000      	movs	r0, #0
 8006f30:	e008      	b.n	8006f44 <_printf_common+0xa8>
 8006f32:	2301      	movs	r3, #1
 8006f34:	4652      	mov	r2, sl
 8006f36:	4649      	mov	r1, r9
 8006f38:	4638      	mov	r0, r7
 8006f3a:	47c0      	blx	r8
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	d103      	bne.n	8006f48 <_printf_common+0xac>
 8006f40:	f04f 30ff 	mov.w	r0, #4294967295
 8006f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f48:	3501      	adds	r5, #1
 8006f4a:	e7c6      	b.n	8006eda <_printf_common+0x3e>
 8006f4c:	18e1      	adds	r1, r4, r3
 8006f4e:	1c5a      	adds	r2, r3, #1
 8006f50:	2030      	movs	r0, #48	; 0x30
 8006f52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f56:	4422      	add	r2, r4
 8006f58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f60:	3302      	adds	r3, #2
 8006f62:	e7c7      	b.n	8006ef4 <_printf_common+0x58>
 8006f64:	2301      	movs	r3, #1
 8006f66:	4622      	mov	r2, r4
 8006f68:	4649      	mov	r1, r9
 8006f6a:	4638      	mov	r0, r7
 8006f6c:	47c0      	blx	r8
 8006f6e:	3001      	adds	r0, #1
 8006f70:	d0e6      	beq.n	8006f40 <_printf_common+0xa4>
 8006f72:	3601      	adds	r6, #1
 8006f74:	e7d9      	b.n	8006f2a <_printf_common+0x8e>
	...

08006f78 <_printf_i>:
 8006f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f7c:	7e0f      	ldrb	r7, [r1, #24]
 8006f7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f80:	2f78      	cmp	r7, #120	; 0x78
 8006f82:	4691      	mov	r9, r2
 8006f84:	4680      	mov	r8, r0
 8006f86:	460c      	mov	r4, r1
 8006f88:	469a      	mov	sl, r3
 8006f8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f8e:	d807      	bhi.n	8006fa0 <_printf_i+0x28>
 8006f90:	2f62      	cmp	r7, #98	; 0x62
 8006f92:	d80a      	bhi.n	8006faa <_printf_i+0x32>
 8006f94:	2f00      	cmp	r7, #0
 8006f96:	f000 80d8 	beq.w	800714a <_printf_i+0x1d2>
 8006f9a:	2f58      	cmp	r7, #88	; 0x58
 8006f9c:	f000 80a3 	beq.w	80070e6 <_printf_i+0x16e>
 8006fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fa8:	e03a      	b.n	8007020 <_printf_i+0xa8>
 8006faa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fae:	2b15      	cmp	r3, #21
 8006fb0:	d8f6      	bhi.n	8006fa0 <_printf_i+0x28>
 8006fb2:	a101      	add	r1, pc, #4	; (adr r1, 8006fb8 <_printf_i+0x40>)
 8006fb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fb8:	08007011 	.word	0x08007011
 8006fbc:	08007025 	.word	0x08007025
 8006fc0:	08006fa1 	.word	0x08006fa1
 8006fc4:	08006fa1 	.word	0x08006fa1
 8006fc8:	08006fa1 	.word	0x08006fa1
 8006fcc:	08006fa1 	.word	0x08006fa1
 8006fd0:	08007025 	.word	0x08007025
 8006fd4:	08006fa1 	.word	0x08006fa1
 8006fd8:	08006fa1 	.word	0x08006fa1
 8006fdc:	08006fa1 	.word	0x08006fa1
 8006fe0:	08006fa1 	.word	0x08006fa1
 8006fe4:	08007131 	.word	0x08007131
 8006fe8:	08007055 	.word	0x08007055
 8006fec:	08007113 	.word	0x08007113
 8006ff0:	08006fa1 	.word	0x08006fa1
 8006ff4:	08006fa1 	.word	0x08006fa1
 8006ff8:	08007153 	.word	0x08007153
 8006ffc:	08006fa1 	.word	0x08006fa1
 8007000:	08007055 	.word	0x08007055
 8007004:	08006fa1 	.word	0x08006fa1
 8007008:	08006fa1 	.word	0x08006fa1
 800700c:	0800711b 	.word	0x0800711b
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	1d1a      	adds	r2, r3, #4
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	602a      	str	r2, [r5, #0]
 8007018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800701c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007020:	2301      	movs	r3, #1
 8007022:	e0a3      	b.n	800716c <_printf_i+0x1f4>
 8007024:	6820      	ldr	r0, [r4, #0]
 8007026:	6829      	ldr	r1, [r5, #0]
 8007028:	0606      	lsls	r6, r0, #24
 800702a:	f101 0304 	add.w	r3, r1, #4
 800702e:	d50a      	bpl.n	8007046 <_printf_i+0xce>
 8007030:	680e      	ldr	r6, [r1, #0]
 8007032:	602b      	str	r3, [r5, #0]
 8007034:	2e00      	cmp	r6, #0
 8007036:	da03      	bge.n	8007040 <_printf_i+0xc8>
 8007038:	232d      	movs	r3, #45	; 0x2d
 800703a:	4276      	negs	r6, r6
 800703c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007040:	485e      	ldr	r0, [pc, #376]	; (80071bc <_printf_i+0x244>)
 8007042:	230a      	movs	r3, #10
 8007044:	e019      	b.n	800707a <_printf_i+0x102>
 8007046:	680e      	ldr	r6, [r1, #0]
 8007048:	602b      	str	r3, [r5, #0]
 800704a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800704e:	bf18      	it	ne
 8007050:	b236      	sxthne	r6, r6
 8007052:	e7ef      	b.n	8007034 <_printf_i+0xbc>
 8007054:	682b      	ldr	r3, [r5, #0]
 8007056:	6820      	ldr	r0, [r4, #0]
 8007058:	1d19      	adds	r1, r3, #4
 800705a:	6029      	str	r1, [r5, #0]
 800705c:	0601      	lsls	r1, r0, #24
 800705e:	d501      	bpl.n	8007064 <_printf_i+0xec>
 8007060:	681e      	ldr	r6, [r3, #0]
 8007062:	e002      	b.n	800706a <_printf_i+0xf2>
 8007064:	0646      	lsls	r6, r0, #25
 8007066:	d5fb      	bpl.n	8007060 <_printf_i+0xe8>
 8007068:	881e      	ldrh	r6, [r3, #0]
 800706a:	4854      	ldr	r0, [pc, #336]	; (80071bc <_printf_i+0x244>)
 800706c:	2f6f      	cmp	r7, #111	; 0x6f
 800706e:	bf0c      	ite	eq
 8007070:	2308      	moveq	r3, #8
 8007072:	230a      	movne	r3, #10
 8007074:	2100      	movs	r1, #0
 8007076:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800707a:	6865      	ldr	r5, [r4, #4]
 800707c:	60a5      	str	r5, [r4, #8]
 800707e:	2d00      	cmp	r5, #0
 8007080:	bfa2      	ittt	ge
 8007082:	6821      	ldrge	r1, [r4, #0]
 8007084:	f021 0104 	bicge.w	r1, r1, #4
 8007088:	6021      	strge	r1, [r4, #0]
 800708a:	b90e      	cbnz	r6, 8007090 <_printf_i+0x118>
 800708c:	2d00      	cmp	r5, #0
 800708e:	d04d      	beq.n	800712c <_printf_i+0x1b4>
 8007090:	4615      	mov	r5, r2
 8007092:	fbb6 f1f3 	udiv	r1, r6, r3
 8007096:	fb03 6711 	mls	r7, r3, r1, r6
 800709a:	5dc7      	ldrb	r7, [r0, r7]
 800709c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070a0:	4637      	mov	r7, r6
 80070a2:	42bb      	cmp	r3, r7
 80070a4:	460e      	mov	r6, r1
 80070a6:	d9f4      	bls.n	8007092 <_printf_i+0x11a>
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d10b      	bne.n	80070c4 <_printf_i+0x14c>
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	07de      	lsls	r6, r3, #31
 80070b0:	d508      	bpl.n	80070c4 <_printf_i+0x14c>
 80070b2:	6923      	ldr	r3, [r4, #16]
 80070b4:	6861      	ldr	r1, [r4, #4]
 80070b6:	4299      	cmp	r1, r3
 80070b8:	bfde      	ittt	le
 80070ba:	2330      	movle	r3, #48	; 0x30
 80070bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070c4:	1b52      	subs	r2, r2, r5
 80070c6:	6122      	str	r2, [r4, #16]
 80070c8:	f8cd a000 	str.w	sl, [sp]
 80070cc:	464b      	mov	r3, r9
 80070ce:	aa03      	add	r2, sp, #12
 80070d0:	4621      	mov	r1, r4
 80070d2:	4640      	mov	r0, r8
 80070d4:	f7ff fee2 	bl	8006e9c <_printf_common>
 80070d8:	3001      	adds	r0, #1
 80070da:	d14c      	bne.n	8007176 <_printf_i+0x1fe>
 80070dc:	f04f 30ff 	mov.w	r0, #4294967295
 80070e0:	b004      	add	sp, #16
 80070e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070e6:	4835      	ldr	r0, [pc, #212]	; (80071bc <_printf_i+0x244>)
 80070e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80070ec:	6829      	ldr	r1, [r5, #0]
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80070f4:	6029      	str	r1, [r5, #0]
 80070f6:	061d      	lsls	r5, r3, #24
 80070f8:	d514      	bpl.n	8007124 <_printf_i+0x1ac>
 80070fa:	07df      	lsls	r7, r3, #31
 80070fc:	bf44      	itt	mi
 80070fe:	f043 0320 	orrmi.w	r3, r3, #32
 8007102:	6023      	strmi	r3, [r4, #0]
 8007104:	b91e      	cbnz	r6, 800710e <_printf_i+0x196>
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	f023 0320 	bic.w	r3, r3, #32
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	2310      	movs	r3, #16
 8007110:	e7b0      	b.n	8007074 <_printf_i+0xfc>
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	f043 0320 	orr.w	r3, r3, #32
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	2378      	movs	r3, #120	; 0x78
 800711c:	4828      	ldr	r0, [pc, #160]	; (80071c0 <_printf_i+0x248>)
 800711e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007122:	e7e3      	b.n	80070ec <_printf_i+0x174>
 8007124:	0659      	lsls	r1, r3, #25
 8007126:	bf48      	it	mi
 8007128:	b2b6      	uxthmi	r6, r6
 800712a:	e7e6      	b.n	80070fa <_printf_i+0x182>
 800712c:	4615      	mov	r5, r2
 800712e:	e7bb      	b.n	80070a8 <_printf_i+0x130>
 8007130:	682b      	ldr	r3, [r5, #0]
 8007132:	6826      	ldr	r6, [r4, #0]
 8007134:	6961      	ldr	r1, [r4, #20]
 8007136:	1d18      	adds	r0, r3, #4
 8007138:	6028      	str	r0, [r5, #0]
 800713a:	0635      	lsls	r5, r6, #24
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	d501      	bpl.n	8007144 <_printf_i+0x1cc>
 8007140:	6019      	str	r1, [r3, #0]
 8007142:	e002      	b.n	800714a <_printf_i+0x1d2>
 8007144:	0670      	lsls	r0, r6, #25
 8007146:	d5fb      	bpl.n	8007140 <_printf_i+0x1c8>
 8007148:	8019      	strh	r1, [r3, #0]
 800714a:	2300      	movs	r3, #0
 800714c:	6123      	str	r3, [r4, #16]
 800714e:	4615      	mov	r5, r2
 8007150:	e7ba      	b.n	80070c8 <_printf_i+0x150>
 8007152:	682b      	ldr	r3, [r5, #0]
 8007154:	1d1a      	adds	r2, r3, #4
 8007156:	602a      	str	r2, [r5, #0]
 8007158:	681d      	ldr	r5, [r3, #0]
 800715a:	6862      	ldr	r2, [r4, #4]
 800715c:	2100      	movs	r1, #0
 800715e:	4628      	mov	r0, r5
 8007160:	f7f9 f84e 	bl	8000200 <memchr>
 8007164:	b108      	cbz	r0, 800716a <_printf_i+0x1f2>
 8007166:	1b40      	subs	r0, r0, r5
 8007168:	6060      	str	r0, [r4, #4]
 800716a:	6863      	ldr	r3, [r4, #4]
 800716c:	6123      	str	r3, [r4, #16]
 800716e:	2300      	movs	r3, #0
 8007170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007174:	e7a8      	b.n	80070c8 <_printf_i+0x150>
 8007176:	6923      	ldr	r3, [r4, #16]
 8007178:	462a      	mov	r2, r5
 800717a:	4649      	mov	r1, r9
 800717c:	4640      	mov	r0, r8
 800717e:	47d0      	blx	sl
 8007180:	3001      	adds	r0, #1
 8007182:	d0ab      	beq.n	80070dc <_printf_i+0x164>
 8007184:	6823      	ldr	r3, [r4, #0]
 8007186:	079b      	lsls	r3, r3, #30
 8007188:	d413      	bmi.n	80071b2 <_printf_i+0x23a>
 800718a:	68e0      	ldr	r0, [r4, #12]
 800718c:	9b03      	ldr	r3, [sp, #12]
 800718e:	4298      	cmp	r0, r3
 8007190:	bfb8      	it	lt
 8007192:	4618      	movlt	r0, r3
 8007194:	e7a4      	b.n	80070e0 <_printf_i+0x168>
 8007196:	2301      	movs	r3, #1
 8007198:	4632      	mov	r2, r6
 800719a:	4649      	mov	r1, r9
 800719c:	4640      	mov	r0, r8
 800719e:	47d0      	blx	sl
 80071a0:	3001      	adds	r0, #1
 80071a2:	d09b      	beq.n	80070dc <_printf_i+0x164>
 80071a4:	3501      	adds	r5, #1
 80071a6:	68e3      	ldr	r3, [r4, #12]
 80071a8:	9903      	ldr	r1, [sp, #12]
 80071aa:	1a5b      	subs	r3, r3, r1
 80071ac:	42ab      	cmp	r3, r5
 80071ae:	dcf2      	bgt.n	8007196 <_printf_i+0x21e>
 80071b0:	e7eb      	b.n	800718a <_printf_i+0x212>
 80071b2:	2500      	movs	r5, #0
 80071b4:	f104 0619 	add.w	r6, r4, #25
 80071b8:	e7f5      	b.n	80071a6 <_printf_i+0x22e>
 80071ba:	bf00      	nop
 80071bc:	08007591 	.word	0x08007591
 80071c0:	080075a2 	.word	0x080075a2

080071c4 <_sbrk_r>:
 80071c4:	b538      	push	{r3, r4, r5, lr}
 80071c6:	4d06      	ldr	r5, [pc, #24]	; (80071e0 <_sbrk_r+0x1c>)
 80071c8:	2300      	movs	r3, #0
 80071ca:	4604      	mov	r4, r0
 80071cc:	4608      	mov	r0, r1
 80071ce:	602b      	str	r3, [r5, #0]
 80071d0:	f7fa f9b0 	bl	8001534 <_sbrk>
 80071d4:	1c43      	adds	r3, r0, #1
 80071d6:	d102      	bne.n	80071de <_sbrk_r+0x1a>
 80071d8:	682b      	ldr	r3, [r5, #0]
 80071da:	b103      	cbz	r3, 80071de <_sbrk_r+0x1a>
 80071dc:	6023      	str	r3, [r4, #0]
 80071de:	bd38      	pop	{r3, r4, r5, pc}
 80071e0:	2000029c 	.word	0x2000029c

080071e4 <__sread>:
 80071e4:	b510      	push	{r4, lr}
 80071e6:	460c      	mov	r4, r1
 80071e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ec:	f000 f8f8 	bl	80073e0 <_read_r>
 80071f0:	2800      	cmp	r0, #0
 80071f2:	bfab      	itete	ge
 80071f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071f6:	89a3      	ldrhlt	r3, [r4, #12]
 80071f8:	181b      	addge	r3, r3, r0
 80071fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071fe:	bfac      	ite	ge
 8007200:	6563      	strge	r3, [r4, #84]	; 0x54
 8007202:	81a3      	strhlt	r3, [r4, #12]
 8007204:	bd10      	pop	{r4, pc}

08007206 <__swrite>:
 8007206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800720a:	461f      	mov	r7, r3
 800720c:	898b      	ldrh	r3, [r1, #12]
 800720e:	05db      	lsls	r3, r3, #23
 8007210:	4605      	mov	r5, r0
 8007212:	460c      	mov	r4, r1
 8007214:	4616      	mov	r6, r2
 8007216:	d505      	bpl.n	8007224 <__swrite+0x1e>
 8007218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800721c:	2302      	movs	r3, #2
 800721e:	2200      	movs	r2, #0
 8007220:	f000 f868 	bl	80072f4 <_lseek_r>
 8007224:	89a3      	ldrh	r3, [r4, #12]
 8007226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800722a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800722e:	81a3      	strh	r3, [r4, #12]
 8007230:	4632      	mov	r2, r6
 8007232:	463b      	mov	r3, r7
 8007234:	4628      	mov	r0, r5
 8007236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800723a:	f000 b817 	b.w	800726c <_write_r>

0800723e <__sseek>:
 800723e:	b510      	push	{r4, lr}
 8007240:	460c      	mov	r4, r1
 8007242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007246:	f000 f855 	bl	80072f4 <_lseek_r>
 800724a:	1c43      	adds	r3, r0, #1
 800724c:	89a3      	ldrh	r3, [r4, #12]
 800724e:	bf15      	itete	ne
 8007250:	6560      	strne	r0, [r4, #84]	; 0x54
 8007252:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007256:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800725a:	81a3      	strheq	r3, [r4, #12]
 800725c:	bf18      	it	ne
 800725e:	81a3      	strhne	r3, [r4, #12]
 8007260:	bd10      	pop	{r4, pc}

08007262 <__sclose>:
 8007262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007266:	f000 b813 	b.w	8007290 <_close_r>
	...

0800726c <_write_r>:
 800726c:	b538      	push	{r3, r4, r5, lr}
 800726e:	4d07      	ldr	r5, [pc, #28]	; (800728c <_write_r+0x20>)
 8007270:	4604      	mov	r4, r0
 8007272:	4608      	mov	r0, r1
 8007274:	4611      	mov	r1, r2
 8007276:	2200      	movs	r2, #0
 8007278:	602a      	str	r2, [r5, #0]
 800727a:	461a      	mov	r2, r3
 800727c:	f7fa f909 	bl	8001492 <_write>
 8007280:	1c43      	adds	r3, r0, #1
 8007282:	d102      	bne.n	800728a <_write_r+0x1e>
 8007284:	682b      	ldr	r3, [r5, #0]
 8007286:	b103      	cbz	r3, 800728a <_write_r+0x1e>
 8007288:	6023      	str	r3, [r4, #0]
 800728a:	bd38      	pop	{r3, r4, r5, pc}
 800728c:	2000029c 	.word	0x2000029c

08007290 <_close_r>:
 8007290:	b538      	push	{r3, r4, r5, lr}
 8007292:	4d06      	ldr	r5, [pc, #24]	; (80072ac <_close_r+0x1c>)
 8007294:	2300      	movs	r3, #0
 8007296:	4604      	mov	r4, r0
 8007298:	4608      	mov	r0, r1
 800729a:	602b      	str	r3, [r5, #0]
 800729c:	f7fa f915 	bl	80014ca <_close>
 80072a0:	1c43      	adds	r3, r0, #1
 80072a2:	d102      	bne.n	80072aa <_close_r+0x1a>
 80072a4:	682b      	ldr	r3, [r5, #0]
 80072a6:	b103      	cbz	r3, 80072aa <_close_r+0x1a>
 80072a8:	6023      	str	r3, [r4, #0]
 80072aa:	bd38      	pop	{r3, r4, r5, pc}
 80072ac:	2000029c 	.word	0x2000029c

080072b0 <_fstat_r>:
 80072b0:	b538      	push	{r3, r4, r5, lr}
 80072b2:	4d07      	ldr	r5, [pc, #28]	; (80072d0 <_fstat_r+0x20>)
 80072b4:	2300      	movs	r3, #0
 80072b6:	4604      	mov	r4, r0
 80072b8:	4608      	mov	r0, r1
 80072ba:	4611      	mov	r1, r2
 80072bc:	602b      	str	r3, [r5, #0]
 80072be:	f7fa f910 	bl	80014e2 <_fstat>
 80072c2:	1c43      	adds	r3, r0, #1
 80072c4:	d102      	bne.n	80072cc <_fstat_r+0x1c>
 80072c6:	682b      	ldr	r3, [r5, #0]
 80072c8:	b103      	cbz	r3, 80072cc <_fstat_r+0x1c>
 80072ca:	6023      	str	r3, [r4, #0]
 80072cc:	bd38      	pop	{r3, r4, r5, pc}
 80072ce:	bf00      	nop
 80072d0:	2000029c 	.word	0x2000029c

080072d4 <_isatty_r>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	4d06      	ldr	r5, [pc, #24]	; (80072f0 <_isatty_r+0x1c>)
 80072d8:	2300      	movs	r3, #0
 80072da:	4604      	mov	r4, r0
 80072dc:	4608      	mov	r0, r1
 80072de:	602b      	str	r3, [r5, #0]
 80072e0:	f7fa f90f 	bl	8001502 <_isatty>
 80072e4:	1c43      	adds	r3, r0, #1
 80072e6:	d102      	bne.n	80072ee <_isatty_r+0x1a>
 80072e8:	682b      	ldr	r3, [r5, #0]
 80072ea:	b103      	cbz	r3, 80072ee <_isatty_r+0x1a>
 80072ec:	6023      	str	r3, [r4, #0]
 80072ee:	bd38      	pop	{r3, r4, r5, pc}
 80072f0:	2000029c 	.word	0x2000029c

080072f4 <_lseek_r>:
 80072f4:	b538      	push	{r3, r4, r5, lr}
 80072f6:	4d07      	ldr	r5, [pc, #28]	; (8007314 <_lseek_r+0x20>)
 80072f8:	4604      	mov	r4, r0
 80072fa:	4608      	mov	r0, r1
 80072fc:	4611      	mov	r1, r2
 80072fe:	2200      	movs	r2, #0
 8007300:	602a      	str	r2, [r5, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	f7fa f908 	bl	8001518 <_lseek>
 8007308:	1c43      	adds	r3, r0, #1
 800730a:	d102      	bne.n	8007312 <_lseek_r+0x1e>
 800730c:	682b      	ldr	r3, [r5, #0]
 800730e:	b103      	cbz	r3, 8007312 <_lseek_r+0x1e>
 8007310:	6023      	str	r3, [r4, #0]
 8007312:	bd38      	pop	{r3, r4, r5, pc}
 8007314:	2000029c 	.word	0x2000029c

08007318 <memcpy>:
 8007318:	440a      	add	r2, r1
 800731a:	4291      	cmp	r1, r2
 800731c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007320:	d100      	bne.n	8007324 <memcpy+0xc>
 8007322:	4770      	bx	lr
 8007324:	b510      	push	{r4, lr}
 8007326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800732a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800732e:	4291      	cmp	r1, r2
 8007330:	d1f9      	bne.n	8007326 <memcpy+0xe>
 8007332:	bd10      	pop	{r4, pc}

08007334 <memmove>:
 8007334:	4288      	cmp	r0, r1
 8007336:	b510      	push	{r4, lr}
 8007338:	eb01 0402 	add.w	r4, r1, r2
 800733c:	d902      	bls.n	8007344 <memmove+0x10>
 800733e:	4284      	cmp	r4, r0
 8007340:	4623      	mov	r3, r4
 8007342:	d807      	bhi.n	8007354 <memmove+0x20>
 8007344:	1e43      	subs	r3, r0, #1
 8007346:	42a1      	cmp	r1, r4
 8007348:	d008      	beq.n	800735c <memmove+0x28>
 800734a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800734e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007352:	e7f8      	b.n	8007346 <memmove+0x12>
 8007354:	4402      	add	r2, r0
 8007356:	4601      	mov	r1, r0
 8007358:	428a      	cmp	r2, r1
 800735a:	d100      	bne.n	800735e <memmove+0x2a>
 800735c:	bd10      	pop	{r4, pc}
 800735e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007362:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007366:	e7f7      	b.n	8007358 <memmove+0x24>

08007368 <__malloc_lock>:
 8007368:	4801      	ldr	r0, [pc, #4]	; (8007370 <__malloc_lock+0x8>)
 800736a:	f7ff b999 	b.w	80066a0 <__retarget_lock_acquire_recursive>
 800736e:	bf00      	nop
 8007370:	20000290 	.word	0x20000290

08007374 <__malloc_unlock>:
 8007374:	4801      	ldr	r0, [pc, #4]	; (800737c <__malloc_unlock+0x8>)
 8007376:	f7ff b994 	b.w	80066a2 <__retarget_lock_release_recursive>
 800737a:	bf00      	nop
 800737c:	20000290 	.word	0x20000290

08007380 <_realloc_r>:
 8007380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007384:	4680      	mov	r8, r0
 8007386:	4614      	mov	r4, r2
 8007388:	460e      	mov	r6, r1
 800738a:	b921      	cbnz	r1, 8007396 <_realloc_r+0x16>
 800738c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007390:	4611      	mov	r1, r2
 8007392:	f7ff ba59 	b.w	8006848 <_malloc_r>
 8007396:	b92a      	cbnz	r2, 80073a4 <_realloc_r+0x24>
 8007398:	f7ff f9ea 	bl	8006770 <_free_r>
 800739c:	4625      	mov	r5, r4
 800739e:	4628      	mov	r0, r5
 80073a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073a4:	f000 f82e 	bl	8007404 <_malloc_usable_size_r>
 80073a8:	4284      	cmp	r4, r0
 80073aa:	4607      	mov	r7, r0
 80073ac:	d802      	bhi.n	80073b4 <_realloc_r+0x34>
 80073ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073b2:	d812      	bhi.n	80073da <_realloc_r+0x5a>
 80073b4:	4621      	mov	r1, r4
 80073b6:	4640      	mov	r0, r8
 80073b8:	f7ff fa46 	bl	8006848 <_malloc_r>
 80073bc:	4605      	mov	r5, r0
 80073be:	2800      	cmp	r0, #0
 80073c0:	d0ed      	beq.n	800739e <_realloc_r+0x1e>
 80073c2:	42bc      	cmp	r4, r7
 80073c4:	4622      	mov	r2, r4
 80073c6:	4631      	mov	r1, r6
 80073c8:	bf28      	it	cs
 80073ca:	463a      	movcs	r2, r7
 80073cc:	f7ff ffa4 	bl	8007318 <memcpy>
 80073d0:	4631      	mov	r1, r6
 80073d2:	4640      	mov	r0, r8
 80073d4:	f7ff f9cc 	bl	8006770 <_free_r>
 80073d8:	e7e1      	b.n	800739e <_realloc_r+0x1e>
 80073da:	4635      	mov	r5, r6
 80073dc:	e7df      	b.n	800739e <_realloc_r+0x1e>
	...

080073e0 <_read_r>:
 80073e0:	b538      	push	{r3, r4, r5, lr}
 80073e2:	4d07      	ldr	r5, [pc, #28]	; (8007400 <_read_r+0x20>)
 80073e4:	4604      	mov	r4, r0
 80073e6:	4608      	mov	r0, r1
 80073e8:	4611      	mov	r1, r2
 80073ea:	2200      	movs	r2, #0
 80073ec:	602a      	str	r2, [r5, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	f7fa f832 	bl	8001458 <_read>
 80073f4:	1c43      	adds	r3, r0, #1
 80073f6:	d102      	bne.n	80073fe <_read_r+0x1e>
 80073f8:	682b      	ldr	r3, [r5, #0]
 80073fa:	b103      	cbz	r3, 80073fe <_read_r+0x1e>
 80073fc:	6023      	str	r3, [r4, #0]
 80073fe:	bd38      	pop	{r3, r4, r5, pc}
 8007400:	2000029c 	.word	0x2000029c

08007404 <_malloc_usable_size_r>:
 8007404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007408:	1f18      	subs	r0, r3, #4
 800740a:	2b00      	cmp	r3, #0
 800740c:	bfbc      	itt	lt
 800740e:	580b      	ldrlt	r3, [r1, r0]
 8007410:	18c0      	addlt	r0, r0, r3
 8007412:	4770      	bx	lr

08007414 <_init>:
 8007414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007416:	bf00      	nop
 8007418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800741a:	bc08      	pop	{r3}
 800741c:	469e      	mov	lr, r3
 800741e:	4770      	bx	lr

08007420 <_fini>:
 8007420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007422:	bf00      	nop
 8007424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007426:	bc08      	pop	{r3}
 8007428:	469e      	mov	lr, r3
 800742a:	4770      	bx	lr
