
22_06_10_Userbutton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009438  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  080095e8  080095e8  000195e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097dc  080097dc  000202c0  2**0
                  CONTENTS
  4 .ARM          00000008  080097dc  080097dc  000197dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097e4  080097e4  000202c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097e4  080097e4  000197e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097e8  080097e8  000197e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  080097ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202c0  2**0
                  CONTENTS
 10 .bss          000002e8  200002c0  200002c0  000202c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005a8  200005a8  000202c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018a23  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003880  00000000  00000000  00038d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001570  00000000  00000000  0003c598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013f0  00000000  00000000  0003db08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002910f  00000000  00000000  0003eef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ce30  00000000  00000000  00068007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f17b7  00000000  00000000  00084e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001765ee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006300  00000000  00000000  00176640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002c0 	.word	0x200002c0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080095d0 	.word	0x080095d0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002c4 	.word	0x200002c4
 80001ec:	080095d0 	.word	0x080095d0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	463b      	mov	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b6:	4b21      	ldr	r3, [pc, #132]	; (800063c <MX_ADC1_Init+0x98>)
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_ADC1_Init+0x98>)
 80005be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <MX_ADC1_Init+0x98>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_ADC1_Init+0x98>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_ADC1_Init+0x98>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_ADC1_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <MX_ADC1_Init+0x98>)
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <MX_ADC1_Init+0xa0>)
 80005e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_ADC1_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_ADC1_Init+0x98>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_ADC1_Init+0x98>)
 8000600:	2201      	movs	r2, #1
 8000602:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <MX_ADC1_Init+0x98>)
 8000606:	f002 fb5f 	bl	8002cc8 <HAL_ADC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000610:	f001 fee2 	bl	80023d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000614:	2303      	movs	r3, #3
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_ADC1_Init+0x98>)
 8000626:	f002 fca5 	bl	8002f74 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000630:	f001 fed2 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200002dc 	.word	0x200002dc
 8000640:	40012000 	.word	0x40012000
 8000644:	0f000001 	.word	0x0f000001

08000648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <HAL_ADC_MspInit+0x7c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d127      	bne.n	80006ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6453      	str	r3, [r2, #68]	; 0x44
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006a2:	2308      	movs	r3, #8
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <HAL_ADC_MspInit+0x84>)
 80006b6:	f003 fb35 	bl	8003d24 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000

080006d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <MX_GPIO_Init+0xd4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a2d      	ldr	r2, [pc, #180]	; (80007a4 <MX_GPIO_Init+0xd4>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <MX_GPIO_Init+0xd4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a26      	ldr	r2, [pc, #152]	; (80007a4 <MX_GPIO_Init+0xd4>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_GPIO_Init+0xd4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800075c:	4812      	ldr	r0, [pc, #72]	; (80007a8 <MX_GPIO_Init+0xd8>)
 800075e:	f003 fca5 	bl	80040ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000768:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800076c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_GPIO_Init+0xdc>)
 800077a:	f003 fad3 	bl	8003d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 800077e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_GPIO_Init+0xd8>)
 8000798:	f003 fac4 	bl	8003d24 <HAL_GPIO_Init>

}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020400 	.word	0x40020400
 80007ac:	40020800 	.word	0x40020800

080007b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_I2C1_Init+0x78>)
 80007b6:	4a1d      	ldr	r2, [pc, #116]	; (800082c <MX_I2C1_Init+0x7c>)
 80007b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_I2C1_Init+0x78>)
 80007bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80007c0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_I2C1_Init+0x78>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_I2C1_Init+0x78>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_I2C1_Init+0x78>)
 80007d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_I2C1_Init+0x78>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2C1_Init+0x78>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_I2C1_Init+0x78>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_I2C1_Init+0x78>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ee:	480e      	ldr	r0, [pc, #56]	; (8000828 <MX_I2C1_Init+0x78>)
 80007f0:	f003 fc8e 	bl	8004110 <HAL_I2C_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80007fa:	f001 fded 	bl	80023d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007fe:	2100      	movs	r1, #0
 8000800:	4809      	ldr	r0, [pc, #36]	; (8000828 <MX_I2C1_Init+0x78>)
 8000802:	f004 f9fe 	bl	8004c02 <HAL_I2CEx_ConfigAnalogFilter>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 800080c:	f001 fde4 	bl	80023d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000810:	2100      	movs	r1, #0
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_I2C1_Init+0x78>)
 8000814:	f004 fa31 	bl	8004c7a <HAL_I2CEx_ConfigDigitalFilter>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 800081e:	f001 fddb 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000324 	.word	0x20000324
 800082c:	40005400 	.word	0x40005400

08000830 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a19      	ldr	r2, [pc, #100]	; (80008b4 <HAL_I2C_MspInit+0x84>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d12c      	bne.n	80008ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800086e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000874:	2312      	movs	r3, #18
 8000876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000878:	2301      	movs	r3, #1
 800087a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000880:	2304      	movs	r3, #4
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	480c      	ldr	r0, [pc, #48]	; (80008bc <HAL_I2C_MspInit+0x8c>)
 800088c:	f003 fa4a 	bl	8003d24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 800089a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800089e:	6413      	str	r3, [r2, #64]	; 0x40
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <HAL_I2C_MspInit+0x88>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	; 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40005400 	.word	0x40005400
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020400 	.word	0x40020400

080008c0 <__io_putchar>:
void Display3_line2(uint8_t *num);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 100);
 80008c8:	1d39      	adds	r1, r7, #4
 80008ca:	2364      	movs	r3, #100	; 0x64
 80008cc:	2201      	movs	r2, #1
 80008ce:	4804      	ldr	r0, [pc, #16]	; (80008e0 <__io_putchar+0x20>)
 80008d0:	f006 fc71 	bl	80071b6 <HAL_UART_Transmit>
	return ch;
 80008d4:	687b      	ldr	r3, [r7, #4]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000530 	.word	0x20000530

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b5b0      	push	{r4, r5, r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	int location = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
	uint8_t adc_point = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	72fb      	strb	r3, [r7, #11]


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f2:	f002 f953 	bl	8002b9c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f6:	f000 fa07 	bl	8000d08 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fa:	f7ff fee9 	bl	80006d0 <MX_GPIO_Init>
  MX_RTC_Init();
 80008fe:	f001 fd71 	bl	80023e4 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000902:	f002 f87b 	bl	80029fc <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000906:	f001 ff8d 	bl	8002824 <MX_TIM3_Init>
  MX_ADC1_Init();
 800090a:	f7ff fe4b 	bl	80005a4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800090e:	f002 f84b 	bl	80029a8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000912:	f7ff ff4d 	bl	80007b0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000916:	f001 ff0f 	bl	8002738 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800091a:	f000 fa67 	bl	8000dec <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091e:	f002 f93d 	bl	8002b9c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000922:	f000 f9f1 	bl	8000d08 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000926:	f7ff fed3 	bl	80006d0 <MX_GPIO_Init>
  MX_RTC_Init();
 800092a:	f001 fd5b 	bl	80023e4 <MX_RTC_Init>
  MX_USART3_UART_Init();
 800092e:	f002 f865 	bl	80029fc <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000932:	f001 ff77 	bl	8002824 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000936:	f7ff fe35 	bl	80005a4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800093a:	f002 f835 	bl	80029a8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800093e:	f7ff ff37 	bl	80007b0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000942:	f001 fef9 	bl	8002738 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000946:	f000 fa51 	bl	8000dec <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  MF_Init_fash();
 800094a:	f000 fa63 	bl	8000e14 <MF_Init_fash>



	init();
 800094e:	f000 fdbc 	bl	80014ca <init>
	HAL_TIM_Base_Init(&htim3);
 8000952:	4891      	ldr	r0, [pc, #580]	; (8000b98 <main+0x2b4>)
 8000954:	f005 fb36 	bl	8005fc4 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim3);
 8000958:	488f      	ldr	r0, [pc, #572]	; (8000b98 <main+0x2b4>)
 800095a:	f005 fb83 	bl	8006064 <HAL_TIM_Base_Start_IT>


	at.f = flashTime.alramFormat;
 800095e:	4b8f      	ldr	r3, [pc, #572]	; (8000b9c <main+0x2b8>)
 8000960:	79da      	ldrb	r2, [r3, #7]
 8000962:	4b8f      	ldr	r3, [pc, #572]	; (8000ba0 <main+0x2bc>)
 8000964:	701a      	strb	r2, [r3, #0]
	at.h = flashTime.alramHour;
 8000966:	4b8d      	ldr	r3, [pc, #564]	; (8000b9c <main+0x2b8>)
 8000968:	7a1a      	ldrb	r2, [r3, #8]
 800096a:	4b8d      	ldr	r3, [pc, #564]	; (8000ba0 <main+0x2bc>)
 800096c:	705a      	strb	r2, [r3, #1]
	at.m = flashTime.alramMinutes;
 800096e:	4b8b      	ldr	r3, [pc, #556]	; (8000b9c <main+0x2b8>)
 8000970:	7a5a      	ldrb	r2, [r3, #9]
 8000972:	4b8b      	ldr	r3, [pc, #556]	; (8000ba0 <main+0x2bc>)
 8000974:	709a      	strb	r2, [r3, #2]
	at.s = flashTime.alramSeconds;
 8000976:	4b89      	ldr	r3, [pc, #548]	; (8000b9c <main+0x2b8>)
 8000978:	7a9a      	ldrb	r2, [r3, #10]
 800097a:	4b89      	ldr	r3, [pc, #548]	; (8000ba0 <main+0x2bc>)
 800097c:	70da      	strb	r2, [r3, #3]


	sDate.Year = 22;
 800097e:	4b89      	ldr	r3, [pc, #548]	; (8000ba4 <main+0x2c0>)
 8000980:	2216      	movs	r2, #22
 8000982:	70da      	strb	r2, [r3, #3]
	sDate.Month = 6;
 8000984:	4b87      	ldr	r3, [pc, #540]	; (8000ba4 <main+0x2c0>)
 8000986:	2206      	movs	r2, #6
 8000988:	705a      	strb	r2, [r3, #1]
	sDate.Date = 20;
 800098a:	4b86      	ldr	r3, [pc, #536]	; (8000ba4 <main+0x2c0>)
 800098c:	2214      	movs	r2, #20
 800098e:	709a      	strb	r2, [r3, #2]
	sTime.TimeFormat = 0;
 8000990:	4b85      	ldr	r3, [pc, #532]	; (8000ba8 <main+0x2c4>)
 8000992:	2200      	movs	r2, #0
 8000994:	70da      	strb	r2, [r3, #3]
	sTime.Hours = 12;
 8000996:	4b84      	ldr	r3, [pc, #528]	; (8000ba8 <main+0x2c4>)
 8000998:	220c      	movs	r2, #12
 800099a:	701a      	strb	r2, [r3, #0]


	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800099c:	2200      	movs	r2, #0
 800099e:	4982      	ldr	r1, [pc, #520]	; (8000ba8 <main+0x2c4>)
 80009a0:	4882      	ldr	r0, [pc, #520]	; (8000bac <main+0x2c8>)
 80009a2:	f005 f887 	bl	8005ab4 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80009a6:	2200      	movs	r2, #0
 80009a8:	497e      	ldr	r1, [pc, #504]	; (8000ba4 <main+0x2c0>)
 80009aa:	4880      	ldr	r0, [pc, #512]	; (8000bac <main+0x2c8>)
 80009ac:	f005 f97a 	bl	8005ca4 <HAL_RTC_SetDate>
	memset(buf, 0, sizeof(buf));
 80009b0:	2219      	movs	r2, #25
 80009b2:	2100      	movs	r1, #0
 80009b4:	487e      	ldr	r0, [pc, #504]	; (8000bb0 <main+0x2cc>)
 80009b6:	f007 fbef 	bl	8008198 <memset>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		char alarmOnOff[2][2] = { "A", " " };
 80009ba:	4b7e      	ldr	r3, [pc, #504]	; (8000bb4 <main+0x2d0>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	607b      	str	r3, [r7, #4]
		//clock
		if (lcd_display_number == 0) {
 80009c0:	4b7d      	ldr	r3, [pc, #500]	; (8000bb8 <main+0x2d4>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	f040 808a 	bne.w	8000ade <main+0x1fa>
			//********************** cursor ****************************************
			bufferState();
 80009ca:	f000 fb69 	bl	80010a0 <bufferState>
			//********************* Display ** LINE 1 ******************************
			sprintf(buf, " %s   LCD Clock  ", alarmOnOff[alarmMode]);
 80009ce:	4b7b      	ldr	r3, [pc, #492]	; (8000bbc <main+0x2d8>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	1d3a      	adds	r2, r7, #4
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	461a      	mov	r2, r3
 80009da:	4979      	ldr	r1, [pc, #484]	; (8000bc0 <main+0x2dc>)
 80009dc:	4874      	ldr	r0, [pc, #464]	; (8000bb0 <main+0x2cc>)
 80009de:	f007 fca5 	bl	800832c <siprintf>
			LCD_SendCommand(LCD_ADDR, 0b10000000);
 80009e2:	2180      	movs	r1, #128	; 0x80
 80009e4:	204e      	movs	r0, #78	; 0x4e
 80009e6:	f000 fd15 	bl	8001414 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, buf);
 80009ea:	4971      	ldr	r1, [pc, #452]	; (8000bb0 <main+0x2cc>)
 80009ec:	204e      	movs	r0, #78	; 0x4e
 80009ee:	f000 fd52 	bl	8001496 <LCD_SendString>
			//********************* Display ** LINE 2 ******************************
			location = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
			while (lcd_display_number == 0) {
 80009f6:	e06d      	b.n	8000ad4 <main+0x1f0>
				HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80009f8:	2200      	movs	r2, #0
 80009fa:	496b      	ldr	r1, [pc, #428]	; (8000ba8 <main+0x2c4>)
 80009fc:	486b      	ldr	r0, [pc, #428]	; (8000bac <main+0x2c8>)
 80009fe:	f005 f8f3 	bl	8005be8 <HAL_RTC_GetTime>
				HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000a02:	2200      	movs	r2, #0
 8000a04:	4967      	ldr	r1, [pc, #412]	; (8000ba4 <main+0x2c0>)
 8000a06:	4869      	ldr	r0, [pc, #420]	; (8000bac <main+0x2c8>)
 8000a08:	f005 f9d0 	bl	8005dac <HAL_RTC_GetDate>
				HAL_UART_Transmit(&huart3, (uint8_t*) buf, sizeof(buf), 2000);
 8000a0c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a10:	2219      	movs	r2, #25
 8000a12:	4967      	ldr	r1, [pc, #412]	; (8000bb0 <main+0x2cc>)
 8000a14:	486b      	ldr	r0, [pc, #428]	; (8000bc4 <main+0x2e0>)
 8000a16:	f006 fbce 	bl	80071b6 <HAL_UART_Transmit>
				sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000a1a:	4b63      	ldr	r3, [pc, #396]	; (8000ba8 <main+0x2c4>)
 8000a1c:	78db      	ldrb	r3, [r3, #3]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4613      	mov	r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	4413      	add	r3, r2
 8000a26:	4a68      	ldr	r2, [pc, #416]	; (8000bc8 <main+0x2e4>)
 8000a28:	441a      	add	r2, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000a2a:	4b5f      	ldr	r3, [pc, #380]	; (8000ba8 <main+0x2c4>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
				sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000a2e:	4618      	mov	r0, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000a30:	4b5d      	ldr	r3, [pc, #372]	; (8000ba8 <main+0x2c4>)
 8000a32:	785b      	ldrb	r3, [r3, #1]
				sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000a34:	4619      	mov	r1, r3
						sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000a36:	4b5c      	ldr	r3, [pc, #368]	; (8000ba8 <main+0x2c4>)
 8000a38:	789b      	ldrb	r3, [r3, #2]
				sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000a3a:	9301      	str	r3, [sp, #4]
 8000a3c:	9100      	str	r1, [sp, #0]
 8000a3e:	4603      	mov	r3, r0
 8000a40:	4962      	ldr	r1, [pc, #392]	; (8000bcc <main+0x2e8>)
 8000a42:	485b      	ldr	r0, [pc, #364]	; (8000bb0 <main+0x2cc>)
 8000a44:	f007 fc72 	bl	800832c <siprintf>
				printf("\r\n");
 8000a48:	4861      	ldr	r0, [pc, #388]	; (8000bd0 <main+0x2ec>)
 8000a4a:	f007 fc33 	bl	80082b4 <puts>
				LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000a4e:	21c0      	movs	r1, #192	; 0xc0
 8000a50:	204e      	movs	r0, #78	; 0x4e
 8000a52:	f000 fcdf 	bl	8001414 <LCD_SendCommand>
				LCD_SendString(LCD_ADDR, buf);
 8000a56:	4956      	ldr	r1, [pc, #344]	; (8000bb0 <main+0x2cc>)
 8000a58:	204e      	movs	r0, #78	; 0x4e
 8000a5a:	f000 fd1c 	bl	8001496 <LCD_SendString>
				//**********************************************************************
				// 알람이 울릴 때 longClick 으로 종료할 수 있따.
				if (alarmMode == 0) {
 8000a5e:	4b57      	ldr	r3, [pc, #348]	; (8000bbc <main+0x2d8>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d136      	bne.n	8000ad4 <main+0x1f0>
					if (at.f == sTime.TimeFormat) {
 8000a66:	4b4e      	ldr	r3, [pc, #312]	; (8000ba0 <main+0x2bc>)
 8000a68:	781a      	ldrb	r2, [r3, #0]
 8000a6a:	4b4f      	ldr	r3, [pc, #316]	; (8000ba8 <main+0x2c4>)
 8000a6c:	78db      	ldrb	r3, [r3, #3]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d130      	bne.n	8000ad4 <main+0x1f0>
						if (at.h == sTime.Hours && at.m == sTime.Minutes
 8000a72:	4b4b      	ldr	r3, [pc, #300]	; (8000ba0 <main+0x2bc>)
 8000a74:	785a      	ldrb	r2, [r3, #1]
 8000a76:	4b4c      	ldr	r3, [pc, #304]	; (8000ba8 <main+0x2c4>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d12a      	bne.n	8000ad4 <main+0x1f0>
 8000a7e:	4b48      	ldr	r3, [pc, #288]	; (8000ba0 <main+0x2bc>)
 8000a80:	789a      	ldrb	r2, [r3, #2]
 8000a82:	4b49      	ldr	r3, [pc, #292]	; (8000ba8 <main+0x2c4>)
 8000a84:	785b      	ldrb	r3, [r3, #1]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d124      	bne.n	8000ad4 <main+0x1f0>
								&& at.s == sTime.Seconds) {
 8000a8a:	4b45      	ldr	r3, [pc, #276]	; (8000ba0 <main+0x2bc>)
 8000a8c:	78da      	ldrb	r2, [r3, #3]
 8000a8e:	4b46      	ldr	r3, [pc, #280]	; (8000ba8 <main+0x2c4>)
 8000a90:	789b      	ldrb	r3, [r3, #2]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d11e      	bne.n	8000ad4 <main+0x1f0>
							alarmMode = 1;
 8000a96:	4b49      	ldr	r3, [pc, #292]	; (8000bbc <main+0x2d8>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	601a      	str	r2, [r3, #0]
							while (longClick == 0) {
 8000a9c:	e001      	b.n	8000aa2 <main+0x1be>
								PlayToAlarm();
 8000a9e:	f001 fc07 	bl	80022b0 <PlayToAlarm>
							while (longClick == 0) {
 8000aa2:	4b4c      	ldr	r3, [pc, #304]	; (8000bd4 <main+0x2f0>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d0f9      	beq.n	8000a9e <main+0x1ba>

							}
							longClick = 0;
 8000aaa:	4b4a      	ldr	r3, [pc, #296]	; (8000bd4 <main+0x2f0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
							sprintf(buf, " %s   LCD Clock  ",
									alarmOnOff[alarmMode]);
 8000ab0:	4b42      	ldr	r3, [pc, #264]	; (8000bbc <main+0x2d8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	1d3a      	adds	r2, r7, #4
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	4413      	add	r3, r2
							sprintf(buf, " %s   LCD Clock  ",
 8000aba:	461a      	mov	r2, r3
 8000abc:	4940      	ldr	r1, [pc, #256]	; (8000bc0 <main+0x2dc>)
 8000abe:	483c      	ldr	r0, [pc, #240]	; (8000bb0 <main+0x2cc>)
 8000ac0:	f007 fc34 	bl	800832c <siprintf>
							LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000ac4:	2180      	movs	r1, #128	; 0x80
 8000ac6:	204e      	movs	r0, #78	; 0x4e
 8000ac8:	f000 fca4 	bl	8001414 <LCD_SendCommand>
							LCD_SendString(LCD_ADDR, buf);
 8000acc:	4938      	ldr	r1, [pc, #224]	; (8000bb0 <main+0x2cc>)
 8000ace:	204e      	movs	r0, #78	; 0x4e
 8000ad0:	f000 fce1 	bl	8001496 <LCD_SendString>
			while (lcd_display_number == 0) {
 8000ad4:	4b38      	ldr	r3, [pc, #224]	; (8000bb8 <main+0x2d4>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d08d      	beq.n	80009f8 <main+0x114>
 8000adc:	e76d      	b.n	80009ba <main+0xd6>
				}
				//**********************************************************************
			}
		}
		//set Time
		else if (lcd_display_number == 1) {
 8000ade:	4b36      	ldr	r3, [pc, #216]	; (8000bb8 <main+0x2d4>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d17c      	bne.n	8000be0 <main+0x2fc>
			//********************* Display ** LINE 1 ******************************
			sprintf(buf, " %s   Set Time   ", alarmOnOff[alarmMode]);
 8000ae6:	4b35      	ldr	r3, [pc, #212]	; (8000bbc <main+0x2d8>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	1d3a      	adds	r2, r7, #4
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	4413      	add	r3, r2
 8000af0:	461a      	mov	r2, r3
 8000af2:	4939      	ldr	r1, [pc, #228]	; (8000bd8 <main+0x2f4>)
 8000af4:	482e      	ldr	r0, [pc, #184]	; (8000bb0 <main+0x2cc>)
 8000af6:	f007 fc19 	bl	800832c <siprintf>
			LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000afa:	2180      	movs	r1, #128	; 0x80
 8000afc:	204e      	movs	r0, #78	; 0x4e
 8000afe:	f000 fc89 	bl	8001414 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, buf);
 8000b02:	492b      	ldr	r1, [pc, #172]	; (8000bb0 <main+0x2cc>)
 8000b04:	204e      	movs	r0, #78	; 0x4e
 8000b06:	f000 fcc6 	bl	8001496 <LCD_SendString>
			//********************* Display ** LINE 2 ******************************
			sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000b0a:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <main+0x2c4>)
 8000b0c:	78db      	ldrb	r3, [r3, #3]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4613      	mov	r3, r2
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	4a2c      	ldr	r2, [pc, #176]	; (8000bc8 <main+0x2e4>)
 8000b18:	441a      	add	r2, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000b1a:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <main+0x2c4>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
			sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000b1e:	4618      	mov	r0, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000b20:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <main+0x2c4>)
 8000b22:	785b      	ldrb	r3, [r3, #1]
			sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000b24:	4619      	mov	r1, r3
					sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000b26:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <main+0x2c4>)
 8000b28:	789b      	ldrb	r3, [r3, #2]
			sprintf(buf, "%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat],
 8000b2a:	9301      	str	r3, [sp, #4]
 8000b2c:	9100      	str	r1, [sp, #0]
 8000b2e:	4603      	mov	r3, r0
 8000b30:	4926      	ldr	r1, [pc, #152]	; (8000bcc <main+0x2e8>)
 8000b32:	481f      	ldr	r0, [pc, #124]	; (8000bb0 <main+0x2cc>)
 8000b34:	f007 fbfa 	bl	800832c <siprintf>
			LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000b38:	21c0      	movs	r1, #192	; 0xc0
 8000b3a:	204e      	movs	r0, #78	; 0x4e
 8000b3c:	f000 fc6a 	bl	8001414 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, buf);
 8000b40:	491b      	ldr	r1, [pc, #108]	; (8000bb0 <main+0x2cc>)
 8000b42:	204e      	movs	r0, #78	; 0x4e
 8000b44:	f000 fca7 	bl	8001496 <LCD_SendString>
			//********************** cursor ****************************************
			bufferState();
 8000b48:	f000 faaa 	bl	80010a0 <bufferState>
			location = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
			//***********************st 초기화 *******************************************
			st.f = sTime.TimeFormat;
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <main+0x2c4>)
 8000b52:	78da      	ldrb	r2, [r3, #3]
 8000b54:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <main+0x2f8>)
 8000b56:	701a      	strb	r2, [r3, #0]
			st.h = sTime.Hours;
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <main+0x2c4>)
 8000b5a:	781a      	ldrb	r2, [r3, #0]
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <main+0x2f8>)
 8000b5e:	705a      	strb	r2, [r3, #1]
			st.m = sTime.Minutes;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <main+0x2c4>)
 8000b62:	785a      	ldrb	r2, [r3, #1]
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <main+0x2f8>)
 8000b66:	709a      	strb	r2, [r3, #2]
			st.s = sTime.Seconds;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <main+0x2c4>)
 8000b6a:	789a      	ldrb	r2, [r3, #2]
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <main+0x2f8>)
 8000b6e:	70da      	strb	r2, [r3, #3]
			//**********************************************************************
			longClick = 0;
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <main+0x2f0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
			while (lcd_display_number == 1) {
 8000b76:	e009      	b.n	8000b8c <main+0x2a8>
				AdcSwitch(&adc_point, &location);
 8000b78:	f107 020c 	add.w	r2, r7, #12
 8000b7c:	f107 030b 	add.w	r3, r7, #11
 8000b80:	4611      	mov	r1, r2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 ff9a 	bl	8001abc <AdcSwitch>
				SaveSeting();
 8000b88:	f000 fce4 	bl	8001554 <SaveSeting>
			while (lcd_display_number == 1) {
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <main+0x2d4>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d0f1      	beq.n	8000b78 <main+0x294>
 8000b94:	e711      	b.n	80009ba <main+0xd6>
 8000b96:	bf00      	nop
 8000b98:	200004a4 	.word	0x200004a4
 8000b9c:	20000378 	.word	0x20000378
 8000ba0:	2000040c 	.word	0x2000040c
 8000ba4:	200003c8 	.word	0x200003c8
 8000ba8:	200003b4 	.word	0x200003b4
 8000bac:	20000438 	.word	0x20000438
 8000bb0:	200003cc 	.word	0x200003cc
 8000bb4:	08009658 	.word	0x08009658
 8000bb8:	200003b0 	.word	0x200003b0
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	080095e8 	.word	0x080095e8
 8000bc4:	20000530 	.word	0x20000530
 8000bc8:	20000004 	.word	0x20000004
 8000bcc:	080095fc 	.word	0x080095fc
 8000bd0:	08009614 	.word	0x08009614
 8000bd4:	200003a8 	.word	0x200003a8
 8000bd8:	08009618 	.word	0x08009618
 8000bdc:	20000408 	.word	0x20000408
			}
			//**********************************************************************
		}
		//alarm
		else if (lcd_display_number == 2) {
 8000be0:	4b3e      	ldr	r3, [pc, #248]	; (8000cdc <main+0x3f8>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d15e      	bne.n	8000ca6 <main+0x3c2>
			//********************* Display ** LINE 1 ******************************
			sprintf(buf, " %s   alarm      ", alarmOnOff[alarmMode]);
 8000be8:	4b3d      	ldr	r3, [pc, #244]	; (8000ce0 <main+0x3fc>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	1d3a      	adds	r2, r7, #4
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	4413      	add	r3, r2
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	493b      	ldr	r1, [pc, #236]	; (8000ce4 <main+0x400>)
 8000bf6:	483c      	ldr	r0, [pc, #240]	; (8000ce8 <main+0x404>)
 8000bf8:	f007 fb98 	bl	800832c <siprintf>
			LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	204e      	movs	r0, #78	; 0x4e
 8000c00:	f000 fc08 	bl	8001414 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, buf);
 8000c04:	4938      	ldr	r1, [pc, #224]	; (8000ce8 <main+0x404>)
 8000c06:	204e      	movs	r0, #78	; 0x4e
 8000c08:	f000 fc45 	bl	8001496 <LCD_SendString>
			//********************* Display ** LINE 2 ******************************
			sprintf(buf, "%s %02d:%02d:%02d %s ", ampm[at.f], at.h, at.m, at.s,
 8000c0c:	4b37      	ldr	r3, [pc, #220]	; (8000cec <main+0x408>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4613      	mov	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	4413      	add	r3, r2
 8000c18:	4a35      	ldr	r2, [pc, #212]	; (8000cf0 <main+0x40c>)
 8000c1a:	441a      	add	r2, r3
 8000c1c:	4b33      	ldr	r3, [pc, #204]	; (8000cec <main+0x408>)
 8000c1e:	785b      	ldrb	r3, [r3, #1]
 8000c20:	461d      	mov	r5, r3
 8000c22:	4b32      	ldr	r3, [pc, #200]	; (8000cec <main+0x408>)
 8000c24:	789b      	ldrb	r3, [r3, #2]
 8000c26:	4618      	mov	r0, r3
 8000c28:	4b30      	ldr	r3, [pc, #192]	; (8000cec <main+0x408>)
 8000c2a:	78db      	ldrb	r3, [r3, #3]
 8000c2c:	461c      	mov	r4, r3
					alarmSet[alarmMode]);
 8000c2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ce0 <main+0x3fc>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	492f      	ldr	r1, [pc, #188]	; (8000cf4 <main+0x410>)
 8000c36:	440b      	add	r3, r1
			sprintf(buf, "%s %02d:%02d:%02d %s ", ampm[at.f], at.h, at.m, at.s,
 8000c38:	9302      	str	r3, [sp, #8]
 8000c3a:	9401      	str	r4, [sp, #4]
 8000c3c:	9000      	str	r0, [sp, #0]
 8000c3e:	462b      	mov	r3, r5
 8000c40:	492d      	ldr	r1, [pc, #180]	; (8000cf8 <main+0x414>)
 8000c42:	4829      	ldr	r0, [pc, #164]	; (8000ce8 <main+0x404>)
 8000c44:	f007 fb72 	bl	800832c <siprintf>
			LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000c48:	21c0      	movs	r1, #192	; 0xc0
 8000c4a:	204e      	movs	r0, #78	; 0x4e
 8000c4c:	f000 fbe2 	bl	8001414 <LCD_SendCommand>
			LCD_SendString(LCD_ADDR, buf);
 8000c50:	4925      	ldr	r1, [pc, #148]	; (8000ce8 <main+0x404>)
 8000c52:	204e      	movs	r0, #78	; 0x4e
 8000c54:	f000 fc1f 	bl	8001496 <LCD_SendString>
			//********************** cursor ****************************************
			bufferState();
 8000c58:	f000 fa22 	bl	80010a0 <bufferState>
			location = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
			//***********************st 초기화 *******************************************
			st.f = at.f;
 8000c60:	4b22      	ldr	r3, [pc, #136]	; (8000cec <main+0x408>)
 8000c62:	781a      	ldrb	r2, [r3, #0]
 8000c64:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <main+0x418>)
 8000c66:	701a      	strb	r2, [r3, #0]
			st.h = at.h;
 8000c68:	4b20      	ldr	r3, [pc, #128]	; (8000cec <main+0x408>)
 8000c6a:	785a      	ldrb	r2, [r3, #1]
 8000c6c:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <main+0x418>)
 8000c6e:	705a      	strb	r2, [r3, #1]
			st.m = at.m;
 8000c70:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <main+0x408>)
 8000c72:	789a      	ldrb	r2, [r3, #2]
 8000c74:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <main+0x418>)
 8000c76:	709a      	strb	r2, [r3, #2]
			st.s = at.s;
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <main+0x408>)
 8000c7a:	78da      	ldrb	r2, [r3, #3]
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <main+0x418>)
 8000c7e:	70da      	strb	r2, [r3, #3]
			//**********************************************************************
			longClick = 0;
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <main+0x41c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
			while (lcd_display_number == 2) {
 8000c86:	e009      	b.n	8000c9c <main+0x3b8>
				AdcSwitch(&adc_point, &location);
 8000c88:	f107 020c 	add.w	r2, r7, #12
 8000c8c:	f107 030b 	add.w	r3, r7, #11
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 ff12 	bl	8001abc <AdcSwitch>
				SaveAlarm();
 8000c98:	f000 fc20 	bl	80014dc <SaveAlarm>
			while (lcd_display_number == 2) {
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <main+0x3f8>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d0f1      	beq.n	8000c88 <main+0x3a4>
 8000ca4:	e689      	b.n	80009ba <main+0xd6>
			}
		}
			//**********************************************************************
			else if (lcd_display_number == 3) {
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <main+0x3f8>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d10c      	bne.n	8000cc8 <main+0x3e4>
				//********************* Display ** LINE 1 ******************************
				Display3_line1();
 8000cae:	f000 f9ad 	bl	800100c <Display3_line1>
				//********************* Display ** LINE 2 ******************************
				while(lcd_display_number == 3){
 8000cb2:	e004      	b.n	8000cbe <main+0x3da>
					Display3_line2(&melody_number);
 8000cb4:	4813      	ldr	r0, [pc, #76]	; (8000d04 <main+0x420>)
 8000cb6:	f000 f9c3 	bl	8001040 <Display3_line2>
					Savemelody();
 8000cba:	f000 fc37 	bl	800152c <Savemelody>
				while(lcd_display_number == 3){
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <main+0x3f8>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d0f6      	beq.n	8000cb4 <main+0x3d0>
 8000cc6:	e678      	b.n	80009ba <main+0xd6>
				}

			}
			else if (lcd_display_number > 3)
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <main+0x3f8>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	f67f ae74 	bls.w	80009ba <main+0xd6>
				lcd_display_number = 0;
 8000cd2:	4b02      	ldr	r3, [pc, #8]	; (8000cdc <main+0x3f8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
	while (1) {
 8000cd8:	e66f      	b.n	80009ba <main+0xd6>
 8000cda:	bf00      	nop
 8000cdc:	200003b0 	.word	0x200003b0
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	0800962c 	.word	0x0800962c
 8000ce8:	200003cc 	.word	0x200003cc
 8000cec:	2000040c 	.word	0x2000040c
 8000cf0:	20000004 	.word	0x20000004
 8000cf4:	2000000c 	.word	0x2000000c
 8000cf8:	08009640 	.word	0x08009640
 8000cfc:	20000408 	.word	0x20000408
 8000d00:	200003a8 	.word	0x200003a8
 8000d04:	20000410 	.word	0x20000410

08000d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b094      	sub	sp, #80	; 0x50
 8000d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0e:	f107 0320 	add.w	r3, r7, #32
 8000d12:	2230      	movs	r2, #48	; 0x30
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f007 fa3e 	bl	8008198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <SystemClock_Config+0xdc>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	4a2b      	ldr	r2, [pc, #172]	; (8000de4 <SystemClock_Config+0xdc>)
 8000d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3c:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <SystemClock_Config+0xdc>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d48:	2300      	movs	r3, #0
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <SystemClock_Config+0xe0>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a25      	ldr	r2, [pc, #148]	; (8000de8 <SystemClock_Config+0xe0>)
 8000d52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <SystemClock_Config+0xe0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000d64:	2306      	movs	r3, #6
 8000d66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d70:	2310      	movs	r3, #16
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d74:	2302      	movs	r3, #2
 8000d76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d7c:	2308      	movs	r3, #8
 8000d7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000d80:	23b4      	movs	r3, #180	; 0xb4
 8000d82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d84:	2302      	movs	r3, #2
 8000d86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d88:	2304      	movs	r3, #4
 8000d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8c:	f107 0320 	add.w	r3, r7, #32
 8000d90:	4618      	mov	r0, r3
 8000d92:	f004 f801 	bl	8004d98 <HAL_RCC_OscConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d9c:	f001 fb1c 	bl	80023d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000da0:	f003 ffaa 	bl	8004cf8 <HAL_PWREx_EnableOverDrive>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000daa:	f001 fb15 	bl	80023d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dae:	230f      	movs	r3, #15
 8000db0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db2:	2302      	movs	r3, #2
 8000db4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dbe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	2105      	movs	r1, #5
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f004 fa5b 	bl	8005288 <HAL_RCC_ClockConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000dd8:	f001 fafe 	bl	80023d8 <Error_Handler>
  }
}
 8000ddc:	bf00      	nop
 8000dde:	3750      	adds	r7, #80	; 0x50
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40007000 	.word	0x40007000

08000dec <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2100      	movs	r1, #0
 8000df4:	2027      	movs	r0, #39	; 0x27
 8000df6:	f002 fbc6 	bl	8003586 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000dfa:	2027      	movs	r0, #39	; 0x27
 8000dfc:	f002 fbdf 	bl	80035be <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	2028      	movs	r0, #40	; 0x28
 8000e06:	f002 fbbe 	bl	8003586 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e0a:	2028      	movs	r0, #40	; 0x28
 8000e0c:	f002 fbd7 	bl	80035be <HAL_NVIC_EnableIRQ>
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <MF_Init_fash>:

/* USER CODE BEGIN 4 */
void MF_Init_fash()
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8000e18:	f002 fcd2 	bl	80037c0 <HAL_FLASH_Unlock>

	if (*((uint32_t*) 0x08104000) == DATA_32) {
 8000e1c:	4b5e      	ldr	r3, [pc, #376]	; (8000f98 <MF_Init_fash+0x184>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f241 0211 	movw	r2, #4113	; 0x1011
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d136      	bne.n	8000e96 <MF_Init_fash+0x82>

		FirstSector = GetSector(FLASH_USER_START_ADDR);
 8000e28:	f04f 6001 	mov.w	r0, #135266304	; 0x8100000
 8000e2c:	f001 f908 	bl	8002040 <GetSector>
 8000e30:	4603      	mov	r3, r0
 8000e32:	4a5a      	ldr	r2, [pc, #360]	; (8000f9c <MF_Init_fash+0x188>)
 8000e34:	6013      	str	r3, [r2, #0]
		NbOfSectors = 1;
 8000e36:	4b5a      	ldr	r3, [pc, #360]	; (8000fa0 <MF_Init_fash+0x18c>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000e3c:	4b59      	ldr	r3, [pc, #356]	; (8000fa4 <MF_Init_fash+0x190>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
		EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000e42:	4b58      	ldr	r3, [pc, #352]	; (8000fa4 <MF_Init_fash+0x190>)
 8000e44:	2202      	movs	r2, #2
 8000e46:	611a      	str	r2, [r3, #16]
		EraseInitStruct.Sector = FirstSector;
 8000e48:	4b54      	ldr	r3, [pc, #336]	; (8000f9c <MF_Init_fash+0x188>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a55      	ldr	r2, [pc, #340]	; (8000fa4 <MF_Init_fash+0x190>)
 8000e4e:	6093      	str	r3, [r2, #8]
		EraseInitStruct.NbSectors = NbOfSectors;
 8000e50:	4b53      	ldr	r3, [pc, #332]	; (8000fa0 <MF_Init_fash+0x18c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a53      	ldr	r2, [pc, #332]	; (8000fa4 <MF_Init_fash+0x190>)
 8000e56:	60d3      	str	r3, [r2, #12]

		flashTime.alramFormat = *((uint32_t*) 0x08100014);
 8000e58:	4b53      	ldr	r3, [pc, #332]	; (8000fa8 <MF_Init_fash+0x194>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b53      	ldr	r3, [pc, #332]	; (8000fac <MF_Init_fash+0x198>)
 8000e60:	71da      	strb	r2, [r3, #7]
		flashTime.alramHour = *((uint32_t*) 0x08100018);
 8000e62:	4b53      	ldr	r3, [pc, #332]	; (8000fb0 <MF_Init_fash+0x19c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	4b50      	ldr	r3, [pc, #320]	; (8000fac <MF_Init_fash+0x198>)
 8000e6a:	721a      	strb	r2, [r3, #8]
		flashTime.alramMinutes = *((uint32_t*) 0x0810001C);
 8000e6c:	4b51      	ldr	r3, [pc, #324]	; (8000fb4 <MF_Init_fash+0x1a0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4b4e      	ldr	r3, [pc, #312]	; (8000fac <MF_Init_fash+0x198>)
 8000e74:	725a      	strb	r2, [r3, #9]
		flashTime.alramSeconds = *((uint32_t*) 0x08100020);
 8000e76:	4b50      	ldr	r3, [pc, #320]	; (8000fb8 <MF_Init_fash+0x1a4>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	4b4b      	ldr	r3, [pc, #300]	; (8000fac <MF_Init_fash+0x198>)
 8000e7e:	729a      	strb	r2, [r3, #10]
		alarmMode = *((uint32_t*) 0x08100024);
 8000e80:	4b4e      	ldr	r3, [pc, #312]	; (8000fbc <MF_Init_fash+0x1a8>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b4e      	ldr	r3, [pc, #312]	; (8000fc0 <MF_Init_fash+0x1ac>)
 8000e88:	601a      	str	r2, [r3, #0]
		melody_number = *((uint32_t*) 0x08100028);
 8000e8a:	4b4e      	ldr	r3, [pc, #312]	; (8000fc4 <MF_Init_fash+0x1b0>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	4b4d      	ldr	r3, [pc, #308]	; (8000fc8 <MF_Init_fash+0x1b4>)
 8000e92:	701a      	strb	r2, [r3, #0]
 8000e94:	e07c      	b.n	8000f90 <MF_Init_fash+0x17c>

	} else {

		FirstSector = GetSector(FLASH_USER_START_ADDR);
 8000e96:	f04f 6001 	mov.w	r0, #135266304	; 0x8100000
 8000e9a:	f001 f8d1 	bl	8002040 <GetSector>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	4a3e      	ldr	r2, [pc, #248]	; (8000f9c <MF_Init_fash+0x188>)
 8000ea2:	6013      	str	r3, [r2, #0]
		// flash 메모리의 key 값은 다른 섹터에 저장되어있다. 따라서 사용 할 섹터 수도 2개
		NbOfSectors = 2;
 8000ea4:	4b3e      	ldr	r3, [pc, #248]	; (8000fa0 <MF_Init_fash+0x18c>)
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	601a      	str	r2, [r3, #0]
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000eaa:	4b3e      	ldr	r3, [pc, #248]	; (8000fa4 <MF_Init_fash+0x190>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
		EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000eb0:	4b3c      	ldr	r3, [pc, #240]	; (8000fa4 <MF_Init_fash+0x190>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	611a      	str	r2, [r3, #16]
		EraseInitStruct.Sector = FirstSector;
 8000eb6:	4b39      	ldr	r3, [pc, #228]	; (8000f9c <MF_Init_fash+0x188>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a3a      	ldr	r2, [pc, #232]	; (8000fa4 <MF_Init_fash+0x190>)
 8000ebc:	6093      	str	r3, [r2, #8]
		EraseInitStruct.NbSectors = NbOfSectors;
 8000ebe:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <MF_Init_fash+0x18c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a38      	ldr	r2, [pc, #224]	; (8000fa4 <MF_Init_fash+0x190>)
 8000ec4:	60d3      	str	r3, [r2, #12]

		if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 8000ec6:	4941      	ldr	r1, [pc, #260]	; (8000fcc <MF_Init_fash+0x1b8>)
 8000ec8:	4836      	ldr	r0, [pc, #216]	; (8000fa4 <MF_Init_fash+0x190>)
 8000eca:	f002 fdeb 	bl	8003aa4 <HAL_FLASHEx_Erase>

		}

		// key 값이 저장되었기 때문에 사용할 섹터도 1개로 바꾼다.
		NbOfSectors = 1;
 8000ece:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <MF_Init_fash+0x18c>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]
		EraseInitStruct.NbSectors = NbOfSectors;
 8000ed4:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <MF_Init_fash+0x18c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a32      	ldr	r2, [pc, #200]	; (8000fa4 <MF_Init_fash+0x190>)
 8000eda:	60d3      	str	r3, [r2, #12]

		Address = ADDR_FLASH_SECTOR_12;
 8000edc:	4b3c      	ldr	r3, [pc, #240]	; (8000fd0 <MF_Init_fash+0x1bc>)
 8000ede:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8000ee2:	601a      	str	r2, [r3, #0]

		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08104000),
 8000ee4:	f241 0211 	movw	r2, #4113	; 0x1011
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	492a      	ldr	r1, [pc, #168]	; (8000f98 <MF_Init_fash+0x184>)
 8000eee:	2002      	movs	r0, #2
 8000ef0:	f002 fc12 	bl	8003718 <HAL_FLASH_Program>
				((uint32_t) DATA_32));

		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100014), 0);
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	f04f 0300 	mov.w	r3, #0
 8000efc:	492a      	ldr	r1, [pc, #168]	; (8000fa8 <MF_Init_fash+0x194>)
 8000efe:	2002      	movs	r0, #2
 8000f00:	f002 fc0a 	bl	8003718 <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100018), 12);
 8000f04:	f04f 020c 	mov.w	r2, #12
 8000f08:	f04f 0300 	mov.w	r3, #0
 8000f0c:	4928      	ldr	r1, [pc, #160]	; (8000fb0 <MF_Init_fash+0x19c>)
 8000f0e:	2002      	movs	r0, #2
 8000f10:	f002 fc02 	bl	8003718 <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x0810001C), 0);
 8000f14:	f04f 0200 	mov.w	r2, #0
 8000f18:	f04f 0300 	mov.w	r3, #0
 8000f1c:	4925      	ldr	r1, [pc, #148]	; (8000fb4 <MF_Init_fash+0x1a0>)
 8000f1e:	2002      	movs	r0, #2
 8000f20:	f002 fbfa 	bl	8003718 <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100020), 0);
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	f04f 0300 	mov.w	r3, #0
 8000f2c:	4922      	ldr	r1, [pc, #136]	; (8000fb8 <MF_Init_fash+0x1a4>)
 8000f2e:	2002      	movs	r0, #2
 8000f30:	f002 fbf2 	bl	8003718 <HAL_FLASH_Program>

		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100024), 1); // alarmMode off
 8000f34:	f04f 0201 	mov.w	r2, #1
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	491f      	ldr	r1, [pc, #124]	; (8000fbc <MF_Init_fash+0x1a8>)
 8000f3e:	2002      	movs	r0, #2
 8000f40:	f002 fbea 	bl	8003718 <HAL_FLASH_Program>

		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100028), 1);
 8000f44:	f04f 0201 	mov.w	r2, #1
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	491d      	ldr	r1, [pc, #116]	; (8000fc4 <MF_Init_fash+0x1b0>)
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f002 fbe2 	bl	8003718 <HAL_FLASH_Program>

		flashTime.alramFormat = *((uint32_t*) 0x08100014);
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MF_Init_fash+0x194>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <MF_Init_fash+0x198>)
 8000f5c:	71da      	strb	r2, [r3, #7]
		flashTime.alramHour = *((uint32_t*) 0x08100018);
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MF_Init_fash+0x19c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <MF_Init_fash+0x198>)
 8000f66:	721a      	strb	r2, [r3, #8]
		flashTime.alramMinutes = *((uint32_t*) 0x0810001C);
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MF_Init_fash+0x1a0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MF_Init_fash+0x198>)
 8000f70:	725a      	strb	r2, [r3, #9]
		flashTime.alramSeconds = *((uint32_t*) 0x08100020);
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MF_Init_fash+0x1a4>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MF_Init_fash+0x198>)
 8000f7a:	729a      	strb	r2, [r3, #10]
		alarmMode = *((uint32_t*) 0x08100024);
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MF_Init_fash+0x1a8>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MF_Init_fash+0x1ac>)
 8000f84:	601a      	str	r2, [r3, #0]
		melody_number = *((uint32_t*) 0x08100028);
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <MF_Init_fash+0x1b0>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MF_Init_fash+0x1b4>)
 8000f8e:	701a      	strb	r2, [r3, #0]
	}

	HAL_FLASH_Lock();
 8000f90:	f002 fc38 	bl	8003804 <HAL_FLASH_Lock>
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	08104000 	.word	0x08104000
 8000f9c:	20000428 	.word	0x20000428
 8000fa0:	2000042c 	.word	0x2000042c
 8000fa4:	20000414 	.word	0x20000414
 8000fa8:	08100014 	.word	0x08100014
 8000fac:	20000378 	.word	0x20000378
 8000fb0:	08100018 	.word	0x08100018
 8000fb4:	0810001c 	.word	0x0810001c
 8000fb8:	08100020 	.word	0x08100020
 8000fbc:	08100024 	.word	0x08100024
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	08100028 	.word	0x08100028
 8000fc8:	20000410 	.word	0x20000410
 8000fcc:	20000434 	.word	0x20000434
 8000fd0:	20000430 	.word	0x20000430

08000fd4 <Display3_ADC_switch_select_melody_number>:



void Display3_ADC_switch_select_melody_number(uint8_t *num)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	if(ADC_flag == 3)
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <Display3_ADC_switch_select_melody_number+0x34>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d103      	bne.n	8000fec <Display3_ADC_switch_select_melody_number+0x18>
	{
		*num = 1;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
	}
	else if(ADC_flag == 4)
	{
		*num = 2;
	}
}
 8000fea:	e006      	b.n	8000ffa <Display3_ADC_switch_select_melody_number+0x26>
	else if(ADC_flag == 4)
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <Display3_ADC_switch_select_melody_number+0x34>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d102      	bne.n	8000ffa <Display3_ADC_switch_select_melody_number+0x26>
		*num = 2;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	701a      	strb	r2, [r3, #0]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000404 	.word	0x20000404

0800100c <Display3_line1>:

void Display3_line1()
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	memset(buf, 0, sizeof(buf));
 8001010:	2219      	movs	r2, #25
 8001012:	2100      	movs	r1, #0
 8001014:	4808      	ldr	r0, [pc, #32]	; (8001038 <Display3_line1+0x2c>)
 8001016:	f007 f8bf 	bl	8008198 <memset>
	sprintf(buf, " select melody  ");
 800101a:	4908      	ldr	r1, [pc, #32]	; (800103c <Display3_line1+0x30>)
 800101c:	4806      	ldr	r0, [pc, #24]	; (8001038 <Display3_line1+0x2c>)
 800101e:	f007 f985 	bl	800832c <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001022:	2180      	movs	r1, #128	; 0x80
 8001024:	204e      	movs	r0, #78	; 0x4e
 8001026:	f000 f9f5 	bl	8001414 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, buf);
 800102a:	4903      	ldr	r1, [pc, #12]	; (8001038 <Display3_line1+0x2c>)
 800102c:	204e      	movs	r0, #78	; 0x4e
 800102e:	f000 fa32 	bl	8001496 <LCD_SendString>
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200003cc 	.word	0x200003cc
 800103c:	0800965c 	.word	0x0800965c

08001040 <Display3_line2>:

void Display3_line2(uint8_t *num) // melodyNumber
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	memset(buf, 0, sizeof(buf));
 8001048:	2219      	movs	r2, #25
 800104a:	2100      	movs	r1, #0
 800104c:	4811      	ldr	r0, [pc, #68]	; (8001094 <Display3_line2+0x54>)
 800104e:	f007 f8a3 	bl	8008198 <memset>

	Display3_ADC_switch_select_melody_number(num);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffbe 	bl	8000fd4 <Display3_ADC_switch_select_melody_number>

	if(*num == 1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d104      	bne.n	800106a <Display3_line2+0x2a>
		sprintf(buf, "<-> 1.Bicycle    ");
 8001060:	490d      	ldr	r1, [pc, #52]	; (8001098 <Display3_line2+0x58>)
 8001062:	480c      	ldr	r0, [pc, #48]	; (8001094 <Display3_line2+0x54>)
 8001064:	f007 f962 	bl	800832c <siprintf>
 8001068:	e007      	b.n	800107a <Display3_line2+0x3a>
	else if(*num == 2)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d103      	bne.n	800107a <Display3_line2+0x3a>
		sprintf(buf, "<-> 2.underworld ");
 8001072:	490a      	ldr	r1, [pc, #40]	; (800109c <Display3_line2+0x5c>)
 8001074:	4807      	ldr	r0, [pc, #28]	; (8001094 <Display3_line2+0x54>)
 8001076:	f007 f959 	bl	800832c <siprintf>

	LCD_SendCommand(LCD_ADDR, 0b11000000);
 800107a:	21c0      	movs	r1, #192	; 0xc0
 800107c:	204e      	movs	r0, #78	; 0x4e
 800107e:	f000 f9c9 	bl	8001414 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, buf);
 8001082:	4904      	ldr	r1, [pc, #16]	; (8001094 <Display3_line2+0x54>)
 8001084:	204e      	movs	r0, #78	; 0x4e
 8001086:	f000 fa06 	bl	8001496 <LCD_SendString>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200003cc 	.word	0x200003cc
 8001098:	08009670 	.word	0x08009670
 800109c:	08009684 	.word	0x08009684

080010a0 <bufferState>:

void bufferState() {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	if (lcd_display_number == 2 || lcd_display_number == 1) {
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <bufferState+0x34>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d003      	beq.n	80010b4 <bufferState+0x14>
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <bufferState+0x34>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d108      	bne.n	80010c6 <bufferState+0x26>
		LCD_SendCommand(LCD_ADDR, 0b11000000);
 80010b4:	21c0      	movs	r1, #192	; 0xc0
 80010b6:	204e      	movs	r0, #78	; 0x4e
 80010b8:	f000 f9ac 	bl	8001414 <LCD_SendCommand>
		LCD_SendCommand(LCD_ADDR, 0b00001111);
 80010bc:	210f      	movs	r1, #15
 80010be:	204e      	movs	r0, #78	; 0x4e
 80010c0:	f000 f9a8 	bl	8001414 <LCD_SendCommand>
 80010c4:	e004      	b.n	80010d0 <bufferState+0x30>
	} else
		LCD_SendCommand(LCD_ADDR, 0b00001110);
 80010c6:	210e      	movs	r1, #14
 80010c8:	204e      	movs	r0, #78	; 0x4e
 80010ca:	f000 f9a3 	bl	8001414 <LCD_SendCommand>
}
 80010ce:	bf00      	nop
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200003b0 	.word	0x200003b0

080010d8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState pin;

	if (GPIO_Pin == GPIO_PIN_13) {
 80010e2:	88fb      	ldrh	r3, [r7, #6]
 80010e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010e8:	d156      	bne.n	8001198 <HAL_GPIO_EXTI_Callback+0xc0>
		current_time = HAL_GetTick();
 80010ea:	f001 fdbd 	bl	8002c68 <HAL_GetTick>
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <HAL_GPIO_EXTI_Callback+0xc8>)
 80010f4:	601a      	str	r2, [r3, #0]
		time_interval = current_time - last_time;
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <HAL_GPIO_EXTI_Callback+0xc8>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <HAL_GPIO_EXTI_Callback+0xcc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	4a29      	ldr	r2, [pc, #164]	; (80011a8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001102:	6013      	str	r3, [r2, #0]
		last_time = current_time;
 8001104:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a26      	ldr	r2, [pc, #152]	; (80011a4 <HAL_GPIO_EXTI_Callback+0xcc>)
 800110a:	6013      	str	r3, [r2, #0]

		pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800110c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001110:	4826      	ldr	r0, [pc, #152]	; (80011ac <HAL_GPIO_EXTI_Callback+0xd4>)
 8001112:	f002 ffb3 	bl	800407c <HAL_GPIO_ReadPin>
 8001116:	4603      	mov	r3, r0
 8001118:	73fb      	strb	r3, [r7, #15]

		if (time_interval <= 4) {
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <HAL_GPIO_EXTI_Callback+0xd0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b04      	cmp	r3, #4
 8001120:	dc07      	bgt.n	8001132 <HAL_GPIO_EXTI_Callback+0x5a>
			printf("Noise %d, %d\r\n", pin, time_interval);
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	4a20      	ldr	r2, [pc, #128]	; (80011a8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001126:	6812      	ldr	r2, [r2, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	4821      	ldr	r0, [pc, #132]	; (80011b0 <HAL_GPIO_EXTI_Callback+0xd8>)
 800112c:	f007 f83c 	bl	80081a8 <iprintf>
 8001130:	e00e      	b.n	8001150 <HAL_GPIO_EXTI_Callback+0x78>
		} else {

			click[1].time = click[0].time;
 8001132:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a1f      	ldr	r2, [pc, #124]	; (80011b4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001138:	6093      	str	r3, [r2, #8]
			click[1].level = click[0].level;
 800113a:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <HAL_GPIO_EXTI_Callback+0xdc>)
 800113c:	791a      	ldrb	r2, [r3, #4]
 800113e:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001140:	731a      	strb	r2, [r3, #12]

			click[0].time = time_interval;
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a1b      	ldr	r2, [pc, #108]	; (80011b4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001148:	6013      	str	r3, [r2, #0]
			click[0].level = pin;
 800114a:	4a1a      	ldr	r2, [pc, #104]	; (80011b4 <HAL_GPIO_EXTI_Callback+0xdc>)
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	7113      	strb	r3, [r2, #4]
		}
		if (click[0].level == GPIO_PIN_RESET && click[0].time >= LONG_CLICK_MIN) // long click
 8001150:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001152:	791b      	ldrb	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d10b      	bne.n	8001170 <HAL_GPIO_EXTI_Callback+0x98>
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <HAL_GPIO_EXTI_Callback+0xdc>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001160:	db06      	blt.n	8001170 <HAL_GPIO_EXTI_Callback+0x98>
		{
			printf("\r\nLong Key\r\n");
 8001162:	4815      	ldr	r0, [pc, #84]	; (80011b8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001164:	f007 f8a6 	bl	80082b4 <puts>
			longClick = 1;
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_GPIO_EXTI_Callback+0xe4>)
 800116a:	2201      	movs	r2, #1
 800116c:	701a      	strb	r2, [r3, #0]
				&& click[1].level == GPIO_PIN_SET) {
			printf("\r\nSelect Key, %d\r\n", click[0].time);
			lcd_display_number++;
		}
	}
}
 800116e:	e013      	b.n	8001198 <HAL_GPIO_EXTI_Callback+0xc0>
		} else if (click[0].level == GPIO_PIN_RESET
 8001170:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001172:	791b      	ldrb	r3, [r3, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d10f      	bne.n	8001198 <HAL_GPIO_EXTI_Callback+0xc0>
				&& click[1].level == GPIO_PIN_SET) {
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_GPIO_EXTI_Callback+0xdc>)
 800117a:	7b1b      	ldrb	r3, [r3, #12]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d10b      	bne.n	8001198 <HAL_GPIO_EXTI_Callback+0xc0>
			printf("\r\nSelect Key, %d\r\n", click[0].time);
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	480e      	ldr	r0, [pc, #56]	; (80011c0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001188:	f007 f80e 	bl	80081a8 <iprintf>
			lcd_display_number++;
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <HAL_GPIO_EXTI_Callback+0xec>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_GPIO_EXTI_Callback+0xec>)
 8001196:	701a      	strb	r2, [r3, #0]
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	2000039c 	.word	0x2000039c
 80011a4:	200003a4 	.word	0x200003a4
 80011a8:	200003a0 	.word	0x200003a0
 80011ac:	40020800 	.word	0x40020800
 80011b0:	08009698 	.word	0x08009698
 80011b4:	20000384 	.word	0x20000384
 80011b8:	080096a8 	.word	0x080096a8
 80011bc:	200003a8 	.word	0x200003a8
 80011c0:	080096b4 	.word	0x080096b4
 80011c4:	200003b0 	.word	0x200003b0

080011c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a29      	ldr	r2, [pc, #164]	; (800127c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d14c      	bne.n	8001274 <HAL_TIM_PeriodElapsedCallback+0xac>
		HAL_ADC_Start(&hadc1);
 80011da:	4829      	ldr	r0, [pc, #164]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80011dc:	f001 fdb8 	bl	8002d50 <HAL_ADC_Start>
		ADC_value = HAL_ADC_GetValue(&hadc1);
 80011e0:	4827      	ldr	r0, [pc, #156]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80011e2:	f001 feba 	bl	8002f5a <HAL_ADC_GetValue>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80011ec:	601a      	str	r2, [r3, #0]
		printf("ADC_value = %d\r\n", ADC_value);
 80011ee:	4b25      	ldr	r3, [pc, #148]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4619      	mov	r1, r3
 80011f4:	4824      	ldr	r0, [pc, #144]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80011f6:	f006 ffd7 	bl	80081a8 <iprintf>
		HAL_ADC_Stop(&hadc1);
 80011fa:	4821      	ldr	r0, [pc, #132]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80011fc:	f001 fe7a 	bl	8002ef4 <HAL_ADC_Stop>
		ADC_flag = 0;
 8001200:	4b22      	ldr	r3, [pc, #136]	; (800128c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
		//***************** UP ***********************************************
		if ((ADC_value <= 15) ) {
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	dc03      	bgt.n	8001216 <HAL_TIM_PeriodElapsedCallback+0x4e>
			ADC_flag = 1;
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001210:	2201      	movs	r2, #1
 8001212:	601a      	str	r2, [r3, #0]
		//***************** RIGHT **********************************************
		else if ((ADC_value >= 2920 && ADC_value <= 3010)) {
			ADC_flag = 4;
		}
	}
}
 8001214:	e02e      	b.n	8001274 <HAL_TIM_PeriodElapsedCallback+0xac>
		else if ((ADC_value >= 830 && ADC_value <= 870) ) {
 8001216:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f240 323d 	movw	r2, #829	; 0x33d
 800121e:	4293      	cmp	r3, r2
 8001220:	dd09      	ble.n	8001236 <HAL_TIM_PeriodElapsedCallback+0x6e>
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f240 3266 	movw	r2, #870	; 0x366
 800122a:	4293      	cmp	r3, r2
 800122c:	dc03      	bgt.n	8001236 <HAL_TIM_PeriodElapsedCallback+0x6e>
			ADC_flag = 2;
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001230:	2202      	movs	r2, #2
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	e01e      	b.n	8001274 <HAL_TIM_PeriodElapsedCallback+0xac>
		else if ((ADC_value >= 1910 && ADC_value <= 1960)) {
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f240 7275 	movw	r2, #1909	; 0x775
 800123e:	4293      	cmp	r3, r2
 8001240:	dd08      	ble.n	8001254 <HAL_TIM_PeriodElapsedCallback+0x8c>
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f5b3 6ff5 	cmp.w	r3, #1960	; 0x7a8
 800124a:	dc03      	bgt.n	8001254 <HAL_TIM_PeriodElapsedCallback+0x8c>
			ADC_flag = 3;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800124e:	2203      	movs	r2, #3
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	e00f      	b.n	8001274 <HAL_TIM_PeriodElapsedCallback+0xac>
		else if ((ADC_value >= 2920 && ADC_value <= 3010)) {
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f640 3267 	movw	r2, #2919	; 0xb67
 800125c:	4293      	cmp	r3, r2
 800125e:	dd09      	ble.n	8001274 <HAL_TIM_PeriodElapsedCallback+0xac>
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f640 32c2 	movw	r2, #3010	; 0xbc2
 8001268:	4293      	cmp	r3, r2
 800126a:	dc03      	bgt.n	8001274 <HAL_TIM_PeriodElapsedCallback+0xac>
			ADC_flag = 4;
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800126e:	2204      	movs	r2, #4
 8001270:	601a      	str	r2, [r3, #0]
}
 8001272:	e7ff      	b.n	8001274 <HAL_TIM_PeriodElapsedCallback+0xac>
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40000400 	.word	0x40000400
 8001280:	200002dc 	.word	0x200002dc
 8001284:	200003ac 	.word	0x200003ac
 8001288:	080096c8 	.word	0x080096c8
 800128c:	20000404 	.word	0x20000404

08001290 <I2C_Scan>:

void I2C_Scan() {
 8001290:	b5b0      	push	{r4, r5, r7, lr}
 8001292:	b098      	sub	sp, #96	; 0x60
 8001294:	af00      	add	r7, sp, #0
	char info[] = "Scanning I2C bus...\r\n";
 8001296:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <I2C_Scan+0xc0>)
 8001298:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800129c:	461d      	mov	r5, r3
 800129e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012a6:	6020      	str	r0, [r4, #0]
 80012a8:	3404      	adds	r4, #4
 80012aa:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) info, strlen(info), HAL_MAX_DELAY);
 80012ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7fe ff9d 	bl	80001f0 <strlen>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	4824      	ldr	r0, [pc, #144]	; (8001354 <I2C_Scan+0xc4>)
 80012c4:	f005 ff77 	bl	80071b6 <HAL_UART_Transmit>

	HAL_StatusTypeDef res;
	for (uint16_t i = 0; i < 128; i++) {
 80012c8:	2300      	movs	r3, #0
 80012ca:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80012ce:	e02f      	b.n	8001330 <I2C_Scan+0xa0>
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80012d0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	b299      	uxth	r1, r3
 80012d8:	230a      	movs	r3, #10
 80012da:	2201      	movs	r2, #1
 80012dc:	481e      	ldr	r0, [pc, #120]	; (8001358 <I2C_Scan+0xc8>)
 80012de:	f003 f959 	bl	8004594 <HAL_I2C_IsDeviceReady>
 80012e2:	4603      	mov	r3, r0
 80012e4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		if (res == HAL_OK) {
 80012e8:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d113      	bne.n	8001318 <I2C_Scan+0x88>
			char msg[64];
			snprintf(msg, sizeof(msg), "0x%02X", i);
 80012f0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80012f4:	1d38      	adds	r0, r7, #4
 80012f6:	4a19      	ldr	r2, [pc, #100]	; (800135c <I2C_Scan+0xcc>)
 80012f8:	2140      	movs	r1, #64	; 0x40
 80012fa:	f006 ffe3 	bl	80082c4 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4618      	mov	r0, r3
 8001302:	f7fe ff75 	bl	80001f0 <strlen>
 8001306:	4603      	mov	r3, r0
 8001308:	b29a      	uxth	r2, r3
 800130a:	1d39      	adds	r1, r7, #4
 800130c:	f04f 33ff 	mov.w	r3, #4294967295
 8001310:	4810      	ldr	r0, [pc, #64]	; (8001354 <I2C_Scan+0xc4>)
 8001312:	f005 ff50 	bl	80071b6 <HAL_UART_Transmit>
 8001316:	e006      	b.n	8001326 <I2C_Scan+0x96>
			HAL_MAX_DELAY);
		} else {
			HAL_UART_Transmit(&huart2, (uint8_t*) ".", 1, HAL_MAX_DELAY);
 8001318:	f04f 33ff 	mov.w	r3, #4294967295
 800131c:	2201      	movs	r2, #1
 800131e:	4910      	ldr	r1, [pc, #64]	; (8001360 <I2C_Scan+0xd0>)
 8001320:	480c      	ldr	r0, [pc, #48]	; (8001354 <I2C_Scan+0xc4>)
 8001322:	f005 ff48 	bl	80071b6 <HAL_UART_Transmit>
	for (uint16_t i = 0; i < 128; i++) {
 8001326:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800132a:	3301      	adds	r3, #1
 800132c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001330:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001334:	2b7f      	cmp	r3, #127	; 0x7f
 8001336:	d9cb      	bls.n	80012d0 <I2C_Scan+0x40>
		}
	}

	HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 8001338:	f04f 33ff 	mov.w	r3, #4294967295
 800133c:	2202      	movs	r2, #2
 800133e:	4909      	ldr	r1, [pc, #36]	; (8001364 <I2C_Scan+0xd4>)
 8001340:	4804      	ldr	r0, [pc, #16]	; (8001354 <I2C_Scan+0xc4>)
 8001342:	f005 ff38 	bl	80071b6 <HAL_UART_Transmit>
}
 8001346:	bf00      	nop
 8001348:	3760      	adds	r7, #96	; 0x60
 800134a:	46bd      	mov	sp, r7
 800134c:	bdb0      	pop	{r4, r5, r7, pc}
 800134e:	bf00      	nop
 8001350:	080096ec 	.word	0x080096ec
 8001354:	200004ec 	.word	0x200004ec
 8001358:	20000324 	.word	0x20000324
 800135c:	080096dc 	.word	0x080096dc
 8001360:	080096e4 	.word	0x080096e4
 8001364:	080096e8 	.word	0x080096e8

08001368 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af02      	add	r7, sp, #8
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
 8001372:	460b      	mov	r3, r1
 8001374:	71bb      	strb	r3, [r7, #6]
 8001376:	4613      	mov	r3, r2
 8001378:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	b299      	uxth	r1, r3
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	2201      	movs	r2, #1
 8001384:	4822      	ldr	r0, [pc, #136]	; (8001410 <LCD_SendInternal+0xa8>)
 8001386:	f003 f905 	bl	8004594 <HAL_I2C_IsDeviceReady>
 800138a:	4603      	mov	r3, r0
 800138c:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d000      	beq.n	8001396 <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8001394:	e7f1      	b.n	800137a <LCD_SendInternal+0x12>
			break;
 8001396:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 8001398:	79bb      	ldrb	r3, [r7, #6]
 800139a:	f023 030f 	bic.w	r3, r3, #15
 800139e:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 80013a0:	79bb      	ldrb	r3, [r7, #6]
 80013a2:	011b      	lsls	r3, r3, #4
 80013a4:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | BACKLIGHT | PIN_EN;
 80013a6:	7bba      	ldrb	r2, [r7, #14]
 80013a8:	797b      	ldrb	r3, [r7, #5]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	f043 030c 	orr.w	r3, r3, #12
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | BACKLIGHT;
 80013b6:	7bba      	ldrb	r2, [r7, #14]
 80013b8:	797b      	ldrb	r3, [r7, #5]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f043 0308 	orr.w	r3, r3, #8
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | BACKLIGHT | PIN_EN;
 80013c6:	7b7a      	ldrb	r2, [r7, #13]
 80013c8:	797b      	ldrb	r3, [r7, #5]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f043 030c 	orr.w	r3, r3, #12
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | BACKLIGHT;
 80013d6:	7b7a      	ldrb	r2, [r7, #13]
 80013d8:	797b      	ldrb	r3, [r7, #5]
 80013da:	4313      	orrs	r3, r2
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f043 0308 	orr.w	r3, r3, #8
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	b299      	uxth	r1, r3
 80013ea:	f107 0208 	add.w	r2, r7, #8
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2304      	movs	r3, #4
 80013f6:	4806      	ldr	r0, [pc, #24]	; (8001410 <LCD_SendInternal+0xa8>)
 80013f8:	f002 ffce 	bl	8004398 <HAL_I2C_Master_Transmit>
 80013fc:	4603      	mov	r3, r0
 80013fe:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8001400:	2005      	movs	r0, #5
 8001402:	f001 fc3d 	bl	8002c80 <HAL_Delay>
	return res;
 8001406:	7bfb      	ldrb	r3, [r7, #15]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000324 	.word	0x20000324

08001414 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	460a      	mov	r2, r1
 800141e:	71fb      	strb	r3, [r7, #7]
 8001420:	4613      	mov	r3, r2
 8001422:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 8001424:	79b9      	ldrb	r1, [r7, #6]
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	2200      	movs	r2, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ff9c 	bl	8001368 <LCD_SendInternal>
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	460a      	mov	r2, r1
 8001442:	71fb      	strb	r3, [r7, #7]
 8001444:	4613      	mov	r3, r2
 8001446:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, PIN_RS);
 8001448:	79b9      	ldrb	r1, [r7, #6]
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	2201      	movs	r2, #1
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff ff8a 	bl	8001368 <LCD_SendInternal>
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0b00110000);
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2130      	movs	r1, #48	; 0x30
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ffd2 	bl	8001414 <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0b00000010);
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	2102      	movs	r1, #2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ffcd 	bl	8001414 <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, 0b00001100);
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	210c      	movs	r1, #12
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ffc8 	bl	8001414 <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, 0b00000001);
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	2101      	movs	r1, #1
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ffc3 	bl	8001414 <LCD_SendCommand>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	6039      	str	r1, [r7, #0]
 80014a0:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 80014a2:	e009      	b.n	80014b8 <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	781a      	ldrb	r2, [r3, #0]
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ffc3 	bl	8001438 <LCD_SendData>
		str++;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	603b      	str	r3, [r7, #0]
	while (*str) {
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f1      	bne.n	80014a4 <LCD_SendString+0xe>
	}
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <init>:

void init() {
 80014ca:	b580      	push	{r7, lr}
 80014cc:	af00      	add	r7, sp, #0
	I2C_Scan();
 80014ce:	f7ff fedf 	bl	8001290 <I2C_Scan>
	LCD_Init(LCD_ADDR);
 80014d2:	204e      	movs	r0, #78	; 0x4e
 80014d4:	f7ff ffc2 	bl	800145c <LCD_Init>
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}

080014dc <SaveAlarm>:

void loop() {
	HAL_Delay(100);
}
void SaveAlarm() {
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	/***************** Save 기능 **************************/
	if (longClick == 1) {
 80014e0:	4b0e      	ldr	r3, [pc, #56]	; (800151c <SaveAlarm+0x40>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d117      	bne.n	8001518 <SaveAlarm+0x3c>
		at.f = st.f;
 80014e8:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <SaveAlarm+0x44>)
 80014ea:	781a      	ldrb	r2, [r3, #0]
 80014ec:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <SaveAlarm+0x48>)
 80014ee:	701a      	strb	r2, [r3, #0]
		at.h = st.h;
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <SaveAlarm+0x44>)
 80014f2:	785a      	ldrb	r2, [r3, #1]
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <SaveAlarm+0x48>)
 80014f6:	705a      	strb	r2, [r3, #1]
		at.m = st.m;
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <SaveAlarm+0x44>)
 80014fa:	789a      	ldrb	r2, [r3, #2]
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <SaveAlarm+0x48>)
 80014fe:	709a      	strb	r2, [r3, #2]
		at.s = st.s;
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <SaveAlarm+0x44>)
 8001502:	78da      	ldrb	r2, [r3, #3]
 8001504:	4b07      	ldr	r3, [pc, #28]	; (8001524 <SaveAlarm+0x48>)
 8001506:	70da      	strb	r2, [r3, #3]
		longClick = 0;
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <SaveAlarm+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
		lcd_display_number = 0;
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <SaveAlarm+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
		SetUpflash();
 8001514:	f000 fee0 	bl	80022d8 <SetUpflash>
	}

}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200003a8 	.word	0x200003a8
 8001520:	20000408 	.word	0x20000408
 8001524:	2000040c 	.word	0x2000040c
 8001528:	200003b0 	.word	0x200003b0

0800152c <Savemelody>:

void Savemelody()
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	if (longClick == 1) {
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <Savemelody+0x20>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d107      	bne.n	8001548 <Savemelody+0x1c>
		longClick = 0;
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <Savemelody+0x20>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
		lcd_display_number = 0;
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <Savemelody+0x24>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
		SetUpflash();
 8001544:	f000 fec8 	bl	80022d8 <SetUpflash>
	}
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200003a8 	.word	0x200003a8
 8001550:	200003b0 	.word	0x200003b0

08001554 <SaveSeting>:

void SaveSeting() {
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0

	/***************** Save 기능 **************************/
	if (longClick == 1) {
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <SaveSeting+0x50>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d11f      	bne.n	80015a0 <SaveSeting+0x4c>
		sTime.TimeFormat = st.f;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <SaveSeting+0x54>)
 8001562:	781a      	ldrb	r2, [r3, #0]
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <SaveSeting+0x58>)
 8001566:	70da      	strb	r2, [r3, #3]
		sTime.Hours = st.h;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <SaveSeting+0x54>)
 800156a:	785a      	ldrb	r2, [r3, #1]
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <SaveSeting+0x58>)
 800156e:	701a      	strb	r2, [r3, #0]
		sTime.Minutes = st.m;
 8001570:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <SaveSeting+0x54>)
 8001572:	789a      	ldrb	r2, [r3, #2]
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <SaveSeting+0x58>)
 8001576:	705a      	strb	r2, [r3, #1]
		sTime.Seconds = st.s;
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <SaveSeting+0x54>)
 800157a:	78da      	ldrb	r2, [r3, #3]
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <SaveSeting+0x58>)
 800157e:	709a      	strb	r2, [r3, #2]

		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001580:	2200      	movs	r2, #0
 8001582:	490a      	ldr	r1, [pc, #40]	; (80015ac <SaveSeting+0x58>)
 8001584:	480a      	ldr	r0, [pc, #40]	; (80015b0 <SaveSeting+0x5c>)
 8001586:	f004 fa95 	bl	8005ab4 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800158a:	2200      	movs	r2, #0
 800158c:	4909      	ldr	r1, [pc, #36]	; (80015b4 <SaveSeting+0x60>)
 800158e:	4808      	ldr	r0, [pc, #32]	; (80015b0 <SaveSeting+0x5c>)
 8001590:	f004 fb88 	bl	8005ca4 <HAL_RTC_SetDate>

		longClick = 0;
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <SaveSeting+0x50>)
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
		lcd_display_number = 0;
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <SaveSeting+0x64>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
	}
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200003a8 	.word	0x200003a8
 80015a8:	20000408 	.word	0x20000408
 80015ac:	200003b4 	.word	0x200003b4
 80015b0:	20000438 	.word	0x20000438
 80015b4:	200003c8 	.word	0x200003c8
 80015b8:	200003b0 	.word	0x200003b0

080015bc <SetTimeDown>:
void SetTimeDown(const int *location) {
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b089      	sub	sp, #36	; 0x24
 80015c0:	af04      	add	r7, sp, #16
 80015c2:	6078      	str	r0, [r7, #4]
	if (*location == 0) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d107      	bne.n	80015dc <SetTimeDown+0x20>
		st.f ^= 1;
 80015cc:	4b8e      	ldr	r3, [pc, #568]	; (8001808 <SetTimeDown+0x24c>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	f083 0301 	eor.w	r3, r3, #1
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b8c      	ldr	r3, [pc, #560]	; (8001808 <SetTimeDown+0x24c>)
 80015d8:	701a      	strb	r2, [r3, #0]
 80015da:	e0a7      	b.n	800172c <SetTimeDown+0x170>
	}
	else if (*location == 3){
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d116      	bne.n	8001612 <SetTimeDown+0x56>
		if(st.h >= 10) st.h -= 10;
 80015e4:	4b88      	ldr	r3, [pc, #544]	; (8001808 <SetTimeDown+0x24c>)
 80015e6:	785b      	ldrb	r3, [r3, #1]
 80015e8:	2b09      	cmp	r3, #9
 80015ea:	d906      	bls.n	80015fa <SetTimeDown+0x3e>
 80015ec:	4b86      	ldr	r3, [pc, #536]	; (8001808 <SetTimeDown+0x24c>)
 80015ee:	785b      	ldrb	r3, [r3, #1]
 80015f0:	3b0a      	subs	r3, #10
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b84      	ldr	r3, [pc, #528]	; (8001808 <SetTimeDown+0x24c>)
 80015f6:	705a      	strb	r2, [r3, #1]
 80015f8:	e098      	b.n	800172c <SetTimeDown+0x170>
		else if (st.h == 0)
 80015fa:	4b83      	ldr	r3, [pc, #524]	; (8001808 <SetTimeDown+0x24c>)
 80015fc:	785b      	ldrb	r3, [r3, #1]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d103      	bne.n	800160a <SetTimeDown+0x4e>
			st.h = 10;
 8001602:	4b81      	ldr	r3, [pc, #516]	; (8001808 <SetTimeDown+0x24c>)
 8001604:	220a      	movs	r2, #10
 8001606:	705a      	strb	r2, [r3, #1]
 8001608:	e090      	b.n	800172c <SetTimeDown+0x170>
		else
			st.h = 0;
 800160a:	4b7f      	ldr	r3, [pc, #508]	; (8001808 <SetTimeDown+0x24c>)
 800160c:	2200      	movs	r2, #0
 800160e:	705a      	strb	r2, [r3, #1]
 8001610:	e08c      	b.n	800172c <SetTimeDown+0x170>
	}
	else if (*location == 4) {
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b04      	cmp	r3, #4
 8001618:	d10e      	bne.n	8001638 <SetTimeDown+0x7c>
		if (st.h == 0) st.h = 12;
 800161a:	4b7b      	ldr	r3, [pc, #492]	; (8001808 <SetTimeDown+0x24c>)
 800161c:	785b      	ldrb	r3, [r3, #1]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d103      	bne.n	800162a <SetTimeDown+0x6e>
 8001622:	4b79      	ldr	r3, [pc, #484]	; (8001808 <SetTimeDown+0x24c>)
 8001624:	220c      	movs	r2, #12
 8001626:	705a      	strb	r2, [r3, #1]
 8001628:	e080      	b.n	800172c <SetTimeDown+0x170>
		else st.h -= 1;
 800162a:	4b77      	ldr	r3, [pc, #476]	; (8001808 <SetTimeDown+0x24c>)
 800162c:	785b      	ldrb	r3, [r3, #1]
 800162e:	3b01      	subs	r3, #1
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4b75      	ldr	r3, [pc, #468]	; (8001808 <SetTimeDown+0x24c>)
 8001634:	705a      	strb	r2, [r3, #1]
 8001636:	e079      	b.n	800172c <SetTimeDown+0x170>
	}
	else if (*location == 6) {
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b06      	cmp	r3, #6
 800163e:	d111      	bne.n	8001664 <SetTimeDown+0xa8>
		if (st.m < 10) st.m += 50;
 8001640:	4b71      	ldr	r3, [pc, #452]	; (8001808 <SetTimeDown+0x24c>)
 8001642:	789b      	ldrb	r3, [r3, #2]
 8001644:	2b09      	cmp	r3, #9
 8001646:	d806      	bhi.n	8001656 <SetTimeDown+0x9a>
 8001648:	4b6f      	ldr	r3, [pc, #444]	; (8001808 <SetTimeDown+0x24c>)
 800164a:	789b      	ldrb	r3, [r3, #2]
 800164c:	3332      	adds	r3, #50	; 0x32
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b6d      	ldr	r3, [pc, #436]	; (8001808 <SetTimeDown+0x24c>)
 8001652:	709a      	strb	r2, [r3, #2]
 8001654:	e06a      	b.n	800172c <SetTimeDown+0x170>
		else st.m -= 10;
 8001656:	4b6c      	ldr	r3, [pc, #432]	; (8001808 <SetTimeDown+0x24c>)
 8001658:	789b      	ldrb	r3, [r3, #2]
 800165a:	3b0a      	subs	r3, #10
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4b6a      	ldr	r3, [pc, #424]	; (8001808 <SetTimeDown+0x24c>)
 8001660:	709a      	strb	r2, [r3, #2]
 8001662:	e063      	b.n	800172c <SetTimeDown+0x170>
	}
	else if (*location == 7) {
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b07      	cmp	r3, #7
 800166a:	d11b      	bne.n	80016a4 <SetTimeDown+0xe8>
		if (st.m % 10 == 0) st.m += 9;
 800166c:	4b66      	ldr	r3, [pc, #408]	; (8001808 <SetTimeDown+0x24c>)
 800166e:	789a      	ldrb	r2, [r3, #2]
 8001670:	4b66      	ldr	r3, [pc, #408]	; (800180c <SetTimeDown+0x250>)
 8001672:	fba3 1302 	umull	r1, r3, r3, r2
 8001676:	08d9      	lsrs	r1, r3, #3
 8001678:	460b      	mov	r3, r1
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d106      	bne.n	8001696 <SetTimeDown+0xda>
 8001688:	4b5f      	ldr	r3, [pc, #380]	; (8001808 <SetTimeDown+0x24c>)
 800168a:	789b      	ldrb	r3, [r3, #2]
 800168c:	3309      	adds	r3, #9
 800168e:	b2da      	uxtb	r2, r3
 8001690:	4b5d      	ldr	r3, [pc, #372]	; (8001808 <SetTimeDown+0x24c>)
 8001692:	709a      	strb	r2, [r3, #2]
 8001694:	e04a      	b.n	800172c <SetTimeDown+0x170>
		else st.m--;
 8001696:	4b5c      	ldr	r3, [pc, #368]	; (8001808 <SetTimeDown+0x24c>)
 8001698:	789b      	ldrb	r3, [r3, #2]
 800169a:	3b01      	subs	r3, #1
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4b5a      	ldr	r3, [pc, #360]	; (8001808 <SetTimeDown+0x24c>)
 80016a0:	709a      	strb	r2, [r3, #2]
 80016a2:	e043      	b.n	800172c <SetTimeDown+0x170>
	}
	else if (*location == 9) {
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b09      	cmp	r3, #9
 80016aa:	d111      	bne.n	80016d0 <SetTimeDown+0x114>
		if (st.s < 10) st.s += 50;
 80016ac:	4b56      	ldr	r3, [pc, #344]	; (8001808 <SetTimeDown+0x24c>)
 80016ae:	78db      	ldrb	r3, [r3, #3]
 80016b0:	2b09      	cmp	r3, #9
 80016b2:	d806      	bhi.n	80016c2 <SetTimeDown+0x106>
 80016b4:	4b54      	ldr	r3, [pc, #336]	; (8001808 <SetTimeDown+0x24c>)
 80016b6:	78db      	ldrb	r3, [r3, #3]
 80016b8:	3332      	adds	r3, #50	; 0x32
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	4b52      	ldr	r3, [pc, #328]	; (8001808 <SetTimeDown+0x24c>)
 80016be:	70da      	strb	r2, [r3, #3]
 80016c0:	e034      	b.n	800172c <SetTimeDown+0x170>
		else st.s -= 10;
 80016c2:	4b51      	ldr	r3, [pc, #324]	; (8001808 <SetTimeDown+0x24c>)
 80016c4:	78db      	ldrb	r3, [r3, #3]
 80016c6:	3b0a      	subs	r3, #10
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4b4f      	ldr	r3, [pc, #316]	; (8001808 <SetTimeDown+0x24c>)
 80016cc:	70da      	strb	r2, [r3, #3]
 80016ce:	e02d      	b.n	800172c <SetTimeDown+0x170>
	}
	else if (*location == 10) {
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b0a      	cmp	r3, #10
 80016d6:	d11b      	bne.n	8001710 <SetTimeDown+0x154>
		if (st.s % 10 == 0) st.s += 9;
 80016d8:	4b4b      	ldr	r3, [pc, #300]	; (8001808 <SetTimeDown+0x24c>)
 80016da:	78da      	ldrb	r2, [r3, #3]
 80016dc:	4b4b      	ldr	r3, [pc, #300]	; (800180c <SetTimeDown+0x250>)
 80016de:	fba3 1302 	umull	r1, r3, r3, r2
 80016e2:	08d9      	lsrs	r1, r3, #3
 80016e4:	460b      	mov	r3, r1
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d106      	bne.n	8001702 <SetTimeDown+0x146>
 80016f4:	4b44      	ldr	r3, [pc, #272]	; (8001808 <SetTimeDown+0x24c>)
 80016f6:	78db      	ldrb	r3, [r3, #3]
 80016f8:	3309      	adds	r3, #9
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	4b42      	ldr	r3, [pc, #264]	; (8001808 <SetTimeDown+0x24c>)
 80016fe:	70da      	strb	r2, [r3, #3]
 8001700:	e014      	b.n	800172c <SetTimeDown+0x170>
		else st.s--;
 8001702:	4b41      	ldr	r3, [pc, #260]	; (8001808 <SetTimeDown+0x24c>)
 8001704:	78db      	ldrb	r3, [r3, #3]
 8001706:	3b01      	subs	r3, #1
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4b3f      	ldr	r3, [pc, #252]	; (8001808 <SetTimeDown+0x24c>)
 800170c:	70da      	strb	r2, [r3, #3]
 800170e:	e00d      	b.n	800172c <SetTimeDown+0x170>
	}
	else if (*location == 12 && lcd_display_number == 2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b0c      	cmp	r3, #12
 8001716:	d109      	bne.n	800172c <SetTimeDown+0x170>
 8001718:	4b3d      	ldr	r3, [pc, #244]	; (8001810 <SetTimeDown+0x254>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d105      	bne.n	800172c <SetTimeDown+0x170>
		alarmMode ^= 1;
 8001720:	4b3c      	ldr	r3, [pc, #240]	; (8001814 <SetTimeDown+0x258>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f083 0301 	eor.w	r3, r3, #1
 8001728:	4a3a      	ldr	r2, [pc, #232]	; (8001814 <SetTimeDown+0x258>)
 800172a:	6013      	str	r3, [r2, #0]


	//-------------------------------------------------------
	char format[3];
	if (st.f == 0)
 800172c:	4b36      	ldr	r3, [pc, #216]	; (8001808 <SetTimeDown+0x24c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d109      	bne.n	8001748 <SetTimeDown+0x18c>
		strcpy(format, "AM");
 8001734:	4a38      	ldr	r2, [pc, #224]	; (8001818 <SetTimeDown+0x25c>)
 8001736:	f107 0308 	add.w	r3, r7, #8
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	4611      	mov	r1, r2
 800173e:	8019      	strh	r1, [r3, #0]
 8001740:	3302      	adds	r3, #2
 8001742:	0c12      	lsrs	r2, r2, #16
 8001744:	701a      	strb	r2, [r3, #0]
 8001746:	e00c      	b.n	8001762 <SetTimeDown+0x1a6>
	else if (st.f == 1)
 8001748:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <SetTimeDown+0x24c>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d108      	bne.n	8001762 <SetTimeDown+0x1a6>
		strcpy(format, "PM");
 8001750:	4a32      	ldr	r2, [pc, #200]	; (800181c <SetTimeDown+0x260>)
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	4611      	mov	r1, r2
 800175a:	8019      	strh	r1, [r3, #0]
 800175c:	3302      	adds	r3, #2
 800175e:	0c12      	lsrs	r2, r2, #16
 8001760:	701a      	strb	r2, [r3, #0]
	/****************** Display *************************************/
	if (lcd_display_number == 1)
 8001762:	4b2b      	ldr	r3, [pc, #172]	; (8001810 <SetTimeDown+0x254>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d111      	bne.n	800178e <SetTimeDown+0x1d2>
		sprintf(temp, "%s %02d:%02d:%02d     ", format, st.h, st.m, st.s);
 800176a:	4b27      	ldr	r3, [pc, #156]	; (8001808 <SetTimeDown+0x24c>)
 800176c:	785b      	ldrb	r3, [r3, #1]
 800176e:	4618      	mov	r0, r3
 8001770:	4b25      	ldr	r3, [pc, #148]	; (8001808 <SetTimeDown+0x24c>)
 8001772:	789b      	ldrb	r3, [r3, #2]
 8001774:	4619      	mov	r1, r3
 8001776:	4b24      	ldr	r3, [pc, #144]	; (8001808 <SetTimeDown+0x24c>)
 8001778:	78db      	ldrb	r3, [r3, #3]
 800177a:	f107 0208 	add.w	r2, r7, #8
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	9100      	str	r1, [sp, #0]
 8001782:	4603      	mov	r3, r0
 8001784:	4926      	ldr	r1, [pc, #152]	; (8001820 <SetTimeDown+0x264>)
 8001786:	4827      	ldr	r0, [pc, #156]	; (8001824 <SetTimeDown+0x268>)
 8001788:	f006 fdd0 	bl	800832c <siprintf>
 800178c:	e01b      	b.n	80017c6 <SetTimeDown+0x20a>
	else if (lcd_display_number == 2)
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <SetTimeDown+0x254>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d117      	bne.n	80017c6 <SetTimeDown+0x20a>
		sprintf(temp, "%s %02d:%02d:%02d %s  ", format, st.h, st.m, st.s,
 8001796:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <SetTimeDown+0x24c>)
 8001798:	785b      	ldrb	r3, [r3, #1]
 800179a:	461c      	mov	r4, r3
 800179c:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <SetTimeDown+0x24c>)
 800179e:	789b      	ldrb	r3, [r3, #2]
 80017a0:	4619      	mov	r1, r3
 80017a2:	4b19      	ldr	r3, [pc, #100]	; (8001808 <SetTimeDown+0x24c>)
 80017a4:	78db      	ldrb	r3, [r3, #3]
 80017a6:	4618      	mov	r0, r3
				alarmSet[alarmMode]);
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <SetTimeDown+0x258>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4a1e      	ldr	r2, [pc, #120]	; (8001828 <SetTimeDown+0x26c>)
 80017b0:	4413      	add	r3, r2
		sprintf(temp, "%s %02d:%02d:%02d %s  ", format, st.h, st.m, st.s,
 80017b2:	f107 0208 	add.w	r2, r7, #8
 80017b6:	9302      	str	r3, [sp, #8]
 80017b8:	9001      	str	r0, [sp, #4]
 80017ba:	9100      	str	r1, [sp, #0]
 80017bc:	4623      	mov	r3, r4
 80017be:	491b      	ldr	r1, [pc, #108]	; (800182c <SetTimeDown+0x270>)
 80017c0:	4818      	ldr	r0, [pc, #96]	; (8001824 <SetTimeDown+0x268>)
 80017c2:	f006 fdb3 	bl	800832c <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 80017c6:	21c0      	movs	r1, #192	; 0xc0
 80017c8:	204e      	movs	r0, #78	; 0x4e
 80017ca:	f7ff fe23 	bl	8001414 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, temp);
 80017ce:	4915      	ldr	r1, [pc, #84]	; (8001824 <SetTimeDown+0x268>)
 80017d0:	204e      	movs	r0, #78	; 0x4e
 80017d2:	f7ff fe60 	bl	8001496 <LCD_SendString>

	/***************** SetTime 후 커서 되돌리기 **************************/
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 80017d6:	21c0      	movs	r1, #192	; 0xc0
 80017d8:	204e      	movs	r0, #78	; 0x4e
 80017da:	f7ff fe1b 	bl	8001414 <LCD_SendCommand>
	for (int j = 0; j < *location; j++) {
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	e006      	b.n	80017f2 <SetTimeDown+0x236>
		LCD_SendCommand(LCD_ADDR, 0b00010100);
 80017e4:	2114      	movs	r1, #20
 80017e6:	204e      	movs	r0, #78	; 0x4e
 80017e8:	f7ff fe14 	bl	8001414 <LCD_SendCommand>
	for (int j = 0; j < *location; j++) {
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3301      	adds	r3, #1
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	dbf3      	blt.n	80017e4 <SetTimeDown+0x228>
	}

}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	bd90      	pop	{r4, r7, pc}
 8001806:	bf00      	nop
 8001808:	20000408 	.word	0x20000408
 800180c:	cccccccd 	.word	0xcccccccd
 8001810:	200003b0 	.word	0x200003b0
 8001814:	20000000 	.word	0x20000000
 8001818:	08009704 	.word	0x08009704
 800181c:	08009708 	.word	0x08009708
 8001820:	080095fc 	.word	0x080095fc
 8001824:	200003e8 	.word	0x200003e8
 8001828:	2000000c 	.word	0x2000000c
 800182c:	0800970c 	.word	0x0800970c

08001830 <SetTimeUp>:

void SetTimeUp(const int *location) {
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b089      	sub	sp, #36	; 0x24
 8001834:	af04      	add	r7, sp, #16
 8001836:	6078      	str	r0, [r7, #4]
	if (*location == 0) {
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d107      	bne.n	8001850 <SetTimeUp+0x20>
		st.f ^= 1;
 8001840:	4b94      	ldr	r3, [pc, #592]	; (8001a94 <SetTimeUp+0x264>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	f083 0301 	eor.w	r3, r3, #1
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4b92      	ldr	r3, [pc, #584]	; (8001a94 <SetTimeUp+0x264>)
 800184c:	701a      	strb	r2, [r3, #0]
 800184e:	e0b3      	b.n	80019b8 <SetTimeUp+0x188>
	}
	else if (*location == 3) {
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b03      	cmp	r3, #3
 8001856:	d11a      	bne.n	800188e <SetTimeUp+0x5e>
		if(st.h > 2 && st.h != 12)
 8001858:	4b8e      	ldr	r3, [pc, #568]	; (8001a94 <SetTimeUp+0x264>)
 800185a:	785b      	ldrb	r3, [r3, #1]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d907      	bls.n	8001870 <SetTimeUp+0x40>
 8001860:	4b8c      	ldr	r3, [pc, #560]	; (8001a94 <SetTimeUp+0x264>)
 8001862:	785b      	ldrb	r3, [r3, #1]
 8001864:	2b0c      	cmp	r3, #12
 8001866:	d003      	beq.n	8001870 <SetTimeUp+0x40>
			st.h = 12;
 8001868:	4b8a      	ldr	r3, [pc, #552]	; (8001a94 <SetTimeUp+0x264>)
 800186a:	220c      	movs	r2, #12
 800186c:	705a      	strb	r2, [r3, #1]
 800186e:	e0a3      	b.n	80019b8 <SetTimeUp+0x188>
		else if (st.h == 12)
 8001870:	4b88      	ldr	r3, [pc, #544]	; (8001a94 <SetTimeUp+0x264>)
 8001872:	785b      	ldrb	r3, [r3, #1]
 8001874:	2b0c      	cmp	r3, #12
 8001876:	d103      	bne.n	8001880 <SetTimeUp+0x50>
			st.h = 0;
 8001878:	4b86      	ldr	r3, [pc, #536]	; (8001a94 <SetTimeUp+0x264>)
 800187a:	2200      	movs	r2, #0
 800187c:	705a      	strb	r2, [r3, #1]
 800187e:	e09b      	b.n	80019b8 <SetTimeUp+0x188>
		else
			st.h += 10;
 8001880:	4b84      	ldr	r3, [pc, #528]	; (8001a94 <SetTimeUp+0x264>)
 8001882:	785b      	ldrb	r3, [r3, #1]
 8001884:	330a      	adds	r3, #10
 8001886:	b2da      	uxtb	r2, r3
 8001888:	4b82      	ldr	r3, [pc, #520]	; (8001a94 <SetTimeUp+0x264>)
 800188a:	705a      	strb	r2, [r3, #1]
 800188c:	e094      	b.n	80019b8 <SetTimeUp+0x188>
	}
	else if (*location == 4) {
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b04      	cmp	r3, #4
 8001894:	d10e      	bne.n	80018b4 <SetTimeUp+0x84>
		if (st.h == 12)
 8001896:	4b7f      	ldr	r3, [pc, #508]	; (8001a94 <SetTimeUp+0x264>)
 8001898:	785b      	ldrb	r3, [r3, #1]
 800189a:	2b0c      	cmp	r3, #12
 800189c:	d103      	bne.n	80018a6 <SetTimeUp+0x76>
			st.h = 0;
 800189e:	4b7d      	ldr	r3, [pc, #500]	; (8001a94 <SetTimeUp+0x264>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	705a      	strb	r2, [r3, #1]
 80018a4:	e088      	b.n	80019b8 <SetTimeUp+0x188>
		else
			st.h += 1;
 80018a6:	4b7b      	ldr	r3, [pc, #492]	; (8001a94 <SetTimeUp+0x264>)
 80018a8:	785b      	ldrb	r3, [r3, #1]
 80018aa:	3301      	adds	r3, #1
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b79      	ldr	r3, [pc, #484]	; (8001a94 <SetTimeUp+0x264>)
 80018b0:	705a      	strb	r2, [r3, #1]
 80018b2:	e081      	b.n	80019b8 <SetTimeUp+0x188>

	} else if (*location == 6) {
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b06      	cmp	r3, #6
 80018ba:	d115      	bne.n	80018e8 <SetTimeUp+0xb8>
		if (st.m >= 50)
 80018bc:	4b75      	ldr	r3, [pc, #468]	; (8001a94 <SetTimeUp+0x264>)
 80018be:	789b      	ldrb	r3, [r3, #2]
 80018c0:	2b31      	cmp	r3, #49	; 0x31
 80018c2:	d906      	bls.n	80018d2 <SetTimeUp+0xa2>
			st.m -= 50;
 80018c4:	4b73      	ldr	r3, [pc, #460]	; (8001a94 <SetTimeUp+0x264>)
 80018c6:	789b      	ldrb	r3, [r3, #2]
 80018c8:	3b32      	subs	r3, #50	; 0x32
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	4b71      	ldr	r3, [pc, #452]	; (8001a94 <SetTimeUp+0x264>)
 80018ce:	709a      	strb	r2, [r3, #2]
 80018d0:	e072      	b.n	80019b8 <SetTimeUp+0x188>
		else if (st.m < 50) {
 80018d2:	4b70      	ldr	r3, [pc, #448]	; (8001a94 <SetTimeUp+0x264>)
 80018d4:	789b      	ldrb	r3, [r3, #2]
 80018d6:	2b31      	cmp	r3, #49	; 0x31
 80018d8:	d86e      	bhi.n	80019b8 <SetTimeUp+0x188>
			st.m += 10;
 80018da:	4b6e      	ldr	r3, [pc, #440]	; (8001a94 <SetTimeUp+0x264>)
 80018dc:	789b      	ldrb	r3, [r3, #2]
 80018de:	330a      	adds	r3, #10
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4b6c      	ldr	r3, [pc, #432]	; (8001a94 <SetTimeUp+0x264>)
 80018e4:	709a      	strb	r2, [r3, #2]
 80018e6:	e067      	b.n	80019b8 <SetTimeUp+0x188>
		}
	} else if (*location == 7) {
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b07      	cmp	r3, #7
 80018ee:	d11b      	bne.n	8001928 <SetTimeUp+0xf8>
		if (st.m % 10 == 9)
 80018f0:	4b68      	ldr	r3, [pc, #416]	; (8001a94 <SetTimeUp+0x264>)
 80018f2:	789a      	ldrb	r2, [r3, #2]
 80018f4:	4b68      	ldr	r3, [pc, #416]	; (8001a98 <SetTimeUp+0x268>)
 80018f6:	fba3 1302 	umull	r1, r3, r3, r2
 80018fa:	08d9      	lsrs	r1, r3, #3
 80018fc:	460b      	mov	r3, r1
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b09      	cmp	r3, #9
 800190a:	d106      	bne.n	800191a <SetTimeUp+0xea>
			st.m -= 9;
 800190c:	4b61      	ldr	r3, [pc, #388]	; (8001a94 <SetTimeUp+0x264>)
 800190e:	789b      	ldrb	r3, [r3, #2]
 8001910:	3b09      	subs	r3, #9
 8001912:	b2da      	uxtb	r2, r3
 8001914:	4b5f      	ldr	r3, [pc, #380]	; (8001a94 <SetTimeUp+0x264>)
 8001916:	709a      	strb	r2, [r3, #2]
 8001918:	e04e      	b.n	80019b8 <SetTimeUp+0x188>
		else
			st.m++;
 800191a:	4b5e      	ldr	r3, [pc, #376]	; (8001a94 <SetTimeUp+0x264>)
 800191c:	789b      	ldrb	r3, [r3, #2]
 800191e:	3301      	adds	r3, #1
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4b5c      	ldr	r3, [pc, #368]	; (8001a94 <SetTimeUp+0x264>)
 8001924:	709a      	strb	r2, [r3, #2]
 8001926:	e047      	b.n	80019b8 <SetTimeUp+0x188>
	} else if (*location == 9) {
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b09      	cmp	r3, #9
 800192e:	d115      	bne.n	800195c <SetTimeUp+0x12c>
		if (st.s >= 50)
 8001930:	4b58      	ldr	r3, [pc, #352]	; (8001a94 <SetTimeUp+0x264>)
 8001932:	78db      	ldrb	r3, [r3, #3]
 8001934:	2b31      	cmp	r3, #49	; 0x31
 8001936:	d906      	bls.n	8001946 <SetTimeUp+0x116>
			st.s -= 50;
 8001938:	4b56      	ldr	r3, [pc, #344]	; (8001a94 <SetTimeUp+0x264>)
 800193a:	78db      	ldrb	r3, [r3, #3]
 800193c:	3b32      	subs	r3, #50	; 0x32
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b54      	ldr	r3, [pc, #336]	; (8001a94 <SetTimeUp+0x264>)
 8001942:	70da      	strb	r2, [r3, #3]
 8001944:	e038      	b.n	80019b8 <SetTimeUp+0x188>
		else if (st.s < 50)
 8001946:	4b53      	ldr	r3, [pc, #332]	; (8001a94 <SetTimeUp+0x264>)
 8001948:	78db      	ldrb	r3, [r3, #3]
 800194a:	2b31      	cmp	r3, #49	; 0x31
 800194c:	d834      	bhi.n	80019b8 <SetTimeUp+0x188>
			st.s += 10;
 800194e:	4b51      	ldr	r3, [pc, #324]	; (8001a94 <SetTimeUp+0x264>)
 8001950:	78db      	ldrb	r3, [r3, #3]
 8001952:	330a      	adds	r3, #10
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4b4f      	ldr	r3, [pc, #316]	; (8001a94 <SetTimeUp+0x264>)
 8001958:	70da      	strb	r2, [r3, #3]
 800195a:	e02d      	b.n	80019b8 <SetTimeUp+0x188>
	} else if (*location == 10) {
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b0a      	cmp	r3, #10
 8001962:	d11b      	bne.n	800199c <SetTimeUp+0x16c>
		if (st.s % 10 == 9)
 8001964:	4b4b      	ldr	r3, [pc, #300]	; (8001a94 <SetTimeUp+0x264>)
 8001966:	78da      	ldrb	r2, [r3, #3]
 8001968:	4b4b      	ldr	r3, [pc, #300]	; (8001a98 <SetTimeUp+0x268>)
 800196a:	fba3 1302 	umull	r1, r3, r3, r2
 800196e:	08d9      	lsrs	r1, r3, #3
 8001970:	460b      	mov	r3, r1
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b09      	cmp	r3, #9
 800197e:	d106      	bne.n	800198e <SetTimeUp+0x15e>
			st.s -= 9;
 8001980:	4b44      	ldr	r3, [pc, #272]	; (8001a94 <SetTimeUp+0x264>)
 8001982:	78db      	ldrb	r3, [r3, #3]
 8001984:	3b09      	subs	r3, #9
 8001986:	b2da      	uxtb	r2, r3
 8001988:	4b42      	ldr	r3, [pc, #264]	; (8001a94 <SetTimeUp+0x264>)
 800198a:	70da      	strb	r2, [r3, #3]
 800198c:	e014      	b.n	80019b8 <SetTimeUp+0x188>
		else
			st.s++;
 800198e:	4b41      	ldr	r3, [pc, #260]	; (8001a94 <SetTimeUp+0x264>)
 8001990:	78db      	ldrb	r3, [r3, #3]
 8001992:	3301      	adds	r3, #1
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4b3f      	ldr	r3, [pc, #252]	; (8001a94 <SetTimeUp+0x264>)
 8001998:	70da      	strb	r2, [r3, #3]
 800199a:	e00d      	b.n	80019b8 <SetTimeUp+0x188>
	} else if (*location == 12 && lcd_display_number == 2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b0c      	cmp	r3, #12
 80019a2:	d109      	bne.n	80019b8 <SetTimeUp+0x188>
 80019a4:	4b3d      	ldr	r3, [pc, #244]	; (8001a9c <SetTimeUp+0x26c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d105      	bne.n	80019b8 <SetTimeUp+0x188>
		alarmMode ^= 1;
 80019ac:	4b3c      	ldr	r3, [pc, #240]	; (8001aa0 <SetTimeUp+0x270>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f083 0301 	eor.w	r3, r3, #1
 80019b4:	4a3a      	ldr	r2, [pc, #232]	; (8001aa0 <SetTimeUp+0x270>)
 80019b6:	6013      	str	r3, [r2, #0]
	char format[3];
	if (st.f == 0)
 80019b8:	4b36      	ldr	r3, [pc, #216]	; (8001a94 <SetTimeUp+0x264>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d109      	bne.n	80019d4 <SetTimeUp+0x1a4>
		strcpy(format, "AM");
 80019c0:	4a38      	ldr	r2, [pc, #224]	; (8001aa4 <SetTimeUp+0x274>)
 80019c2:	f107 0308 	add.w	r3, r7, #8
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	4611      	mov	r1, r2
 80019ca:	8019      	strh	r1, [r3, #0]
 80019cc:	3302      	adds	r3, #2
 80019ce:	0c12      	lsrs	r2, r2, #16
 80019d0:	701a      	strb	r2, [r3, #0]
 80019d2:	e00c      	b.n	80019ee <SetTimeUp+0x1be>
	else if (st.f == 1)
 80019d4:	4b2f      	ldr	r3, [pc, #188]	; (8001a94 <SetTimeUp+0x264>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d108      	bne.n	80019ee <SetTimeUp+0x1be>
		strcpy(format, "PM");
 80019dc:	4a32      	ldr	r2, [pc, #200]	; (8001aa8 <SetTimeUp+0x278>)
 80019de:	f107 0308 	add.w	r3, r7, #8
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	4611      	mov	r1, r2
 80019e6:	8019      	strh	r1, [r3, #0]
 80019e8:	3302      	adds	r3, #2
 80019ea:	0c12      	lsrs	r2, r2, #16
 80019ec:	701a      	strb	r2, [r3, #0]
/****************** Display *************************************/
	if (lcd_display_number == 1)
 80019ee:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <SetTimeUp+0x26c>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d111      	bne.n	8001a1a <SetTimeUp+0x1ea>
		sprintf(temp, "%s %02d:%02d:%02d     ", format, st.h, st.m, st.s);
 80019f6:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <SetTimeUp+0x264>)
 80019f8:	785b      	ldrb	r3, [r3, #1]
 80019fa:	4618      	mov	r0, r3
 80019fc:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <SetTimeUp+0x264>)
 80019fe:	789b      	ldrb	r3, [r3, #2]
 8001a00:	4619      	mov	r1, r3
 8001a02:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <SetTimeUp+0x264>)
 8001a04:	78db      	ldrb	r3, [r3, #3]
 8001a06:	f107 0208 	add.w	r2, r7, #8
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	9100      	str	r1, [sp, #0]
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4926      	ldr	r1, [pc, #152]	; (8001aac <SetTimeUp+0x27c>)
 8001a12:	4827      	ldr	r0, [pc, #156]	; (8001ab0 <SetTimeUp+0x280>)
 8001a14:	f006 fc8a 	bl	800832c <siprintf>
 8001a18:	e01b      	b.n	8001a52 <SetTimeUp+0x222>
	else if (lcd_display_number == 2)
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <SetTimeUp+0x26c>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d117      	bne.n	8001a52 <SetTimeUp+0x222>
		sprintf(temp, "%s %02d:%02d:%02d %s  ", format, st.h, st.m, st.s,
 8001a22:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <SetTimeUp+0x264>)
 8001a24:	785b      	ldrb	r3, [r3, #1]
 8001a26:	461c      	mov	r4, r3
 8001a28:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <SetTimeUp+0x264>)
 8001a2a:	789b      	ldrb	r3, [r3, #2]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <SetTimeUp+0x264>)
 8001a30:	78db      	ldrb	r3, [r3, #3]
 8001a32:	4618      	mov	r0, r3
				alarmSet[alarmMode]);
 8001a34:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <SetTimeUp+0x270>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4a1e      	ldr	r2, [pc, #120]	; (8001ab4 <SetTimeUp+0x284>)
 8001a3c:	4413      	add	r3, r2
		sprintf(temp, "%s %02d:%02d:%02d %s  ", format, st.h, st.m, st.s,
 8001a3e:	f107 0208 	add.w	r2, r7, #8
 8001a42:	9302      	str	r3, [sp, #8]
 8001a44:	9001      	str	r0, [sp, #4]
 8001a46:	9100      	str	r1, [sp, #0]
 8001a48:	4623      	mov	r3, r4
 8001a4a:	491b      	ldr	r1, [pc, #108]	; (8001ab8 <SetTimeUp+0x288>)
 8001a4c:	4818      	ldr	r0, [pc, #96]	; (8001ab0 <SetTimeUp+0x280>)
 8001a4e:	f006 fc6d 	bl	800832c <siprintf>
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001a52:	21c0      	movs	r1, #192	; 0xc0
 8001a54:	204e      	movs	r0, #78	; 0x4e
 8001a56:	f7ff fcdd 	bl	8001414 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, temp);
 8001a5a:	4915      	ldr	r1, [pc, #84]	; (8001ab0 <SetTimeUp+0x280>)
 8001a5c:	204e      	movs	r0, #78	; 0x4e
 8001a5e:	f7ff fd1a 	bl	8001496 <LCD_SendString>

	/***************** SetTime 후 커서 되돌리기 **************************/
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001a62:	21c0      	movs	r1, #192	; 0xc0
 8001a64:	204e      	movs	r0, #78	; 0x4e
 8001a66:	f7ff fcd5 	bl	8001414 <LCD_SendCommand>
	for (int j = 0; j < *location; j++) {
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	e006      	b.n	8001a7e <SetTimeUp+0x24e>
		LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001a70:	2114      	movs	r1, #20
 8001a72:	204e      	movs	r0, #78	; 0x4e
 8001a74:	f7ff fcce 	bl	8001414 <LCD_SendCommand>
	for (int j = 0; j < *location; j++) {
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	dbf3      	blt.n	8001a70 <SetTimeUp+0x240>
	}
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd90      	pop	{r4, r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000408 	.word	0x20000408
 8001a98:	cccccccd 	.word	0xcccccccd
 8001a9c:	200003b0 	.word	0x200003b0
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	08009704 	.word	0x08009704
 8001aa8:	08009708 	.word	0x08009708
 8001aac:	080095fc 	.word	0x080095fc
 8001ab0:	200003e8 	.word	0x200003e8
 8001ab4:	2000000c 	.word	0x2000000c
 8001ab8:	0800970c 	.word	0x0800970c

08001abc <AdcSwitch>:

void AdcSwitch(uint8_t *adc_point, int *location) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
	//***************** UP *************************************************
	if (ADC_flag == 1 && *adc_point != 1) {
 8001ac6:	4b76      	ldr	r3, [pc, #472]	; (8001ca0 <AdcSwitch+0x1e4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d110      	bne.n	8001af0 <AdcSwitch+0x34>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d00c      	beq.n	8001af0 <AdcSwitch+0x34>
		*adc_point = 1;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	701a      	strb	r2, [r3, #0]
		printf("ADC_value = %d\r\n", ADC_value);
 8001adc:	4b71      	ldr	r3, [pc, #452]	; (8001ca4 <AdcSwitch+0x1e8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4871      	ldr	r0, [pc, #452]	; (8001ca8 <AdcSwitch+0x1ec>)
 8001ae4:	f006 fb60 	bl	80081a8 <iprintf>
		SetTimeUp(location);
 8001ae8:	6838      	ldr	r0, [r7, #0]
 8001aea:	f7ff fea1 	bl	8001830 <SetTimeUp>
 8001aee:	e0c5      	b.n	8001c7c <AdcSwitch+0x1c0>
	}
	//***************** DOWN ***********************************************
	else if (ADC_flag == 2 && *adc_point != 2) {
 8001af0:	4b6b      	ldr	r3, [pc, #428]	; (8001ca0 <AdcSwitch+0x1e4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d110      	bne.n	8001b1a <AdcSwitch+0x5e>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d00c      	beq.n	8001b1a <AdcSwitch+0x5e>
		*adc_point = 2;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	701a      	strb	r2, [r3, #0]
		printf("ADC_value = %d\r\n", ADC_value);
 8001b06:	4b67      	ldr	r3, [pc, #412]	; (8001ca4 <AdcSwitch+0x1e8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4866      	ldr	r0, [pc, #408]	; (8001ca8 <AdcSwitch+0x1ec>)
 8001b0e:	f006 fb4b 	bl	80081a8 <iprintf>
		SetTimeDown(location);
 8001b12:	6838      	ldr	r0, [r7, #0]
 8001b14:	f7ff fd52 	bl	80015bc <SetTimeDown>
 8001b18:	e0b0      	b.n	8001c7c <AdcSwitch+0x1c0>
	}
	//****************** LEFT **********************************************
	else if (ADC_flag == 3  && *adc_point != 3) {
 8001b1a:	4b61      	ldr	r3, [pc, #388]	; (8001ca0 <AdcSwitch+0x1e4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d157      	bne.n	8001bd2 <AdcSwitch+0x116>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d053      	beq.n	8001bd2 <AdcSwitch+0x116>
		printf("ADC_value = %d\r\n", ADC_value);
 8001b2a:	4b5e      	ldr	r3, [pc, #376]	; (8001ca4 <AdcSwitch+0x1e8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	485d      	ldr	r0, [pc, #372]	; (8001ca8 <AdcSwitch+0x1ec>)
 8001b32:	f006 fb39 	bl	80081a8 <iprintf>
		*adc_point = 3;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2203      	movs	r2, #3
 8001b3a:	701a      	strb	r2, [r3, #0]
		//****************** LEFT **********************************************
		if (*location <= 0) {
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	dc10      	bgt.n	8001b66 <AdcSwitch+0xaa>
			for (int r = 0; r < 12; r++) {
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	e006      	b.n	8001b58 <AdcSwitch+0x9c>
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001b4a:	2114      	movs	r1, #20
 8001b4c:	204e      	movs	r0, #78	; 0x4e
 8001b4e:	f7ff fc61 	bl	8001414 <LCD_SendCommand>
			for (int r = 0; r < 12; r++) {
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3301      	adds	r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b0b      	cmp	r3, #11
 8001b5c:	ddf5      	ble.n	8001b4a <AdcSwitch+0x8e>
			}
			*location = 12;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	220c      	movs	r2, #12
 8001b62:	601a      	str	r2, [r3, #0]
		if (*location <= 0) {
 8001b64:	e08a      	b.n	8001c7c <AdcSwitch+0x1c0>
		}
		else {
			if (*location == 3) {
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d10c      	bne.n	8001b88 <AdcSwitch+0xcc>
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001b6e:	2110      	movs	r1, #16
 8001b70:	204e      	movs	r0, #78	; 0x4e
 8001b72:	f7ff fc4f 	bl	8001414 <LCD_SendCommand>
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001b76:	2110      	movs	r1, #16
 8001b78:	204e      	movs	r0, #78	; 0x4e
 8001b7a:	f7ff fc4b 	bl	8001414 <LCD_SendCommand>
				(*location) -= 2;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	1e9a      	subs	r2, r3, #2
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	601a      	str	r2, [r3, #0]
			}
			if (*location == 6 || *location == 9 || *location == 12) {
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b06      	cmp	r3, #6
 8001b8e:	d007      	beq.n	8001ba0 <AdcSwitch+0xe4>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b09      	cmp	r3, #9
 8001b96:	d003      	beq.n	8001ba0 <AdcSwitch+0xe4>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b0c      	cmp	r3, #12
 8001b9e:	d108      	bne.n	8001bb2 <AdcSwitch+0xf6>
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001ba0:	2110      	movs	r1, #16
 8001ba2:	204e      	movs	r0, #78	; 0x4e
 8001ba4:	f7ff fc36 	bl	8001414 <LCD_SendCommand>
				(*location) -= 1;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	1e5a      	subs	r2, r3, #1
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	601a      	str	r2, [r3, #0]
			}
			LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001bb2:	2110      	movs	r1, #16
 8001bb4:	204e      	movs	r0, #78	; 0x4e
 8001bb6:	f7ff fc2d 	bl	8001414 <LCD_SendCommand>
			(*location)--;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	1e5a      	subs	r2, r3, #1
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	601a      	str	r2, [r3, #0]
			printf("2||%d\r\n", *adc_point );
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4838      	ldr	r0, [pc, #224]	; (8001cac <AdcSwitch+0x1f0>)
 8001bcc:	f006 faec 	bl	80081a8 <iprintf>
		if (*location <= 0) {
 8001bd0:	e054      	b.n	8001c7c <AdcSwitch+0x1c0>
		}
	}
	//***************** RIGHT **********************************************
	else if (ADC_flag == 4  && *adc_point != 4){
 8001bd2:	4b33      	ldr	r3, [pc, #204]	; (8001ca0 <AdcSwitch+0x1e4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d150      	bne.n	8001c7c <AdcSwitch+0x1c0>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d04c      	beq.n	8001c7c <AdcSwitch+0x1c0>
		printf("ADC_value = %d\r\n", ADC_value);
 8001be2:	4b30      	ldr	r3, [pc, #192]	; (8001ca4 <AdcSwitch+0x1e8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4619      	mov	r1, r3
 8001be8:	482f      	ldr	r0, [pc, #188]	; (8001ca8 <AdcSwitch+0x1ec>)
 8001bea:	f006 fadd 	bl	80081a8 <iprintf>
		*adc_point = 4;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	701a      	strb	r2, [r3, #0]
		//***************** RIGHT **********************************************
		if (12 <= *location ) {
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b0b      	cmp	r3, #11
 8001bfa:	dd10      	ble.n	8001c1e <AdcSwitch+0x162>
			for (int l = 12; l > 0; l--) {
 8001bfc:	230c      	movs	r3, #12
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	e006      	b.n	8001c10 <AdcSwitch+0x154>
				LCD_SendCommand(LCD_ADDR, 0b00010000);
 8001c02:	2110      	movs	r1, #16
 8001c04:	204e      	movs	r0, #78	; 0x4e
 8001c06:	f7ff fc05 	bl	8001414 <LCD_SendCommand>
			for (int l = 12; l > 0; l--) {
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	dcf5      	bgt.n	8001c02 <AdcSwitch+0x146>
			}
			*location = 0;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	e02e      	b.n	8001c7c <AdcSwitch+0x1c0>
		} else {
			if (*location == 0) {
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10c      	bne.n	8001c40 <AdcSwitch+0x184>
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001c26:	2114      	movs	r1, #20
 8001c28:	204e      	movs	r0, #78	; 0x4e
 8001c2a:	f7ff fbf3 	bl	8001414 <LCD_SendCommand>
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001c2e:	2114      	movs	r1, #20
 8001c30:	204e      	movs	r0, #78	; 0x4e
 8001c32:	f7ff fbef 	bl	8001414 <LCD_SendCommand>
				(*location) += 2;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	1c9a      	adds	r2, r3, #2
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	601a      	str	r2, [r3, #0]
			}
			if (*location == 4 || *location == 7 || *location == 10) {
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d007      	beq.n	8001c58 <AdcSwitch+0x19c>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b07      	cmp	r3, #7
 8001c4e:	d003      	beq.n	8001c58 <AdcSwitch+0x19c>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b0a      	cmp	r3, #10
 8001c56:	d108      	bne.n	8001c6a <AdcSwitch+0x1ae>
				LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001c58:	2114      	movs	r1, #20
 8001c5a:	204e      	movs	r0, #78	; 0x4e
 8001c5c:	f7ff fbda 	bl	8001414 <LCD_SendCommand>
				(*location) += 1;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	1c5a      	adds	r2, r3, #1
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	601a      	str	r2, [r3, #0]
			}
			LCD_SendCommand(LCD_ADDR, 0b00010100);
 8001c6a:	2114      	movs	r1, #20
 8001c6c:	204e      	movs	r0, #78	; 0x4e
 8001c6e:	f7ff fbd1 	bl	8001414 <LCD_SendCommand>
			(*location)++;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	601a      	str	r2, [r3, #0]

		}
	}
	if (ADC_value > RIGHT_KEY_MAX  && *adc_point != 0) {
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <AdcSwitch+0x1e8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f640 32c2 	movw	r2, #3010	; 0xbc2
 8001c84:	4293      	cmp	r3, r2
 8001c86:	dd06      	ble.n	8001c96 <AdcSwitch+0x1da>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <AdcSwitch+0x1da>
		*adc_point = 0;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
	}
//**********************************************************************

}
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000404 	.word	0x20000404
 8001ca4:	200003ac 	.word	0x200003ac
 8001ca8:	080096c8 	.word	0x080096c8
 8001cac:	08009724 	.word	0x08009724

08001cb0 <Bicyclemelody>:

void Bicyclemelody() {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	486b      	ldr	r0, [pc, #428]	; (8001e68 <Bicyclemelody+0x1b8>)
 8001cba:	f004 fa9d 	bl	80061f8 <HAL_TIM_PWM_Start>
	for (int i = 0; i < bell_length; i++) {
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	e029      	b.n	8001d18 <Bicyclemelody+0x68>
		if (longClick == 0) {
 8001cc4:	4b69      	ldr	r3, [pc, #420]	; (8001e6c <Bicyclemelody+0x1bc>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d122      	bne.n	8001d12 <Bicyclemelody+0x62>
			TIM2->ARR = bicycle[i];
 8001ccc:	4a68      	ldr	r2, [pc, #416]	; (8001e70 <Bicyclemelody+0x1c0>)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001cd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cd8:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM2->CCR1 = TIM2->ARR / VOLUME;
 8001cda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ce4:	4963      	ldr	r1, [pc, #396]	; (8001e74 <Bicyclemelody+0x1c4>)
 8001ce6:	fba1 1303 	umull	r1, r3, r1, r3
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_Delay(interval[i]);
 8001cee:	4a62      	ldr	r2, [pc, #392]	; (8001e78 <Bicyclemelody+0x1c8>)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 ffc2 	bl	8002c80 <HAL_Delay>
			TIM2->CCR1 = 0;
 8001cfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d00:	2200      	movs	r2, #0
 8001d02:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(mute[i]);
 8001d04:	4a5d      	ldr	r2, [pc, #372]	; (8001e7c <Bicyclemelody+0x1cc>)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f000 ffb7 	bl	8002c80 <HAL_Delay>
	for (int i = 0; i < bell_length; i++) {
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	3301      	adds	r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	4b59      	ldr	r3, [pc, #356]	; (8001e80 <Bicyclemelody+0x1d0>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4293      	cmp	r3, r2
 8001d22:	dbcf      	blt.n	8001cc4 <Bicyclemelody+0x14>
		}
	}
	for (int i = 0; i < bell_length_2; i++) {
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	e029      	b.n	8001d7e <Bicyclemelody+0xce>
		if (longClick == 0) {
 8001d2a:	4b50      	ldr	r3, [pc, #320]	; (8001e6c <Bicyclemelody+0x1bc>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d122      	bne.n	8001d78 <Bicyclemelody+0xc8>
			TIM2->ARR = bicycle_2[i];
 8001d32:	4a54      	ldr	r2, [pc, #336]	; (8001e84 <Bicyclemelody+0x1d4>)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d3e:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM2->CCR1 = TIM2->ARR / VOLUME;
 8001d40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d4a:	494a      	ldr	r1, [pc, #296]	; (8001e74 <Bicyclemelody+0x1c4>)
 8001d4c:	fba1 1303 	umull	r1, r3, r1, r3
 8001d50:	095b      	lsrs	r3, r3, #5
 8001d52:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_Delay(interval_2[i]);
 8001d54:	4a4c      	ldr	r2, [pc, #304]	; (8001e88 <Bicyclemelody+0x1d8>)
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 ff8f 	bl	8002c80 <HAL_Delay>
			TIM2->CCR1 = 0;
 8001d62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d66:	2200      	movs	r2, #0
 8001d68:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(mute_2[i]);
 8001d6a:	4a48      	ldr	r2, [pc, #288]	; (8001e8c <Bicyclemelody+0x1dc>)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 ff84 	bl	8002c80 <HAL_Delay>
	for (int i = 0; i < bell_length_2; i++) {
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	4b44      	ldr	r3, [pc, #272]	; (8001e90 <Bicyclemelody+0x1e0>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	4293      	cmp	r3, r2
 8001d88:	dbcf      	blt.n	8001d2a <Bicyclemelody+0x7a>
		}
	}
	for (int i = 0; i < bell_length_3; i++) {
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	e029      	b.n	8001de4 <Bicyclemelody+0x134>
		if (longClick == 0) {
 8001d90:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <Bicyclemelody+0x1bc>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d122      	bne.n	8001dde <Bicyclemelody+0x12e>
			TIM2->ARR = bicycle_3[i];
 8001d98:	4a3e      	ldr	r2, [pc, #248]	; (8001e94 <Bicyclemelody+0x1e4>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001da0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001da4:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM2->CCR1 = TIM2->ARR / VOLUME;
 8001da6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001db0:	4930      	ldr	r1, [pc, #192]	; (8001e74 <Bicyclemelody+0x1c4>)
 8001db2:	fba1 1303 	umull	r1, r3, r1, r3
 8001db6:	095b      	lsrs	r3, r3, #5
 8001db8:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_Delay(interval_3[i]);
 8001dba:	4a37      	ldr	r2, [pc, #220]	; (8001e98 <Bicyclemelody+0x1e8>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 ff5c 	bl	8002c80 <HAL_Delay>
			TIM2->CCR1 = 0;
 8001dc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dcc:	2200      	movs	r2, #0
 8001dce:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(mute_3[i]);
 8001dd0:	4a32      	ldr	r2, [pc, #200]	; (8001e9c <Bicyclemelody+0x1ec>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 ff51 	bl	8002c80 <HAL_Delay>
	for (int i = 0; i < bell_length_3; i++) {
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3301      	adds	r3, #1
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <Bicyclemelody+0x1f0>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4293      	cmp	r3, r2
 8001dee:	dbcf      	blt.n	8001d90 <Bicyclemelody+0xe0>
		}
	}
	for (int i = 0; i < bell_length_4; i++) {
 8001df0:	2300      	movs	r3, #0
 8001df2:	603b      	str	r3, [r7, #0]
 8001df4:	e029      	b.n	8001e4a <Bicyclemelody+0x19a>
		if (longClick == 0) {
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <Bicyclemelody+0x1bc>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d122      	bne.n	8001e44 <Bicyclemelody+0x194>
			TIM2->ARR = bicycle_4[i];
 8001dfe:	4a29      	ldr	r2, [pc, #164]	; (8001ea4 <Bicyclemelody+0x1f4>)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001e06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e0a:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM2->CCR1 = TIM2->ARR / VOLUME;
 8001e0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e16:	4917      	ldr	r1, [pc, #92]	; (8001e74 <Bicyclemelody+0x1c4>)
 8001e18:	fba1 1303 	umull	r1, r3, r1, r3
 8001e1c:	095b      	lsrs	r3, r3, #5
 8001e1e:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_Delay(interval_4[i]);
 8001e20:	4a21      	ldr	r2, [pc, #132]	; (8001ea8 <Bicyclemelody+0x1f8>)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 ff29 	bl	8002c80 <HAL_Delay>
			TIM2->CCR1 = 0;
 8001e2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e32:	2200      	movs	r2, #0
 8001e34:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(mute_4[i]);
 8001e36:	4a1d      	ldr	r2, [pc, #116]	; (8001eac <Bicyclemelody+0x1fc>)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 ff1e 	bl	8002c80 <HAL_Delay>
	for (int i = 0; i < bell_length_4; i++) {
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	3301      	adds	r3, #1
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <Bicyclemelody+0x200>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	4293      	cmp	r3, r2
 8001e54:	dbcf      	blt.n	8001df6 <Bicyclemelody+0x146>
		}
	}
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001e56:	2100      	movs	r1, #0
 8001e58:	4803      	ldr	r0, [pc, #12]	; (8001e68 <Bicyclemelody+0x1b8>)
 8001e5a:	f004 fa95 	bl	8006388 <HAL_TIM_PWM_Stop>
}
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2000045c 	.word	0x2000045c
 8001e6c:	200003a8 	.word	0x200003a8
 8001e70:	20000014 	.word	0x20000014
 8001e74:	1b4e81b5 	.word	0x1b4e81b5
 8001e78:	20000030 	.word	0x20000030
 8001e7c:	2000004c 	.word	0x2000004c
 8001e80:	20000168 	.word	0x20000168
 8001e84:	20000068 	.word	0x20000068
 8001e88:	20000084 	.word	0x20000084
 8001e8c:	200000a0 	.word	0x200000a0
 8001e90:	20000169 	.word	0x20000169
 8001e94:	200000bc 	.word	0x200000bc
 8001e98:	200000d8 	.word	0x200000d8
 8001e9c:	200000f4 	.word	0x200000f4
 8001ea0:	2000016a 	.word	0x2000016a
 8001ea4:	20000114 	.word	0x20000114
 8001ea8:	20000130 	.word	0x20000130
 8001eac:	2000014c 	.word	0x2000014c
 8001eb0:	2000016b 	.word	0x2000016b

08001eb4 <underworld>:

void underworld() {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001eba:	2100      	movs	r1, #0
 8001ebc:	485a      	ldr	r0, [pc, #360]	; (8002028 <underworld+0x174>)
 8001ebe:	f004 f99b 	bl	80061f8 <HAL_TIM_PWM_Start>
	if (longClick == 0) {
 8001ec2:	4b5a      	ldr	r3, [pc, #360]	; (800202c <underworld+0x178>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d125      	bne.n	8001f16 <underworld+0x62>
		for (int i = 0; i < 10; i++) {
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	e01f      	b.n	8001f10 <underworld+0x5c>
			TIM2->ARR = underworld_melody[i];
 8001ed0:	4a57      	ldr	r2, [pc, #348]	; (8002030 <underworld+0x17c>)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM2->CCR1 = TIM2->ARR / VOLUME;
 8001ede:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ee8:	4952      	ldr	r1, [pc, #328]	; (8002034 <underworld+0x180>)
 8001eea:	fba1 1303 	umull	r1, r3, r1, r3
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_Delay(1500 / underworld_tempo[i]);
 8001ef2:	4a51      	ldr	r2, [pc, #324]	; (8002038 <underworld+0x184>)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001efa:	461a      	mov	r2, r3
 8001efc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001f00:	fb93 f3f2 	sdiv	r3, r3, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 febb 	bl	8002c80 <HAL_Delay>
		for (int i = 0; i < 10; i++) {
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2b09      	cmp	r3, #9
 8001f14:	dddc      	ble.n	8001ed0 <underworld+0x1c>
		}
	}
	if (longClick == 0) {
 8001f16:	4b45      	ldr	r3, [pc, #276]	; (800202c <underworld+0x178>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d125      	bne.n	8001f6a <underworld+0xb6>
		for (int i = 10; i < 20; i++) {
 8001f1e:	230a      	movs	r3, #10
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	e01f      	b.n	8001f64 <underworld+0xb0>
			TIM2->ARR = underworld_melody[i];
 8001f24:	4a42      	ldr	r2, [pc, #264]	; (8002030 <underworld+0x17c>)
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f30:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM2->CCR1 = TIM2->ARR / VOLUME;
 8001f32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f3c:	493d      	ldr	r1, [pc, #244]	; (8002034 <underworld+0x180>)
 8001f3e:	fba1 1303 	umull	r1, r3, r1, r3
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_Delay(1500 / underworld_tempo[i]);
 8001f46:	4a3c      	ldr	r2, [pc, #240]	; (8002038 <underworld+0x184>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001f54:	fb93 f3f2 	sdiv	r3, r3, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 fe91 	bl	8002c80 <HAL_Delay>
		for (int i = 10; i < 20; i++) {
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	3301      	adds	r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b13      	cmp	r3, #19
 8001f68:	dddc      	ble.n	8001f24 <underworld+0x70>
		}
	}
	if (longClick == 0) {
 8001f6a:	4b30      	ldr	r3, [pc, #192]	; (800202c <underworld+0x178>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d125      	bne.n	8001fbe <underworld+0x10a>
		for (int i = 20; i < 30; i++) {
 8001f72:	2314      	movs	r3, #20
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	e01f      	b.n	8001fb8 <underworld+0x104>
			TIM2->ARR = underworld_melody[i];
 8001f78:	4a2d      	ldr	r2, [pc, #180]	; (8002030 <underworld+0x17c>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f84:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM2->CCR1 = TIM2->ARR / VOLUME;
 8001f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f90:	4928      	ldr	r1, [pc, #160]	; (8002034 <underworld+0x180>)
 8001f92:	fba1 1303 	umull	r1, r3, r1, r3
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_Delay(1500 / underworld_tempo[i]);
 8001f9a:	4a27      	ldr	r2, [pc, #156]	; (8002038 <underworld+0x184>)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001fa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fe67 	bl	8002c80 <HAL_Delay>
		for (int i = 20; i < 30; i++) {
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b1d      	cmp	r3, #29
 8001fbc:	dddc      	ble.n	8001f78 <underworld+0xc4>
		}
	}
	if (longClick == 0) {
 8001fbe:	4b1b      	ldr	r3, [pc, #108]	; (800202c <underworld+0x178>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d128      	bne.n	8002018 <underworld+0x164>
		for (int i = 30; i < underworld_length; i++) {
 8001fc6:	231e      	movs	r3, #30
 8001fc8:	603b      	str	r3, [r7, #0]
 8001fca:	e01f      	b.n	800200c <underworld+0x158>
			TIM2->ARR = underworld_melody[i];
 8001fcc:	4a18      	ldr	r2, [pc, #96]	; (8002030 <underworld+0x17c>)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fd8:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM2->CCR1 = TIM2->ARR / VOLUME;
 8001fda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fe4:	4913      	ldr	r1, [pc, #76]	; (8002034 <underworld+0x180>)
 8001fe6:	fba1 1303 	umull	r1, r3, r1, r3
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_Delay(1500 / underworld_tempo[i]);
 8001fee:	4a12      	ldr	r2, [pc, #72]	; (8002038 <underworld+0x184>)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001ffc:	fb93 f3f2 	sdiv	r3, r3, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f000 fe3d 	bl	8002c80 <HAL_Delay>
		for (int i = 30; i < underworld_length; i++) {
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <underworld+0x188>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	4293      	cmp	r3, r2
 8002016:	dbd9      	blt.n	8001fcc <underworld+0x118>
		}
	}
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002018:	2100      	movs	r1, #0
 800201a:	4803      	ldr	r0, [pc, #12]	; (8002028 <underworld+0x174>)
 800201c:	f004 f9b4 	bl	8006388 <HAL_TIM_PWM_Stop>
}
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	2000045c 	.word	0x2000045c
 800202c:	200003a8 	.word	0x200003a8
 8002030:	2000016c 	.word	0x2000016c
 8002034:	1b4e81b5 	.word	0x1b4e81b5
 8002038:	200001dc 	.word	0x200001dc
 800203c:	2000024c 	.word	0x2000024c

08002040 <GetSector>:

//********************************************************** flash

static uint32_t GetSector(uint32_t Address) {
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]

	if ((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0)) {
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a82      	ldr	r2, [pc, #520]	; (8002258 <GetSector+0x218>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d206      	bcs.n	8002062 <GetSector+0x22>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800205a:	d302      	bcc.n	8002062 <GetSector+0x22>
		sector = FLASH_SECTOR_0;
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	e0f3      	b.n	800224a <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_2)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a7d      	ldr	r2, [pc, #500]	; (800225c <GetSector+0x21c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d206      	bcs.n	8002078 <GetSector+0x38>
			&& (Address >= ADDR_FLASH_SECTOR_1)) {
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a7a      	ldr	r2, [pc, #488]	; (8002258 <GetSector+0x218>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d302      	bcc.n	8002078 <GetSector+0x38>
		sector = FLASH_SECTOR_1;
 8002072:	2301      	movs	r3, #1
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	e0e8      	b.n	800224a <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_3)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a79      	ldr	r2, [pc, #484]	; (8002260 <GetSector+0x220>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d206      	bcs.n	800208e <GetSector+0x4e>
			&& (Address >= ADDR_FLASH_SECTOR_2)) {
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a76      	ldr	r2, [pc, #472]	; (800225c <GetSector+0x21c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d302      	bcc.n	800208e <GetSector+0x4e>
		sector = FLASH_SECTOR_2;
 8002088:	2302      	movs	r3, #2
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	e0dd      	b.n	800224a <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_4)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a74      	ldr	r2, [pc, #464]	; (8002264 <GetSector+0x224>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d806      	bhi.n	80020a4 <GetSector+0x64>
			&& (Address >= ADDR_FLASH_SECTOR_3)) {
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a71      	ldr	r2, [pc, #452]	; (8002260 <GetSector+0x220>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d302      	bcc.n	80020a4 <GetSector+0x64>
		sector = FLASH_SECTOR_3;
 800209e:	2303      	movs	r3, #3
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	e0d2      	b.n	800224a <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_5)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a70      	ldr	r2, [pc, #448]	; (8002268 <GetSector+0x228>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d806      	bhi.n	80020ba <GetSector+0x7a>
			&& (Address >= ADDR_FLASH_SECTOR_4)) {
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a6d      	ldr	r2, [pc, #436]	; (8002264 <GetSector+0x224>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d902      	bls.n	80020ba <GetSector+0x7a>
		sector = FLASH_SECTOR_4;
 80020b4:	2304      	movs	r3, #4
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	e0c7      	b.n	800224a <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_6)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a6b      	ldr	r2, [pc, #428]	; (800226c <GetSector+0x22c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d806      	bhi.n	80020d0 <GetSector+0x90>
			&& (Address >= ADDR_FLASH_SECTOR_5)) {
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a68      	ldr	r2, [pc, #416]	; (8002268 <GetSector+0x228>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d902      	bls.n	80020d0 <GetSector+0x90>
		sector = FLASH_SECTOR_5;
 80020ca:	2305      	movs	r3, #5
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	e0bc      	b.n	800224a <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_7)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a67      	ldr	r2, [pc, #412]	; (8002270 <GetSector+0x230>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d806      	bhi.n	80020e6 <GetSector+0xa6>
			&& (Address >= ADDR_FLASH_SECTOR_6)) {
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a64      	ldr	r2, [pc, #400]	; (800226c <GetSector+0x22c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d902      	bls.n	80020e6 <GetSector+0xa6>
		sector = FLASH_SECTOR_6;
 80020e0:	2306      	movs	r3, #6
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	e0b1      	b.n	800224a <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_8)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a62      	ldr	r2, [pc, #392]	; (8002274 <GetSector+0x234>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d806      	bhi.n	80020fc <GetSector+0xbc>
			&& (Address >= ADDR_FLASH_SECTOR_7)) {
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a5f      	ldr	r2, [pc, #380]	; (8002270 <GetSector+0x230>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d902      	bls.n	80020fc <GetSector+0xbc>
		sector = FLASH_SECTOR_7;
 80020f6:	2307      	movs	r3, #7
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	e0a6      	b.n	800224a <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_9)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a5e      	ldr	r2, [pc, #376]	; (8002278 <GetSector+0x238>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d806      	bhi.n	8002112 <GetSector+0xd2>
			&& (Address >= ADDR_FLASH_SECTOR_8)) {
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a5b      	ldr	r2, [pc, #364]	; (8002274 <GetSector+0x234>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d902      	bls.n	8002112 <GetSector+0xd2>
		sector = FLASH_SECTOR_8;
 800210c:	2308      	movs	r3, #8
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	e09b      	b.n	800224a <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_10)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a59      	ldr	r2, [pc, #356]	; (800227c <GetSector+0x23c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d806      	bhi.n	8002128 <GetSector+0xe8>
			&& (Address >= ADDR_FLASH_SECTOR_9)) {
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a56      	ldr	r2, [pc, #344]	; (8002278 <GetSector+0x238>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d902      	bls.n	8002128 <GetSector+0xe8>
		sector = FLASH_SECTOR_9;
 8002122:	2309      	movs	r3, #9
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	e090      	b.n	800224a <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_11)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a55      	ldr	r2, [pc, #340]	; (8002280 <GetSector+0x240>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d806      	bhi.n	800213e <GetSector+0xfe>
			&& (Address >= ADDR_FLASH_SECTOR_10)) {
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a52      	ldr	r2, [pc, #328]	; (800227c <GetSector+0x23c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d902      	bls.n	800213e <GetSector+0xfe>
		sector = FLASH_SECTOR_10;
 8002138:	230a      	movs	r3, #10
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	e085      	b.n	800224a <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_12)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8002144:	d206      	bcs.n	8002154 <GetSector+0x114>
			&& (Address >= ADDR_FLASH_SECTOR_11)) {
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4d      	ldr	r2, [pc, #308]	; (8002280 <GetSector+0x240>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d902      	bls.n	8002154 <GetSector+0x114>
		sector = FLASH_SECTOR_11;
 800214e:	230b      	movs	r3, #11
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	e07a      	b.n	800224a <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_13)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a4b      	ldr	r2, [pc, #300]	; (8002284 <GetSector+0x244>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d206      	bcs.n	800216a <GetSector+0x12a>
			&& (Address >= ADDR_FLASH_SECTOR_12)) {
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8002162:	d302      	bcc.n	800216a <GetSector+0x12a>
		sector = FLASH_SECTOR_12;
 8002164:	230c      	movs	r3, #12
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	e06f      	b.n	800224a <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_14)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a46      	ldr	r2, [pc, #280]	; (8002288 <GetSector+0x248>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d206      	bcs.n	8002180 <GetSector+0x140>
			&& (Address >= ADDR_FLASH_SECTOR_13)) {
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a43      	ldr	r2, [pc, #268]	; (8002284 <GetSector+0x244>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d302      	bcc.n	8002180 <GetSector+0x140>
		sector = FLASH_SECTOR_13;
 800217a:	230d      	movs	r3, #13
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	e064      	b.n	800224a <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_15)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a42      	ldr	r2, [pc, #264]	; (800228c <GetSector+0x24c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d206      	bcs.n	8002196 <GetSector+0x156>
			&& (Address >= ADDR_FLASH_SECTOR_14)) {
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a3f      	ldr	r2, [pc, #252]	; (8002288 <GetSector+0x248>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d302      	bcc.n	8002196 <GetSector+0x156>
		sector = FLASH_SECTOR_14;
 8002190:	230e      	movs	r3, #14
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	e059      	b.n	800224a <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_16)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a3d      	ldr	r2, [pc, #244]	; (8002290 <GetSector+0x250>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d806      	bhi.n	80021ac <GetSector+0x16c>
			&& (Address >= ADDR_FLASH_SECTOR_15)) {
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a3a      	ldr	r2, [pc, #232]	; (800228c <GetSector+0x24c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d302      	bcc.n	80021ac <GetSector+0x16c>
		sector = FLASH_SECTOR_15;
 80021a6:	230f      	movs	r3, #15
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	e04e      	b.n	800224a <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_17)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a39      	ldr	r2, [pc, #228]	; (8002294 <GetSector+0x254>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d806      	bhi.n	80021c2 <GetSector+0x182>
			&& (Address >= ADDR_FLASH_SECTOR_16)) {
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a36      	ldr	r2, [pc, #216]	; (8002290 <GetSector+0x250>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d902      	bls.n	80021c2 <GetSector+0x182>
		sector = FLASH_SECTOR_16;
 80021bc:	2310      	movs	r3, #16
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	e043      	b.n	800224a <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_18)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a34      	ldr	r2, [pc, #208]	; (8002298 <GetSector+0x258>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d806      	bhi.n	80021d8 <GetSector+0x198>
			&& (Address >= ADDR_FLASH_SECTOR_17)) {
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a31      	ldr	r2, [pc, #196]	; (8002294 <GetSector+0x254>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d902      	bls.n	80021d8 <GetSector+0x198>
		sector = FLASH_SECTOR_17;
 80021d2:	2311      	movs	r3, #17
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	e038      	b.n	800224a <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_19)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a30      	ldr	r2, [pc, #192]	; (800229c <GetSector+0x25c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d806      	bhi.n	80021ee <GetSector+0x1ae>
			&& (Address >= ADDR_FLASH_SECTOR_18)) {
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a2d      	ldr	r2, [pc, #180]	; (8002298 <GetSector+0x258>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d902      	bls.n	80021ee <GetSector+0x1ae>
		sector = FLASH_SECTOR_18;
 80021e8:	2312      	movs	r3, #18
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	e02d      	b.n	800224a <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_20)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a2b      	ldr	r2, [pc, #172]	; (80022a0 <GetSector+0x260>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d806      	bhi.n	8002204 <GetSector+0x1c4>
			&& (Address >= ADDR_FLASH_SECTOR_19)) {
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a28      	ldr	r2, [pc, #160]	; (800229c <GetSector+0x25c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d902      	bls.n	8002204 <GetSector+0x1c4>
		sector = FLASH_SECTOR_19;
 80021fe:	2313      	movs	r3, #19
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	e022      	b.n	800224a <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_21)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a27      	ldr	r2, [pc, #156]	; (80022a4 <GetSector+0x264>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d806      	bhi.n	800221a <GetSector+0x1da>
			&& (Address >= ADDR_FLASH_SECTOR_20)) {
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a24      	ldr	r2, [pc, #144]	; (80022a0 <GetSector+0x260>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d902      	bls.n	800221a <GetSector+0x1da>
		sector = FLASH_SECTOR_20;
 8002214:	2314      	movs	r3, #20
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	e017      	b.n	800224a <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_22)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a22      	ldr	r2, [pc, #136]	; (80022a8 <GetSector+0x268>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d806      	bhi.n	8002230 <GetSector+0x1f0>
			&& (Address >= ADDR_FLASH_SECTOR_21)) {
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a1f      	ldr	r2, [pc, #124]	; (80022a4 <GetSector+0x264>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d902      	bls.n	8002230 <GetSector+0x1f0>
		sector = FLASH_SECTOR_21;
 800222a:	2315      	movs	r3, #21
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	e00c      	b.n	800224a <GetSector+0x20a>
	} else if ((Address < ADDR_FLASH_SECTOR_23)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a1e      	ldr	r2, [pc, #120]	; (80022ac <GetSector+0x26c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d806      	bhi.n	8002246 <GetSector+0x206>
			&& (Address >= ADDR_FLASH_SECTOR_22)) {
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a1b      	ldr	r2, [pc, #108]	; (80022a8 <GetSector+0x268>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d902      	bls.n	8002246 <GetSector+0x206>
		sector = FLASH_SECTOR_22;
 8002240:	2316      	movs	r3, #22
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e001      	b.n	800224a <GetSector+0x20a>
	} else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_23) */
	{
		sector = FLASH_SECTOR_23;
 8002246:	2317      	movs	r3, #23
 8002248:	60fb      	str	r3, [r7, #12]
	}
	return sector;
 800224a:	68fb      	ldr	r3, [r7, #12]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	08004000 	.word	0x08004000
 800225c:	08008000 	.word	0x08008000
 8002260:	0800c000 	.word	0x0800c000
 8002264:	0800ffff 	.word	0x0800ffff
 8002268:	0801ffff 	.word	0x0801ffff
 800226c:	0803ffff 	.word	0x0803ffff
 8002270:	0805ffff 	.word	0x0805ffff
 8002274:	0807ffff 	.word	0x0807ffff
 8002278:	0809ffff 	.word	0x0809ffff
 800227c:	080bffff 	.word	0x080bffff
 8002280:	080dffff 	.word	0x080dffff
 8002284:	08104000 	.word	0x08104000
 8002288:	08108000 	.word	0x08108000
 800228c:	0810c000 	.word	0x0810c000
 8002290:	0810ffff 	.word	0x0810ffff
 8002294:	0811ffff 	.word	0x0811ffff
 8002298:	0813ffff 	.word	0x0813ffff
 800229c:	0815ffff 	.word	0x0815ffff
 80022a0:	0817ffff 	.word	0x0817ffff
 80022a4:	0819ffff 	.word	0x0819ffff
 80022a8:	081bffff 	.word	0x081bffff
 80022ac:	081dffff 	.word	0x081dffff

080022b0 <PlayToAlarm>:

void PlayToAlarm(){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	if(melody_number == 1)
 80022b4:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <PlayToAlarm+0x24>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d102      	bne.n	80022c2 <PlayToAlarm+0x12>
		Bicyclemelody();
 80022bc:	f7ff fcf8 	bl	8001cb0 <Bicyclemelody>
	else if(melody_number == 2)
		underworld();
}
 80022c0:	e005      	b.n	80022ce <PlayToAlarm+0x1e>
	else if(melody_number == 2)
 80022c2:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <PlayToAlarm+0x24>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d101      	bne.n	80022ce <PlayToAlarm+0x1e>
		underworld();
 80022ca:	f7ff fdf3 	bl	8001eb4 <underworld>
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000410 	.word	0x20000410

080022d8 <SetUpflash>:
void SetUpflash() {
 80022d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0

	flashTime.alramFormat = at.f;
 80022e0:	4b31      	ldr	r3, [pc, #196]	; (80023a8 <SetUpflash+0xd0>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	4a31      	ldr	r2, [pc, #196]	; (80023ac <SetUpflash+0xd4>)
 80022e6:	71d3      	strb	r3, [r2, #7]
	flashTime.alramHour = at.h;
 80022e8:	4b2f      	ldr	r3, [pc, #188]	; (80023a8 <SetUpflash+0xd0>)
 80022ea:	785b      	ldrb	r3, [r3, #1]
 80022ec:	4a2f      	ldr	r2, [pc, #188]	; (80023ac <SetUpflash+0xd4>)
 80022ee:	7213      	strb	r3, [r2, #8]
	flashTime.alramMinutes = at.m;
 80022f0:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <SetUpflash+0xd0>)
 80022f2:	789b      	ldrb	r3, [r3, #2]
 80022f4:	4a2d      	ldr	r2, [pc, #180]	; (80023ac <SetUpflash+0xd4>)
 80022f6:	7253      	strb	r3, [r2, #9]
	flashTime.alramSeconds = at.s;
 80022f8:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <SetUpflash+0xd0>)
 80022fa:	78db      	ldrb	r3, [r3, #3]
 80022fc:	4a2b      	ldr	r2, [pc, #172]	; (80023ac <SetUpflash+0xd4>)
 80022fe:	7293      	strb	r3, [r2, #10]

	HAL_FLASH_Unlock();
 8002300:	f001 fa5e 	bl	80037c0 <HAL_FLASH_Unlock>

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 8002304:	492a      	ldr	r1, [pc, #168]	; (80023b0 <SetUpflash+0xd8>)
 8002306:	482b      	ldr	r0, [pc, #172]	; (80023b4 <SetUpflash+0xdc>)
 8002308:	f001 fbcc 	bl	8003aa4 <HAL_FLASHEx_Erase>

	}

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100014),
			flashTime.alramFormat);
 800230c:	4b27      	ldr	r3, [pc, #156]	; (80023ac <SetUpflash+0xd4>)
 800230e:	79db      	ldrb	r3, [r3, #7]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100014),
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2200      	movs	r2, #0
 8002314:	461c      	mov	r4, r3
 8002316:	4615      	mov	r5, r2
 8002318:	4622      	mov	r2, r4
 800231a:	462b      	mov	r3, r5
 800231c:	4926      	ldr	r1, [pc, #152]	; (80023b8 <SetUpflash+0xe0>)
 800231e:	2002      	movs	r0, #2
 8002320:	f001 f9fa 	bl	8003718 <HAL_FLASH_Program>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100018),
			flashTime.alramHour);
 8002324:	4b21      	ldr	r3, [pc, #132]	; (80023ac <SetUpflash+0xd4>)
 8002326:	7a1b      	ldrb	r3, [r3, #8]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100018),
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2200      	movs	r2, #0
 800232c:	4698      	mov	r8, r3
 800232e:	4691      	mov	r9, r2
 8002330:	4642      	mov	r2, r8
 8002332:	464b      	mov	r3, r9
 8002334:	4921      	ldr	r1, [pc, #132]	; (80023bc <SetUpflash+0xe4>)
 8002336:	2002      	movs	r0, #2
 8002338:	f001 f9ee 	bl	8003718 <HAL_FLASH_Program>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x0810001C),
			flashTime.alramMinutes);
 800233c:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <SetUpflash+0xd4>)
 800233e:	7a5b      	ldrb	r3, [r3, #9]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x0810001C),
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2200      	movs	r2, #0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	617a      	str	r2, [r7, #20]
 8002348:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800234c:	491c      	ldr	r1, [pc, #112]	; (80023c0 <SetUpflash+0xe8>)
 800234e:	2002      	movs	r0, #2
 8002350:	f001 f9e2 	bl	8003718 <HAL_FLASH_Program>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100020),
			flashTime.alramSeconds);
 8002354:	4b15      	ldr	r3, [pc, #84]	; (80023ac <SetUpflash+0xd4>)
 8002356:	7a9b      	ldrb	r3, [r3, #10]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100020),
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2200      	movs	r2, #0
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	60fa      	str	r2, [r7, #12]
 8002360:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002364:	4917      	ldr	r1, [pc, #92]	; (80023c4 <SetUpflash+0xec>)
 8002366:	2002      	movs	r0, #2
 8002368:	f001 f9d6 	bl	8003718 <HAL_FLASH_Program>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100024),
 800236c:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <SetUpflash+0xf0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	17da      	asrs	r2, r3, #31
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	e9d7 2300 	ldrd	r2, r3, [r7]
 800237a:	4914      	ldr	r1, [pc, #80]	; (80023cc <SetUpflash+0xf4>)
 800237c:	2002      	movs	r0, #2
 800237e:	f001 f9cb 	bl	8003718 <HAL_FLASH_Program>
			alarmMode );

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ((uint32_t) 0x08100028),
 8002382:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <SetUpflash+0xf8>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2200      	movs	r2, #0
 800238a:	469a      	mov	sl, r3
 800238c:	4693      	mov	fp, r2
 800238e:	4652      	mov	r2, sl
 8002390:	465b      	mov	r3, fp
 8002392:	4910      	ldr	r1, [pc, #64]	; (80023d4 <SetUpflash+0xfc>)
 8002394:	2002      	movs	r0, #2
 8002396:	f001 f9bf 	bl	8003718 <HAL_FLASH_Program>
			melody_number );

	HAL_FLASH_Lock();
 800239a:	f001 fa33 	bl	8003804 <HAL_FLASH_Lock>

}
 800239e:	bf00      	nop
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023a8:	2000040c 	.word	0x2000040c
 80023ac:	20000378 	.word	0x20000378
 80023b0:	20000434 	.word	0x20000434
 80023b4:	20000414 	.word	0x20000414
 80023b8:	08100014 	.word	0x08100014
 80023bc:	08100018 	.word	0x08100018
 80023c0:	0810001c 	.word	0x0810001c
 80023c4:	08100020 	.word	0x08100020
 80023c8:	20000000 	.word	0x20000000
 80023cc:	08100024 	.word	0x08100024
 80023d0:	20000410 	.word	0x20000410
 80023d4:	08100028 	.word	0x08100028

080023d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023dc:	b672      	cpsid	i
}
 80023de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023e0:	e7fe      	b.n	80023e0 <Error_Handler+0x8>
	...

080023e4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80023ea:	1d3b      	adds	r3, r7, #4
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80023f8:	2300      	movs	r3, #0
 80023fa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80023fc:	4b25      	ldr	r3, [pc, #148]	; (8002494 <MX_RTC_Init+0xb0>)
 80023fe:	4a26      	ldr	r2, [pc, #152]	; (8002498 <MX_RTC_Init+0xb4>)
 8002400:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8002402:	4b24      	ldr	r3, [pc, #144]	; (8002494 <MX_RTC_Init+0xb0>)
 8002404:	2240      	movs	r2, #64	; 0x40
 8002406:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002408:	4b22      	ldr	r3, [pc, #136]	; (8002494 <MX_RTC_Init+0xb0>)
 800240a:	227f      	movs	r2, #127	; 0x7f
 800240c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800240e:	4b21      	ldr	r3, [pc, #132]	; (8002494 <MX_RTC_Init+0xb0>)
 8002410:	22ff      	movs	r2, #255	; 0xff
 8002412:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002414:	4b1f      	ldr	r3, [pc, #124]	; (8002494 <MX_RTC_Init+0xb0>)
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800241a:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <MX_RTC_Init+0xb0>)
 800241c:	2200      	movs	r2, #0
 800241e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002420:	4b1c      	ldr	r3, [pc, #112]	; (8002494 <MX_RTC_Init+0xb0>)
 8002422:	2200      	movs	r2, #0
 8002424:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002426:	481b      	ldr	r0, [pc, #108]	; (8002494 <MX_RTC_Init+0xb0>)
 8002428:	f003 face 	bl	80059c8 <HAL_RTC_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002432:	f7ff ffd1 	bl	80023d8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 8002436:	2301      	movs	r3, #1
 8002438:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8002442:	2300      	movs	r3, #0
 8002444:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	2200      	movs	r2, #0
 8002452:	4619      	mov	r1, r3
 8002454:	480f      	ldr	r0, [pc, #60]	; (8002494 <MX_RTC_Init+0xb0>)
 8002456:	f003 fb2d 	bl	8005ab4 <HAL_RTC_SetTime>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8002460:	f7ff ffba 	bl	80023d8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002464:	2301      	movs	r3, #1
 8002466:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002468:	2301      	movs	r3, #1
 800246a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 800246c:	2301      	movs	r3, #1
 800246e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002474:	463b      	mov	r3, r7
 8002476:	2200      	movs	r2, #0
 8002478:	4619      	mov	r1, r3
 800247a:	4806      	ldr	r0, [pc, #24]	; (8002494 <MX_RTC_Init+0xb0>)
 800247c:	f003 fc12 	bl	8005ca4 <HAL_RTC_SetDate>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8002486:	f7ff ffa7 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800248a:	bf00      	nop
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000438 	.word	0x20000438
 8002498:	40002800 	.word	0x40002800

0800249c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08e      	sub	sp, #56	; 0x38
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024a4:	f107 0308 	add.w	r3, r7, #8
 80024a8:	2230      	movs	r2, #48	; 0x30
 80024aa:	2100      	movs	r1, #0
 80024ac:	4618      	mov	r0, r3
 80024ae:	f005 fe73 	bl	8008198 <memset>
  if(rtcHandle->Instance==RTC)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a0c      	ldr	r2, [pc, #48]	; (80024e8 <HAL_RTC_MspInit+0x4c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d111      	bne.n	80024e0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80024bc:	2320      	movs	r3, #32
 80024be:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80024c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024c4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024c6:	f107 0308 	add.w	r3, r7, #8
 80024ca:	4618      	mov	r0, r3
 80024cc:	f003 f8bc 	bl	8005648 <HAL_RCCEx_PeriphCLKConfig>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80024d6:	f7ff ff7f 	bl	80023d8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024da:	4b04      	ldr	r3, [pc, #16]	; (80024ec <HAL_RTC_MspInit+0x50>)
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80024e0:	bf00      	nop
 80024e2:	3738      	adds	r7, #56	; 0x38
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40002800 	.word	0x40002800
 80024ec:	42470e3c 	.word	0x42470e3c

080024f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <HAL_MspInit+0x4c>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	4a0f      	ldr	r2, [pc, #60]	; (800253c <HAL_MspInit+0x4c>)
 8002500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002504:	6453      	str	r3, [r2, #68]	; 0x44
 8002506:	4b0d      	ldr	r3, [pc, #52]	; (800253c <HAL_MspInit+0x4c>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	603b      	str	r3, [r7, #0]
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_MspInit+0x4c>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	4a08      	ldr	r2, [pc, #32]	; (800253c <HAL_MspInit+0x4c>)
 800251c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002520:	6413      	str	r3, [r2, #64]	; 0x40
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_MspInit+0x4c>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800

08002540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002544:	e7fe      	b.n	8002544 <NMI_Handler+0x4>

08002546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254a:	e7fe      	b.n	800254a <HardFault_Handler+0x4>

0800254c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002550:	e7fe      	b.n	8002550 <MemManage_Handler+0x4>

08002552 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002556:	e7fe      	b.n	8002556 <BusFault_Handler+0x4>

08002558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800255c:	e7fe      	b.n	800255c <UsageFault_Handler+0x4>

0800255e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800258c:	f000 fb58 	bl	8002c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}

08002594 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002598:	4802      	ldr	r0, [pc, #8]	; (80025a4 <TIM3_IRQHandler+0x10>)
 800259a:	f003 ff65 	bl	8006468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200004a4 	.word	0x200004a4

080025a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80025ac:	4802      	ldr	r0, [pc, #8]	; (80025b8 <USART3_IRQHandler+0x10>)
 80025ae:	f004 fe95 	bl	80072dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000530 	.word	0x20000530

080025bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80025c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025c4:	f001 fd8c 	bl	80040e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}

080025cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	e00a      	b.n	80025f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025de:	f3af 8000 	nop.w
 80025e2:	4601      	mov	r1, r0
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	60ba      	str	r2, [r7, #8]
 80025ea:	b2ca      	uxtb	r2, r1
 80025ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	3301      	adds	r3, #1
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	dbf0      	blt.n	80025de <_read+0x12>
	}

return len;
 80025fc:	687b      	ldr	r3, [r7, #4]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b086      	sub	sp, #24
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	e009      	b.n	800262c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	60ba      	str	r2, [r7, #8]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe f94d 	bl	80008c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	3301      	adds	r3, #1
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	429a      	cmp	r2, r3
 8002632:	dbf1      	blt.n	8002618 <_write+0x12>
	}
	return len;
 8002634:	687b      	ldr	r3, [r7, #4]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <_close>:

int _close(int file)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
	return -1;
 8002646:	f04f 33ff 	mov.w	r3, #4294967295
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002666:	605a      	str	r2, [r3, #4]
	return 0;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <_isatty>:

int _isatty(int file)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
	return 1;
 800267e:	2301      	movs	r3, #1
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
	return 0;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026b0:	4a14      	ldr	r2, [pc, #80]	; (8002704 <_sbrk+0x5c>)
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <_sbrk+0x60>)
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026bc:	4b13      	ldr	r3, [pc, #76]	; (800270c <_sbrk+0x64>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <_sbrk+0x64>)
 80026c6:	4a12      	ldr	r2, [pc, #72]	; (8002710 <_sbrk+0x68>)
 80026c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <_sbrk+0x64>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d207      	bcs.n	80026e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d8:	f005 fd34 	bl	8008144 <__errno>
 80026dc:	4603      	mov	r3, r0
 80026de:	220c      	movs	r2, #12
 80026e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026e2:	f04f 33ff 	mov.w	r3, #4294967295
 80026e6:	e009      	b.n	80026fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <_sbrk+0x64>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ee:	4b07      	ldr	r3, [pc, #28]	; (800270c <_sbrk+0x64>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	4a05      	ldr	r2, [pc, #20]	; (800270c <_sbrk+0x64>)
 80026f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026fa:	68fb      	ldr	r3, [r7, #12]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20030000 	.word	0x20030000
 8002708:	00000400 	.word	0x00000400
 800270c:	20000458 	.word	0x20000458
 8002710:	200005a8 	.word	0x200005a8

08002714 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <SystemInit+0x20>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	4a05      	ldr	r2, [pc, #20]	; (8002734 <SystemInit+0x20>)
 8002720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08e      	sub	sp, #56	; 0x38
 800273c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800273e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	605a      	str	r2, [r3, #4]
 8002748:	609a      	str	r2, [r3, #8]
 800274a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800274c:	f107 0320 	add.w	r3, r7, #32
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	611a      	str	r2, [r3, #16]
 8002764:	615a      	str	r2, [r3, #20]
 8002766:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002768:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <MX_TIM2_Init+0xe8>)
 800276a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800276e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8002770:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <MX_TIM2_Init+0xe8>)
 8002772:	22b3      	movs	r2, #179	; 0xb3
 8002774:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002776:	4b2a      	ldr	r3, [pc, #168]	; (8002820 <MX_TIM2_Init+0xe8>)
 8002778:	2210      	movs	r2, #16
 800277a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800277c:	4b28      	ldr	r3, [pc, #160]	; (8002820 <MX_TIM2_Init+0xe8>)
 800277e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002782:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002784:	4b26      	ldr	r3, [pc, #152]	; (8002820 <MX_TIM2_Init+0xe8>)
 8002786:	2200      	movs	r2, #0
 8002788:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800278a:	4b25      	ldr	r3, [pc, #148]	; (8002820 <MX_TIM2_Init+0xe8>)
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002790:	4823      	ldr	r0, [pc, #140]	; (8002820 <MX_TIM2_Init+0xe8>)
 8002792:	f003 fc17 	bl	8005fc4 <HAL_TIM_Base_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800279c:	f7ff fe1c 	bl	80023d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027aa:	4619      	mov	r1, r3
 80027ac:	481c      	ldr	r0, [pc, #112]	; (8002820 <MX_TIM2_Init+0xe8>)
 80027ae:	f004 f825 	bl	80067fc <HAL_TIM_ConfigClockSource>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80027b8:	f7ff fe0e 	bl	80023d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027bc:	4818      	ldr	r0, [pc, #96]	; (8002820 <MX_TIM2_Init+0xe8>)
 80027be:	f003 fcc1 	bl	8006144 <HAL_TIM_PWM_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80027c8:	f7ff fe06 	bl	80023d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027cc:	2300      	movs	r3, #0
 80027ce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027d4:	f107 0320 	add.w	r3, r7, #32
 80027d8:	4619      	mov	r1, r3
 80027da:	4811      	ldr	r0, [pc, #68]	; (8002820 <MX_TIM2_Init+0xe8>)
 80027dc:	f004 fc0e 	bl	8006ffc <HAL_TIMEx_MasterConfigSynchronization>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80027e6:	f7ff fdf7 	bl	80023d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027ea:	2360      	movs	r3, #96	; 0x60
 80027ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	2200      	movs	r2, #0
 80027fe:	4619      	mov	r1, r3
 8002800:	4807      	ldr	r0, [pc, #28]	; (8002820 <MX_TIM2_Init+0xe8>)
 8002802:	f003 ff39 	bl	8006678 <HAL_TIM_PWM_ConfigChannel>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800280c:	f7ff fde4 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002810:	4803      	ldr	r0, [pc, #12]	; (8002820 <MX_TIM2_Init+0xe8>)
 8002812:	f000 f891 	bl	8002938 <HAL_TIM_MspPostInit>

}
 8002816:	bf00      	nop
 8002818:	3738      	adds	r7, #56	; 0x38
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	2000045c 	.word	0x2000045c

08002824 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800282a:	f107 0308 	add.w	r3, r7, #8
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]
 8002834:	609a      	str	r2, [r3, #8]
 8002836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002838:	463b      	mov	r3, r7
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <MX_TIM3_Init+0x94>)
 8002842:	4a1e      	ldr	r2, [pc, #120]	; (80028bc <MX_TIM3_Init+0x98>)
 8002844:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 8002846:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <MX_TIM3_Init+0x94>)
 8002848:	f242 7210 	movw	r2, #10000	; 0x2710
 800284c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800284e:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <MX_TIM3_Init+0x94>)
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 900;
 8002854:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <MX_TIM3_Init+0x94>)
 8002856:	f44f 7261 	mov.w	r2, #900	; 0x384
 800285a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800285c:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <MX_TIM3_Init+0x94>)
 800285e:	2200      	movs	r2, #0
 8002860:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <MX_TIM3_Init+0x94>)
 8002864:	2200      	movs	r2, #0
 8002866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002868:	4813      	ldr	r0, [pc, #76]	; (80028b8 <MX_TIM3_Init+0x94>)
 800286a:	f003 fbab 	bl	8005fc4 <HAL_TIM_Base_Init>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002874:	f7ff fdb0 	bl	80023d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800287c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800287e:	f107 0308 	add.w	r3, r7, #8
 8002882:	4619      	mov	r1, r3
 8002884:	480c      	ldr	r0, [pc, #48]	; (80028b8 <MX_TIM3_Init+0x94>)
 8002886:	f003 ffb9 	bl	80067fc <HAL_TIM_ConfigClockSource>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002890:	f7ff fda2 	bl	80023d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002894:	2300      	movs	r3, #0
 8002896:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002898:	2300      	movs	r3, #0
 800289a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800289c:	463b      	mov	r3, r7
 800289e:	4619      	mov	r1, r3
 80028a0:	4805      	ldr	r0, [pc, #20]	; (80028b8 <MX_TIM3_Init+0x94>)
 80028a2:	f004 fbab 	bl	8006ffc <HAL_TIMEx_MasterConfigSynchronization>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80028ac:	f7ff fd94 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028b0:	bf00      	nop
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	200004a4 	.word	0x200004a4
 80028bc:	40000400 	.word	0x40000400

080028c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d0:	d10e      	bne.n	80028f0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	4b16      	ldr	r3, [pc, #88]	; (8002930 <HAL_TIM_Base_MspInit+0x70>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	4a15      	ldr	r2, [pc, #84]	; (8002930 <HAL_TIM_Base_MspInit+0x70>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	6413      	str	r3, [r2, #64]	; 0x40
 80028e2:	4b13      	ldr	r3, [pc, #76]	; (8002930 <HAL_TIM_Base_MspInit+0x70>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80028ee:	e01a      	b.n	8002926 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM3)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a0f      	ldr	r2, [pc, #60]	; (8002934 <HAL_TIM_Base_MspInit+0x74>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d115      	bne.n	8002926 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <HAL_TIM_Base_MspInit+0x70>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	4a0b      	ldr	r2, [pc, #44]	; (8002930 <HAL_TIM_Base_MspInit+0x70>)
 8002904:	f043 0302 	orr.w	r3, r3, #2
 8002908:	6413      	str	r3, [r2, #64]	; 0x40
 800290a:	4b09      	ldr	r3, [pc, #36]	; (8002930 <HAL_TIM_Base_MspInit+0x70>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2100      	movs	r1, #0
 800291a:	201d      	movs	r0, #29
 800291c:	f000 fe33 	bl	8003586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002920:	201d      	movs	r0, #29
 8002922:	f000 fe4c 	bl	80035be <HAL_NVIC_EnableIRQ>
}
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800
 8002934:	40000400 	.word	0x40000400

08002938 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 030c 	add.w	r3, r7, #12
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002958:	d11d      	bne.n	8002996 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <HAL_TIM_MspPostInit+0x68>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <HAL_TIM_MspPostInit+0x68>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <HAL_TIM_MspPostInit+0x68>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002976:	2301      	movs	r3, #1
 8002978:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	2300      	movs	r3, #0
 8002984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002986:	2301      	movs	r3, #1
 8002988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298a:	f107 030c 	add.w	r3, r7, #12
 800298e:	4619      	mov	r1, r3
 8002990:	4804      	ldr	r0, [pc, #16]	; (80029a4 <HAL_TIM_MspPostInit+0x6c>)
 8002992:	f001 f9c7 	bl	8003d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002996:	bf00      	nop
 8002998:	3720      	adds	r7, #32
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40020000 	.word	0x40020000

080029a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <MX_USART2_UART_Init+0x4c>)
 80029ae:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <MX_USART2_UART_Init+0x50>)
 80029b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <MX_USART2_UART_Init+0x4c>)
 80029b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <MX_USART2_UART_Init+0x4c>)
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <MX_USART2_UART_Init+0x4c>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029c6:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <MX_USART2_UART_Init+0x4c>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029cc:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <MX_USART2_UART_Init+0x4c>)
 80029ce:	220c      	movs	r2, #12
 80029d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <MX_USART2_UART_Init+0x4c>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029d8:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <MX_USART2_UART_Init+0x4c>)
 80029da:	2200      	movs	r2, #0
 80029dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029de:	4805      	ldr	r0, [pc, #20]	; (80029f4 <MX_USART2_UART_Init+0x4c>)
 80029e0:	f004 fb9c 	bl	800711c <HAL_UART_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80029ea:	f7ff fcf5 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	200004ec 	.word	0x200004ec
 80029f8:	40004400 	.word	0x40004400

080029fc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <MX_USART3_UART_Init+0x4c>)
 8002a02:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <MX_USART3_UART_Init+0x50>)
 8002a04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <MX_USART3_UART_Init+0x4c>)
 8002a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <MX_USART3_UART_Init+0x4c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <MX_USART3_UART_Init+0x4c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <MX_USART3_UART_Init+0x4c>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a20:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <MX_USART3_UART_Init+0x4c>)
 8002a22:	220c      	movs	r2, #12
 8002a24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a26:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <MX_USART3_UART_Init+0x4c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <MX_USART3_UART_Init+0x4c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a32:	4805      	ldr	r0, [pc, #20]	; (8002a48 <MX_USART3_UART_Init+0x4c>)
 8002a34:	f004 fb72 	bl	800711c <HAL_UART_Init>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002a3e:	f7ff fccb 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000530 	.word	0x20000530
 8002a4c:	40004800 	.word	0x40004800

08002a50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08c      	sub	sp, #48	; 0x30
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a58:	f107 031c 	add.w	r3, r7, #28
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a32      	ldr	r2, [pc, #200]	; (8002b38 <HAL_UART_MspInit+0xe8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d12c      	bne.n	8002acc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	61bb      	str	r3, [r7, #24]
 8002a76:	4b31      	ldr	r3, [pc, #196]	; (8002b3c <HAL_UART_MspInit+0xec>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	4a30      	ldr	r2, [pc, #192]	; (8002b3c <HAL_UART_MspInit+0xec>)
 8002a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a80:	6413      	str	r3, [r2, #64]	; 0x40
 8002a82:	4b2e      	ldr	r3, [pc, #184]	; (8002b3c <HAL_UART_MspInit+0xec>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	61bb      	str	r3, [r7, #24]
 8002a8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	4b2a      	ldr	r3, [pc, #168]	; (8002b3c <HAL_UART_MspInit+0xec>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	4a29      	ldr	r2, [pc, #164]	; (8002b3c <HAL_UART_MspInit+0xec>)
 8002a98:	f043 0308 	orr.w	r3, r3, #8
 8002a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9e:	4b27      	ldr	r3, [pc, #156]	; (8002b3c <HAL_UART_MspInit+0xec>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002aaa:	2360      	movs	r3, #96	; 0x60
 8002aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002aba:	2307      	movs	r3, #7
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002abe:	f107 031c 	add.w	r3, r7, #28
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	481e      	ldr	r0, [pc, #120]	; (8002b40 <HAL_UART_MspInit+0xf0>)
 8002ac6:	f001 f92d 	bl	8003d24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002aca:	e031      	b.n	8002b30 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <HAL_UART_MspInit+0xf4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d12c      	bne.n	8002b30 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <HAL_UART_MspInit+0xec>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4a17      	ldr	r2, [pc, #92]	; (8002b3c <HAL_UART_MspInit+0xec>)
 8002ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <HAL_UART_MspInit+0xec>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <HAL_UART_MspInit+0xec>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	4a10      	ldr	r2, [pc, #64]	; (8002b3c <HAL_UART_MspInit+0xec>)
 8002afc:	f043 0308 	orr.w	r3, r3, #8
 8002b00:	6313      	str	r3, [r2, #48]	; 0x30
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <HAL_UART_MspInit+0xec>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b14:	2302      	movs	r3, #2
 8002b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b20:	2307      	movs	r3, #7
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b24:	f107 031c 	add.w	r3, r7, #28
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4805      	ldr	r0, [pc, #20]	; (8002b40 <HAL_UART_MspInit+0xf0>)
 8002b2c:	f001 f8fa 	bl	8003d24 <HAL_GPIO_Init>
}
 8002b30:	bf00      	nop
 8002b32:	3730      	adds	r7, #48	; 0x30
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40004400 	.word	0x40004400
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40020c00 	.word	0x40020c00
 8002b44:	40004800 	.word	0x40004800

08002b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b80 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b4c:	480d      	ldr	r0, [pc, #52]	; (8002b84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b4e:	490e      	ldr	r1, [pc, #56]	; (8002b88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b50:	4a0e      	ldr	r2, [pc, #56]	; (8002b8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b54:	e002      	b.n	8002b5c <LoopCopyDataInit>

08002b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b5a:	3304      	adds	r3, #4

08002b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b60:	d3f9      	bcc.n	8002b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b62:	4a0b      	ldr	r2, [pc, #44]	; (8002b90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b64:	4c0b      	ldr	r4, [pc, #44]	; (8002b94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b68:	e001      	b.n	8002b6e <LoopFillZerobss>

08002b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b6c:	3204      	adds	r2, #4

08002b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b70:	d3fb      	bcc.n	8002b6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b72:	f7ff fdcf 	bl	8002714 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b76:	f005 faeb 	bl	8008150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b7a:	f7fd feb3 	bl	80008e4 <main>
  bx  lr    
 8002b7e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002b80:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b88:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 8002b8c:	080097ec 	.word	0x080097ec
  ldr r2, =_sbss
 8002b90:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8002b94:	200005a8 	.word	0x200005a8

08002b98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b98:	e7fe      	b.n	8002b98 <ADC_IRQHandler>
	...

08002b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ba0:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <HAL_Init+0x40>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a0d      	ldr	r2, [pc, #52]	; (8002bdc <HAL_Init+0x40>)
 8002ba6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002baa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bac:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_Init+0x40>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <HAL_Init+0x40>)
 8002bb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bb8:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <HAL_Init+0x40>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a07      	ldr	r2, [pc, #28]	; (8002bdc <HAL_Init+0x40>)
 8002bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bc4:	2003      	movs	r0, #3
 8002bc6:	f000 fcd3 	bl	8003570 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bca:	200f      	movs	r0, #15
 8002bcc:	f000 f808 	bl	8002be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bd0:	f7ff fc8e 	bl	80024f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40023c00 	.word	0x40023c00

08002be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002be8:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <HAL_InitTick+0x54>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <HAL_InitTick+0x58>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fceb 	bl	80035da <HAL_SYSTICK_Config>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e00e      	b.n	8002c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b0f      	cmp	r3, #15
 8002c12:	d80a      	bhi.n	8002c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c14:	2200      	movs	r2, #0
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1c:	f000 fcb3 	bl	8003586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c20:	4a06      	ldr	r2, [pc, #24]	; (8002c3c <HAL_InitTick+0x5c>)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	e000      	b.n	8002c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000250 	.word	0x20000250
 8002c38:	20000258 	.word	0x20000258
 8002c3c:	20000254 	.word	0x20000254

08002c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_IncTick+0x20>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <HAL_IncTick+0x24>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4413      	add	r3, r2
 8002c50:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <HAL_IncTick+0x24>)
 8002c52:	6013      	str	r3, [r2, #0]
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	20000258 	.word	0x20000258
 8002c64:	20000574 	.word	0x20000574

08002c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c6c:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <HAL_GetTick+0x14>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	20000574 	.word	0x20000574

08002c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c88:	f7ff ffee 	bl	8002c68 <HAL_GetTick>
 8002c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d005      	beq.n	8002ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <HAL_Delay+0x44>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ca6:	bf00      	nop
 8002ca8:	f7ff ffde 	bl	8002c68 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d8f7      	bhi.n	8002ca8 <HAL_Delay+0x28>
  {
  }
}
 8002cb8:	bf00      	nop
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000258 	.word	0x20000258

08002cc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e033      	b.n	8002d46 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d109      	bne.n	8002cfa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fd fcae 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d118      	bne.n	8002d38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d0e:	f023 0302 	bic.w	r3, r3, #2
 8002d12:	f043 0202 	orr.w	r2, r3, #2
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fa5c 	bl	80031d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f023 0303 	bic.w	r3, r3, #3
 8002d2e:	f043 0201 	orr.w	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40
 8002d36:	e001      	b.n	8002d3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_ADC_Start+0x1a>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e0b2      	b.n	8002ed0 <HAL_ADC_Start+0x180>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d018      	beq.n	8002db2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d90:	4b52      	ldr	r3, [pc, #328]	; (8002edc <HAL_ADC_Start+0x18c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a52      	ldr	r2, [pc, #328]	; (8002ee0 <HAL_ADC_Start+0x190>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	0c9a      	lsrs	r2, r3, #18
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002da4:	e002      	b.n	8002dac <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f9      	bne.n	8002da6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d17a      	bne.n	8002eb6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d007      	beq.n	8002df2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002dea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfe:	d106      	bne.n	8002e0e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e04:	f023 0206 	bic.w	r2, r3, #6
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	645a      	str	r2, [r3, #68]	; 0x44
 8002e0c:	e002      	b.n	8002e14 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e1c:	4b31      	ldr	r3, [pc, #196]	; (8002ee4 <HAL_ADC_Start+0x194>)
 8002e1e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002e28:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 031f 	and.w	r3, r3, #31
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d12a      	bne.n	8002e8c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a2b      	ldr	r2, [pc, #172]	; (8002ee8 <HAL_ADC_Start+0x198>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d015      	beq.n	8002e6c <HAL_ADC_Start+0x11c>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a29      	ldr	r2, [pc, #164]	; (8002eec <HAL_ADC_Start+0x19c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d105      	bne.n	8002e56 <HAL_ADC_Start+0x106>
 8002e4a:	4b26      	ldr	r3, [pc, #152]	; (8002ee4 <HAL_ADC_Start+0x194>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f003 031f 	and.w	r3, r3, #31
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a25      	ldr	r2, [pc, #148]	; (8002ef0 <HAL_ADC_Start+0x1a0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d136      	bne.n	8002ece <HAL_ADC_Start+0x17e>
 8002e60:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <HAL_ADC_Start+0x194>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d130      	bne.n	8002ece <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d129      	bne.n	8002ece <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e88:	609a      	str	r2, [r3, #8]
 8002e8a:	e020      	b.n	8002ece <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a15      	ldr	r2, [pc, #84]	; (8002ee8 <HAL_ADC_Start+0x198>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d11b      	bne.n	8002ece <HAL_ADC_Start+0x17e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d114      	bne.n	8002ece <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	e00b      	b.n	8002ece <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f043 0210 	orr.w	r2, r3, #16
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f043 0201 	orr.w	r2, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	20000250 	.word	0x20000250
 8002ee0:	431bde83 	.word	0x431bde83
 8002ee4:	40012300 	.word	0x40012300
 8002ee8:	40012000 	.word	0x40012000
 8002eec:	40012100 	.word	0x40012100
 8002ef0:	40012200 	.word	0x40012200

08002ef4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_ADC_Stop+0x16>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e021      	b.n	8002f4e <HAL_ADC_Stop+0x5a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0201 	bic.w	r2, r2, #1
 8002f20:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d109      	bne.n	8002f44 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	f043 0201 	orr.w	r2, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x1c>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e113      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x244>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b09      	cmp	r3, #9
 8002f9e:	d925      	bls.n	8002fec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68d9      	ldr	r1, [r3, #12]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	4613      	mov	r3, r2
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3b1e      	subs	r3, #30
 8002fb6:	2207      	movs	r2, #7
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43da      	mvns	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	400a      	ands	r2, r1
 8002fc4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68d9      	ldr	r1, [r3, #12]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	4603      	mov	r3, r0
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4403      	add	r3, r0
 8002fde:	3b1e      	subs	r3, #30
 8002fe0:	409a      	lsls	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	e022      	b.n	8003032 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6919      	ldr	r1, [r3, #16]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4413      	add	r3, r2
 8003000:	2207      	movs	r2, #7
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43da      	mvns	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	400a      	ands	r2, r1
 800300e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6919      	ldr	r1, [r3, #16]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	b29b      	uxth	r3, r3
 8003020:	4618      	mov	r0, r3
 8003022:	4603      	mov	r3, r0
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4403      	add	r3, r0
 8003028:	409a      	lsls	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b06      	cmp	r3, #6
 8003038:	d824      	bhi.n	8003084 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	3b05      	subs	r3, #5
 800304c:	221f      	movs	r2, #31
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43da      	mvns	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	400a      	ands	r2, r1
 800305a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	b29b      	uxth	r3, r3
 8003068:	4618      	mov	r0, r3
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	3b05      	subs	r3, #5
 8003076:	fa00 f203 	lsl.w	r2, r0, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	635a      	str	r2, [r3, #52]	; 0x34
 8003082:	e04c      	b.n	800311e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b0c      	cmp	r3, #12
 800308a:	d824      	bhi.n	80030d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	3b23      	subs	r3, #35	; 0x23
 800309e:	221f      	movs	r2, #31
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43da      	mvns	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	400a      	ands	r2, r1
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	4618      	mov	r0, r3
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	3b23      	subs	r3, #35	; 0x23
 80030c8:	fa00 f203 	lsl.w	r2, r0, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	631a      	str	r2, [r3, #48]	; 0x30
 80030d4:	e023      	b.n	800311e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	3b41      	subs	r3, #65	; 0x41
 80030e8:	221f      	movs	r2, #31
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43da      	mvns	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	400a      	ands	r2, r1
 80030f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	4618      	mov	r0, r3
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	3b41      	subs	r3, #65	; 0x41
 8003112:	fa00 f203 	lsl.w	r2, r0, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800311e:	4b29      	ldr	r3, [pc, #164]	; (80031c4 <HAL_ADC_ConfigChannel+0x250>)
 8003120:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a28      	ldr	r2, [pc, #160]	; (80031c8 <HAL_ADC_ConfigChannel+0x254>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d10f      	bne.n	800314c <HAL_ADC_ConfigChannel+0x1d8>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b12      	cmp	r3, #18
 8003132:	d10b      	bne.n	800314c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a1d      	ldr	r2, [pc, #116]	; (80031c8 <HAL_ADC_ConfigChannel+0x254>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d12b      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x23a>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a1c      	ldr	r2, [pc, #112]	; (80031cc <HAL_ADC_ConfigChannel+0x258>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d003      	beq.n	8003168 <HAL_ADC_ConfigChannel+0x1f4>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b11      	cmp	r3, #17
 8003166:	d122      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a11      	ldr	r2, [pc, #68]	; (80031cc <HAL_ADC_ConfigChannel+0x258>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d111      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800318a:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <HAL_ADC_ConfigChannel+0x25c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a11      	ldr	r2, [pc, #68]	; (80031d4 <HAL_ADC_ConfigChannel+0x260>)
 8003190:	fba2 2303 	umull	r2, r3, r2, r3
 8003194:	0c9a      	lsrs	r2, r3, #18
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031a0:	e002      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	3b01      	subs	r3, #1
 80031a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f9      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	40012300 	.word	0x40012300
 80031c8:	40012000 	.word	0x40012000
 80031cc:	10000012 	.word	0x10000012
 80031d0:	20000250 	.word	0x20000250
 80031d4:	431bde83 	.word	0x431bde83

080031d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031e0:	4b79      	ldr	r3, [pc, #484]	; (80033c8 <ADC_Init+0x1f0>)
 80031e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	431a      	orrs	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800320c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6859      	ldr	r1, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	021a      	lsls	r2, r3, #8
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003230:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003252:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6899      	ldr	r1, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	4a58      	ldr	r2, [pc, #352]	; (80033cc <ADC_Init+0x1f4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d022      	beq.n	80032b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800327e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6899      	ldr	r1, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6899      	ldr	r1, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	e00f      	b.n	80032d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0202 	bic.w	r2, r2, #2
 80032e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6899      	ldr	r1, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	7e1b      	ldrb	r3, [r3, #24]
 80032f0:	005a      	lsls	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01b      	beq.n	800333c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003312:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003322:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6859      	ldr	r1, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	3b01      	subs	r3, #1
 8003330:	035a      	lsls	r2, r3, #13
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	e007      	b.n	800334c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800334a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800335a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	3b01      	subs	r3, #1
 8003368:	051a      	lsls	r2, r3, #20
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003380:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6899      	ldr	r1, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800338e:	025a      	lsls	r2, r3, #9
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6899      	ldr	r1, [r3, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	029a      	lsls	r2, r3, #10
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	609a      	str	r2, [r3, #8]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	40012300 	.word	0x40012300
 80033cc:	0f000001 	.word	0x0f000001

080033d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e0:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <__NVIC_SetPriorityGrouping+0x44>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033ec:	4013      	ands	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003402:	4a04      	ldr	r2, [pc, #16]	; (8003414 <__NVIC_SetPriorityGrouping+0x44>)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	60d3      	str	r3, [r2, #12]
}
 8003408:	bf00      	nop
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800341c:	4b04      	ldr	r3, [pc, #16]	; (8003430 <__NVIC_GetPriorityGrouping+0x18>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	0a1b      	lsrs	r3, r3, #8
 8003422:	f003 0307 	and.w	r3, r3, #7
}
 8003426:	4618      	mov	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	2b00      	cmp	r3, #0
 8003444:	db0b      	blt.n	800345e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	f003 021f 	and.w	r2, r3, #31
 800344c:	4907      	ldr	r1, [pc, #28]	; (800346c <__NVIC_EnableIRQ+0x38>)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	2001      	movs	r0, #1
 8003456:	fa00 f202 	lsl.w	r2, r0, r2
 800345a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	e000e100 	.word	0xe000e100

08003470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	6039      	str	r1, [r7, #0]
 800347a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800347c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003480:	2b00      	cmp	r3, #0
 8003482:	db0a      	blt.n	800349a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	b2da      	uxtb	r2, r3
 8003488:	490c      	ldr	r1, [pc, #48]	; (80034bc <__NVIC_SetPriority+0x4c>)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	0112      	lsls	r2, r2, #4
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	440b      	add	r3, r1
 8003494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003498:	e00a      	b.n	80034b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	b2da      	uxtb	r2, r3
 800349e:	4908      	ldr	r1, [pc, #32]	; (80034c0 <__NVIC_SetPriority+0x50>)
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	3b04      	subs	r3, #4
 80034a8:	0112      	lsls	r2, r2, #4
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	440b      	add	r3, r1
 80034ae:	761a      	strb	r2, [r3, #24]
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	e000e100 	.word	0xe000e100
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b089      	sub	sp, #36	; 0x24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f1c3 0307 	rsb	r3, r3, #7
 80034de:	2b04      	cmp	r3, #4
 80034e0:	bf28      	it	cs
 80034e2:	2304      	movcs	r3, #4
 80034e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3304      	adds	r3, #4
 80034ea:	2b06      	cmp	r3, #6
 80034ec:	d902      	bls.n	80034f4 <NVIC_EncodePriority+0x30>
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3b03      	subs	r3, #3
 80034f2:	e000      	b.n	80034f6 <NVIC_EncodePriority+0x32>
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f8:	f04f 32ff 	mov.w	r2, #4294967295
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43da      	mvns	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	401a      	ands	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800350c:	f04f 31ff 	mov.w	r1, #4294967295
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	fa01 f303 	lsl.w	r3, r1, r3
 8003516:	43d9      	mvns	r1, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	4313      	orrs	r3, r2
         );
}
 800351e:	4618      	mov	r0, r3
 8003520:	3724      	adds	r7, #36	; 0x24
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3b01      	subs	r3, #1
 8003538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800353c:	d301      	bcc.n	8003542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800353e:	2301      	movs	r3, #1
 8003540:	e00f      	b.n	8003562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003542:	4a0a      	ldr	r2, [pc, #40]	; (800356c <SysTick_Config+0x40>)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3b01      	subs	r3, #1
 8003548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800354a:	210f      	movs	r1, #15
 800354c:	f04f 30ff 	mov.w	r0, #4294967295
 8003550:	f7ff ff8e 	bl	8003470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <SysTick_Config+0x40>)
 8003556:	2200      	movs	r2, #0
 8003558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800355a:	4b04      	ldr	r3, [pc, #16]	; (800356c <SysTick_Config+0x40>)
 800355c:	2207      	movs	r2, #7
 800355e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	e000e010 	.word	0xe000e010

08003570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff ff29 	bl	80033d0 <__NVIC_SetPriorityGrouping>
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003586:	b580      	push	{r7, lr}
 8003588:	b086      	sub	sp, #24
 800358a:	af00      	add	r7, sp, #0
 800358c:	4603      	mov	r3, r0
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
 8003592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003598:	f7ff ff3e 	bl	8003418 <__NVIC_GetPriorityGrouping>
 800359c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	6978      	ldr	r0, [r7, #20]
 80035a4:	f7ff ff8e 	bl	80034c4 <NVIC_EncodePriority>
 80035a8:	4602      	mov	r2, r0
 80035aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ae:	4611      	mov	r1, r2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff ff5d 	bl	8003470 <__NVIC_SetPriority>
}
 80035b6:	bf00      	nop
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	4603      	mov	r3, r0
 80035c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff ff31 	bl	8003434 <__NVIC_EnableIRQ>
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff ffa2 	bl	800352c <SysTick_Config>
 80035e8:	4603      	mov	r3, r0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003600:	f7ff fb32 	bl	8002c68 <HAL_GetTick>
 8003604:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d008      	beq.n	8003624 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2280      	movs	r2, #128	; 0x80
 8003616:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e052      	b.n	80036ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0216 	bic.w	r2, r2, #22
 8003632:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695a      	ldr	r2, [r3, #20]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003642:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	2b00      	cmp	r3, #0
 800364a:	d103      	bne.n	8003654 <HAL_DMA_Abort+0x62>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003650:	2b00      	cmp	r3, #0
 8003652:	d007      	beq.n	8003664 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0208 	bic.w	r2, r2, #8
 8003662:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003674:	e013      	b.n	800369e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003676:	f7ff faf7 	bl	8002c68 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b05      	cmp	r3, #5
 8003682:	d90c      	bls.n	800369e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2220      	movs	r2, #32
 8003688:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2203      	movs	r2, #3
 800368e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e015      	b.n	80036ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e4      	bne.n	8003676 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b0:	223f      	movs	r2, #63	; 0x3f
 80036b2:	409a      	lsls	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d004      	beq.n	80036f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2280      	movs	r2, #128	; 0x80
 80036ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e00c      	b.n	800370a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2205      	movs	r2, #5
 80036f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0201 	bic.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
	...

08003718 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800372a:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <HAL_FLASH_Program+0xa0>)
 800372c:	7e1b      	ldrb	r3, [r3, #24]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d101      	bne.n	8003736 <HAL_FLASH_Program+0x1e>
 8003732:	2302      	movs	r3, #2
 8003734:	e03b      	b.n	80037ae <HAL_FLASH_Program+0x96>
 8003736:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <HAL_FLASH_Program+0xa0>)
 8003738:	2201      	movs	r2, #1
 800373a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800373c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003740:	f000 f870 	bl	8003824 <FLASH_WaitForLastOperation>
 8003744:	4603      	mov	r3, r0
 8003746:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003748:	7dfb      	ldrb	r3, [r7, #23]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d12b      	bne.n	80037a6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d105      	bne.n	8003760 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003754:	783b      	ldrb	r3, [r7, #0]
 8003756:	4619      	mov	r1, r3
 8003758:	68b8      	ldr	r0, [r7, #8]
 800375a:	f000 f91b 	bl	8003994 <FLASH_Program_Byte>
 800375e:	e016      	b.n	800378e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d105      	bne.n	8003772 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003766:	883b      	ldrh	r3, [r7, #0]
 8003768:	4619      	mov	r1, r3
 800376a:	68b8      	ldr	r0, [r7, #8]
 800376c:	f000 f8ee 	bl	800394c <FLASH_Program_HalfWord>
 8003770:	e00d      	b.n	800378e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b02      	cmp	r3, #2
 8003776:	d105      	bne.n	8003784 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	4619      	mov	r1, r3
 800377c:	68b8      	ldr	r0, [r7, #8]
 800377e:	f000 f8c3 	bl	8003908 <FLASH_Program_Word>
 8003782:	e004      	b.n	800378e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003788:	68b8      	ldr	r0, [r7, #8]
 800378a:	f000 f88b 	bl	80038a4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800378e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003792:	f000 f847 	bl	8003824 <FLASH_WaitForLastOperation>
 8003796:	4603      	mov	r3, r0
 8003798:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800379a:	4b08      	ldr	r3, [pc, #32]	; (80037bc <HAL_FLASH_Program+0xa4>)
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	4a07      	ldr	r2, [pc, #28]	; (80037bc <HAL_FLASH_Program+0xa4>)
 80037a0:	f023 0301 	bic.w	r3, r3, #1
 80037a4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80037a6:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <HAL_FLASH_Program+0xa0>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	761a      	strb	r2, [r3, #24]
  
  return status;
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000578 	.word	0x20000578
 80037bc:	40023c00 	.word	0x40023c00

080037c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80037ca:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <HAL_FLASH_Unlock+0x38>)
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	da0b      	bge.n	80037ea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80037d2:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <HAL_FLASH_Unlock+0x38>)
 80037d4:	4a09      	ldr	r2, [pc, #36]	; (80037fc <HAL_FLASH_Unlock+0x3c>)
 80037d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80037d8:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <HAL_FLASH_Unlock+0x38>)
 80037da:	4a09      	ldr	r2, [pc, #36]	; (8003800 <HAL_FLASH_Unlock+0x40>)
 80037dc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80037de:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <HAL_FLASH_Unlock+0x38>)
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	da01      	bge.n	80037ea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80037ea:	79fb      	ldrb	r3, [r7, #7]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	40023c00 	.word	0x40023c00
 80037fc:	45670123 	.word	0x45670123
 8003800:	cdef89ab 	.word	0xcdef89ab

08003804 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003808:	4b05      	ldr	r3, [pc, #20]	; (8003820 <HAL_FLASH_Lock+0x1c>)
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	4a04      	ldr	r2, [pc, #16]	; (8003820 <HAL_FLASH_Lock+0x1c>)
 800380e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003812:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	40023c00 	.word	0x40023c00

08003824 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003830:	4b1a      	ldr	r3, [pc, #104]	; (800389c <FLASH_WaitForLastOperation+0x78>)
 8003832:	2200      	movs	r2, #0
 8003834:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003836:	f7ff fa17 	bl	8002c68 <HAL_GetTick>
 800383a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800383c:	e010      	b.n	8003860 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003844:	d00c      	beq.n	8003860 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d007      	beq.n	800385c <FLASH_WaitForLastOperation+0x38>
 800384c:	f7ff fa0c 	bl	8002c68 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	429a      	cmp	r2, r3
 800385a:	d201      	bcs.n	8003860 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e019      	b.n	8003894 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003860:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <FLASH_WaitForLastOperation+0x7c>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1e8      	bne.n	800383e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <FLASH_WaitForLastOperation+0x7c>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003878:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <FLASH_WaitForLastOperation+0x7c>)
 800387a:	2201      	movs	r2, #1
 800387c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800387e:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <FLASH_WaitForLastOperation+0x7c>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800388a:	f000 f8a5 	bl	80039d8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
  
}  
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20000578 	.word	0x20000578
 80038a0:	40023c00 	.word	0x40023c00

080038a4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80038b0:	4b14      	ldr	r3, [pc, #80]	; (8003904 <FLASH_Program_DoubleWord+0x60>)
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	4a13      	ldr	r2, [pc, #76]	; (8003904 <FLASH_Program_DoubleWord+0x60>)
 80038b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80038bc:	4b11      	ldr	r3, [pc, #68]	; (8003904 <FLASH_Program_DoubleWord+0x60>)
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	4a10      	ldr	r2, [pc, #64]	; (8003904 <FLASH_Program_DoubleWord+0x60>)
 80038c2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80038c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80038c8:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <FLASH_Program_DoubleWord+0x60>)
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	4a0d      	ldr	r2, [pc, #52]	; (8003904 <FLASH_Program_DoubleWord+0x60>)
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80038da:	f3bf 8f6f 	isb	sy
}
 80038de:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80038e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	000a      	movs	r2, r1
 80038ee:	2300      	movs	r3, #0
 80038f0:	68f9      	ldr	r1, [r7, #12]
 80038f2:	3104      	adds	r1, #4
 80038f4:	4613      	mov	r3, r2
 80038f6:	600b      	str	r3, [r1, #0]
}
 80038f8:	bf00      	nop
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	40023c00 	.word	0x40023c00

08003908 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003912:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <FLASH_Program_Word+0x40>)
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	4a0c      	ldr	r2, [pc, #48]	; (8003948 <FLASH_Program_Word+0x40>)
 8003918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800391c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800391e:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <FLASH_Program_Word+0x40>)
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	4a09      	ldr	r2, [pc, #36]	; (8003948 <FLASH_Program_Word+0x40>)
 8003924:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003928:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800392a:	4b07      	ldr	r3, [pc, #28]	; (8003948 <FLASH_Program_Word+0x40>)
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	4a06      	ldr	r2, [pc, #24]	; (8003948 <FLASH_Program_Word+0x40>)
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	601a      	str	r2, [r3, #0]
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	40023c00 	.word	0x40023c00

0800394c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003958:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <FLASH_Program_HalfWord+0x44>)
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	4a0c      	ldr	r2, [pc, #48]	; (8003990 <FLASH_Program_HalfWord+0x44>)
 800395e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003962:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003964:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <FLASH_Program_HalfWord+0x44>)
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	4a09      	ldr	r2, [pc, #36]	; (8003990 <FLASH_Program_HalfWord+0x44>)
 800396a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003970:	4b07      	ldr	r3, [pc, #28]	; (8003990 <FLASH_Program_HalfWord+0x44>)
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	4a06      	ldr	r2, [pc, #24]	; (8003990 <FLASH_Program_HalfWord+0x44>)
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	887a      	ldrh	r2, [r7, #2]
 8003980:	801a      	strh	r2, [r3, #0]
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40023c00 	.word	0x40023c00

08003994 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80039a0:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <FLASH_Program_Byte+0x40>)
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	4a0b      	ldr	r2, [pc, #44]	; (80039d4 <FLASH_Program_Byte+0x40>)
 80039a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80039ac:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <FLASH_Program_Byte+0x40>)
 80039ae:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <FLASH_Program_Byte+0x40>)
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80039b4:	4b07      	ldr	r3, [pc, #28]	; (80039d4 <FLASH_Program_Byte+0x40>)
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	4a06      	ldr	r2, [pc, #24]	; (80039d4 <FLASH_Program_Byte+0x40>)
 80039ba:	f043 0301 	orr.w	r3, r3, #1
 80039be:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	78fa      	ldrb	r2, [r7, #3]
 80039c4:	701a      	strb	r2, [r3, #0]
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40023c00 	.word	0x40023c00

080039d8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80039dc:	4b2f      	ldr	r3, [pc, #188]	; (8003a9c <FLASH_SetErrorCode+0xc4>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f003 0310 	and.w	r3, r3, #16
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80039e8:	4b2d      	ldr	r3, [pc, #180]	; (8003aa0 <FLASH_SetErrorCode+0xc8>)
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f043 0310 	orr.w	r3, r3, #16
 80039f0:	4a2b      	ldr	r2, [pc, #172]	; (8003aa0 <FLASH_SetErrorCode+0xc8>)
 80039f2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80039f4:	4b29      	ldr	r3, [pc, #164]	; (8003a9c <FLASH_SetErrorCode+0xc4>)
 80039f6:	2210      	movs	r2, #16
 80039f8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80039fa:	4b28      	ldr	r3, [pc, #160]	; (8003a9c <FLASH_SetErrorCode+0xc4>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d008      	beq.n	8003a18 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003a06:	4b26      	ldr	r3, [pc, #152]	; (8003aa0 <FLASH_SetErrorCode+0xc8>)
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f043 0308 	orr.w	r3, r3, #8
 8003a0e:	4a24      	ldr	r2, [pc, #144]	; (8003aa0 <FLASH_SetErrorCode+0xc8>)
 8003a10:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003a12:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <FLASH_SetErrorCode+0xc4>)
 8003a14:	2220      	movs	r2, #32
 8003a16:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003a18:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <FLASH_SetErrorCode+0xc4>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003a24:	4b1e      	ldr	r3, [pc, #120]	; (8003aa0 <FLASH_SetErrorCode+0xc8>)
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	f043 0304 	orr.w	r3, r3, #4
 8003a2c:	4a1c      	ldr	r2, [pc, #112]	; (8003aa0 <FLASH_SetErrorCode+0xc8>)
 8003a2e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003a30:	4b1a      	ldr	r3, [pc, #104]	; (8003a9c <FLASH_SetErrorCode+0xc4>)
 8003a32:	2240      	movs	r2, #64	; 0x40
 8003a34:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003a36:	4b19      	ldr	r3, [pc, #100]	; (8003a9c <FLASH_SetErrorCode+0xc4>)
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d008      	beq.n	8003a54 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003a42:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <FLASH_SetErrorCode+0xc8>)
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	f043 0302 	orr.w	r3, r3, #2
 8003a4a:	4a15      	ldr	r2, [pc, #84]	; (8003aa0 <FLASH_SetErrorCode+0xc8>)
 8003a4c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003a4e:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <FLASH_SetErrorCode+0xc4>)
 8003a50:	2280      	movs	r2, #128	; 0x80
 8003a52:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003a54:	4b11      	ldr	r3, [pc, #68]	; (8003a9c <FLASH_SetErrorCode+0xc4>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d009      	beq.n	8003a74 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003a60:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <FLASH_SetErrorCode+0xc8>)
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	f043 0301 	orr.w	r3, r3, #1
 8003a68:	4a0d      	ldr	r2, [pc, #52]	; (8003aa0 <FLASH_SetErrorCode+0xc8>)
 8003a6a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <FLASH_SetErrorCode+0xc4>)
 8003a6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a72:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003a74:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <FLASH_SetErrorCode+0xc4>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003a80:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <FLASH_SetErrorCode+0xc8>)
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	f043 0320 	orr.w	r3, r3, #32
 8003a88:	4a05      	ldr	r2, [pc, #20]	; (8003aa0 <FLASH_SetErrorCode+0xc8>)
 8003a8a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003a8c:	4b03      	ldr	r3, [pc, #12]	; (8003a9c <FLASH_SetErrorCode+0xc4>)
 8003a8e:	2202      	movs	r2, #2
 8003a90:	60da      	str	r2, [r3, #12]
  }
}
 8003a92:	bf00      	nop
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	40023c00 	.word	0x40023c00
 8003aa0:	20000578 	.word	0x20000578

08003aa4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003ab6:	4b32      	ldr	r3, [pc, #200]	; (8003b80 <HAL_FLASHEx_Erase+0xdc>)
 8003ab8:	7e1b      	ldrb	r3, [r3, #24]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_FLASHEx_Erase+0x1e>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e05a      	b.n	8003b78 <HAL_FLASHEx_Erase+0xd4>
 8003ac2:	4b2f      	ldr	r3, [pc, #188]	; (8003b80 <HAL_FLASHEx_Erase+0xdc>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ac8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003acc:	f7ff feaa 	bl	8003824 <FLASH_WaitForLastOperation>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d14a      	bne.n	8003b70 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d117      	bne.n	8003b1a <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	4619      	mov	r1, r3
 8003af6:	4610      	mov	r0, r2
 8003af8:	f000 f846 	bl	8003b88 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003afc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b00:	f7ff fe90 	bl	8003824 <FLASH_WaitForLastOperation>
 8003b04:	4603      	mov	r3, r0
 8003b06:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003b08:	4b1e      	ldr	r3, [pc, #120]	; (8003b84 <HAL_FLASHEx_Erase+0xe0>)
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	4a1d      	ldr	r2, [pc, #116]	; (8003b84 <HAL_FLASHEx_Erase+0xe0>)
 8003b0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b12:	f023 0304 	bic.w	r3, r3, #4
 8003b16:	6113      	str	r3, [r2, #16]
 8003b18:	e028      	b.n	8003b6c <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	60bb      	str	r3, [r7, #8]
 8003b20:	e01c      	b.n	8003b5c <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	4619      	mov	r1, r3
 8003b2a:	68b8      	ldr	r0, [r7, #8]
 8003b2c:	f000 f866 	bl	8003bfc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b34:	f7ff fe76 	bl	8003824 <FLASH_WaitForLastOperation>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003b3c:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <HAL_FLASHEx_Erase+0xe0>)
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	4a10      	ldr	r2, [pc, #64]	; (8003b84 <HAL_FLASHEx_Erase+0xe0>)
 8003b42:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003b46:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	601a      	str	r2, [r3, #0]
          break;
 8003b54:	e00a      	b.n	8003b6c <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	60bb      	str	r3, [r7, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4413      	add	r3, r2
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d3da      	bcc.n	8003b22 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003b6c:	f000 f894 	bl	8003c98 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003b70:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <HAL_FLASHEx_Erase+0xdc>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	761a      	strb	r2, [r3, #24]

  return status;
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20000578 	.word	0x20000578
 8003b84:	40023c00 	.word	0x40023c00

08003b88 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	6039      	str	r1, [r7, #0]
 8003b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003b94:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <FLASH_MassErase+0x70>)
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	4a17      	ldr	r2, [pc, #92]	; (8003bf8 <FLASH_MassErase+0x70>)
 8003b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b9e:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d108      	bne.n	8003bb8 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8003ba6:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <FLASH_MassErase+0x70>)
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	4a13      	ldr	r2, [pc, #76]	; (8003bf8 <FLASH_MassErase+0x70>)
 8003bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bb0:	f043 0304 	orr.w	r3, r3, #4
 8003bb4:	6113      	str	r3, [r2, #16]
 8003bb6:	e00f      	b.n	8003bd8 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d106      	bne.n	8003bcc <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8003bbe:	4b0e      	ldr	r3, [pc, #56]	; (8003bf8 <FLASH_MassErase+0x70>)
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	4a0d      	ldr	r2, [pc, #52]	; (8003bf8 <FLASH_MassErase+0x70>)
 8003bc4:	f043 0304 	orr.w	r3, r3, #4
 8003bc8:	6113      	str	r3, [r2, #16]
 8003bca:	e005      	b.n	8003bd8 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8003bcc:	4b0a      	ldr	r3, [pc, #40]	; (8003bf8 <FLASH_MassErase+0x70>)
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	4a09      	ldr	r2, [pc, #36]	; (8003bf8 <FLASH_MassErase+0x70>)
 8003bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd6:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003bd8:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <FLASH_MassErase+0x70>)
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	4313      	orrs	r3, r2
 8003be2:	4a05      	ldr	r2, [pc, #20]	; (8003bf8 <FLASH_MassErase+0x70>)
 8003be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be8:	6113      	str	r3, [r2, #16]
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40023c00 	.word	0x40023c00

08003bfc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003c0c:	78fb      	ldrb	r3, [r7, #3]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d102      	bne.n	8003c18 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	e010      	b.n	8003c3a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d103      	bne.n	8003c26 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	e009      	b.n	8003c3a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003c26:	78fb      	ldrb	r3, [r7, #3]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d103      	bne.n	8003c34 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	e002      	b.n	8003c3a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003c34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c38:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b0b      	cmp	r3, #11
 8003c3e:	d902      	bls.n	8003c46 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3304      	adds	r3, #4
 8003c44:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c46:	4b13      	ldr	r3, [pc, #76]	; (8003c94 <FLASH_Erase_Sector+0x98>)
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	4a12      	ldr	r2, [pc, #72]	; (8003c94 <FLASH_Erase_Sector+0x98>)
 8003c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c50:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003c52:	4b10      	ldr	r3, [pc, #64]	; (8003c94 <FLASH_Erase_Sector+0x98>)
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	490f      	ldr	r1, [pc, #60]	; (8003c94 <FLASH_Erase_Sector+0x98>)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003c5e:	4b0d      	ldr	r3, [pc, #52]	; (8003c94 <FLASH_Erase_Sector+0x98>)
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	4a0c      	ldr	r2, [pc, #48]	; (8003c94 <FLASH_Erase_Sector+0x98>)
 8003c64:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003c68:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <FLASH_Erase_Sector+0x98>)
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4313      	orrs	r3, r2
 8003c74:	4a07      	ldr	r2, [pc, #28]	; (8003c94 <FLASH_Erase_Sector+0x98>)
 8003c76:	f043 0302 	orr.w	r3, r3, #2
 8003c7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <FLASH_Erase_Sector+0x98>)
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	4a04      	ldr	r2, [pc, #16]	; (8003c94 <FLASH_Erase_Sector+0x98>)
 8003c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c86:	6113      	str	r3, [r2, #16]
}
 8003c88:	bf00      	nop
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	40023c00 	.word	0x40023c00

08003c98 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003c9c:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <FLASH_FlushCaches+0x88>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d017      	beq.n	8003cd8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003ca8:	4b1d      	ldr	r3, [pc, #116]	; (8003d20 <FLASH_FlushCaches+0x88>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1c      	ldr	r2, [pc, #112]	; (8003d20 <FLASH_FlushCaches+0x88>)
 8003cae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cb2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003cb4:	4b1a      	ldr	r3, [pc, #104]	; (8003d20 <FLASH_FlushCaches+0x88>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a19      	ldr	r2, [pc, #100]	; (8003d20 <FLASH_FlushCaches+0x88>)
 8003cba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cbe:	6013      	str	r3, [r2, #0]
 8003cc0:	4b17      	ldr	r3, [pc, #92]	; (8003d20 <FLASH_FlushCaches+0x88>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a16      	ldr	r2, [pc, #88]	; (8003d20 <FLASH_FlushCaches+0x88>)
 8003cc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cca:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ccc:	4b14      	ldr	r3, [pc, #80]	; (8003d20 <FLASH_FlushCaches+0x88>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a13      	ldr	r2, [pc, #76]	; (8003d20 <FLASH_FlushCaches+0x88>)
 8003cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cd6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003cd8:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <FLASH_FlushCaches+0x88>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d017      	beq.n	8003d14 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003ce4:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <FLASH_FlushCaches+0x88>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a0d      	ldr	r2, [pc, #52]	; (8003d20 <FLASH_FlushCaches+0x88>)
 8003cea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cee:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <FLASH_FlushCaches+0x88>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a0a      	ldr	r2, [pc, #40]	; (8003d20 <FLASH_FlushCaches+0x88>)
 8003cf6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cfa:	6013      	str	r3, [r2, #0]
 8003cfc:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <FLASH_FlushCaches+0x88>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a07      	ldr	r2, [pc, #28]	; (8003d20 <FLASH_FlushCaches+0x88>)
 8003d02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d06:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <FLASH_FlushCaches+0x88>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a04      	ldr	r2, [pc, #16]	; (8003d20 <FLASH_FlushCaches+0x88>)
 8003d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d12:	6013      	str	r3, [r2, #0]
  }
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40023c00 	.word	0x40023c00

08003d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b089      	sub	sp, #36	; 0x24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	e177      	b.n	8004030 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d40:	2201      	movs	r2, #1
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4013      	ands	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	f040 8166 	bne.w	800402a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d005      	beq.n	8003d76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d130      	bne.n	8003dd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	2203      	movs	r2, #3
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dac:	2201      	movs	r2, #1
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	f003 0201 	and.w	r2, r3, #1
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 0303 	and.w	r3, r3, #3
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d017      	beq.n	8003e14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	2203      	movs	r2, #3
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d123      	bne.n	8003e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	08da      	lsrs	r2, r3, #3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3208      	adds	r2, #8
 8003e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	220f      	movs	r2, #15
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	08da      	lsrs	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3208      	adds	r2, #8
 8003e62:	69b9      	ldr	r1, [r7, #24]
 8003e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	2203      	movs	r2, #3
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 0203 	and.w	r2, r3, #3
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80c0 	beq.w	800402a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	4b66      	ldr	r3, [pc, #408]	; (8004048 <HAL_GPIO_Init+0x324>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	4a65      	ldr	r2, [pc, #404]	; (8004048 <HAL_GPIO_Init+0x324>)
 8003eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eba:	4b63      	ldr	r3, [pc, #396]	; (8004048 <HAL_GPIO_Init+0x324>)
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ec6:	4a61      	ldr	r2, [pc, #388]	; (800404c <HAL_GPIO_Init+0x328>)
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	089b      	lsrs	r3, r3, #2
 8003ecc:	3302      	adds	r3, #2
 8003ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	220f      	movs	r2, #15
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a58      	ldr	r2, [pc, #352]	; (8004050 <HAL_GPIO_Init+0x32c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d037      	beq.n	8003f62 <HAL_GPIO_Init+0x23e>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a57      	ldr	r2, [pc, #348]	; (8004054 <HAL_GPIO_Init+0x330>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d031      	beq.n	8003f5e <HAL_GPIO_Init+0x23a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a56      	ldr	r2, [pc, #344]	; (8004058 <HAL_GPIO_Init+0x334>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d02b      	beq.n	8003f5a <HAL_GPIO_Init+0x236>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a55      	ldr	r2, [pc, #340]	; (800405c <HAL_GPIO_Init+0x338>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d025      	beq.n	8003f56 <HAL_GPIO_Init+0x232>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a54      	ldr	r2, [pc, #336]	; (8004060 <HAL_GPIO_Init+0x33c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d01f      	beq.n	8003f52 <HAL_GPIO_Init+0x22e>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a53      	ldr	r2, [pc, #332]	; (8004064 <HAL_GPIO_Init+0x340>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d019      	beq.n	8003f4e <HAL_GPIO_Init+0x22a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a52      	ldr	r2, [pc, #328]	; (8004068 <HAL_GPIO_Init+0x344>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d013      	beq.n	8003f4a <HAL_GPIO_Init+0x226>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a51      	ldr	r2, [pc, #324]	; (800406c <HAL_GPIO_Init+0x348>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00d      	beq.n	8003f46 <HAL_GPIO_Init+0x222>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a50      	ldr	r2, [pc, #320]	; (8004070 <HAL_GPIO_Init+0x34c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d007      	beq.n	8003f42 <HAL_GPIO_Init+0x21e>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a4f      	ldr	r2, [pc, #316]	; (8004074 <HAL_GPIO_Init+0x350>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d101      	bne.n	8003f3e <HAL_GPIO_Init+0x21a>
 8003f3a:	2309      	movs	r3, #9
 8003f3c:	e012      	b.n	8003f64 <HAL_GPIO_Init+0x240>
 8003f3e:	230a      	movs	r3, #10
 8003f40:	e010      	b.n	8003f64 <HAL_GPIO_Init+0x240>
 8003f42:	2308      	movs	r3, #8
 8003f44:	e00e      	b.n	8003f64 <HAL_GPIO_Init+0x240>
 8003f46:	2307      	movs	r3, #7
 8003f48:	e00c      	b.n	8003f64 <HAL_GPIO_Init+0x240>
 8003f4a:	2306      	movs	r3, #6
 8003f4c:	e00a      	b.n	8003f64 <HAL_GPIO_Init+0x240>
 8003f4e:	2305      	movs	r3, #5
 8003f50:	e008      	b.n	8003f64 <HAL_GPIO_Init+0x240>
 8003f52:	2304      	movs	r3, #4
 8003f54:	e006      	b.n	8003f64 <HAL_GPIO_Init+0x240>
 8003f56:	2303      	movs	r3, #3
 8003f58:	e004      	b.n	8003f64 <HAL_GPIO_Init+0x240>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e002      	b.n	8003f64 <HAL_GPIO_Init+0x240>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <HAL_GPIO_Init+0x240>
 8003f62:	2300      	movs	r3, #0
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	f002 0203 	and.w	r2, r2, #3
 8003f6a:	0092      	lsls	r2, r2, #2
 8003f6c:	4093      	lsls	r3, r2
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f74:	4935      	ldr	r1, [pc, #212]	; (800404c <HAL_GPIO_Init+0x328>)
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	089b      	lsrs	r3, r3, #2
 8003f7a:	3302      	adds	r3, #2
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f82:	4b3d      	ldr	r3, [pc, #244]	; (8004078 <HAL_GPIO_Init+0x354>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fa6:	4a34      	ldr	r2, [pc, #208]	; (8004078 <HAL_GPIO_Init+0x354>)
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fac:	4b32      	ldr	r3, [pc, #200]	; (8004078 <HAL_GPIO_Init+0x354>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fd0:	4a29      	ldr	r2, [pc, #164]	; (8004078 <HAL_GPIO_Init+0x354>)
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fd6:	4b28      	ldr	r3, [pc, #160]	; (8004078 <HAL_GPIO_Init+0x354>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ffa:	4a1f      	ldr	r2, [pc, #124]	; (8004078 <HAL_GPIO_Init+0x354>)
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004000:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <HAL_GPIO_Init+0x354>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	43db      	mvns	r3, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4013      	ands	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004024:	4a14      	ldr	r2, [pc, #80]	; (8004078 <HAL_GPIO_Init+0x354>)
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	3301      	adds	r3, #1
 800402e:	61fb      	str	r3, [r7, #28]
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	2b0f      	cmp	r3, #15
 8004034:	f67f ae84 	bls.w	8003d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004038:	bf00      	nop
 800403a:	bf00      	nop
 800403c:	3724      	adds	r7, #36	; 0x24
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800
 800404c:	40013800 	.word	0x40013800
 8004050:	40020000 	.word	0x40020000
 8004054:	40020400 	.word	0x40020400
 8004058:	40020800 	.word	0x40020800
 800405c:	40020c00 	.word	0x40020c00
 8004060:	40021000 	.word	0x40021000
 8004064:	40021400 	.word	0x40021400
 8004068:	40021800 	.word	0x40021800
 800406c:	40021c00 	.word	0x40021c00
 8004070:	40022000 	.word	0x40022000
 8004074:	40022400 	.word	0x40022400
 8004078:	40013c00 	.word	0x40013c00

0800407c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	887b      	ldrh	r3, [r7, #2]
 800408e:	4013      	ands	r3, r2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004094:	2301      	movs	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
 8004098:	e001      	b.n	800409e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800409a:	2300      	movs	r3, #0
 800409c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800409e:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	807b      	strh	r3, [r7, #2]
 80040b8:	4613      	mov	r3, r2
 80040ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040bc:	787b      	ldrb	r3, [r7, #1]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040c2:	887a      	ldrh	r2, [r7, #2]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040c8:	e003      	b.n	80040d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040ca:	887b      	ldrh	r3, [r7, #2]
 80040cc:	041a      	lsls	r2, r3, #16
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	619a      	str	r2, [r3, #24]
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
	...

080040e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4603      	mov	r3, r0
 80040e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80040ea:	4b08      	ldr	r3, [pc, #32]	; (800410c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040ec:	695a      	ldr	r2, [r3, #20]
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	4013      	ands	r3, r2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d006      	beq.n	8004104 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040f6:	4a05      	ldr	r2, [pc, #20]	; (800410c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040f8:	88fb      	ldrh	r3, [r7, #6]
 80040fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fc ffea 	bl	80010d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004104:	bf00      	nop
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40013c00 	.word	0x40013c00

08004110 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e12b      	b.n	800437a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fc fb7a 	bl	8000830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2224      	movs	r2, #36	; 0x24
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0201 	bic.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004162:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004172:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004174:	f001 fa40 	bl	80055f8 <HAL_RCC_GetPCLK1Freq>
 8004178:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	4a81      	ldr	r2, [pc, #516]	; (8004384 <HAL_I2C_Init+0x274>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d807      	bhi.n	8004194 <HAL_I2C_Init+0x84>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4a80      	ldr	r2, [pc, #512]	; (8004388 <HAL_I2C_Init+0x278>)
 8004188:	4293      	cmp	r3, r2
 800418a:	bf94      	ite	ls
 800418c:	2301      	movls	r3, #1
 800418e:	2300      	movhi	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	e006      	b.n	80041a2 <HAL_I2C_Init+0x92>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4a7d      	ldr	r2, [pc, #500]	; (800438c <HAL_I2C_Init+0x27c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	bf94      	ite	ls
 800419c:	2301      	movls	r3, #1
 800419e:	2300      	movhi	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e0e7      	b.n	800437a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4a78      	ldr	r2, [pc, #480]	; (8004390 <HAL_I2C_Init+0x280>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	0c9b      	lsrs	r3, r3, #18
 80041b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	4a6a      	ldr	r2, [pc, #424]	; (8004384 <HAL_I2C_Init+0x274>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d802      	bhi.n	80041e4 <HAL_I2C_Init+0xd4>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	3301      	adds	r3, #1
 80041e2:	e009      	b.n	80041f8 <HAL_I2C_Init+0xe8>
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041ea:	fb02 f303 	mul.w	r3, r2, r3
 80041ee:	4a69      	ldr	r2, [pc, #420]	; (8004394 <HAL_I2C_Init+0x284>)
 80041f0:	fba2 2303 	umull	r2, r3, r2, r3
 80041f4:	099b      	lsrs	r3, r3, #6
 80041f6:	3301      	adds	r3, #1
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6812      	ldr	r2, [r2, #0]
 80041fc:	430b      	orrs	r3, r1
 80041fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800420a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	495c      	ldr	r1, [pc, #368]	; (8004384 <HAL_I2C_Init+0x274>)
 8004214:	428b      	cmp	r3, r1
 8004216:	d819      	bhi.n	800424c <HAL_I2C_Init+0x13c>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	1e59      	subs	r1, r3, #1
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	fbb1 f3f3 	udiv	r3, r1, r3
 8004226:	1c59      	adds	r1, r3, #1
 8004228:	f640 73fc 	movw	r3, #4092	; 0xffc
 800422c:	400b      	ands	r3, r1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <HAL_I2C_Init+0x138>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1e59      	subs	r1, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004240:	3301      	adds	r3, #1
 8004242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004246:	e051      	b.n	80042ec <HAL_I2C_Init+0x1dc>
 8004248:	2304      	movs	r3, #4
 800424a:	e04f      	b.n	80042ec <HAL_I2C_Init+0x1dc>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d111      	bne.n	8004278 <HAL_I2C_Init+0x168>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	1e58      	subs	r0, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6859      	ldr	r1, [r3, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	440b      	add	r3, r1
 8004262:	fbb0 f3f3 	udiv	r3, r0, r3
 8004266:	3301      	adds	r3, #1
 8004268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf0c      	ite	eq
 8004270:	2301      	moveq	r3, #1
 8004272:	2300      	movne	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	e012      	b.n	800429e <HAL_I2C_Init+0x18e>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	1e58      	subs	r0, r3, #1
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6859      	ldr	r1, [r3, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	0099      	lsls	r1, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	fbb0 f3f3 	udiv	r3, r0, r3
 800428e:	3301      	adds	r3, #1
 8004290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf0c      	ite	eq
 8004298:	2301      	moveq	r3, #1
 800429a:	2300      	movne	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_I2C_Init+0x196>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e022      	b.n	80042ec <HAL_I2C_Init+0x1dc>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10e      	bne.n	80042cc <HAL_I2C_Init+0x1bc>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1e58      	subs	r0, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6859      	ldr	r1, [r3, #4]
 80042b6:	460b      	mov	r3, r1
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	440b      	add	r3, r1
 80042bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80042c0:	3301      	adds	r3, #1
 80042c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ca:	e00f      	b.n	80042ec <HAL_I2C_Init+0x1dc>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	1e58      	subs	r0, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6859      	ldr	r1, [r3, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	0099      	lsls	r1, r3, #2
 80042dc:	440b      	add	r3, r1
 80042de:	fbb0 f3f3 	udiv	r3, r0, r3
 80042e2:	3301      	adds	r3, #1
 80042e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	6809      	ldr	r1, [r1, #0]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69da      	ldr	r2, [r3, #28]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800431a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6911      	ldr	r1, [r2, #16]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	68d2      	ldr	r2, [r2, #12]
 8004326:	4311      	orrs	r1, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	430b      	orrs	r3, r1
 800432e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	695a      	ldr	r2, [r3, #20]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	000186a0 	.word	0x000186a0
 8004388:	001e847f 	.word	0x001e847f
 800438c:	003d08ff 	.word	0x003d08ff
 8004390:	431bde83 	.word	0x431bde83
 8004394:	10624dd3 	.word	0x10624dd3

08004398 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af02      	add	r7, sp, #8
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	461a      	mov	r2, r3
 80043a4:	460b      	mov	r3, r1
 80043a6:	817b      	strh	r3, [r7, #10]
 80043a8:	4613      	mov	r3, r2
 80043aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043ac:	f7fe fc5c 	bl	8002c68 <HAL_GetTick>
 80043b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	f040 80e0 	bne.w	8004580 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	2319      	movs	r3, #25
 80043c6:	2201      	movs	r2, #1
 80043c8:	4970      	ldr	r1, [pc, #448]	; (800458c <HAL_I2C_Master_Transmit+0x1f4>)
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 fa92 	bl	80048f4 <I2C_WaitOnFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80043d6:	2302      	movs	r3, #2
 80043d8:	e0d3      	b.n	8004582 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_I2C_Master_Transmit+0x50>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e0cc      	b.n	8004582 <HAL_I2C_Master_Transmit+0x1ea>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d007      	beq.n	800440e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 0201 	orr.w	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800441c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2221      	movs	r2, #33	; 0x21
 8004422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2210      	movs	r2, #16
 800442a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	893a      	ldrh	r2, [r7, #8]
 800443e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4a50      	ldr	r2, [pc, #320]	; (8004590 <HAL_I2C_Master_Transmit+0x1f8>)
 800444e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004450:	8979      	ldrh	r1, [r7, #10]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	6a3a      	ldr	r2, [r7, #32]
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 f9ca 	bl	80047f0 <I2C_MasterRequestWrite>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e08d      	b.n	8004582 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004466:	2300      	movs	r3, #0
 8004468:	613b      	str	r3, [r7, #16]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	613b      	str	r3, [r7, #16]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800447c:	e066      	b.n	800454c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	6a39      	ldr	r1, [r7, #32]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 fb0c 	bl	8004aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00d      	beq.n	80044aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	2b04      	cmp	r3, #4
 8004494:	d107      	bne.n	80044a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e06b      	b.n	8004582 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	781a      	ldrb	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d2:	3b01      	subs	r3, #1
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d11b      	bne.n	8004520 <HAL_I2C_Master_Transmit+0x188>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d017      	beq.n	8004520 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	781a      	ldrb	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	6a39      	ldr	r1, [r7, #32]
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 fafc 	bl	8004b22 <I2C_WaitOnBTFFlagUntilTimeout>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00d      	beq.n	800454c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	2b04      	cmp	r3, #4
 8004536:	d107      	bne.n	8004548 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004546:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e01a      	b.n	8004582 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004550:	2b00      	cmp	r3, #0
 8004552:	d194      	bne.n	800447e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	e000      	b.n	8004582 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004580:	2302      	movs	r3, #2
  }
}
 8004582:	4618      	mov	r0, r3
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	00100002 	.word	0x00100002
 8004590:	ffff0000 	.word	0xffff0000

08004594 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08a      	sub	sp, #40	; 0x28
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	607a      	str	r2, [r7, #4]
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	460b      	mov	r3, r1
 80045a2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80045a4:	f7fe fb60 	bl	8002c68 <HAL_GetTick>
 80045a8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	f040 8111 	bne.w	80047de <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	2319      	movs	r3, #25
 80045c2:	2201      	movs	r2, #1
 80045c4:	4988      	ldr	r1, [pc, #544]	; (80047e8 <HAL_I2C_IsDeviceReady+0x254>)
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 f994 	bl	80048f4 <I2C_WaitOnFlagUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80045d2:	2302      	movs	r3, #2
 80045d4:	e104      	b.n	80047e0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_I2C_IsDeviceReady+0x50>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e0fd      	b.n	80047e0 <HAL_I2C_IsDeviceReady+0x24c>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d007      	beq.n	800460a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0201 	orr.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004618:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2224      	movs	r2, #36	; 0x24
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4a70      	ldr	r2, [pc, #448]	; (80047ec <HAL_I2C_IsDeviceReady+0x258>)
 800462c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800463c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2200      	movs	r2, #0
 8004646:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 f952 	bl	80048f4 <I2C_WaitOnFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00d      	beq.n	8004672 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004664:	d103      	bne.n	800466e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800466c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e0b6      	b.n	80047e0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004672:	897b      	ldrh	r3, [r7, #10]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	461a      	mov	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004680:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004682:	f7fe faf1 	bl	8002c68 <HAL_GetTick>
 8004686:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b02      	cmp	r3, #2
 8004694:	bf0c      	ite	eq
 8004696:	2301      	moveq	r3, #1
 8004698:	2300      	movne	r3, #0
 800469a:	b2db      	uxtb	r3, r3
 800469c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ac:	bf0c      	ite	eq
 80046ae:	2301      	moveq	r3, #1
 80046b0:	2300      	movne	r3, #0
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80046b6:	e025      	b.n	8004704 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046b8:	f7fe fad6 	bl	8002c68 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d302      	bcc.n	80046ce <HAL_I2C_IsDeviceReady+0x13a>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d103      	bne.n	80046d6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	22a0      	movs	r2, #160	; 0xa0
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	bf0c      	ite	eq
 80046e4:	2301      	moveq	r3, #1
 80046e6:	2300      	movne	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046fa:	bf0c      	ite	eq
 80046fc:	2301      	moveq	r3, #1
 80046fe:	2300      	movne	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2ba0      	cmp	r3, #160	; 0xa0
 800470e:	d005      	beq.n	800471c <HAL_I2C_IsDeviceReady+0x188>
 8004710:	7dfb      	ldrb	r3, [r7, #23]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d102      	bne.n	800471c <HAL_I2C_IsDeviceReady+0x188>
 8004716:	7dbb      	ldrb	r3, [r7, #22]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0cd      	beq.n	80046b8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b02      	cmp	r3, #2
 8004730:	d129      	bne.n	8004786 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004740:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004742:	2300      	movs	r3, #0
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	613b      	str	r3, [r7, #16]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	2319      	movs	r3, #25
 800475e:	2201      	movs	r2, #1
 8004760:	4921      	ldr	r1, [pc, #132]	; (80047e8 <HAL_I2C_IsDeviceReady+0x254>)
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 f8c6 	bl	80048f4 <I2C_WaitOnFlagUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e036      	b.n	80047e0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	e02c      	b.n	80047e0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004794:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800479e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	2319      	movs	r3, #25
 80047a6:	2201      	movs	r2, #1
 80047a8:	490f      	ldr	r1, [pc, #60]	; (80047e8 <HAL_I2C_IsDeviceReady+0x254>)
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f8a2 	bl	80048f4 <I2C_WaitOnFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e012      	b.n	80047e0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	3301      	adds	r3, #1
 80047be:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	f4ff af32 	bcc.w	800462e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80047de:	2302      	movs	r3, #2
  }
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3720      	adds	r7, #32
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	00100002 	.word	0x00100002
 80047ec:	ffff0000 	.word	0xffff0000

080047f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af02      	add	r7, sp, #8
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	607a      	str	r2, [r7, #4]
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	460b      	mov	r3, r1
 80047fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2b08      	cmp	r3, #8
 800480a:	d006      	beq.n	800481a <I2C_MasterRequestWrite+0x2a>
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d003      	beq.n	800481a <I2C_MasterRequestWrite+0x2a>
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004818:	d108      	bne.n	800482c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	e00b      	b.n	8004844 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004830:	2b12      	cmp	r3, #18
 8004832:	d107      	bne.n	8004844 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004842:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 f84f 	bl	80048f4 <I2C_WaitOnFlagUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00d      	beq.n	8004878 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800486a:	d103      	bne.n	8004874 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004872:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e035      	b.n	80048e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004880:	d108      	bne.n	8004894 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004882:	897b      	ldrh	r3, [r7, #10]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	461a      	mov	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004890:	611a      	str	r2, [r3, #16]
 8004892:	e01b      	b.n	80048cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004894:	897b      	ldrh	r3, [r7, #10]
 8004896:	11db      	asrs	r3, r3, #7
 8004898:	b2db      	uxtb	r3, r3
 800489a:	f003 0306 	and.w	r3, r3, #6
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	f063 030f 	orn	r3, r3, #15
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	490e      	ldr	r1, [pc, #56]	; (80048ec <I2C_MasterRequestWrite+0xfc>)
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 f875 	bl	80049a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e010      	b.n	80048e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048c2:	897b      	ldrh	r3, [r7, #10]
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	4907      	ldr	r1, [pc, #28]	; (80048f0 <I2C_MasterRequestWrite+0x100>)
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 f865 	bl	80049a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e000      	b.n	80048e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	00010008 	.word	0x00010008
 80048f0:	00010002 	.word	0x00010002

080048f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	4613      	mov	r3, r2
 8004902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004904:	e025      	b.n	8004952 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490c:	d021      	beq.n	8004952 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800490e:	f7fe f9ab 	bl	8002c68 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d302      	bcc.n	8004924 <I2C_WaitOnFlagUntilTimeout+0x30>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d116      	bne.n	8004952 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2220      	movs	r2, #32
 800492e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f043 0220 	orr.w	r2, r3, #32
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e023      	b.n	800499a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	0c1b      	lsrs	r3, r3, #16
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b01      	cmp	r3, #1
 800495a:	d10d      	bne.n	8004978 <I2C_WaitOnFlagUntilTimeout+0x84>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	43da      	mvns	r2, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4013      	ands	r3, r2
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	bf0c      	ite	eq
 800496e:	2301      	moveq	r3, #1
 8004970:	2300      	movne	r3, #0
 8004972:	b2db      	uxtb	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	e00c      	b.n	8004992 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	43da      	mvns	r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4013      	ands	r3, r2
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	bf0c      	ite	eq
 800498a:	2301      	moveq	r3, #1
 800498c:	2300      	movne	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	461a      	mov	r2, r3
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	429a      	cmp	r2, r3
 8004996:	d0b6      	beq.n	8004906 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	607a      	str	r2, [r7, #4]
 80049ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049b0:	e051      	b.n	8004a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c0:	d123      	bne.n	8004a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2220      	movs	r2, #32
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	f043 0204 	orr.w	r2, r3, #4
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e046      	b.n	8004a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a10:	d021      	beq.n	8004a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a12:	f7fe f929 	bl	8002c68 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d302      	bcc.n	8004a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d116      	bne.n	8004a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f043 0220 	orr.w	r2, r3, #32
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e020      	b.n	8004a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	0c1b      	lsrs	r3, r3, #16
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d10c      	bne.n	8004a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	43da      	mvns	r2, r3
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	bf14      	ite	ne
 8004a72:	2301      	movne	r3, #1
 8004a74:	2300      	moveq	r3, #0
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	e00b      	b.n	8004a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	43da      	mvns	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	4013      	ands	r3, r2
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	bf14      	ite	ne
 8004a8c:	2301      	movne	r3, #1
 8004a8e:	2300      	moveq	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d18d      	bne.n	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aac:	e02d      	b.n	8004b0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 f878 	bl	8004ba4 <I2C_IsAcknowledgeFailed>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e02d      	b.n	8004b1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac4:	d021      	beq.n	8004b0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac6:	f7fe f8cf 	bl	8002c68 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d302      	bcc.n	8004adc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d116      	bne.n	8004b0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	f043 0220 	orr.w	r2, r3, #32
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e007      	b.n	8004b1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b14:	2b80      	cmp	r3, #128	; 0x80
 8004b16:	d1ca      	bne.n	8004aae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b2e:	e02d      	b.n	8004b8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 f837 	bl	8004ba4 <I2C_IsAcknowledgeFailed>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e02d      	b.n	8004b9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b46:	d021      	beq.n	8004b8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b48:	f7fe f88e 	bl	8002c68 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d302      	bcc.n	8004b5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d116      	bne.n	8004b8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	f043 0220 	orr.w	r2, r3, #32
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e007      	b.n	8004b9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d1ca      	bne.n	8004b30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bba:	d11b      	bne.n	8004bf4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	f043 0204 	orr.w	r2, r3, #4
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d129      	bne.n	8004c6c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2224      	movs	r2, #36	; 0x24
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0201 	bic.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0210 	bic.w	r2, r2, #16
 8004c3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	e000      	b.n	8004c6e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004c6c:	2302      	movs	r3, #2
  }
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b085      	sub	sp, #20
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
 8004c82:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004c84:	2300      	movs	r3, #0
 8004c86:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d12a      	bne.n	8004cea <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2224      	movs	r2, #36	; 0x24
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0201 	bic.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004cb4:	89fb      	ldrh	r3, [r7, #14]
 8004cb6:	f023 030f 	bic.w	r3, r3, #15
 8004cba:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	89fb      	ldrh	r3, [r7, #14]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	89fa      	ldrh	r2, [r7, #14]
 8004ccc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f042 0201 	orr.w	r2, r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	e000      	b.n	8004cec <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004cea:	2302      	movs	r3, #2
  }
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d02:	2300      	movs	r3, #0
 8004d04:	603b      	str	r3, [r7, #0]
 8004d06:	4b20      	ldr	r3, [pc, #128]	; (8004d88 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	4a1f      	ldr	r2, [pc, #124]	; (8004d88 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d10:	6413      	str	r3, [r2, #64]	; 0x40
 8004d12:	4b1d      	ldr	r3, [pc, #116]	; (8004d88 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	603b      	str	r3, [r7, #0]
 8004d1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d1e:	4b1b      	ldr	r3, [pc, #108]	; (8004d8c <HAL_PWREx_EnableOverDrive+0x94>)
 8004d20:	2201      	movs	r2, #1
 8004d22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d24:	f7fd ffa0 	bl	8002c68 <HAL_GetTick>
 8004d28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d2a:	e009      	b.n	8004d40 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d2c:	f7fd ff9c 	bl	8002c68 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d3a:	d901      	bls.n	8004d40 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e01f      	b.n	8004d80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d40:	4b13      	ldr	r3, [pc, #76]	; (8004d90 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4c:	d1ee      	bne.n	8004d2c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d4e:	4b11      	ldr	r3, [pc, #68]	; (8004d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d50:	2201      	movs	r2, #1
 8004d52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d54:	f7fd ff88 	bl	8002c68 <HAL_GetTick>
 8004d58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d5a:	e009      	b.n	8004d70 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d5c:	f7fd ff84 	bl	8002c68 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d6a:	d901      	bls.n	8004d70 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e007      	b.n	8004d80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d70:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d7c:	d1ee      	bne.n	8004d5c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	420e0040 	.word	0x420e0040
 8004d90:	40007000 	.word	0x40007000
 8004d94:	420e0044 	.word	0x420e0044

08004d98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e267      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d075      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004db6:	4b88      	ldr	r3, [pc, #544]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 030c 	and.w	r3, r3, #12
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d00c      	beq.n	8004ddc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dc2:	4b85      	ldr	r3, [pc, #532]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d112      	bne.n	8004df4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dce:	4b82      	ldr	r3, [pc, #520]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dda:	d10b      	bne.n	8004df4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ddc:	4b7e      	ldr	r3, [pc, #504]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d05b      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x108>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d157      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e242      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dfc:	d106      	bne.n	8004e0c <HAL_RCC_OscConfig+0x74>
 8004dfe:	4b76      	ldr	r3, [pc, #472]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a75      	ldr	r2, [pc, #468]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e08:	6013      	str	r3, [r2, #0]
 8004e0a:	e01d      	b.n	8004e48 <HAL_RCC_OscConfig+0xb0>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e14:	d10c      	bne.n	8004e30 <HAL_RCC_OscConfig+0x98>
 8004e16:	4b70      	ldr	r3, [pc, #448]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a6f      	ldr	r2, [pc, #444]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	4b6d      	ldr	r3, [pc, #436]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a6c      	ldr	r2, [pc, #432]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	e00b      	b.n	8004e48 <HAL_RCC_OscConfig+0xb0>
 8004e30:	4b69      	ldr	r3, [pc, #420]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a68      	ldr	r2, [pc, #416]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	4b66      	ldr	r3, [pc, #408]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a65      	ldr	r2, [pc, #404]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d013      	beq.n	8004e78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e50:	f7fd ff0a 	bl	8002c68 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e58:	f7fd ff06 	bl	8002c68 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b64      	cmp	r3, #100	; 0x64
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e207      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e6a:	4b5b      	ldr	r3, [pc, #364]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0f0      	beq.n	8004e58 <HAL_RCC_OscConfig+0xc0>
 8004e76:	e014      	b.n	8004ea2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e78:	f7fd fef6 	bl	8002c68 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e80:	f7fd fef2 	bl	8002c68 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b64      	cmp	r3, #100	; 0x64
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e1f3      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e92:	4b51      	ldr	r3, [pc, #324]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f0      	bne.n	8004e80 <HAL_RCC_OscConfig+0xe8>
 8004e9e:	e000      	b.n	8004ea2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d063      	beq.n	8004f76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eae:	4b4a      	ldr	r3, [pc, #296]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 030c 	and.w	r3, r3, #12
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00b      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eba:	4b47      	ldr	r3, [pc, #284]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d11c      	bne.n	8004f00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ec6:	4b44      	ldr	r3, [pc, #272]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d116      	bne.n	8004f00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ed2:	4b41      	ldr	r3, [pc, #260]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d005      	beq.n	8004eea <HAL_RCC_OscConfig+0x152>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d001      	beq.n	8004eea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e1c7      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eea:	4b3b      	ldr	r3, [pc, #236]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	4937      	ldr	r1, [pc, #220]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004efe:	e03a      	b.n	8004f76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d020      	beq.n	8004f4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f08:	4b34      	ldr	r3, [pc, #208]	; (8004fdc <HAL_RCC_OscConfig+0x244>)
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0e:	f7fd feab 	bl	8002c68 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f16:	f7fd fea7 	bl	8002c68 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e1a8      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f28:	4b2b      	ldr	r3, [pc, #172]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f34:	4b28      	ldr	r3, [pc, #160]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	4925      	ldr	r1, [pc, #148]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	600b      	str	r3, [r1, #0]
 8004f48:	e015      	b.n	8004f76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f4a:	4b24      	ldr	r3, [pc, #144]	; (8004fdc <HAL_RCC_OscConfig+0x244>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f50:	f7fd fe8a 	bl	8002c68 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f58:	f7fd fe86 	bl	8002c68 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e187      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f6a:	4b1b      	ldr	r3, [pc, #108]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f0      	bne.n	8004f58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d036      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d016      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f8a:	4b15      	ldr	r3, [pc, #84]	; (8004fe0 <HAL_RCC_OscConfig+0x248>)
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f90:	f7fd fe6a 	bl	8002c68 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f98:	f7fd fe66 	bl	8002c68 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e167      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004faa:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0f0      	beq.n	8004f98 <HAL_RCC_OscConfig+0x200>
 8004fb6:	e01b      	b.n	8004ff0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fb8:	4b09      	ldr	r3, [pc, #36]	; (8004fe0 <HAL_RCC_OscConfig+0x248>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fbe:	f7fd fe53 	bl	8002c68 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc4:	e00e      	b.n	8004fe4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fc6:	f7fd fe4f 	bl	8002c68 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d907      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e150      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	42470000 	.word	0x42470000
 8004fe0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fe4:	4b88      	ldr	r3, [pc, #544]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8004fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1ea      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 8097 	beq.w	800512c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ffe:	2300      	movs	r3, #0
 8005000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005002:	4b81      	ldr	r3, [pc, #516]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10f      	bne.n	800502e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800500e:	2300      	movs	r3, #0
 8005010:	60bb      	str	r3, [r7, #8]
 8005012:	4b7d      	ldr	r3, [pc, #500]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	4a7c      	ldr	r2, [pc, #496]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800501c:	6413      	str	r3, [r2, #64]	; 0x40
 800501e:	4b7a      	ldr	r3, [pc, #488]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005026:	60bb      	str	r3, [r7, #8]
 8005028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800502a:	2301      	movs	r3, #1
 800502c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800502e:	4b77      	ldr	r3, [pc, #476]	; (800520c <HAL_RCC_OscConfig+0x474>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005036:	2b00      	cmp	r3, #0
 8005038:	d118      	bne.n	800506c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800503a:	4b74      	ldr	r3, [pc, #464]	; (800520c <HAL_RCC_OscConfig+0x474>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a73      	ldr	r2, [pc, #460]	; (800520c <HAL_RCC_OscConfig+0x474>)
 8005040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005046:	f7fd fe0f 	bl	8002c68 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800504c:	e008      	b.n	8005060 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800504e:	f7fd fe0b 	bl	8002c68 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e10c      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005060:	4b6a      	ldr	r3, [pc, #424]	; (800520c <HAL_RCC_OscConfig+0x474>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0f0      	beq.n	800504e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d106      	bne.n	8005082 <HAL_RCC_OscConfig+0x2ea>
 8005074:	4b64      	ldr	r3, [pc, #400]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005078:	4a63      	ldr	r2, [pc, #396]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	6713      	str	r3, [r2, #112]	; 0x70
 8005080:	e01c      	b.n	80050bc <HAL_RCC_OscConfig+0x324>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2b05      	cmp	r3, #5
 8005088:	d10c      	bne.n	80050a4 <HAL_RCC_OscConfig+0x30c>
 800508a:	4b5f      	ldr	r3, [pc, #380]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 800508c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508e:	4a5e      	ldr	r2, [pc, #376]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005090:	f043 0304 	orr.w	r3, r3, #4
 8005094:	6713      	str	r3, [r2, #112]	; 0x70
 8005096:	4b5c      	ldr	r3, [pc, #368]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509a:	4a5b      	ldr	r2, [pc, #364]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 800509c:	f043 0301 	orr.w	r3, r3, #1
 80050a0:	6713      	str	r3, [r2, #112]	; 0x70
 80050a2:	e00b      	b.n	80050bc <HAL_RCC_OscConfig+0x324>
 80050a4:	4b58      	ldr	r3, [pc, #352]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 80050a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a8:	4a57      	ldr	r2, [pc, #348]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 80050aa:	f023 0301 	bic.w	r3, r3, #1
 80050ae:	6713      	str	r3, [r2, #112]	; 0x70
 80050b0:	4b55      	ldr	r3, [pc, #340]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 80050b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b4:	4a54      	ldr	r2, [pc, #336]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 80050b6:	f023 0304 	bic.w	r3, r3, #4
 80050ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d015      	beq.n	80050f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c4:	f7fd fdd0 	bl	8002c68 <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ca:	e00a      	b.n	80050e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050cc:	f7fd fdcc 	bl	8002c68 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e0cb      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e2:	4b49      	ldr	r3, [pc, #292]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 80050e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0ee      	beq.n	80050cc <HAL_RCC_OscConfig+0x334>
 80050ee:	e014      	b.n	800511a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050f0:	f7fd fdba 	bl	8002c68 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f6:	e00a      	b.n	800510e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050f8:	f7fd fdb6 	bl	8002c68 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	f241 3288 	movw	r2, #5000	; 0x1388
 8005106:	4293      	cmp	r3, r2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e0b5      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800510e:	4b3e      	ldr	r3, [pc, #248]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1ee      	bne.n	80050f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800511a:	7dfb      	ldrb	r3, [r7, #23]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d105      	bne.n	800512c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005120:	4b39      	ldr	r3, [pc, #228]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	4a38      	ldr	r2, [pc, #224]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800512a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80a1 	beq.w	8005278 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005136:	4b34      	ldr	r3, [pc, #208]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 030c 	and.w	r3, r3, #12
 800513e:	2b08      	cmp	r3, #8
 8005140:	d05c      	beq.n	80051fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d141      	bne.n	80051ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800514a:	4b31      	ldr	r3, [pc, #196]	; (8005210 <HAL_RCC_OscConfig+0x478>)
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005150:	f7fd fd8a 	bl	8002c68 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005158:	f7fd fd86 	bl	8002c68 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e087      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800516a:	4b27      	ldr	r3, [pc, #156]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f0      	bne.n	8005158 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69da      	ldr	r2, [r3, #28]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	019b      	lsls	r3, r3, #6
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518c:	085b      	lsrs	r3, r3, #1
 800518e:	3b01      	subs	r3, #1
 8005190:	041b      	lsls	r3, r3, #16
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	061b      	lsls	r3, r3, #24
 800519a:	491b      	ldr	r1, [pc, #108]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 800519c:	4313      	orrs	r3, r2
 800519e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051a0:	4b1b      	ldr	r3, [pc, #108]	; (8005210 <HAL_RCC_OscConfig+0x478>)
 80051a2:	2201      	movs	r2, #1
 80051a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a6:	f7fd fd5f 	bl	8002c68 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ae:	f7fd fd5b 	bl	8002c68 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e05c      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c0:	4b11      	ldr	r3, [pc, #68]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0f0      	beq.n	80051ae <HAL_RCC_OscConfig+0x416>
 80051cc:	e054      	b.n	8005278 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ce:	4b10      	ldr	r3, [pc, #64]	; (8005210 <HAL_RCC_OscConfig+0x478>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d4:	f7fd fd48 	bl	8002c68 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051dc:	f7fd fd44 	bl	8002c68 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e045      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ee:	4b06      	ldr	r3, [pc, #24]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0x444>
 80051fa:	e03d      	b.n	8005278 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d107      	bne.n	8005214 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e038      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
 8005208:	40023800 	.word	0x40023800
 800520c:	40007000 	.word	0x40007000
 8005210:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005214:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <HAL_RCC_OscConfig+0x4ec>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d028      	beq.n	8005274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800522c:	429a      	cmp	r2, r3
 800522e:	d121      	bne.n	8005274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800523a:	429a      	cmp	r2, r3
 800523c:	d11a      	bne.n	8005274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005244:	4013      	ands	r3, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800524a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800524c:	4293      	cmp	r3, r2
 800524e:	d111      	bne.n	8005274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525a:	085b      	lsrs	r3, r3, #1
 800525c:	3b01      	subs	r3, #1
 800525e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005260:	429a      	cmp	r2, r3
 8005262:	d107      	bne.n	8005274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005270:	429a      	cmp	r2, r3
 8005272:	d001      	beq.n	8005278 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	40023800 	.word	0x40023800

08005288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e0cc      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800529c:	4b68      	ldr	r3, [pc, #416]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d90c      	bls.n	80052c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b65      	ldr	r3, [pc, #404]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b2:	4b63      	ldr	r3, [pc, #396]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e0b8      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d020      	beq.n	8005312 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d005      	beq.n	80052e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052dc:	4b59      	ldr	r3, [pc, #356]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	4a58      	ldr	r2, [pc, #352]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80052e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0308 	and.w	r3, r3, #8
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d005      	beq.n	8005300 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052f4:	4b53      	ldr	r3, [pc, #332]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	4a52      	ldr	r2, [pc, #328]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80052fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005300:	4b50      	ldr	r3, [pc, #320]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	494d      	ldr	r1, [pc, #308]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 800530e:	4313      	orrs	r3, r2
 8005310:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d044      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d107      	bne.n	8005336 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005326:	4b47      	ldr	r3, [pc, #284]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d119      	bne.n	8005366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e07f      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2b02      	cmp	r3, #2
 800533c:	d003      	beq.n	8005346 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005342:	2b03      	cmp	r3, #3
 8005344:	d107      	bne.n	8005356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005346:	4b3f      	ldr	r3, [pc, #252]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e06f      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005356:	4b3b      	ldr	r3, [pc, #236]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e067      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005366:	4b37      	ldr	r3, [pc, #220]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f023 0203 	bic.w	r2, r3, #3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	4934      	ldr	r1, [pc, #208]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005374:	4313      	orrs	r3, r2
 8005376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005378:	f7fd fc76 	bl	8002c68 <HAL_GetTick>
 800537c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800537e:	e00a      	b.n	8005396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005380:	f7fd fc72 	bl	8002c68 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	f241 3288 	movw	r2, #5000	; 0x1388
 800538e:	4293      	cmp	r3, r2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e04f      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005396:	4b2b      	ldr	r3, [pc, #172]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 020c 	and.w	r2, r3, #12
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d1eb      	bne.n	8005380 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053a8:	4b25      	ldr	r3, [pc, #148]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 030f 	and.w	r3, r3, #15
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d20c      	bcs.n	80053d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b6:	4b22      	ldr	r3, [pc, #136]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053be:	4b20      	ldr	r3, [pc, #128]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 030f 	and.w	r3, r3, #15
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d001      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e032      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d008      	beq.n	80053ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053dc:	4b19      	ldr	r3, [pc, #100]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	4916      	ldr	r1, [pc, #88]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053fa:	4b12      	ldr	r3, [pc, #72]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	490e      	ldr	r1, [pc, #56]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	4313      	orrs	r3, r2
 800540c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800540e:	f000 f821 	bl	8005454 <HAL_RCC_GetSysClockFreq>
 8005412:	4602      	mov	r2, r0
 8005414:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	091b      	lsrs	r3, r3, #4
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	490a      	ldr	r1, [pc, #40]	; (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 8005420:	5ccb      	ldrb	r3, [r1, r3]
 8005422:	fa22 f303 	lsr.w	r3, r2, r3
 8005426:	4a09      	ldr	r2, [pc, #36]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800542a:	4b09      	ldr	r3, [pc, #36]	; (8005450 <HAL_RCC_ClockConfig+0x1c8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f7fd fbd6 	bl	8002be0 <HAL_InitTick>

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	40023c00 	.word	0x40023c00
 8005444:	40023800 	.word	0x40023800
 8005448:	0800972c 	.word	0x0800972c
 800544c:	20000250 	.word	0x20000250
 8005450:	20000254 	.word	0x20000254

08005454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005458:	b090      	sub	sp, #64	; 0x40
 800545a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	637b      	str	r3, [r7, #52]	; 0x34
 8005460:	2300      	movs	r3, #0
 8005462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005464:	2300      	movs	r3, #0
 8005466:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800546c:	4b59      	ldr	r3, [pc, #356]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 030c 	and.w	r3, r3, #12
 8005474:	2b08      	cmp	r3, #8
 8005476:	d00d      	beq.n	8005494 <HAL_RCC_GetSysClockFreq+0x40>
 8005478:	2b08      	cmp	r3, #8
 800547a:	f200 80a1 	bhi.w	80055c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d002      	beq.n	8005488 <HAL_RCC_GetSysClockFreq+0x34>
 8005482:	2b04      	cmp	r3, #4
 8005484:	d003      	beq.n	800548e <HAL_RCC_GetSysClockFreq+0x3a>
 8005486:	e09b      	b.n	80055c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005488:	4b53      	ldr	r3, [pc, #332]	; (80055d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800548a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800548c:	e09b      	b.n	80055c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800548e:	4b53      	ldr	r3, [pc, #332]	; (80055dc <HAL_RCC_GetSysClockFreq+0x188>)
 8005490:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005492:	e098      	b.n	80055c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005494:	4b4f      	ldr	r3, [pc, #316]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800549c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800549e:	4b4d      	ldr	r3, [pc, #308]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d028      	beq.n	80054fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054aa:	4b4a      	ldr	r3, [pc, #296]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	099b      	lsrs	r3, r3, #6
 80054b0:	2200      	movs	r2, #0
 80054b2:	623b      	str	r3, [r7, #32]
 80054b4:	627a      	str	r2, [r7, #36]	; 0x24
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80054bc:	2100      	movs	r1, #0
 80054be:	4b47      	ldr	r3, [pc, #284]	; (80055dc <HAL_RCC_GetSysClockFreq+0x188>)
 80054c0:	fb03 f201 	mul.w	r2, r3, r1
 80054c4:	2300      	movs	r3, #0
 80054c6:	fb00 f303 	mul.w	r3, r0, r3
 80054ca:	4413      	add	r3, r2
 80054cc:	4a43      	ldr	r2, [pc, #268]	; (80055dc <HAL_RCC_GetSysClockFreq+0x188>)
 80054ce:	fba0 1202 	umull	r1, r2, r0, r2
 80054d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054d4:	460a      	mov	r2, r1
 80054d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80054d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054da:	4413      	add	r3, r2
 80054dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e0:	2200      	movs	r2, #0
 80054e2:	61bb      	str	r3, [r7, #24]
 80054e4:	61fa      	str	r2, [r7, #28]
 80054e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80054ee:	f7fa fed7 	bl	80002a0 <__aeabi_uldivmod>
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	4613      	mov	r3, r2
 80054f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054fa:	e053      	b.n	80055a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054fc:	4b35      	ldr	r3, [pc, #212]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	099b      	lsrs	r3, r3, #6
 8005502:	2200      	movs	r2, #0
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	617a      	str	r2, [r7, #20]
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800550e:	f04f 0b00 	mov.w	fp, #0
 8005512:	4652      	mov	r2, sl
 8005514:	465b      	mov	r3, fp
 8005516:	f04f 0000 	mov.w	r0, #0
 800551a:	f04f 0100 	mov.w	r1, #0
 800551e:	0159      	lsls	r1, r3, #5
 8005520:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005524:	0150      	lsls	r0, r2, #5
 8005526:	4602      	mov	r2, r0
 8005528:	460b      	mov	r3, r1
 800552a:	ebb2 080a 	subs.w	r8, r2, sl
 800552e:	eb63 090b 	sbc.w	r9, r3, fp
 8005532:	f04f 0200 	mov.w	r2, #0
 8005536:	f04f 0300 	mov.w	r3, #0
 800553a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800553e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005542:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005546:	ebb2 0408 	subs.w	r4, r2, r8
 800554a:	eb63 0509 	sbc.w	r5, r3, r9
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	00eb      	lsls	r3, r5, #3
 8005558:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800555c:	00e2      	lsls	r2, r4, #3
 800555e:	4614      	mov	r4, r2
 8005560:	461d      	mov	r5, r3
 8005562:	eb14 030a 	adds.w	r3, r4, sl
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	eb45 030b 	adc.w	r3, r5, fp
 800556c:	607b      	str	r3, [r7, #4]
 800556e:	f04f 0200 	mov.w	r2, #0
 8005572:	f04f 0300 	mov.w	r3, #0
 8005576:	e9d7 4500 	ldrd	r4, r5, [r7]
 800557a:	4629      	mov	r1, r5
 800557c:	028b      	lsls	r3, r1, #10
 800557e:	4621      	mov	r1, r4
 8005580:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005584:	4621      	mov	r1, r4
 8005586:	028a      	lsls	r2, r1, #10
 8005588:	4610      	mov	r0, r2
 800558a:	4619      	mov	r1, r3
 800558c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558e:	2200      	movs	r2, #0
 8005590:	60bb      	str	r3, [r7, #8]
 8005592:	60fa      	str	r2, [r7, #12]
 8005594:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005598:	f7fa fe82 	bl	80002a0 <__aeabi_uldivmod>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4613      	mov	r3, r2
 80055a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055a4:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	0c1b      	lsrs	r3, r3, #16
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	3301      	adds	r3, #1
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80055b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055be:	e002      	b.n	80055c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055c0:	4b05      	ldr	r3, [pc, #20]	; (80055d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80055c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3740      	adds	r7, #64	; 0x40
 80055cc:	46bd      	mov	sp, r7
 80055ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055d2:	bf00      	nop
 80055d4:	40023800 	.word	0x40023800
 80055d8:	00f42400 	.word	0x00f42400
 80055dc:	017d7840 	.word	0x017d7840

080055e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055e0:	b480      	push	{r7}
 80055e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055e4:	4b03      	ldr	r3, [pc, #12]	; (80055f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80055e6:	681b      	ldr	r3, [r3, #0]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	20000250 	.word	0x20000250

080055f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055fc:	f7ff fff0 	bl	80055e0 <HAL_RCC_GetHCLKFreq>
 8005600:	4602      	mov	r2, r0
 8005602:	4b05      	ldr	r3, [pc, #20]	; (8005618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	0a9b      	lsrs	r3, r3, #10
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	4903      	ldr	r1, [pc, #12]	; (800561c <HAL_RCC_GetPCLK1Freq+0x24>)
 800560e:	5ccb      	ldrb	r3, [r1, r3]
 8005610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005614:	4618      	mov	r0, r3
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40023800 	.word	0x40023800
 800561c:	0800973c 	.word	0x0800973c

08005620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005624:	f7ff ffdc 	bl	80055e0 <HAL_RCC_GetHCLKFreq>
 8005628:	4602      	mov	r2, r0
 800562a:	4b05      	ldr	r3, [pc, #20]	; (8005640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	0b5b      	lsrs	r3, r3, #13
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	4903      	ldr	r1, [pc, #12]	; (8005644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005636:	5ccb      	ldrb	r3, [r1, r3]
 8005638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800563c:	4618      	mov	r0, r3
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40023800 	.word	0x40023800
 8005644:	0800973c 	.word	0x0800973c

08005648 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005650:	2300      	movs	r3, #0
 8005652:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10b      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800566c:	2b00      	cmp	r3, #0
 800566e:	d105      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005678:	2b00      	cmp	r3, #0
 800567a:	d075      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800567c:	4b91      	ldr	r3, [pc, #580]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005682:	f7fd faf1 	bl	8002c68 <HAL_GetTick>
 8005686:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005688:	e008      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800568a:	f7fd faed 	bl	8002c68 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d901      	bls.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e189      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800569c:	4b8a      	ldr	r3, [pc, #552]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1f0      	bne.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d009      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	019a      	lsls	r2, r3, #6
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	071b      	lsls	r3, r3, #28
 80056c0:	4981      	ldr	r1, [pc, #516]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d01f      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056d4:	4b7c      	ldr	r3, [pc, #496]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056da:	0f1b      	lsrs	r3, r3, #28
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	019a      	lsls	r2, r3, #6
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	061b      	lsls	r3, r3, #24
 80056ee:	431a      	orrs	r2, r3
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	071b      	lsls	r3, r3, #28
 80056f4:	4974      	ldr	r1, [pc, #464]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056fc:	4b72      	ldr	r3, [pc, #456]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005702:	f023 021f 	bic.w	r2, r3, #31
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	3b01      	subs	r3, #1
 800570c:	496e      	ldr	r1, [pc, #440]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00d      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	019a      	lsls	r2, r3, #6
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	061b      	lsls	r3, r3, #24
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	071b      	lsls	r3, r3, #28
 8005734:	4964      	ldr	r1, [pc, #400]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005736:	4313      	orrs	r3, r2
 8005738:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800573c:	4b61      	ldr	r3, [pc, #388]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800573e:	2201      	movs	r2, #1
 8005740:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005742:	f7fd fa91 	bl	8002c68 <HAL_GetTick>
 8005746:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005748:	e008      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800574a:	f7fd fa8d 	bl	8002c68 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d901      	bls.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e129      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800575c:	4b5a      	ldr	r3, [pc, #360]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0f0      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0304 	and.w	r3, r3, #4
 8005770:	2b00      	cmp	r3, #0
 8005772:	d105      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800577c:	2b00      	cmp	r3, #0
 800577e:	d079      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005780:	4b52      	ldr	r3, [pc, #328]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005786:	f7fd fa6f 	bl	8002c68 <HAL_GetTick>
 800578a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800578c:	e008      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800578e:	f7fd fa6b 	bl	8002c68 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d901      	bls.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e107      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057a0:	4b49      	ldr	r3, [pc, #292]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057ac:	d0ef      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0304 	and.w	r3, r3, #4
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d020      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057ba:	4b43      	ldr	r3, [pc, #268]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c0:	0f1b      	lsrs	r3, r3, #28
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	019a      	lsls	r2, r3, #6
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	061b      	lsls	r3, r3, #24
 80057d4:	431a      	orrs	r2, r3
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	071b      	lsls	r3, r3, #28
 80057da:	493b      	ldr	r1, [pc, #236]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057e2:	4b39      	ldr	r3, [pc, #228]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	021b      	lsls	r3, r3, #8
 80057f4:	4934      	ldr	r1, [pc, #208]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0308 	and.w	r3, r3, #8
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01e      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005808:	4b2f      	ldr	r3, [pc, #188]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800580a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580e:	0e1b      	lsrs	r3, r3, #24
 8005810:	f003 030f 	and.w	r3, r3, #15
 8005814:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	019a      	lsls	r2, r3, #6
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	061b      	lsls	r3, r3, #24
 8005820:	431a      	orrs	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	071b      	lsls	r3, r3, #28
 8005828:	4927      	ldr	r1, [pc, #156]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800582a:	4313      	orrs	r3, r2
 800582c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005830:	4b25      	ldr	r3, [pc, #148]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005836:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	4922      	ldr	r1, [pc, #136]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005846:	4b21      	ldr	r3, [pc, #132]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005848:	2201      	movs	r2, #1
 800584a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800584c:	f7fd fa0c 	bl	8002c68 <HAL_GetTick>
 8005850:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005852:	e008      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005854:	f7fd fa08 	bl	8002c68 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d901      	bls.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e0a4      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005866:	4b18      	ldr	r3, [pc, #96]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800586e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005872:	d1ef      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0320 	and.w	r3, r3, #32
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 808b 	beq.w	8005998 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	4a0f      	ldr	r2, [pc, #60]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800588c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005890:	6413      	str	r3, [r2, #64]	; 0x40
 8005892:	4b0d      	ldr	r3, [pc, #52]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800589e:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a0b      	ldr	r2, [pc, #44]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80058a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058aa:	f7fd f9dd 	bl	8002c68 <HAL_GetTick>
 80058ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058b0:	e010      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058b2:	f7fd f9d9 	bl	8002c68 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d909      	bls.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e075      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80058c4:	42470068 	.word	0x42470068
 80058c8:	40023800 	.word	0x40023800
 80058cc:	42470070 	.word	0x42470070
 80058d0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058d4:	4b38      	ldr	r3, [pc, #224]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0e8      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058e0:	4b36      	ldr	r3, [pc, #216]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80058e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d02f      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d028      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058fe:	4b2f      	ldr	r3, [pc, #188]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005906:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005908:	4b2d      	ldr	r3, [pc, #180]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800590a:	2201      	movs	r2, #1
 800590c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800590e:	4b2c      	ldr	r3, [pc, #176]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005914:	4a29      	ldr	r2, [pc, #164]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800591a:	4b28      	ldr	r3, [pc, #160]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800591c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b01      	cmp	r3, #1
 8005924:	d114      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005926:	f7fd f99f 	bl	8002c68 <HAL_GetTick>
 800592a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800592c:	e00a      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800592e:	f7fd f99b 	bl	8002c68 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	f241 3288 	movw	r2, #5000	; 0x1388
 800593c:	4293      	cmp	r3, r2
 800593e:	d901      	bls.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e035      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005944:	4b1d      	ldr	r3, [pc, #116]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0ee      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800595c:	d10d      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800595e:	4b17      	ldr	r3, [pc, #92]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800596e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005972:	4912      	ldr	r1, [pc, #72]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005974:	4313      	orrs	r3, r2
 8005976:	608b      	str	r3, [r1, #8]
 8005978:	e005      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800597a:	4b10      	ldr	r3, [pc, #64]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	4a0f      	ldr	r2, [pc, #60]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005980:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005984:	6093      	str	r3, [r2, #8]
 8005986:	4b0d      	ldr	r3, [pc, #52]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005988:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005992:	490a      	ldr	r1, [pc, #40]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005994:	4313      	orrs	r3, r2
 8005996:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0310 	and.w	r3, r3, #16
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d004      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80059aa:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80059ac:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40007000 	.word	0x40007000
 80059bc:	40023800 	.word	0x40023800
 80059c0:	42470e40 	.word	0x42470e40
 80059c4:	424711e0 	.word	0x424711e0

080059c8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e066      	b.n	8005aac <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	7f5b      	ldrb	r3, [r3, #29]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d105      	bne.n	80059f4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7fc fd54 	bl	800249c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	22ca      	movs	r2, #202	; 0xca
 8005a00:	625a      	str	r2, [r3, #36]	; 0x24
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2253      	movs	r2, #83	; 0x53
 8005a08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fa45 	bl	8005e9a <RTC_EnterInitMode>
 8005a10:	4603      	mov	r3, r0
 8005a12:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d12c      	bne.n	8005a74 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6812      	ldr	r2, [r2, #0]
 8005a24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a2c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6899      	ldr	r1, [r3, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	68d2      	ldr	r2, [r2, #12]
 8005a54:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6919      	ldr	r1, [r3, #16]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	041a      	lsls	r2, r3, #16
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fa4c 	bl	8005f08 <RTC_ExitInitMode>
 8005a70:	4603      	mov	r3, r0
 8005a72:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d113      	bne.n	8005aa2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a88:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	699a      	ldr	r2, [r3, #24]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	22ff      	movs	r2, #255	; 0xff
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ab4:	b590      	push	{r4, r7, lr}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	7f1b      	ldrb	r3, [r3, #28]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d101      	bne.n	8005ad0 <HAL_RTC_SetTime+0x1c>
 8005acc:	2302      	movs	r3, #2
 8005ace:	e087      	b.n	8005be0 <HAL_RTC_SetTime+0x12c>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2202      	movs	r2, #2
 8005ada:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d126      	bne.n	8005b30 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d102      	bne.n	8005af6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2200      	movs	r2, #0
 8005af4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 fa29 	bl	8005f52 <RTC_ByteToBcd2>
 8005b00:	4603      	mov	r3, r0
 8005b02:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	785b      	ldrb	r3, [r3, #1]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 fa22 	bl	8005f52 <RTC_ByteToBcd2>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005b12:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	789b      	ldrb	r3, [r3, #2]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 fa1a 	bl	8005f52 <RTC_ByteToBcd2>
 8005b1e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b20:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	78db      	ldrb	r3, [r3, #3]
 8005b28:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	617b      	str	r3, [r7, #20]
 8005b2e:	e018      	b.n	8005b62 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d102      	bne.n	8005b44 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2200      	movs	r2, #0
 8005b42:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	785b      	ldrb	r3, [r3, #1]
 8005b4e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005b50:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005b56:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	78db      	ldrb	r3, [r3, #3]
 8005b5c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	22ca      	movs	r2, #202	; 0xca
 8005b68:	625a      	str	r2, [r3, #36]	; 0x24
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2253      	movs	r2, #83	; 0x53
 8005b70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 f991 	bl	8005e9a <RTC_EnterInitMode>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005b7c:	7cfb      	ldrb	r3, [r7, #19]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d120      	bne.n	8005bc4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005b8c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005b90:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ba0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6899      	ldr	r1, [r3, #8]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	68da      	ldr	r2, [r3, #12]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 f9a4 	bl	8005f08 <RTC_ExitInitMode>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005bc4:	7cfb      	ldrb	r3, [r7, #19]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d102      	bne.n	8005bd0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	22ff      	movs	r2, #255	; 0xff
 8005bd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	771a      	strb	r2, [r3, #28]

  return status;
 8005bde:	7cfb      	ldrb	r3, [r7, #19]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	371c      	adds	r7, #28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd90      	pop	{r4, r7, pc}

08005be8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c1a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c1e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	0c1b      	lsrs	r3, r3, #16
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	0d9b      	lsrs	r3, r3, #22
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d11a      	bne.n	8005c9a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 f98f 	bl	8005f8c <RTC_Bcd2ToByte>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	461a      	mov	r2, r3
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	785b      	ldrb	r3, [r3, #1]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 f986 	bl	8005f8c <RTC_Bcd2ToByte>
 8005c80:	4603      	mov	r3, r0
 8005c82:	461a      	mov	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	789b      	ldrb	r3, [r3, #2]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 f97d 	bl	8005f8c <RTC_Bcd2ToByte>
 8005c92:	4603      	mov	r3, r0
 8005c94:	461a      	mov	r2, r3
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ca4:	b590      	push	{r4, r7, lr}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	7f1b      	ldrb	r3, [r3, #28]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_RTC_SetDate+0x1c>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e071      	b.n	8005da4 <HAL_RTC_SetDate+0x100>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2202      	movs	r2, #2
 8005cca:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10e      	bne.n	8005cf0 <HAL_RTC_SetDate+0x4c>
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	785b      	ldrb	r3, [r3, #1]
 8005cd6:	f003 0310 	and.w	r3, r3, #16
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d008      	beq.n	8005cf0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	785b      	ldrb	r3, [r3, #1]
 8005ce2:	f023 0310 	bic.w	r3, r3, #16
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	330a      	adds	r3, #10
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d11c      	bne.n	8005d30 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	78db      	ldrb	r3, [r3, #3]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 f929 	bl	8005f52 <RTC_ByteToBcd2>
 8005d00:	4603      	mov	r3, r0
 8005d02:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	785b      	ldrb	r3, [r3, #1]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 f922 	bl	8005f52 <RTC_ByteToBcd2>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d12:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	789b      	ldrb	r3, [r3, #2]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 f91a 	bl	8005f52 <RTC_ByteToBcd2>
 8005d1e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d20:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	617b      	str	r3, [r7, #20]
 8005d2e:	e00e      	b.n	8005d4e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	78db      	ldrb	r3, [r3, #3]
 8005d34:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	785b      	ldrb	r3, [r3, #1]
 8005d3a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005d3c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005d42:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	22ca      	movs	r2, #202	; 0xca
 8005d54:	625a      	str	r2, [r3, #36]	; 0x24
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2253      	movs	r2, #83	; 0x53
 8005d5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 f89b 	bl	8005e9a <RTC_EnterInitMode>
 8005d64:	4603      	mov	r3, r0
 8005d66:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005d68:	7cfb      	ldrb	r3, [r7, #19]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10c      	bne.n	8005d88 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d7c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 f8c2 	bl	8005f08 <RTC_ExitInitMode>
 8005d84:	4603      	mov	r3, r0
 8005d86:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005d88:	7cfb      	ldrb	r3, [r7, #19]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d102      	bne.n	8005d94 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	22ff      	movs	r2, #255	; 0xff
 8005d9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	771a      	strb	r2, [r3, #28]

  return status;
 8005da2:	7cfb      	ldrb	r3, [r7, #19]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	371c      	adds	r7, #28
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd90      	pop	{r4, r7, pc}

08005dac <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005dc6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005dca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	0c1b      	lsrs	r3, r3, #16
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	0a1b      	lsrs	r3, r3, #8
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	f003 031f 	and.w	r3, r3, #31
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	0b5b      	lsrs	r3, r3, #13
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d11a      	bne.n	8005e40 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	78db      	ldrb	r3, [r3, #3]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 f8bc 	bl	8005f8c <RTC_Bcd2ToByte>
 8005e14:	4603      	mov	r3, r0
 8005e16:	461a      	mov	r2, r3
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	785b      	ldrb	r3, [r3, #1]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 f8b3 	bl	8005f8c <RTC_Bcd2ToByte>
 8005e26:	4603      	mov	r3, r0
 8005e28:	461a      	mov	r2, r3
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	789b      	ldrb	r3, [r3, #2]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 f8aa 	bl	8005f8c <RTC_Bcd2ToByte>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e64:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e66:	f7fc feff 	bl	8002c68 <HAL_GetTick>
 8005e6a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e6c:	e009      	b.n	8005e82 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e6e:	f7fc fefb 	bl	8002c68 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e7c:	d901      	bls.n	8005e82 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e007      	b.n	8005e92 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d0ee      	beq.n	8005e6e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d122      	bne.n	8005efe <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ec6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ec8:	f7fc fece 	bl	8002c68 <HAL_GetTick>
 8005ecc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005ece:	e00c      	b.n	8005eea <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ed0:	f7fc feca 	bl	8002c68 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ede:	d904      	bls.n	8005eea <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2204      	movs	r2, #4
 8005ee4:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d102      	bne.n	8005efe <RTC_EnterInitMode+0x64>
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d1e8      	bne.n	8005ed0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68da      	ldr	r2, [r3, #12]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f22:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10a      	bne.n	8005f48 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff ff89 	bl	8005e4a <HAL_RTC_WaitForSynchro>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d004      	beq.n	8005f48 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2204      	movs	r2, #4
 8005f42:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b085      	sub	sp, #20
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	4603      	mov	r3, r0
 8005f5a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005f60:	e005      	b.n	8005f6e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	3301      	adds	r3, #1
 8005f66:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	3b0a      	subs	r3, #10
 8005f6c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	2b09      	cmp	r3, #9
 8005f72:	d8f6      	bhi.n	8005f62 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	79fb      	ldrb	r3, [r7, #7]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	b2db      	uxtb	r3, r3
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	4603      	mov	r3, r0
 8005f94:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005f9a:	79fb      	ldrb	r3, [r7, #7]
 8005f9c:	091b      	lsrs	r3, r3, #4
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	0092      	lsls	r2, r2, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005faa:	79fb      	ldrb	r3, [r7, #7]
 8005fac:	f003 030f 	and.w	r3, r3, #15
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	b2db      	uxtb	r3, r3
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e041      	b.n	800605a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d106      	bne.n	8005ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7fc fc68 	bl	80028c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3304      	adds	r3, #4
 8006000:	4619      	mov	r1, r3
 8006002:	4610      	mov	r0, r2
 8006004:	f000 fcea 	bl	80069dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b01      	cmp	r3, #1
 8006076:	d001      	beq.n	800607c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e04e      	b.n	800611a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a23      	ldr	r2, [pc, #140]	; (8006128 <HAL_TIM_Base_Start_IT+0xc4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d022      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x80>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a6:	d01d      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x80>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1f      	ldr	r2, [pc, #124]	; (800612c <HAL_TIM_Base_Start_IT+0xc8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d018      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x80>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a1e      	ldr	r2, [pc, #120]	; (8006130 <HAL_TIM_Base_Start_IT+0xcc>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d013      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x80>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a1c      	ldr	r2, [pc, #112]	; (8006134 <HAL_TIM_Base_Start_IT+0xd0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00e      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x80>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a1b      	ldr	r2, [pc, #108]	; (8006138 <HAL_TIM_Base_Start_IT+0xd4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d009      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x80>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a19      	ldr	r2, [pc, #100]	; (800613c <HAL_TIM_Base_Start_IT+0xd8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d004      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x80>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a18      	ldr	r2, [pc, #96]	; (8006140 <HAL_TIM_Base_Start_IT+0xdc>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d111      	bne.n	8006108 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f003 0307 	and.w	r3, r3, #7
 80060ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b06      	cmp	r3, #6
 80060f4:	d010      	beq.n	8006118 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f042 0201 	orr.w	r2, r2, #1
 8006104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006106:	e007      	b.n	8006118 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0201 	orr.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40010000 	.word	0x40010000
 800612c:	40000400 	.word	0x40000400
 8006130:	40000800 	.word	0x40000800
 8006134:	40000c00 	.word	0x40000c00
 8006138:	40010400 	.word	0x40010400
 800613c:	40014000 	.word	0x40014000
 8006140:	40001800 	.word	0x40001800

08006144 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e041      	b.n	80061da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f839 	bl	80061e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3304      	adds	r3, #4
 8006180:	4619      	mov	r1, r3
 8006182:	4610      	mov	r0, r2
 8006184:	f000 fc2a 	bl	80069dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061ea:	bf00      	nop
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
	...

080061f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d109      	bne.n	800621c <HAL_TIM_PWM_Start+0x24>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b01      	cmp	r3, #1
 8006212:	bf14      	ite	ne
 8006214:	2301      	movne	r3, #1
 8006216:	2300      	moveq	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	e022      	b.n	8006262 <HAL_TIM_PWM_Start+0x6a>
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	2b04      	cmp	r3, #4
 8006220:	d109      	bne.n	8006236 <HAL_TIM_PWM_Start+0x3e>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b01      	cmp	r3, #1
 800622c:	bf14      	ite	ne
 800622e:	2301      	movne	r3, #1
 8006230:	2300      	moveq	r3, #0
 8006232:	b2db      	uxtb	r3, r3
 8006234:	e015      	b.n	8006262 <HAL_TIM_PWM_Start+0x6a>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b08      	cmp	r3, #8
 800623a:	d109      	bne.n	8006250 <HAL_TIM_PWM_Start+0x58>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b01      	cmp	r3, #1
 8006246:	bf14      	ite	ne
 8006248:	2301      	movne	r3, #1
 800624a:	2300      	moveq	r3, #0
 800624c:	b2db      	uxtb	r3, r3
 800624e:	e008      	b.n	8006262 <HAL_TIM_PWM_Start+0x6a>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b01      	cmp	r3, #1
 800625a:	bf14      	ite	ne
 800625c:	2301      	movne	r3, #1
 800625e:	2300      	moveq	r3, #0
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e07c      	b.n	8006364 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d104      	bne.n	800627a <HAL_TIM_PWM_Start+0x82>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006278:	e013      	b.n	80062a2 <HAL_TIM_PWM_Start+0xaa>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b04      	cmp	r3, #4
 800627e:	d104      	bne.n	800628a <HAL_TIM_PWM_Start+0x92>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006288:	e00b      	b.n	80062a2 <HAL_TIM_PWM_Start+0xaa>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b08      	cmp	r3, #8
 800628e:	d104      	bne.n	800629a <HAL_TIM_PWM_Start+0xa2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006298:	e003      	b.n	80062a2 <HAL_TIM_PWM_Start+0xaa>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2202      	movs	r2, #2
 800629e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2201      	movs	r2, #1
 80062a8:	6839      	ldr	r1, [r7, #0]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 fe80 	bl	8006fb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a2d      	ldr	r2, [pc, #180]	; (800636c <HAL_TIM_PWM_Start+0x174>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d004      	beq.n	80062c4 <HAL_TIM_PWM_Start+0xcc>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a2c      	ldr	r2, [pc, #176]	; (8006370 <HAL_TIM_PWM_Start+0x178>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d101      	bne.n	80062c8 <HAL_TIM_PWM_Start+0xd0>
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <HAL_TIM_PWM_Start+0xd2>
 80062c8:	2300      	movs	r3, #0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d007      	beq.n	80062de <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a22      	ldr	r2, [pc, #136]	; (800636c <HAL_TIM_PWM_Start+0x174>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d022      	beq.n	800632e <HAL_TIM_PWM_Start+0x136>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f0:	d01d      	beq.n	800632e <HAL_TIM_PWM_Start+0x136>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1f      	ldr	r2, [pc, #124]	; (8006374 <HAL_TIM_PWM_Start+0x17c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d018      	beq.n	800632e <HAL_TIM_PWM_Start+0x136>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a1d      	ldr	r2, [pc, #116]	; (8006378 <HAL_TIM_PWM_Start+0x180>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d013      	beq.n	800632e <HAL_TIM_PWM_Start+0x136>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1c      	ldr	r2, [pc, #112]	; (800637c <HAL_TIM_PWM_Start+0x184>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d00e      	beq.n	800632e <HAL_TIM_PWM_Start+0x136>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a16      	ldr	r2, [pc, #88]	; (8006370 <HAL_TIM_PWM_Start+0x178>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d009      	beq.n	800632e <HAL_TIM_PWM_Start+0x136>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a18      	ldr	r2, [pc, #96]	; (8006380 <HAL_TIM_PWM_Start+0x188>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d004      	beq.n	800632e <HAL_TIM_PWM_Start+0x136>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a16      	ldr	r2, [pc, #88]	; (8006384 <HAL_TIM_PWM_Start+0x18c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d111      	bne.n	8006352 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f003 0307 	and.w	r3, r3, #7
 8006338:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2b06      	cmp	r3, #6
 800633e:	d010      	beq.n	8006362 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0201 	orr.w	r2, r2, #1
 800634e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006350:	e007      	b.n	8006362 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f042 0201 	orr.w	r2, r2, #1
 8006360:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	40010000 	.word	0x40010000
 8006370:	40010400 	.word	0x40010400
 8006374:	40000400 	.word	0x40000400
 8006378:	40000800 	.word	0x40000800
 800637c:	40000c00 	.word	0x40000c00
 8006380:	40014000 	.word	0x40014000
 8006384:	40001800 	.word	0x40001800

08006388 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2200      	movs	r2, #0
 8006398:	6839      	ldr	r1, [r7, #0]
 800639a:	4618      	mov	r0, r3
 800639c:	f000 fe08 	bl	8006fb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a2e      	ldr	r2, [pc, #184]	; (8006460 <HAL_TIM_PWM_Stop+0xd8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d004      	beq.n	80063b4 <HAL_TIM_PWM_Stop+0x2c>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a2d      	ldr	r2, [pc, #180]	; (8006464 <HAL_TIM_PWM_Stop+0xdc>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d101      	bne.n	80063b8 <HAL_TIM_PWM_Stop+0x30>
 80063b4:	2301      	movs	r3, #1
 80063b6:	e000      	b.n	80063ba <HAL_TIM_PWM_Stop+0x32>
 80063b8:	2300      	movs	r3, #0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d017      	beq.n	80063ee <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6a1a      	ldr	r2, [r3, #32]
 80063c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80063c8:	4013      	ands	r3, r2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10f      	bne.n	80063ee <HAL_TIM_PWM_Stop+0x66>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6a1a      	ldr	r2, [r3, #32]
 80063d4:	f240 4344 	movw	r3, #1092	; 0x444
 80063d8:	4013      	ands	r3, r2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d107      	bne.n	80063ee <HAL_TIM_PWM_Stop+0x66>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6a1a      	ldr	r2, [r3, #32]
 80063f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80063f8:	4013      	ands	r3, r2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10f      	bne.n	800641e <HAL_TIM_PWM_Stop+0x96>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6a1a      	ldr	r2, [r3, #32]
 8006404:	f240 4344 	movw	r3, #1092	; 0x444
 8006408:	4013      	ands	r3, r2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d107      	bne.n	800641e <HAL_TIM_PWM_Stop+0x96>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0201 	bic.w	r2, r2, #1
 800641c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d104      	bne.n	800642e <HAL_TIM_PWM_Stop+0xa6>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800642c:	e013      	b.n	8006456 <HAL_TIM_PWM_Stop+0xce>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b04      	cmp	r3, #4
 8006432:	d104      	bne.n	800643e <HAL_TIM_PWM_Stop+0xb6>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800643c:	e00b      	b.n	8006456 <HAL_TIM_PWM_Stop+0xce>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b08      	cmp	r3, #8
 8006442:	d104      	bne.n	800644e <HAL_TIM_PWM_Stop+0xc6>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800644c:	e003      	b.n	8006456 <HAL_TIM_PWM_Stop+0xce>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	40010000 	.word	0x40010000
 8006464:	40010400 	.word	0x40010400

08006468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	2b02      	cmp	r3, #2
 800647c:	d122      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	2b02      	cmp	r3, #2
 800648a:	d11b      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f06f 0202 	mvn.w	r2, #2
 8006494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fa77 	bl	800699e <HAL_TIM_IC_CaptureCallback>
 80064b0:	e005      	b.n	80064be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fa69 	bl	800698a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fa7a 	bl	80069b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f003 0304 	and.w	r3, r3, #4
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	d122      	bne.n	8006518 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d11b      	bne.n	8006518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f06f 0204 	mvn.w	r2, #4
 80064e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2202      	movs	r2, #2
 80064ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fa4d 	bl	800699e <HAL_TIM_IC_CaptureCallback>
 8006504:	e005      	b.n	8006512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fa3f 	bl	800698a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fa50 	bl	80069b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f003 0308 	and.w	r3, r3, #8
 8006522:	2b08      	cmp	r3, #8
 8006524:	d122      	bne.n	800656c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b08      	cmp	r3, #8
 8006532:	d11b      	bne.n	800656c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f06f 0208 	mvn.w	r2, #8
 800653c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2204      	movs	r2, #4
 8006542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fa23 	bl	800699e <HAL_TIM_IC_CaptureCallback>
 8006558:	e005      	b.n	8006566 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fa15 	bl	800698a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fa26 	bl	80069b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	f003 0310 	and.w	r3, r3, #16
 8006576:	2b10      	cmp	r3, #16
 8006578:	d122      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f003 0310 	and.w	r3, r3, #16
 8006584:	2b10      	cmp	r3, #16
 8006586:	d11b      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f06f 0210 	mvn.w	r2, #16
 8006590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2208      	movs	r2, #8
 8006596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f9f9 	bl	800699e <HAL_TIM_IC_CaptureCallback>
 80065ac:	e005      	b.n	80065ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f9eb 	bl	800698a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f9fc 	bl	80069b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d10e      	bne.n	80065ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d107      	bne.n	80065ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f06f 0201 	mvn.w	r2, #1
 80065e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fa fdee 	bl	80011c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f6:	2b80      	cmp	r3, #128	; 0x80
 80065f8:	d10e      	bne.n	8006618 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006604:	2b80      	cmp	r3, #128	; 0x80
 8006606:	d107      	bne.n	8006618 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fd78 	bl	8007108 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006622:	2b40      	cmp	r3, #64	; 0x40
 8006624:	d10e      	bne.n	8006644 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006630:	2b40      	cmp	r3, #64	; 0x40
 8006632:	d107      	bne.n	8006644 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800663c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f9c1 	bl	80069c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b20      	cmp	r3, #32
 8006650:	d10e      	bne.n	8006670 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f003 0320 	and.w	r3, r3, #32
 800665c:	2b20      	cmp	r3, #32
 800665e:	d107      	bne.n	8006670 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f06f 0220 	mvn.w	r2, #32
 8006668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fd42 	bl	80070f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006684:	2300      	movs	r3, #0
 8006686:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800668e:	2b01      	cmp	r3, #1
 8006690:	d101      	bne.n	8006696 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006692:	2302      	movs	r3, #2
 8006694:	e0ae      	b.n	80067f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b0c      	cmp	r3, #12
 80066a2:	f200 809f 	bhi.w	80067e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80066a6:	a201      	add	r2, pc, #4	; (adr r2, 80066ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ac:	080066e1 	.word	0x080066e1
 80066b0:	080067e5 	.word	0x080067e5
 80066b4:	080067e5 	.word	0x080067e5
 80066b8:	080067e5 	.word	0x080067e5
 80066bc:	08006721 	.word	0x08006721
 80066c0:	080067e5 	.word	0x080067e5
 80066c4:	080067e5 	.word	0x080067e5
 80066c8:	080067e5 	.word	0x080067e5
 80066cc:	08006763 	.word	0x08006763
 80066d0:	080067e5 	.word	0x080067e5
 80066d4:	080067e5 	.word	0x080067e5
 80066d8:	080067e5 	.word	0x080067e5
 80066dc:	080067a3 	.word	0x080067a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68b9      	ldr	r1, [r7, #8]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 fa18 	bl	8006b1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	699a      	ldr	r2, [r3, #24]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f042 0208 	orr.w	r2, r2, #8
 80066fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	699a      	ldr	r2, [r3, #24]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 0204 	bic.w	r2, r2, #4
 800670a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6999      	ldr	r1, [r3, #24]
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	691a      	ldr	r2, [r3, #16]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	619a      	str	r2, [r3, #24]
      break;
 800671e:	e064      	b.n	80067ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68b9      	ldr	r1, [r7, #8]
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fa68 	bl	8006bfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	699a      	ldr	r2, [r3, #24]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800673a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	699a      	ldr	r2, [r3, #24]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800674a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6999      	ldr	r1, [r3, #24]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	021a      	lsls	r2, r3, #8
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	619a      	str	r2, [r3, #24]
      break;
 8006760:	e043      	b.n	80067ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68b9      	ldr	r1, [r7, #8]
 8006768:	4618      	mov	r0, r3
 800676a:	f000 fabd 	bl	8006ce8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	69da      	ldr	r2, [r3, #28]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f042 0208 	orr.w	r2, r2, #8
 800677c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	69da      	ldr	r2, [r3, #28]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 0204 	bic.w	r2, r2, #4
 800678c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	69d9      	ldr	r1, [r3, #28]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	691a      	ldr	r2, [r3, #16]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	61da      	str	r2, [r3, #28]
      break;
 80067a0:	e023      	b.n	80067ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68b9      	ldr	r1, [r7, #8]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 fb11 	bl	8006dd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	69da      	ldr	r2, [r3, #28]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	69da      	ldr	r2, [r3, #28]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	69d9      	ldr	r1, [r3, #28]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	021a      	lsls	r2, r3, #8
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	61da      	str	r2, [r3, #28]
      break;
 80067e2:	e002      	b.n	80067ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	75fb      	strb	r3, [r7, #23]
      break;
 80067e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006810:	2b01      	cmp	r3, #1
 8006812:	d101      	bne.n	8006818 <HAL_TIM_ConfigClockSource+0x1c>
 8006814:	2302      	movs	r3, #2
 8006816:	e0b4      	b.n	8006982 <HAL_TIM_ConfigClockSource+0x186>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2202      	movs	r2, #2
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800683e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006850:	d03e      	beq.n	80068d0 <HAL_TIM_ConfigClockSource+0xd4>
 8006852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006856:	f200 8087 	bhi.w	8006968 <HAL_TIM_ConfigClockSource+0x16c>
 800685a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800685e:	f000 8086 	beq.w	800696e <HAL_TIM_ConfigClockSource+0x172>
 8006862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006866:	d87f      	bhi.n	8006968 <HAL_TIM_ConfigClockSource+0x16c>
 8006868:	2b70      	cmp	r3, #112	; 0x70
 800686a:	d01a      	beq.n	80068a2 <HAL_TIM_ConfigClockSource+0xa6>
 800686c:	2b70      	cmp	r3, #112	; 0x70
 800686e:	d87b      	bhi.n	8006968 <HAL_TIM_ConfigClockSource+0x16c>
 8006870:	2b60      	cmp	r3, #96	; 0x60
 8006872:	d050      	beq.n	8006916 <HAL_TIM_ConfigClockSource+0x11a>
 8006874:	2b60      	cmp	r3, #96	; 0x60
 8006876:	d877      	bhi.n	8006968 <HAL_TIM_ConfigClockSource+0x16c>
 8006878:	2b50      	cmp	r3, #80	; 0x50
 800687a:	d03c      	beq.n	80068f6 <HAL_TIM_ConfigClockSource+0xfa>
 800687c:	2b50      	cmp	r3, #80	; 0x50
 800687e:	d873      	bhi.n	8006968 <HAL_TIM_ConfigClockSource+0x16c>
 8006880:	2b40      	cmp	r3, #64	; 0x40
 8006882:	d058      	beq.n	8006936 <HAL_TIM_ConfigClockSource+0x13a>
 8006884:	2b40      	cmp	r3, #64	; 0x40
 8006886:	d86f      	bhi.n	8006968 <HAL_TIM_ConfigClockSource+0x16c>
 8006888:	2b30      	cmp	r3, #48	; 0x30
 800688a:	d064      	beq.n	8006956 <HAL_TIM_ConfigClockSource+0x15a>
 800688c:	2b30      	cmp	r3, #48	; 0x30
 800688e:	d86b      	bhi.n	8006968 <HAL_TIM_ConfigClockSource+0x16c>
 8006890:	2b20      	cmp	r3, #32
 8006892:	d060      	beq.n	8006956 <HAL_TIM_ConfigClockSource+0x15a>
 8006894:	2b20      	cmp	r3, #32
 8006896:	d867      	bhi.n	8006968 <HAL_TIM_ConfigClockSource+0x16c>
 8006898:	2b00      	cmp	r3, #0
 800689a:	d05c      	beq.n	8006956 <HAL_TIM_ConfigClockSource+0x15a>
 800689c:	2b10      	cmp	r3, #16
 800689e:	d05a      	beq.n	8006956 <HAL_TIM_ConfigClockSource+0x15a>
 80068a0:	e062      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6818      	ldr	r0, [r3, #0]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	6899      	ldr	r1, [r3, #8]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	f000 fb5d 	bl	8006f70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	609a      	str	r2, [r3, #8]
      break;
 80068ce:	e04f      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6818      	ldr	r0, [r3, #0]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	6899      	ldr	r1, [r3, #8]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	f000 fb46 	bl	8006f70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689a      	ldr	r2, [r3, #8]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068f2:	609a      	str	r2, [r3, #8]
      break;
 80068f4:	e03c      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6818      	ldr	r0, [r3, #0]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	6859      	ldr	r1, [r3, #4]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	461a      	mov	r2, r3
 8006904:	f000 faba 	bl	8006e7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2150      	movs	r1, #80	; 0x50
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fb13 	bl	8006f3a <TIM_ITRx_SetConfig>
      break;
 8006914:	e02c      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6818      	ldr	r0, [r3, #0]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	6859      	ldr	r1, [r3, #4]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	461a      	mov	r2, r3
 8006924:	f000 fad9 	bl	8006eda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2160      	movs	r1, #96	; 0x60
 800692e:	4618      	mov	r0, r3
 8006930:	f000 fb03 	bl	8006f3a <TIM_ITRx_SetConfig>
      break;
 8006934:	e01c      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6818      	ldr	r0, [r3, #0]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	6859      	ldr	r1, [r3, #4]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	461a      	mov	r2, r3
 8006944:	f000 fa9a 	bl	8006e7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2140      	movs	r1, #64	; 0x40
 800694e:	4618      	mov	r0, r3
 8006950:	f000 faf3 	bl	8006f3a <TIM_ITRx_SetConfig>
      break;
 8006954:	e00c      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4619      	mov	r1, r3
 8006960:	4610      	mov	r0, r2
 8006962:	f000 faea 	bl	8006f3a <TIM_ITRx_SetConfig>
      break;
 8006966:	e003      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	73fb      	strb	r3, [r7, #15]
      break;
 800696c:	e000      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800696e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006980:	7bfb      	ldrb	r3, [r7, #15]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800698a:	b480      	push	{r7}
 800698c:	b083      	sub	sp, #12
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069ba:	bf00      	nop
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b083      	sub	sp, #12
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069ce:	bf00      	nop
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
	...

080069dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a40      	ldr	r2, [pc, #256]	; (8006af0 <TIM_Base_SetConfig+0x114>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d013      	beq.n	8006a1c <TIM_Base_SetConfig+0x40>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069fa:	d00f      	beq.n	8006a1c <TIM_Base_SetConfig+0x40>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a3d      	ldr	r2, [pc, #244]	; (8006af4 <TIM_Base_SetConfig+0x118>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00b      	beq.n	8006a1c <TIM_Base_SetConfig+0x40>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a3c      	ldr	r2, [pc, #240]	; (8006af8 <TIM_Base_SetConfig+0x11c>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d007      	beq.n	8006a1c <TIM_Base_SetConfig+0x40>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a3b      	ldr	r2, [pc, #236]	; (8006afc <TIM_Base_SetConfig+0x120>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d003      	beq.n	8006a1c <TIM_Base_SetConfig+0x40>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a3a      	ldr	r2, [pc, #232]	; (8006b00 <TIM_Base_SetConfig+0x124>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d108      	bne.n	8006a2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a2f      	ldr	r2, [pc, #188]	; (8006af0 <TIM_Base_SetConfig+0x114>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d02b      	beq.n	8006a8e <TIM_Base_SetConfig+0xb2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a3c:	d027      	beq.n	8006a8e <TIM_Base_SetConfig+0xb2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a2c      	ldr	r2, [pc, #176]	; (8006af4 <TIM_Base_SetConfig+0x118>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d023      	beq.n	8006a8e <TIM_Base_SetConfig+0xb2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a2b      	ldr	r2, [pc, #172]	; (8006af8 <TIM_Base_SetConfig+0x11c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d01f      	beq.n	8006a8e <TIM_Base_SetConfig+0xb2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a2a      	ldr	r2, [pc, #168]	; (8006afc <TIM_Base_SetConfig+0x120>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d01b      	beq.n	8006a8e <TIM_Base_SetConfig+0xb2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a29      	ldr	r2, [pc, #164]	; (8006b00 <TIM_Base_SetConfig+0x124>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d017      	beq.n	8006a8e <TIM_Base_SetConfig+0xb2>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a28      	ldr	r2, [pc, #160]	; (8006b04 <TIM_Base_SetConfig+0x128>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d013      	beq.n	8006a8e <TIM_Base_SetConfig+0xb2>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a27      	ldr	r2, [pc, #156]	; (8006b08 <TIM_Base_SetConfig+0x12c>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d00f      	beq.n	8006a8e <TIM_Base_SetConfig+0xb2>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a26      	ldr	r2, [pc, #152]	; (8006b0c <TIM_Base_SetConfig+0x130>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d00b      	beq.n	8006a8e <TIM_Base_SetConfig+0xb2>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a25      	ldr	r2, [pc, #148]	; (8006b10 <TIM_Base_SetConfig+0x134>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d007      	beq.n	8006a8e <TIM_Base_SetConfig+0xb2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a24      	ldr	r2, [pc, #144]	; (8006b14 <TIM_Base_SetConfig+0x138>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d003      	beq.n	8006a8e <TIM_Base_SetConfig+0xb2>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a23      	ldr	r2, [pc, #140]	; (8006b18 <TIM_Base_SetConfig+0x13c>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d108      	bne.n	8006aa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a0a      	ldr	r2, [pc, #40]	; (8006af0 <TIM_Base_SetConfig+0x114>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d003      	beq.n	8006ad4 <TIM_Base_SetConfig+0xf8>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a0c      	ldr	r2, [pc, #48]	; (8006b00 <TIM_Base_SetConfig+0x124>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d103      	bne.n	8006adc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	691a      	ldr	r2, [r3, #16]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	615a      	str	r2, [r3, #20]
}
 8006ae2:	bf00      	nop
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	40010000 	.word	0x40010000
 8006af4:	40000400 	.word	0x40000400
 8006af8:	40000800 	.word	0x40000800
 8006afc:	40000c00 	.word	0x40000c00
 8006b00:	40010400 	.word	0x40010400
 8006b04:	40014000 	.word	0x40014000
 8006b08:	40014400 	.word	0x40014400
 8006b0c:	40014800 	.word	0x40014800
 8006b10:	40001800 	.word	0x40001800
 8006b14:	40001c00 	.word	0x40001c00
 8006b18:	40002000 	.word	0x40002000

08006b1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	f023 0201 	bic.w	r2, r3, #1
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0303 	bic.w	r3, r3, #3
 8006b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f023 0302 	bic.w	r3, r3, #2
 8006b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a20      	ldr	r2, [pc, #128]	; (8006bf4 <TIM_OC1_SetConfig+0xd8>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d003      	beq.n	8006b80 <TIM_OC1_SetConfig+0x64>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a1f      	ldr	r2, [pc, #124]	; (8006bf8 <TIM_OC1_SetConfig+0xdc>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d10c      	bne.n	8006b9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f023 0308 	bic.w	r3, r3, #8
 8006b86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f023 0304 	bic.w	r3, r3, #4
 8006b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a15      	ldr	r2, [pc, #84]	; (8006bf4 <TIM_OC1_SetConfig+0xd8>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d003      	beq.n	8006baa <TIM_OC1_SetConfig+0x8e>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a14      	ldr	r2, [pc, #80]	; (8006bf8 <TIM_OC1_SetConfig+0xdc>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d111      	bne.n	8006bce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	621a      	str	r2, [r3, #32]
}
 8006be8:	bf00      	nop
 8006bea:	371c      	adds	r7, #28
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr
 8006bf4:	40010000 	.word	0x40010000
 8006bf8:	40010400 	.word	0x40010400

08006bfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	f023 0210 	bic.w	r2, r3, #16
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	021b      	lsls	r3, r3, #8
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f023 0320 	bic.w	r3, r3, #32
 8006c46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a22      	ldr	r2, [pc, #136]	; (8006ce0 <TIM_OC2_SetConfig+0xe4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d003      	beq.n	8006c64 <TIM_OC2_SetConfig+0x68>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a21      	ldr	r2, [pc, #132]	; (8006ce4 <TIM_OC2_SetConfig+0xe8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d10d      	bne.n	8006c80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	011b      	lsls	r3, r3, #4
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a17      	ldr	r2, [pc, #92]	; (8006ce0 <TIM_OC2_SetConfig+0xe4>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d003      	beq.n	8006c90 <TIM_OC2_SetConfig+0x94>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a16      	ldr	r2, [pc, #88]	; (8006ce4 <TIM_OC2_SetConfig+0xe8>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d113      	bne.n	8006cb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	621a      	str	r2, [r3, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	40010000 	.word	0x40010000
 8006ce4:	40010400 	.word	0x40010400

08006ce8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b087      	sub	sp, #28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 0303 	bic.w	r3, r3, #3
 8006d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	021b      	lsls	r3, r3, #8
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a21      	ldr	r2, [pc, #132]	; (8006dc8 <TIM_OC3_SetConfig+0xe0>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d003      	beq.n	8006d4e <TIM_OC3_SetConfig+0x66>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a20      	ldr	r2, [pc, #128]	; (8006dcc <TIM_OC3_SetConfig+0xe4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d10d      	bne.n	8006d6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	021b      	lsls	r3, r3, #8
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a16      	ldr	r2, [pc, #88]	; (8006dc8 <TIM_OC3_SetConfig+0xe0>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d003      	beq.n	8006d7a <TIM_OC3_SetConfig+0x92>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a15      	ldr	r2, [pc, #84]	; (8006dcc <TIM_OC3_SetConfig+0xe4>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d113      	bne.n	8006da2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	011b      	lsls	r3, r3, #4
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	011b      	lsls	r3, r3, #4
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	621a      	str	r2, [r3, #32]
}
 8006dbc:	bf00      	nop
 8006dbe:	371c      	adds	r7, #28
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	40010000 	.word	0x40010000
 8006dcc:	40010400 	.word	0x40010400

08006dd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	021b      	lsls	r3, r3, #8
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	031b      	lsls	r3, r3, #12
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a12      	ldr	r2, [pc, #72]	; (8006e74 <TIM_OC4_SetConfig+0xa4>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d003      	beq.n	8006e38 <TIM_OC4_SetConfig+0x68>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a11      	ldr	r2, [pc, #68]	; (8006e78 <TIM_OC4_SetConfig+0xa8>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d109      	bne.n	8006e4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	019b      	lsls	r3, r3, #6
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	621a      	str	r2, [r3, #32]
}
 8006e66:	bf00      	nop
 8006e68:	371c      	adds	r7, #28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	40010000 	.word	0x40010000
 8006e78:	40010400 	.word	0x40010400

08006e7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	f023 0201 	bic.w	r2, r3, #1
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f023 030a 	bic.w	r3, r3, #10
 8006eb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	621a      	str	r2, [r3, #32]
}
 8006ece:	bf00      	nop
 8006ed0:	371c      	adds	r7, #28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b087      	sub	sp, #28
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	60f8      	str	r0, [r7, #12]
 8006ee2:	60b9      	str	r1, [r7, #8]
 8006ee4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	f023 0210 	bic.w	r2, r3, #16
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	031b      	lsls	r3, r3, #12
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	011b      	lsls	r3, r3, #4
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	621a      	str	r2, [r3, #32]
}
 8006f2e:	bf00      	nop
 8006f30:	371c      	adds	r7, #28
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b085      	sub	sp, #20
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	f043 0307 	orr.w	r3, r3, #7
 8006f5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	609a      	str	r2, [r3, #8]
}
 8006f64:	bf00      	nop
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
 8006f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	021a      	lsls	r2, r3, #8
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	431a      	orrs	r2, r3
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	609a      	str	r2, [r3, #8]
}
 8006fa4:	bf00      	nop
 8006fa6:	371c      	adds	r7, #28
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b087      	sub	sp, #28
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f003 031f 	and.w	r3, r3, #31
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6a1a      	ldr	r2, [r3, #32]
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	43db      	mvns	r3, r3
 8006fd2:	401a      	ands	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6a1a      	ldr	r2, [r3, #32]
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f003 031f 	and.w	r3, r3, #31
 8006fe2:	6879      	ldr	r1, [r7, #4]
 8006fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe8:	431a      	orrs	r2, r3
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	621a      	str	r2, [r3, #32]
}
 8006fee:	bf00      	nop
 8006ff0:	371c      	adds	r7, #28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
	...

08006ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800700c:	2b01      	cmp	r3, #1
 800700e:	d101      	bne.n	8007014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007010:	2302      	movs	r3, #2
 8007012:	e05a      	b.n	80070ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2202      	movs	r2, #2
 8007020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	4313      	orrs	r3, r2
 8007044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a21      	ldr	r2, [pc, #132]	; (80070d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d022      	beq.n	800709e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007060:	d01d      	beq.n	800709e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a1d      	ldr	r2, [pc, #116]	; (80070dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d018      	beq.n	800709e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a1b      	ldr	r2, [pc, #108]	; (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d013      	beq.n	800709e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a1a      	ldr	r2, [pc, #104]	; (80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d00e      	beq.n	800709e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a18      	ldr	r2, [pc, #96]	; (80070e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d009      	beq.n	800709e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a17      	ldr	r2, [pc, #92]	; (80070ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d004      	beq.n	800709e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a15      	ldr	r2, [pc, #84]	; (80070f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d10c      	bne.n	80070b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3714      	adds	r7, #20
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	40010000 	.word	0x40010000
 80070dc:	40000400 	.word	0x40000400
 80070e0:	40000800 	.word	0x40000800
 80070e4:	40000c00 	.word	0x40000c00
 80070e8:	40010400 	.word	0x40010400
 80070ec:	40014000 	.word	0x40014000
 80070f0:	40001800 	.word	0x40001800

080070f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e03f      	b.n	80071ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d106      	bne.n	8007148 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7fb fc84 	bl	8002a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2224      	movs	r2, #36	; 0x24
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800715e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fd7b 	bl	8007c5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	691a      	ldr	r2, [r3, #16]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007174:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	695a      	ldr	r2, [r3, #20]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007184:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007194:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2220      	movs	r2, #32
 80071a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b08a      	sub	sp, #40	; 0x28
 80071ba:	af02      	add	r7, sp, #8
 80071bc:	60f8      	str	r0, [r7, #12]
 80071be:	60b9      	str	r1, [r7, #8]
 80071c0:	603b      	str	r3, [r7, #0]
 80071c2:	4613      	mov	r3, r2
 80071c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b20      	cmp	r3, #32
 80071d4:	d17c      	bne.n	80072d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d002      	beq.n	80071e2 <HAL_UART_Transmit+0x2c>
 80071dc:	88fb      	ldrh	r3, [r7, #6]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e075      	b.n	80072d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d101      	bne.n	80071f4 <HAL_UART_Transmit+0x3e>
 80071f0:	2302      	movs	r3, #2
 80071f2:	e06e      	b.n	80072d2 <HAL_UART_Transmit+0x11c>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2221      	movs	r2, #33	; 0x21
 8007206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800720a:	f7fb fd2d 	bl	8002c68 <HAL_GetTick>
 800720e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	88fa      	ldrh	r2, [r7, #6]
 8007214:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	88fa      	ldrh	r2, [r7, #6]
 800721a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007224:	d108      	bne.n	8007238 <HAL_UART_Transmit+0x82>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d104      	bne.n	8007238 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800722e:	2300      	movs	r3, #0
 8007230:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	61bb      	str	r3, [r7, #24]
 8007236:	e003      	b.n	8007240 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800723c:	2300      	movs	r3, #0
 800723e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007248:	e02a      	b.n	80072a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2200      	movs	r2, #0
 8007252:	2180      	movs	r1, #128	; 0x80
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f000 faf9 	bl	800784c <UART_WaitOnFlagUntilTimeout>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d001      	beq.n	8007264 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e036      	b.n	80072d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10b      	bne.n	8007282 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007278:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	3302      	adds	r3, #2
 800727e:	61bb      	str	r3, [r7, #24]
 8007280:	e007      	b.n	8007292 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	781a      	ldrb	r2, [r3, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	3301      	adds	r3, #1
 8007290:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007296:	b29b      	uxth	r3, r3
 8007298:	3b01      	subs	r3, #1
 800729a:	b29a      	uxth	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1cf      	bne.n	800724a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2200      	movs	r2, #0
 80072b2:	2140      	movs	r1, #64	; 0x40
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 fac9 	bl	800784c <UART_WaitOnFlagUntilTimeout>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e006      	b.n	80072d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2220      	movs	r2, #32
 80072c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	e000      	b.n	80072d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80072d0:	2302      	movs	r3, #2
  }
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3720      	adds	r7, #32
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
	...

080072dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b0ba      	sub	sp, #232	; 0xe8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007302:	2300      	movs	r3, #0
 8007304:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007308:	2300      	movs	r3, #0
 800730a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800730e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007312:	f003 030f 	and.w	r3, r3, #15
 8007316:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800731a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10f      	bne.n	8007342 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007326:	f003 0320 	and.w	r3, r3, #32
 800732a:	2b00      	cmp	r3, #0
 800732c:	d009      	beq.n	8007342 <HAL_UART_IRQHandler+0x66>
 800732e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007332:	f003 0320 	and.w	r3, r3, #32
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fbd3 	bl	8007ae6 <UART_Receive_IT>
      return;
 8007340:	e256      	b.n	80077f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 80de 	beq.w	8007508 <HAL_UART_IRQHandler+0x22c>
 800734c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b00      	cmp	r3, #0
 8007356:	d106      	bne.n	8007366 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800735c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 80d1 	beq.w	8007508 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00b      	beq.n	800738a <HAL_UART_IRQHandler+0xae>
 8007372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800737a:	2b00      	cmp	r3, #0
 800737c:	d005      	beq.n	800738a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	f043 0201 	orr.w	r2, r3, #1
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800738a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800738e:	f003 0304 	and.w	r3, r3, #4
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00b      	beq.n	80073ae <HAL_UART_IRQHandler+0xd2>
 8007396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d005      	beq.n	80073ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a6:	f043 0202 	orr.w	r2, r3, #2
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00b      	beq.n	80073d2 <HAL_UART_IRQHandler+0xf6>
 80073ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d005      	beq.n	80073d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	f043 0204 	orr.w	r2, r3, #4
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80073d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d6:	f003 0308 	and.w	r3, r3, #8
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d011      	beq.n	8007402 <HAL_UART_IRQHandler+0x126>
 80073de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e2:	f003 0320 	and.w	r3, r3, #32
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d105      	bne.n	80073f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80073ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d005      	beq.n	8007402 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fa:	f043 0208 	orr.w	r2, r3, #8
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 81ed 	beq.w	80077e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800740c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007410:	f003 0320 	and.w	r3, r3, #32
 8007414:	2b00      	cmp	r3, #0
 8007416:	d008      	beq.n	800742a <HAL_UART_IRQHandler+0x14e>
 8007418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800741c:	f003 0320 	and.w	r3, r3, #32
 8007420:	2b00      	cmp	r3, #0
 8007422:	d002      	beq.n	800742a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fb5e 	bl	8007ae6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007434:	2b40      	cmp	r3, #64	; 0x40
 8007436:	bf0c      	ite	eq
 8007438:	2301      	moveq	r3, #1
 800743a:	2300      	movne	r3, #0
 800743c:	b2db      	uxtb	r3, r3
 800743e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	f003 0308 	and.w	r3, r3, #8
 800744a:	2b00      	cmp	r3, #0
 800744c:	d103      	bne.n	8007456 <HAL_UART_IRQHandler+0x17a>
 800744e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007452:	2b00      	cmp	r3, #0
 8007454:	d04f      	beq.n	80074f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fa66 	bl	8007928 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007466:	2b40      	cmp	r3, #64	; 0x40
 8007468:	d141      	bne.n	80074ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	3314      	adds	r3, #20
 8007470:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007474:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007478:	e853 3f00 	ldrex	r3, [r3]
 800747c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007480:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007488:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3314      	adds	r3, #20
 8007492:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007496:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800749a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074a6:	e841 2300 	strex	r3, r2, [r1]
 80074aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80074ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1d9      	bne.n	800746a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d013      	beq.n	80074e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c2:	4a7d      	ldr	r2, [pc, #500]	; (80076b8 <HAL_UART_IRQHandler+0x3dc>)
 80074c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fc f901 	bl	80036d2 <HAL_DMA_Abort_IT>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d016      	beq.n	8007504 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074e0:	4610      	mov	r0, r2
 80074e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e4:	e00e      	b.n	8007504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f99a 	bl	8007820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ec:	e00a      	b.n	8007504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f996 	bl	8007820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074f4:	e006      	b.n	8007504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f992 	bl	8007820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007502:	e170      	b.n	80077e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007504:	bf00      	nop
    return;
 8007506:	e16e      	b.n	80077e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750c:	2b01      	cmp	r3, #1
 800750e:	f040 814a 	bne.w	80077a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007516:	f003 0310 	and.w	r3, r3, #16
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 8143 	beq.w	80077a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007524:	f003 0310 	and.w	r3, r3, #16
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 813c 	beq.w	80077a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800752e:	2300      	movs	r3, #0
 8007530:	60bb      	str	r3, [r7, #8]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	60bb      	str	r3, [r7, #8]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	60bb      	str	r3, [r7, #8]
 8007542:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754e:	2b40      	cmp	r3, #64	; 0x40
 8007550:	f040 80b4 	bne.w	80076bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007560:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 8140 	beq.w	80077ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800756e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007572:	429a      	cmp	r2, r3
 8007574:	f080 8139 	bcs.w	80077ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800757e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007584:	69db      	ldr	r3, [r3, #28]
 8007586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800758a:	f000 8088 	beq.w	800769e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	330c      	adds	r3, #12
 8007594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	330c      	adds	r3, #12
 80075b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80075ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80075c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80075d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1d9      	bne.n	800758e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3314      	adds	r3, #20
 80075e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80075ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075ec:	f023 0301 	bic.w	r3, r3, #1
 80075f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3314      	adds	r3, #20
 80075fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80075fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007602:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007604:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007606:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800760a:	e841 2300 	strex	r3, r2, [r1]
 800760e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1e1      	bne.n	80075da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3314      	adds	r3, #20
 800761c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007620:	e853 3f00 	ldrex	r3, [r3]
 8007624:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800762c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3314      	adds	r3, #20
 8007636:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800763a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800763c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007640:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007642:	e841 2300 	strex	r3, r2, [r1]
 8007646:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1e3      	bne.n	8007616 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2220      	movs	r2, #32
 8007652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	330c      	adds	r3, #12
 8007662:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007666:	e853 3f00 	ldrex	r3, [r3]
 800766a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800766c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800766e:	f023 0310 	bic.w	r3, r3, #16
 8007672:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	330c      	adds	r3, #12
 800767c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007680:	65ba      	str	r2, [r7, #88]	; 0x58
 8007682:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007684:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007686:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007688:	e841 2300 	strex	r3, r2, [r1]
 800768c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800768e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1e3      	bne.n	800765c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007698:	4618      	mov	r0, r3
 800769a:	f7fb ffaa 	bl	80035f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	4619      	mov	r1, r3
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f8c0 	bl	8007834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076b4:	e099      	b.n	80077ea <HAL_UART_IRQHandler+0x50e>
 80076b6:	bf00      	nop
 80076b8:	080079ef 	.word	0x080079ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f000 808b 	beq.w	80077ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80076d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 8086 	beq.w	80077ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	330c      	adds	r3, #12
 80076e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ec:	e853 3f00 	ldrex	r3, [r3]
 80076f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	330c      	adds	r3, #12
 8007702:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007706:	647a      	str	r2, [r7, #68]	; 0x44
 8007708:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800770c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800770e:	e841 2300 	strex	r3, r2, [r1]
 8007712:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1e3      	bne.n	80076e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3314      	adds	r3, #20
 8007720:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007724:	e853 3f00 	ldrex	r3, [r3]
 8007728:	623b      	str	r3, [r7, #32]
   return(result);
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	f023 0301 	bic.w	r3, r3, #1
 8007730:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	3314      	adds	r3, #20
 800773a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800773e:	633a      	str	r2, [r7, #48]	; 0x30
 8007740:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007742:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007746:	e841 2300 	strex	r3, r2, [r1]
 800774a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800774c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1e3      	bne.n	800771a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2220      	movs	r2, #32
 8007756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	330c      	adds	r3, #12
 8007766:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f023 0310 	bic.w	r3, r3, #16
 8007776:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	330c      	adds	r3, #12
 8007780:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007784:	61fa      	str	r2, [r7, #28]
 8007786:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007788:	69b9      	ldr	r1, [r7, #24]
 800778a:	69fa      	ldr	r2, [r7, #28]
 800778c:	e841 2300 	strex	r3, r2, [r1]
 8007790:	617b      	str	r3, [r7, #20]
   return(result);
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e3      	bne.n	8007760 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007798:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800779c:	4619      	mov	r1, r3
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f848 	bl	8007834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077a4:	e023      	b.n	80077ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80077a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d009      	beq.n	80077c6 <HAL_UART_IRQHandler+0x4ea>
 80077b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f929 	bl	8007a16 <UART_Transmit_IT>
    return;
 80077c4:	e014      	b.n	80077f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80077c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00e      	beq.n	80077f0 <HAL_UART_IRQHandler+0x514>
 80077d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d008      	beq.n	80077f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f969 	bl	8007ab6 <UART_EndTransmit_IT>
    return;
 80077e4:	e004      	b.n	80077f0 <HAL_UART_IRQHandler+0x514>
    return;
 80077e6:	bf00      	nop
 80077e8:	e002      	b.n	80077f0 <HAL_UART_IRQHandler+0x514>
      return;
 80077ea:	bf00      	nop
 80077ec:	e000      	b.n	80077f0 <HAL_UART_IRQHandler+0x514>
      return;
 80077ee:	bf00      	nop
  }
}
 80077f0:	37e8      	adds	r7, #232	; 0xe8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop

080077f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b090      	sub	sp, #64	; 0x40
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	603b      	str	r3, [r7, #0]
 8007858:	4613      	mov	r3, r2
 800785a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800785c:	e050      	b.n	8007900 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800785e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007864:	d04c      	beq.n	8007900 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007868:	2b00      	cmp	r3, #0
 800786a:	d007      	beq.n	800787c <UART_WaitOnFlagUntilTimeout+0x30>
 800786c:	f7fb f9fc 	bl	8002c68 <HAL_GetTick>
 8007870:	4602      	mov	r2, r0
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007878:	429a      	cmp	r2, r3
 800787a:	d241      	bcs.n	8007900 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	330c      	adds	r3, #12
 8007882:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	e853 3f00 	ldrex	r3, [r3]
 800788a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007892:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	330c      	adds	r3, #12
 800789a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800789c:	637a      	str	r2, [r7, #52]	; 0x34
 800789e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078a4:	e841 2300 	strex	r3, r2, [r1]
 80078a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1e5      	bne.n	800787c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3314      	adds	r3, #20
 80078b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	e853 3f00 	ldrex	r3, [r3]
 80078be:	613b      	str	r3, [r7, #16]
   return(result);
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	f023 0301 	bic.w	r3, r3, #1
 80078c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3314      	adds	r3, #20
 80078ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078d0:	623a      	str	r2, [r7, #32]
 80078d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d4:	69f9      	ldr	r1, [r7, #28]
 80078d6:	6a3a      	ldr	r2, [r7, #32]
 80078d8:	e841 2300 	strex	r3, r2, [r1]
 80078dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1e5      	bne.n	80078b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2220      	movs	r2, #32
 80078e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2220      	movs	r2, #32
 80078f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e00f      	b.n	8007920 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	4013      	ands	r3, r2
 800790a:	68ba      	ldr	r2, [r7, #8]
 800790c:	429a      	cmp	r2, r3
 800790e:	bf0c      	ite	eq
 8007910:	2301      	moveq	r3, #1
 8007912:	2300      	movne	r3, #0
 8007914:	b2db      	uxtb	r3, r3
 8007916:	461a      	mov	r2, r3
 8007918:	79fb      	ldrb	r3, [r7, #7]
 800791a:	429a      	cmp	r2, r3
 800791c:	d09f      	beq.n	800785e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3740      	adds	r7, #64	; 0x40
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007928:	b480      	push	{r7}
 800792a:	b095      	sub	sp, #84	; 0x54
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	330c      	adds	r3, #12
 8007936:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800793a:	e853 3f00 	ldrex	r3, [r3]
 800793e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007942:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	330c      	adds	r3, #12
 800794e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007950:	643a      	str	r2, [r7, #64]	; 0x40
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007954:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007956:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007958:	e841 2300 	strex	r3, r2, [r1]
 800795c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800795e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1e5      	bne.n	8007930 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	3314      	adds	r3, #20
 800796a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	e853 3f00 	ldrex	r3, [r3]
 8007972:	61fb      	str	r3, [r7, #28]
   return(result);
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	f023 0301 	bic.w	r3, r3, #1
 800797a:	64bb      	str	r3, [r7, #72]	; 0x48
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	3314      	adds	r3, #20
 8007982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007984:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800798a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800798c:	e841 2300 	strex	r3, r2, [r1]
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1e5      	bne.n	8007964 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799c:	2b01      	cmp	r3, #1
 800799e:	d119      	bne.n	80079d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	330c      	adds	r3, #12
 80079a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	e853 3f00 	ldrex	r3, [r3]
 80079ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	f023 0310 	bic.w	r3, r3, #16
 80079b6:	647b      	str	r3, [r7, #68]	; 0x44
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	330c      	adds	r3, #12
 80079be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079c0:	61ba      	str	r2, [r7, #24]
 80079c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c4:	6979      	ldr	r1, [r7, #20]
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	e841 2300 	strex	r3, r2, [r1]
 80079cc:	613b      	str	r3, [r7, #16]
   return(result);
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1e5      	bne.n	80079a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2220      	movs	r2, #32
 80079d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80079e2:	bf00      	nop
 80079e4:	3754      	adds	r7, #84	; 0x54
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f7ff ff09 	bl	8007820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a0e:	bf00      	nop
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b085      	sub	sp, #20
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b21      	cmp	r3, #33	; 0x21
 8007a28:	d13e      	bne.n	8007aa8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a32:	d114      	bne.n	8007a5e <UART_Transmit_IT+0x48>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d110      	bne.n	8007a5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a1b      	ldr	r3, [r3, #32]
 8007a40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	461a      	mov	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	1c9a      	adds	r2, r3, #2
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	621a      	str	r2, [r3, #32]
 8007a5c:	e008      	b.n	8007a70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	1c59      	adds	r1, r3, #1
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	6211      	str	r1, [r2, #32]
 8007a68:	781a      	ldrb	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	3b01      	subs	r3, #1
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10f      	bne.n	8007aa4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68da      	ldr	r2, [r3, #12]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aa2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	e000      	b.n	8007aaa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007aa8:	2302      	movs	r3, #2
  }
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b082      	sub	sp, #8
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007acc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7ff fe8e 	bl	80077f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b08c      	sub	sp, #48	; 0x30
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b22      	cmp	r3, #34	; 0x22
 8007af8:	f040 80ab 	bne.w	8007c52 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b04:	d117      	bne.n	8007b36 <UART_Receive_IT+0x50>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d113      	bne.n	8007b36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b16:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2e:	1c9a      	adds	r2, r3, #2
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	629a      	str	r2, [r3, #40]	; 0x28
 8007b34:	e026      	b.n	8007b84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b48:	d007      	beq.n	8007b5a <UART_Receive_IT+0x74>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10a      	bne.n	8007b68 <UART_Receive_IT+0x82>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d106      	bne.n	8007b68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b64:	701a      	strb	r2, [r3, #0]
 8007b66:	e008      	b.n	8007b7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7e:	1c5a      	adds	r2, r3, #1
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	4619      	mov	r1, r3
 8007b92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d15a      	bne.n	8007c4e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 0220 	bic.w	r2, r2, #32
 8007ba6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68da      	ldr	r2, [r3, #12]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	695a      	ldr	r2, [r3, #20]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 0201 	bic.w	r2, r2, #1
 8007bc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2220      	movs	r2, #32
 8007bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d135      	bne.n	8007c44 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	330c      	adds	r3, #12
 8007be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	e853 3f00 	ldrex	r3, [r3]
 8007bec:	613b      	str	r3, [r7, #16]
   return(result);
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	f023 0310 	bic.w	r3, r3, #16
 8007bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	330c      	adds	r3, #12
 8007bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bfe:	623a      	str	r2, [r7, #32]
 8007c00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c02:	69f9      	ldr	r1, [r7, #28]
 8007c04:	6a3a      	ldr	r2, [r7, #32]
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1e5      	bne.n	8007bde <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 0310 	and.w	r3, r3, #16
 8007c1c:	2b10      	cmp	r3, #16
 8007c1e:	d10a      	bne.n	8007c36 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c20:	2300      	movs	r3, #0
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	60fb      	str	r3, [r7, #12]
 8007c34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f7ff fdf9 	bl	8007834 <HAL_UARTEx_RxEventCallback>
 8007c42:	e002      	b.n	8007c4a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7ff fde1 	bl	800780c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	e002      	b.n	8007c54 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	e000      	b.n	8007c54 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007c52:	2302      	movs	r3, #2
  }
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3730      	adds	r7, #48	; 0x30
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c60:	b0c0      	sub	sp, #256	; 0x100
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c78:	68d9      	ldr	r1, [r3, #12]
 8007c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	ea40 0301 	orr.w	r3, r0, r1
 8007c84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	431a      	orrs	r2, r3
 8007c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007cb4:	f021 010c 	bic.w	r1, r1, #12
 8007cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007cc2:	430b      	orrs	r3, r1
 8007cc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	695b      	ldr	r3, [r3, #20]
 8007cce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd6:	6999      	ldr	r1, [r3, #24]
 8007cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	ea40 0301 	orr.w	r3, r0, r1
 8007ce2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	4b8f      	ldr	r3, [pc, #572]	; (8007f28 <UART_SetConfig+0x2cc>)
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d005      	beq.n	8007cfc <UART_SetConfig+0xa0>
 8007cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	4b8d      	ldr	r3, [pc, #564]	; (8007f2c <UART_SetConfig+0x2d0>)
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d104      	bne.n	8007d06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cfc:	f7fd fc90 	bl	8005620 <HAL_RCC_GetPCLK2Freq>
 8007d00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007d04:	e003      	b.n	8007d0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d06:	f7fd fc77 	bl	80055f8 <HAL_RCC_GetPCLK1Freq>
 8007d0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d18:	f040 810c 	bne.w	8007f34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d20:	2200      	movs	r2, #0
 8007d22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007d2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007d2e:	4622      	mov	r2, r4
 8007d30:	462b      	mov	r3, r5
 8007d32:	1891      	adds	r1, r2, r2
 8007d34:	65b9      	str	r1, [r7, #88]	; 0x58
 8007d36:	415b      	adcs	r3, r3
 8007d38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d3e:	4621      	mov	r1, r4
 8007d40:	eb12 0801 	adds.w	r8, r2, r1
 8007d44:	4629      	mov	r1, r5
 8007d46:	eb43 0901 	adc.w	r9, r3, r1
 8007d4a:	f04f 0200 	mov.w	r2, #0
 8007d4e:	f04f 0300 	mov.w	r3, #0
 8007d52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d5e:	4690      	mov	r8, r2
 8007d60:	4699      	mov	r9, r3
 8007d62:	4623      	mov	r3, r4
 8007d64:	eb18 0303 	adds.w	r3, r8, r3
 8007d68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d6c:	462b      	mov	r3, r5
 8007d6e:	eb49 0303 	adc.w	r3, r9, r3
 8007d72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007d86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	18db      	adds	r3, r3, r3
 8007d8e:	653b      	str	r3, [r7, #80]	; 0x50
 8007d90:	4613      	mov	r3, r2
 8007d92:	eb42 0303 	adc.w	r3, r2, r3
 8007d96:	657b      	str	r3, [r7, #84]	; 0x54
 8007d98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007da0:	f7f8 fa7e 	bl	80002a0 <__aeabi_uldivmod>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4b61      	ldr	r3, [pc, #388]	; (8007f30 <UART_SetConfig+0x2d4>)
 8007daa:	fba3 2302 	umull	r2, r3, r3, r2
 8007dae:	095b      	lsrs	r3, r3, #5
 8007db0:	011c      	lsls	r4, r3, #4
 8007db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007db6:	2200      	movs	r2, #0
 8007db8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007dbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007dc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007dc4:	4642      	mov	r2, r8
 8007dc6:	464b      	mov	r3, r9
 8007dc8:	1891      	adds	r1, r2, r2
 8007dca:	64b9      	str	r1, [r7, #72]	; 0x48
 8007dcc:	415b      	adcs	r3, r3
 8007dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007dd4:	4641      	mov	r1, r8
 8007dd6:	eb12 0a01 	adds.w	sl, r2, r1
 8007dda:	4649      	mov	r1, r9
 8007ddc:	eb43 0b01 	adc.w	fp, r3, r1
 8007de0:	f04f 0200 	mov.w	r2, #0
 8007de4:	f04f 0300 	mov.w	r3, #0
 8007de8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007dec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007df0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007df4:	4692      	mov	sl, r2
 8007df6:	469b      	mov	fp, r3
 8007df8:	4643      	mov	r3, r8
 8007dfa:	eb1a 0303 	adds.w	r3, sl, r3
 8007dfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e02:	464b      	mov	r3, r9
 8007e04:	eb4b 0303 	adc.w	r3, fp, r3
 8007e08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007e1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007e20:	460b      	mov	r3, r1
 8007e22:	18db      	adds	r3, r3, r3
 8007e24:	643b      	str	r3, [r7, #64]	; 0x40
 8007e26:	4613      	mov	r3, r2
 8007e28:	eb42 0303 	adc.w	r3, r2, r3
 8007e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8007e2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e36:	f7f8 fa33 	bl	80002a0 <__aeabi_uldivmod>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	4611      	mov	r1, r2
 8007e40:	4b3b      	ldr	r3, [pc, #236]	; (8007f30 <UART_SetConfig+0x2d4>)
 8007e42:	fba3 2301 	umull	r2, r3, r3, r1
 8007e46:	095b      	lsrs	r3, r3, #5
 8007e48:	2264      	movs	r2, #100	; 0x64
 8007e4a:	fb02 f303 	mul.w	r3, r2, r3
 8007e4e:	1acb      	subs	r3, r1, r3
 8007e50:	00db      	lsls	r3, r3, #3
 8007e52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007e56:	4b36      	ldr	r3, [pc, #216]	; (8007f30 <UART_SetConfig+0x2d4>)
 8007e58:	fba3 2302 	umull	r2, r3, r3, r2
 8007e5c:	095b      	lsrs	r3, r3, #5
 8007e5e:	005b      	lsls	r3, r3, #1
 8007e60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e64:	441c      	add	r4, r3
 8007e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007e74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007e78:	4642      	mov	r2, r8
 8007e7a:	464b      	mov	r3, r9
 8007e7c:	1891      	adds	r1, r2, r2
 8007e7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e80:	415b      	adcs	r3, r3
 8007e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e88:	4641      	mov	r1, r8
 8007e8a:	1851      	adds	r1, r2, r1
 8007e8c:	6339      	str	r1, [r7, #48]	; 0x30
 8007e8e:	4649      	mov	r1, r9
 8007e90:	414b      	adcs	r3, r1
 8007e92:	637b      	str	r3, [r7, #52]	; 0x34
 8007e94:	f04f 0200 	mov.w	r2, #0
 8007e98:	f04f 0300 	mov.w	r3, #0
 8007e9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007ea0:	4659      	mov	r1, fp
 8007ea2:	00cb      	lsls	r3, r1, #3
 8007ea4:	4651      	mov	r1, sl
 8007ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007eaa:	4651      	mov	r1, sl
 8007eac:	00ca      	lsls	r2, r1, #3
 8007eae:	4610      	mov	r0, r2
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	4642      	mov	r2, r8
 8007eb6:	189b      	adds	r3, r3, r2
 8007eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ebc:	464b      	mov	r3, r9
 8007ebe:	460a      	mov	r2, r1
 8007ec0:	eb42 0303 	adc.w	r3, r2, r3
 8007ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007ed4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007ed8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007edc:	460b      	mov	r3, r1
 8007ede:	18db      	adds	r3, r3, r3
 8007ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	eb42 0303 	adc.w	r3, r2, r3
 8007ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007eee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007ef2:	f7f8 f9d5 	bl	80002a0 <__aeabi_uldivmod>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	4b0d      	ldr	r3, [pc, #52]	; (8007f30 <UART_SetConfig+0x2d4>)
 8007efc:	fba3 1302 	umull	r1, r3, r3, r2
 8007f00:	095b      	lsrs	r3, r3, #5
 8007f02:	2164      	movs	r1, #100	; 0x64
 8007f04:	fb01 f303 	mul.w	r3, r1, r3
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	00db      	lsls	r3, r3, #3
 8007f0c:	3332      	adds	r3, #50	; 0x32
 8007f0e:	4a08      	ldr	r2, [pc, #32]	; (8007f30 <UART_SetConfig+0x2d4>)
 8007f10:	fba2 2303 	umull	r2, r3, r2, r3
 8007f14:	095b      	lsrs	r3, r3, #5
 8007f16:	f003 0207 	and.w	r2, r3, #7
 8007f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4422      	add	r2, r4
 8007f22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f24:	e105      	b.n	8008132 <UART_SetConfig+0x4d6>
 8007f26:	bf00      	nop
 8007f28:	40011000 	.word	0x40011000
 8007f2c:	40011400 	.word	0x40011400
 8007f30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007f46:	4642      	mov	r2, r8
 8007f48:	464b      	mov	r3, r9
 8007f4a:	1891      	adds	r1, r2, r2
 8007f4c:	6239      	str	r1, [r7, #32]
 8007f4e:	415b      	adcs	r3, r3
 8007f50:	627b      	str	r3, [r7, #36]	; 0x24
 8007f52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f56:	4641      	mov	r1, r8
 8007f58:	1854      	adds	r4, r2, r1
 8007f5a:	4649      	mov	r1, r9
 8007f5c:	eb43 0501 	adc.w	r5, r3, r1
 8007f60:	f04f 0200 	mov.w	r2, #0
 8007f64:	f04f 0300 	mov.w	r3, #0
 8007f68:	00eb      	lsls	r3, r5, #3
 8007f6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f6e:	00e2      	lsls	r2, r4, #3
 8007f70:	4614      	mov	r4, r2
 8007f72:	461d      	mov	r5, r3
 8007f74:	4643      	mov	r3, r8
 8007f76:	18e3      	adds	r3, r4, r3
 8007f78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f7c:	464b      	mov	r3, r9
 8007f7e:	eb45 0303 	adc.w	r3, r5, r3
 8007f82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f96:	f04f 0200 	mov.w	r2, #0
 8007f9a:	f04f 0300 	mov.w	r3, #0
 8007f9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	008b      	lsls	r3, r1, #2
 8007fa6:	4621      	mov	r1, r4
 8007fa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fac:	4621      	mov	r1, r4
 8007fae:	008a      	lsls	r2, r1, #2
 8007fb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007fb4:	f7f8 f974 	bl	80002a0 <__aeabi_uldivmod>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	460b      	mov	r3, r1
 8007fbc:	4b60      	ldr	r3, [pc, #384]	; (8008140 <UART_SetConfig+0x4e4>)
 8007fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8007fc2:	095b      	lsrs	r3, r3, #5
 8007fc4:	011c      	lsls	r4, r3, #4
 8007fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007fd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007fd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007fd8:	4642      	mov	r2, r8
 8007fda:	464b      	mov	r3, r9
 8007fdc:	1891      	adds	r1, r2, r2
 8007fde:	61b9      	str	r1, [r7, #24]
 8007fe0:	415b      	adcs	r3, r3
 8007fe2:	61fb      	str	r3, [r7, #28]
 8007fe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fe8:	4641      	mov	r1, r8
 8007fea:	1851      	adds	r1, r2, r1
 8007fec:	6139      	str	r1, [r7, #16]
 8007fee:	4649      	mov	r1, r9
 8007ff0:	414b      	adcs	r3, r1
 8007ff2:	617b      	str	r3, [r7, #20]
 8007ff4:	f04f 0200 	mov.w	r2, #0
 8007ff8:	f04f 0300 	mov.w	r3, #0
 8007ffc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008000:	4659      	mov	r1, fp
 8008002:	00cb      	lsls	r3, r1, #3
 8008004:	4651      	mov	r1, sl
 8008006:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800800a:	4651      	mov	r1, sl
 800800c:	00ca      	lsls	r2, r1, #3
 800800e:	4610      	mov	r0, r2
 8008010:	4619      	mov	r1, r3
 8008012:	4603      	mov	r3, r0
 8008014:	4642      	mov	r2, r8
 8008016:	189b      	adds	r3, r3, r2
 8008018:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800801c:	464b      	mov	r3, r9
 800801e:	460a      	mov	r2, r1
 8008020:	eb42 0303 	adc.w	r3, r2, r3
 8008024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	67bb      	str	r3, [r7, #120]	; 0x78
 8008032:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008034:	f04f 0200 	mov.w	r2, #0
 8008038:	f04f 0300 	mov.w	r3, #0
 800803c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008040:	4649      	mov	r1, r9
 8008042:	008b      	lsls	r3, r1, #2
 8008044:	4641      	mov	r1, r8
 8008046:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800804a:	4641      	mov	r1, r8
 800804c:	008a      	lsls	r2, r1, #2
 800804e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008052:	f7f8 f925 	bl	80002a0 <__aeabi_uldivmod>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	4b39      	ldr	r3, [pc, #228]	; (8008140 <UART_SetConfig+0x4e4>)
 800805c:	fba3 1302 	umull	r1, r3, r3, r2
 8008060:	095b      	lsrs	r3, r3, #5
 8008062:	2164      	movs	r1, #100	; 0x64
 8008064:	fb01 f303 	mul.w	r3, r1, r3
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	011b      	lsls	r3, r3, #4
 800806c:	3332      	adds	r3, #50	; 0x32
 800806e:	4a34      	ldr	r2, [pc, #208]	; (8008140 <UART_SetConfig+0x4e4>)
 8008070:	fba2 2303 	umull	r2, r3, r2, r3
 8008074:	095b      	lsrs	r3, r3, #5
 8008076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800807a:	441c      	add	r4, r3
 800807c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008080:	2200      	movs	r2, #0
 8008082:	673b      	str	r3, [r7, #112]	; 0x70
 8008084:	677a      	str	r2, [r7, #116]	; 0x74
 8008086:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800808a:	4642      	mov	r2, r8
 800808c:	464b      	mov	r3, r9
 800808e:	1891      	adds	r1, r2, r2
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	415b      	adcs	r3, r3
 8008094:	60fb      	str	r3, [r7, #12]
 8008096:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800809a:	4641      	mov	r1, r8
 800809c:	1851      	adds	r1, r2, r1
 800809e:	6039      	str	r1, [r7, #0]
 80080a0:	4649      	mov	r1, r9
 80080a2:	414b      	adcs	r3, r1
 80080a4:	607b      	str	r3, [r7, #4]
 80080a6:	f04f 0200 	mov.w	r2, #0
 80080aa:	f04f 0300 	mov.w	r3, #0
 80080ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80080b2:	4659      	mov	r1, fp
 80080b4:	00cb      	lsls	r3, r1, #3
 80080b6:	4651      	mov	r1, sl
 80080b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080bc:	4651      	mov	r1, sl
 80080be:	00ca      	lsls	r2, r1, #3
 80080c0:	4610      	mov	r0, r2
 80080c2:	4619      	mov	r1, r3
 80080c4:	4603      	mov	r3, r0
 80080c6:	4642      	mov	r2, r8
 80080c8:	189b      	adds	r3, r3, r2
 80080ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80080cc:	464b      	mov	r3, r9
 80080ce:	460a      	mov	r2, r1
 80080d0:	eb42 0303 	adc.w	r3, r2, r3
 80080d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	663b      	str	r3, [r7, #96]	; 0x60
 80080e0:	667a      	str	r2, [r7, #100]	; 0x64
 80080e2:	f04f 0200 	mov.w	r2, #0
 80080e6:	f04f 0300 	mov.w	r3, #0
 80080ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80080ee:	4649      	mov	r1, r9
 80080f0:	008b      	lsls	r3, r1, #2
 80080f2:	4641      	mov	r1, r8
 80080f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080f8:	4641      	mov	r1, r8
 80080fa:	008a      	lsls	r2, r1, #2
 80080fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008100:	f7f8 f8ce 	bl	80002a0 <__aeabi_uldivmod>
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	4b0d      	ldr	r3, [pc, #52]	; (8008140 <UART_SetConfig+0x4e4>)
 800810a:	fba3 1302 	umull	r1, r3, r3, r2
 800810e:	095b      	lsrs	r3, r3, #5
 8008110:	2164      	movs	r1, #100	; 0x64
 8008112:	fb01 f303 	mul.w	r3, r1, r3
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	011b      	lsls	r3, r3, #4
 800811a:	3332      	adds	r3, #50	; 0x32
 800811c:	4a08      	ldr	r2, [pc, #32]	; (8008140 <UART_SetConfig+0x4e4>)
 800811e:	fba2 2303 	umull	r2, r3, r2, r3
 8008122:	095b      	lsrs	r3, r3, #5
 8008124:	f003 020f 	and.w	r2, r3, #15
 8008128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4422      	add	r2, r4
 8008130:	609a      	str	r2, [r3, #8]
}
 8008132:	bf00      	nop
 8008134:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008138:	46bd      	mov	sp, r7
 800813a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800813e:	bf00      	nop
 8008140:	51eb851f 	.word	0x51eb851f

08008144 <__errno>:
 8008144:	4b01      	ldr	r3, [pc, #4]	; (800814c <__errno+0x8>)
 8008146:	6818      	ldr	r0, [r3, #0]
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	2000025c 	.word	0x2000025c

08008150 <__libc_init_array>:
 8008150:	b570      	push	{r4, r5, r6, lr}
 8008152:	4d0d      	ldr	r5, [pc, #52]	; (8008188 <__libc_init_array+0x38>)
 8008154:	4c0d      	ldr	r4, [pc, #52]	; (800818c <__libc_init_array+0x3c>)
 8008156:	1b64      	subs	r4, r4, r5
 8008158:	10a4      	asrs	r4, r4, #2
 800815a:	2600      	movs	r6, #0
 800815c:	42a6      	cmp	r6, r4
 800815e:	d109      	bne.n	8008174 <__libc_init_array+0x24>
 8008160:	4d0b      	ldr	r5, [pc, #44]	; (8008190 <__libc_init_array+0x40>)
 8008162:	4c0c      	ldr	r4, [pc, #48]	; (8008194 <__libc_init_array+0x44>)
 8008164:	f001 fa34 	bl	80095d0 <_init>
 8008168:	1b64      	subs	r4, r4, r5
 800816a:	10a4      	asrs	r4, r4, #2
 800816c:	2600      	movs	r6, #0
 800816e:	42a6      	cmp	r6, r4
 8008170:	d105      	bne.n	800817e <__libc_init_array+0x2e>
 8008172:	bd70      	pop	{r4, r5, r6, pc}
 8008174:	f855 3b04 	ldr.w	r3, [r5], #4
 8008178:	4798      	blx	r3
 800817a:	3601      	adds	r6, #1
 800817c:	e7ee      	b.n	800815c <__libc_init_array+0xc>
 800817e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008182:	4798      	blx	r3
 8008184:	3601      	adds	r6, #1
 8008186:	e7f2      	b.n	800816e <__libc_init_array+0x1e>
 8008188:	080097e4 	.word	0x080097e4
 800818c:	080097e4 	.word	0x080097e4
 8008190:	080097e4 	.word	0x080097e4
 8008194:	080097e8 	.word	0x080097e8

08008198 <memset>:
 8008198:	4402      	add	r2, r0
 800819a:	4603      	mov	r3, r0
 800819c:	4293      	cmp	r3, r2
 800819e:	d100      	bne.n	80081a2 <memset+0xa>
 80081a0:	4770      	bx	lr
 80081a2:	f803 1b01 	strb.w	r1, [r3], #1
 80081a6:	e7f9      	b.n	800819c <memset+0x4>

080081a8 <iprintf>:
 80081a8:	b40f      	push	{r0, r1, r2, r3}
 80081aa:	4b0a      	ldr	r3, [pc, #40]	; (80081d4 <iprintf+0x2c>)
 80081ac:	b513      	push	{r0, r1, r4, lr}
 80081ae:	681c      	ldr	r4, [r3, #0]
 80081b0:	b124      	cbz	r4, 80081bc <iprintf+0x14>
 80081b2:	69a3      	ldr	r3, [r4, #24]
 80081b4:	b913      	cbnz	r3, 80081bc <iprintf+0x14>
 80081b6:	4620      	mov	r0, r4
 80081b8:	f000 fab2 	bl	8008720 <__sinit>
 80081bc:	ab05      	add	r3, sp, #20
 80081be:	9a04      	ldr	r2, [sp, #16]
 80081c0:	68a1      	ldr	r1, [r4, #8]
 80081c2:	9301      	str	r3, [sp, #4]
 80081c4:	4620      	mov	r0, r4
 80081c6:	f000 fe17 	bl	8008df8 <_vfiprintf_r>
 80081ca:	b002      	add	sp, #8
 80081cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081d0:	b004      	add	sp, #16
 80081d2:	4770      	bx	lr
 80081d4:	2000025c 	.word	0x2000025c

080081d8 <_puts_r>:
 80081d8:	b570      	push	{r4, r5, r6, lr}
 80081da:	460e      	mov	r6, r1
 80081dc:	4605      	mov	r5, r0
 80081de:	b118      	cbz	r0, 80081e8 <_puts_r+0x10>
 80081e0:	6983      	ldr	r3, [r0, #24]
 80081e2:	b90b      	cbnz	r3, 80081e8 <_puts_r+0x10>
 80081e4:	f000 fa9c 	bl	8008720 <__sinit>
 80081e8:	69ab      	ldr	r3, [r5, #24]
 80081ea:	68ac      	ldr	r4, [r5, #8]
 80081ec:	b913      	cbnz	r3, 80081f4 <_puts_r+0x1c>
 80081ee:	4628      	mov	r0, r5
 80081f0:	f000 fa96 	bl	8008720 <__sinit>
 80081f4:	4b2c      	ldr	r3, [pc, #176]	; (80082a8 <_puts_r+0xd0>)
 80081f6:	429c      	cmp	r4, r3
 80081f8:	d120      	bne.n	800823c <_puts_r+0x64>
 80081fa:	686c      	ldr	r4, [r5, #4]
 80081fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081fe:	07db      	lsls	r3, r3, #31
 8008200:	d405      	bmi.n	800820e <_puts_r+0x36>
 8008202:	89a3      	ldrh	r3, [r4, #12]
 8008204:	0598      	lsls	r0, r3, #22
 8008206:	d402      	bmi.n	800820e <_puts_r+0x36>
 8008208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800820a:	f000 fb27 	bl	800885c <__retarget_lock_acquire_recursive>
 800820e:	89a3      	ldrh	r3, [r4, #12]
 8008210:	0719      	lsls	r1, r3, #28
 8008212:	d51d      	bpl.n	8008250 <_puts_r+0x78>
 8008214:	6923      	ldr	r3, [r4, #16]
 8008216:	b1db      	cbz	r3, 8008250 <_puts_r+0x78>
 8008218:	3e01      	subs	r6, #1
 800821a:	68a3      	ldr	r3, [r4, #8]
 800821c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008220:	3b01      	subs	r3, #1
 8008222:	60a3      	str	r3, [r4, #8]
 8008224:	bb39      	cbnz	r1, 8008276 <_puts_r+0x9e>
 8008226:	2b00      	cmp	r3, #0
 8008228:	da38      	bge.n	800829c <_puts_r+0xc4>
 800822a:	4622      	mov	r2, r4
 800822c:	210a      	movs	r1, #10
 800822e:	4628      	mov	r0, r5
 8008230:	f000 f89c 	bl	800836c <__swbuf_r>
 8008234:	3001      	adds	r0, #1
 8008236:	d011      	beq.n	800825c <_puts_r+0x84>
 8008238:	250a      	movs	r5, #10
 800823a:	e011      	b.n	8008260 <_puts_r+0x88>
 800823c:	4b1b      	ldr	r3, [pc, #108]	; (80082ac <_puts_r+0xd4>)
 800823e:	429c      	cmp	r4, r3
 8008240:	d101      	bne.n	8008246 <_puts_r+0x6e>
 8008242:	68ac      	ldr	r4, [r5, #8]
 8008244:	e7da      	b.n	80081fc <_puts_r+0x24>
 8008246:	4b1a      	ldr	r3, [pc, #104]	; (80082b0 <_puts_r+0xd8>)
 8008248:	429c      	cmp	r4, r3
 800824a:	bf08      	it	eq
 800824c:	68ec      	ldreq	r4, [r5, #12]
 800824e:	e7d5      	b.n	80081fc <_puts_r+0x24>
 8008250:	4621      	mov	r1, r4
 8008252:	4628      	mov	r0, r5
 8008254:	f000 f8dc 	bl	8008410 <__swsetup_r>
 8008258:	2800      	cmp	r0, #0
 800825a:	d0dd      	beq.n	8008218 <_puts_r+0x40>
 800825c:	f04f 35ff 	mov.w	r5, #4294967295
 8008260:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008262:	07da      	lsls	r2, r3, #31
 8008264:	d405      	bmi.n	8008272 <_puts_r+0x9a>
 8008266:	89a3      	ldrh	r3, [r4, #12]
 8008268:	059b      	lsls	r3, r3, #22
 800826a:	d402      	bmi.n	8008272 <_puts_r+0x9a>
 800826c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800826e:	f000 faf6 	bl	800885e <__retarget_lock_release_recursive>
 8008272:	4628      	mov	r0, r5
 8008274:	bd70      	pop	{r4, r5, r6, pc}
 8008276:	2b00      	cmp	r3, #0
 8008278:	da04      	bge.n	8008284 <_puts_r+0xac>
 800827a:	69a2      	ldr	r2, [r4, #24]
 800827c:	429a      	cmp	r2, r3
 800827e:	dc06      	bgt.n	800828e <_puts_r+0xb6>
 8008280:	290a      	cmp	r1, #10
 8008282:	d004      	beq.n	800828e <_puts_r+0xb6>
 8008284:	6823      	ldr	r3, [r4, #0]
 8008286:	1c5a      	adds	r2, r3, #1
 8008288:	6022      	str	r2, [r4, #0]
 800828a:	7019      	strb	r1, [r3, #0]
 800828c:	e7c5      	b.n	800821a <_puts_r+0x42>
 800828e:	4622      	mov	r2, r4
 8008290:	4628      	mov	r0, r5
 8008292:	f000 f86b 	bl	800836c <__swbuf_r>
 8008296:	3001      	adds	r0, #1
 8008298:	d1bf      	bne.n	800821a <_puts_r+0x42>
 800829a:	e7df      	b.n	800825c <_puts_r+0x84>
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	250a      	movs	r5, #10
 80082a0:	1c5a      	adds	r2, r3, #1
 80082a2:	6022      	str	r2, [r4, #0]
 80082a4:	701d      	strb	r5, [r3, #0]
 80082a6:	e7db      	b.n	8008260 <_puts_r+0x88>
 80082a8:	08009768 	.word	0x08009768
 80082ac:	08009788 	.word	0x08009788
 80082b0:	08009748 	.word	0x08009748

080082b4 <puts>:
 80082b4:	4b02      	ldr	r3, [pc, #8]	; (80082c0 <puts+0xc>)
 80082b6:	4601      	mov	r1, r0
 80082b8:	6818      	ldr	r0, [r3, #0]
 80082ba:	f7ff bf8d 	b.w	80081d8 <_puts_r>
 80082be:	bf00      	nop
 80082c0:	2000025c 	.word	0x2000025c

080082c4 <sniprintf>:
 80082c4:	b40c      	push	{r2, r3}
 80082c6:	b530      	push	{r4, r5, lr}
 80082c8:	4b17      	ldr	r3, [pc, #92]	; (8008328 <sniprintf+0x64>)
 80082ca:	1e0c      	subs	r4, r1, #0
 80082cc:	681d      	ldr	r5, [r3, #0]
 80082ce:	b09d      	sub	sp, #116	; 0x74
 80082d0:	da08      	bge.n	80082e4 <sniprintf+0x20>
 80082d2:	238b      	movs	r3, #139	; 0x8b
 80082d4:	602b      	str	r3, [r5, #0]
 80082d6:	f04f 30ff 	mov.w	r0, #4294967295
 80082da:	b01d      	add	sp, #116	; 0x74
 80082dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082e0:	b002      	add	sp, #8
 80082e2:	4770      	bx	lr
 80082e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80082e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80082ec:	bf14      	ite	ne
 80082ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 80082f2:	4623      	moveq	r3, r4
 80082f4:	9304      	str	r3, [sp, #16]
 80082f6:	9307      	str	r3, [sp, #28]
 80082f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80082fc:	9002      	str	r0, [sp, #8]
 80082fe:	9006      	str	r0, [sp, #24]
 8008300:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008304:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008306:	ab21      	add	r3, sp, #132	; 0x84
 8008308:	a902      	add	r1, sp, #8
 800830a:	4628      	mov	r0, r5
 800830c:	9301      	str	r3, [sp, #4]
 800830e:	f000 fc49 	bl	8008ba4 <_svfiprintf_r>
 8008312:	1c43      	adds	r3, r0, #1
 8008314:	bfbc      	itt	lt
 8008316:	238b      	movlt	r3, #139	; 0x8b
 8008318:	602b      	strlt	r3, [r5, #0]
 800831a:	2c00      	cmp	r4, #0
 800831c:	d0dd      	beq.n	80082da <sniprintf+0x16>
 800831e:	9b02      	ldr	r3, [sp, #8]
 8008320:	2200      	movs	r2, #0
 8008322:	701a      	strb	r2, [r3, #0]
 8008324:	e7d9      	b.n	80082da <sniprintf+0x16>
 8008326:	bf00      	nop
 8008328:	2000025c 	.word	0x2000025c

0800832c <siprintf>:
 800832c:	b40e      	push	{r1, r2, r3}
 800832e:	b500      	push	{lr}
 8008330:	b09c      	sub	sp, #112	; 0x70
 8008332:	ab1d      	add	r3, sp, #116	; 0x74
 8008334:	9002      	str	r0, [sp, #8]
 8008336:	9006      	str	r0, [sp, #24]
 8008338:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800833c:	4809      	ldr	r0, [pc, #36]	; (8008364 <siprintf+0x38>)
 800833e:	9107      	str	r1, [sp, #28]
 8008340:	9104      	str	r1, [sp, #16]
 8008342:	4909      	ldr	r1, [pc, #36]	; (8008368 <siprintf+0x3c>)
 8008344:	f853 2b04 	ldr.w	r2, [r3], #4
 8008348:	9105      	str	r1, [sp, #20]
 800834a:	6800      	ldr	r0, [r0, #0]
 800834c:	9301      	str	r3, [sp, #4]
 800834e:	a902      	add	r1, sp, #8
 8008350:	f000 fc28 	bl	8008ba4 <_svfiprintf_r>
 8008354:	9b02      	ldr	r3, [sp, #8]
 8008356:	2200      	movs	r2, #0
 8008358:	701a      	strb	r2, [r3, #0]
 800835a:	b01c      	add	sp, #112	; 0x70
 800835c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008360:	b003      	add	sp, #12
 8008362:	4770      	bx	lr
 8008364:	2000025c 	.word	0x2000025c
 8008368:	ffff0208 	.word	0xffff0208

0800836c <__swbuf_r>:
 800836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836e:	460e      	mov	r6, r1
 8008370:	4614      	mov	r4, r2
 8008372:	4605      	mov	r5, r0
 8008374:	b118      	cbz	r0, 800837e <__swbuf_r+0x12>
 8008376:	6983      	ldr	r3, [r0, #24]
 8008378:	b90b      	cbnz	r3, 800837e <__swbuf_r+0x12>
 800837a:	f000 f9d1 	bl	8008720 <__sinit>
 800837e:	4b21      	ldr	r3, [pc, #132]	; (8008404 <__swbuf_r+0x98>)
 8008380:	429c      	cmp	r4, r3
 8008382:	d12b      	bne.n	80083dc <__swbuf_r+0x70>
 8008384:	686c      	ldr	r4, [r5, #4]
 8008386:	69a3      	ldr	r3, [r4, #24]
 8008388:	60a3      	str	r3, [r4, #8]
 800838a:	89a3      	ldrh	r3, [r4, #12]
 800838c:	071a      	lsls	r2, r3, #28
 800838e:	d52f      	bpl.n	80083f0 <__swbuf_r+0x84>
 8008390:	6923      	ldr	r3, [r4, #16]
 8008392:	b36b      	cbz	r3, 80083f0 <__swbuf_r+0x84>
 8008394:	6923      	ldr	r3, [r4, #16]
 8008396:	6820      	ldr	r0, [r4, #0]
 8008398:	1ac0      	subs	r0, r0, r3
 800839a:	6963      	ldr	r3, [r4, #20]
 800839c:	b2f6      	uxtb	r6, r6
 800839e:	4283      	cmp	r3, r0
 80083a0:	4637      	mov	r7, r6
 80083a2:	dc04      	bgt.n	80083ae <__swbuf_r+0x42>
 80083a4:	4621      	mov	r1, r4
 80083a6:	4628      	mov	r0, r5
 80083a8:	f000 f926 	bl	80085f8 <_fflush_r>
 80083ac:	bb30      	cbnz	r0, 80083fc <__swbuf_r+0x90>
 80083ae:	68a3      	ldr	r3, [r4, #8]
 80083b0:	3b01      	subs	r3, #1
 80083b2:	60a3      	str	r3, [r4, #8]
 80083b4:	6823      	ldr	r3, [r4, #0]
 80083b6:	1c5a      	adds	r2, r3, #1
 80083b8:	6022      	str	r2, [r4, #0]
 80083ba:	701e      	strb	r6, [r3, #0]
 80083bc:	6963      	ldr	r3, [r4, #20]
 80083be:	3001      	adds	r0, #1
 80083c0:	4283      	cmp	r3, r0
 80083c2:	d004      	beq.n	80083ce <__swbuf_r+0x62>
 80083c4:	89a3      	ldrh	r3, [r4, #12]
 80083c6:	07db      	lsls	r3, r3, #31
 80083c8:	d506      	bpl.n	80083d8 <__swbuf_r+0x6c>
 80083ca:	2e0a      	cmp	r6, #10
 80083cc:	d104      	bne.n	80083d8 <__swbuf_r+0x6c>
 80083ce:	4621      	mov	r1, r4
 80083d0:	4628      	mov	r0, r5
 80083d2:	f000 f911 	bl	80085f8 <_fflush_r>
 80083d6:	b988      	cbnz	r0, 80083fc <__swbuf_r+0x90>
 80083d8:	4638      	mov	r0, r7
 80083da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083dc:	4b0a      	ldr	r3, [pc, #40]	; (8008408 <__swbuf_r+0x9c>)
 80083de:	429c      	cmp	r4, r3
 80083e0:	d101      	bne.n	80083e6 <__swbuf_r+0x7a>
 80083e2:	68ac      	ldr	r4, [r5, #8]
 80083e4:	e7cf      	b.n	8008386 <__swbuf_r+0x1a>
 80083e6:	4b09      	ldr	r3, [pc, #36]	; (800840c <__swbuf_r+0xa0>)
 80083e8:	429c      	cmp	r4, r3
 80083ea:	bf08      	it	eq
 80083ec:	68ec      	ldreq	r4, [r5, #12]
 80083ee:	e7ca      	b.n	8008386 <__swbuf_r+0x1a>
 80083f0:	4621      	mov	r1, r4
 80083f2:	4628      	mov	r0, r5
 80083f4:	f000 f80c 	bl	8008410 <__swsetup_r>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	d0cb      	beq.n	8008394 <__swbuf_r+0x28>
 80083fc:	f04f 37ff 	mov.w	r7, #4294967295
 8008400:	e7ea      	b.n	80083d8 <__swbuf_r+0x6c>
 8008402:	bf00      	nop
 8008404:	08009768 	.word	0x08009768
 8008408:	08009788 	.word	0x08009788
 800840c:	08009748 	.word	0x08009748

08008410 <__swsetup_r>:
 8008410:	4b32      	ldr	r3, [pc, #200]	; (80084dc <__swsetup_r+0xcc>)
 8008412:	b570      	push	{r4, r5, r6, lr}
 8008414:	681d      	ldr	r5, [r3, #0]
 8008416:	4606      	mov	r6, r0
 8008418:	460c      	mov	r4, r1
 800841a:	b125      	cbz	r5, 8008426 <__swsetup_r+0x16>
 800841c:	69ab      	ldr	r3, [r5, #24]
 800841e:	b913      	cbnz	r3, 8008426 <__swsetup_r+0x16>
 8008420:	4628      	mov	r0, r5
 8008422:	f000 f97d 	bl	8008720 <__sinit>
 8008426:	4b2e      	ldr	r3, [pc, #184]	; (80084e0 <__swsetup_r+0xd0>)
 8008428:	429c      	cmp	r4, r3
 800842a:	d10f      	bne.n	800844c <__swsetup_r+0x3c>
 800842c:	686c      	ldr	r4, [r5, #4]
 800842e:	89a3      	ldrh	r3, [r4, #12]
 8008430:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008434:	0719      	lsls	r1, r3, #28
 8008436:	d42c      	bmi.n	8008492 <__swsetup_r+0x82>
 8008438:	06dd      	lsls	r5, r3, #27
 800843a:	d411      	bmi.n	8008460 <__swsetup_r+0x50>
 800843c:	2309      	movs	r3, #9
 800843e:	6033      	str	r3, [r6, #0]
 8008440:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008444:	81a3      	strh	r3, [r4, #12]
 8008446:	f04f 30ff 	mov.w	r0, #4294967295
 800844a:	e03e      	b.n	80084ca <__swsetup_r+0xba>
 800844c:	4b25      	ldr	r3, [pc, #148]	; (80084e4 <__swsetup_r+0xd4>)
 800844e:	429c      	cmp	r4, r3
 8008450:	d101      	bne.n	8008456 <__swsetup_r+0x46>
 8008452:	68ac      	ldr	r4, [r5, #8]
 8008454:	e7eb      	b.n	800842e <__swsetup_r+0x1e>
 8008456:	4b24      	ldr	r3, [pc, #144]	; (80084e8 <__swsetup_r+0xd8>)
 8008458:	429c      	cmp	r4, r3
 800845a:	bf08      	it	eq
 800845c:	68ec      	ldreq	r4, [r5, #12]
 800845e:	e7e6      	b.n	800842e <__swsetup_r+0x1e>
 8008460:	0758      	lsls	r0, r3, #29
 8008462:	d512      	bpl.n	800848a <__swsetup_r+0x7a>
 8008464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008466:	b141      	cbz	r1, 800847a <__swsetup_r+0x6a>
 8008468:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800846c:	4299      	cmp	r1, r3
 800846e:	d002      	beq.n	8008476 <__swsetup_r+0x66>
 8008470:	4630      	mov	r0, r6
 8008472:	f000 fa5b 	bl	800892c <_free_r>
 8008476:	2300      	movs	r3, #0
 8008478:	6363      	str	r3, [r4, #52]	; 0x34
 800847a:	89a3      	ldrh	r3, [r4, #12]
 800847c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008480:	81a3      	strh	r3, [r4, #12]
 8008482:	2300      	movs	r3, #0
 8008484:	6063      	str	r3, [r4, #4]
 8008486:	6923      	ldr	r3, [r4, #16]
 8008488:	6023      	str	r3, [r4, #0]
 800848a:	89a3      	ldrh	r3, [r4, #12]
 800848c:	f043 0308 	orr.w	r3, r3, #8
 8008490:	81a3      	strh	r3, [r4, #12]
 8008492:	6923      	ldr	r3, [r4, #16]
 8008494:	b94b      	cbnz	r3, 80084aa <__swsetup_r+0x9a>
 8008496:	89a3      	ldrh	r3, [r4, #12]
 8008498:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800849c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084a0:	d003      	beq.n	80084aa <__swsetup_r+0x9a>
 80084a2:	4621      	mov	r1, r4
 80084a4:	4630      	mov	r0, r6
 80084a6:	f000 fa01 	bl	80088ac <__smakebuf_r>
 80084aa:	89a0      	ldrh	r0, [r4, #12]
 80084ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084b0:	f010 0301 	ands.w	r3, r0, #1
 80084b4:	d00a      	beq.n	80084cc <__swsetup_r+0xbc>
 80084b6:	2300      	movs	r3, #0
 80084b8:	60a3      	str	r3, [r4, #8]
 80084ba:	6963      	ldr	r3, [r4, #20]
 80084bc:	425b      	negs	r3, r3
 80084be:	61a3      	str	r3, [r4, #24]
 80084c0:	6923      	ldr	r3, [r4, #16]
 80084c2:	b943      	cbnz	r3, 80084d6 <__swsetup_r+0xc6>
 80084c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80084c8:	d1ba      	bne.n	8008440 <__swsetup_r+0x30>
 80084ca:	bd70      	pop	{r4, r5, r6, pc}
 80084cc:	0781      	lsls	r1, r0, #30
 80084ce:	bf58      	it	pl
 80084d0:	6963      	ldrpl	r3, [r4, #20]
 80084d2:	60a3      	str	r3, [r4, #8]
 80084d4:	e7f4      	b.n	80084c0 <__swsetup_r+0xb0>
 80084d6:	2000      	movs	r0, #0
 80084d8:	e7f7      	b.n	80084ca <__swsetup_r+0xba>
 80084da:	bf00      	nop
 80084dc:	2000025c 	.word	0x2000025c
 80084e0:	08009768 	.word	0x08009768
 80084e4:	08009788 	.word	0x08009788
 80084e8:	08009748 	.word	0x08009748

080084ec <__sflush_r>:
 80084ec:	898a      	ldrh	r2, [r1, #12]
 80084ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f2:	4605      	mov	r5, r0
 80084f4:	0710      	lsls	r0, r2, #28
 80084f6:	460c      	mov	r4, r1
 80084f8:	d458      	bmi.n	80085ac <__sflush_r+0xc0>
 80084fa:	684b      	ldr	r3, [r1, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	dc05      	bgt.n	800850c <__sflush_r+0x20>
 8008500:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008502:	2b00      	cmp	r3, #0
 8008504:	dc02      	bgt.n	800850c <__sflush_r+0x20>
 8008506:	2000      	movs	r0, #0
 8008508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800850c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800850e:	2e00      	cmp	r6, #0
 8008510:	d0f9      	beq.n	8008506 <__sflush_r+0x1a>
 8008512:	2300      	movs	r3, #0
 8008514:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008518:	682f      	ldr	r7, [r5, #0]
 800851a:	602b      	str	r3, [r5, #0]
 800851c:	d032      	beq.n	8008584 <__sflush_r+0x98>
 800851e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008520:	89a3      	ldrh	r3, [r4, #12]
 8008522:	075a      	lsls	r2, r3, #29
 8008524:	d505      	bpl.n	8008532 <__sflush_r+0x46>
 8008526:	6863      	ldr	r3, [r4, #4]
 8008528:	1ac0      	subs	r0, r0, r3
 800852a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800852c:	b10b      	cbz	r3, 8008532 <__sflush_r+0x46>
 800852e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008530:	1ac0      	subs	r0, r0, r3
 8008532:	2300      	movs	r3, #0
 8008534:	4602      	mov	r2, r0
 8008536:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008538:	6a21      	ldr	r1, [r4, #32]
 800853a:	4628      	mov	r0, r5
 800853c:	47b0      	blx	r6
 800853e:	1c43      	adds	r3, r0, #1
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	d106      	bne.n	8008552 <__sflush_r+0x66>
 8008544:	6829      	ldr	r1, [r5, #0]
 8008546:	291d      	cmp	r1, #29
 8008548:	d82c      	bhi.n	80085a4 <__sflush_r+0xb8>
 800854a:	4a2a      	ldr	r2, [pc, #168]	; (80085f4 <__sflush_r+0x108>)
 800854c:	40ca      	lsrs	r2, r1
 800854e:	07d6      	lsls	r6, r2, #31
 8008550:	d528      	bpl.n	80085a4 <__sflush_r+0xb8>
 8008552:	2200      	movs	r2, #0
 8008554:	6062      	str	r2, [r4, #4]
 8008556:	04d9      	lsls	r1, r3, #19
 8008558:	6922      	ldr	r2, [r4, #16]
 800855a:	6022      	str	r2, [r4, #0]
 800855c:	d504      	bpl.n	8008568 <__sflush_r+0x7c>
 800855e:	1c42      	adds	r2, r0, #1
 8008560:	d101      	bne.n	8008566 <__sflush_r+0x7a>
 8008562:	682b      	ldr	r3, [r5, #0]
 8008564:	b903      	cbnz	r3, 8008568 <__sflush_r+0x7c>
 8008566:	6560      	str	r0, [r4, #84]	; 0x54
 8008568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800856a:	602f      	str	r7, [r5, #0]
 800856c:	2900      	cmp	r1, #0
 800856e:	d0ca      	beq.n	8008506 <__sflush_r+0x1a>
 8008570:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008574:	4299      	cmp	r1, r3
 8008576:	d002      	beq.n	800857e <__sflush_r+0x92>
 8008578:	4628      	mov	r0, r5
 800857a:	f000 f9d7 	bl	800892c <_free_r>
 800857e:	2000      	movs	r0, #0
 8008580:	6360      	str	r0, [r4, #52]	; 0x34
 8008582:	e7c1      	b.n	8008508 <__sflush_r+0x1c>
 8008584:	6a21      	ldr	r1, [r4, #32]
 8008586:	2301      	movs	r3, #1
 8008588:	4628      	mov	r0, r5
 800858a:	47b0      	blx	r6
 800858c:	1c41      	adds	r1, r0, #1
 800858e:	d1c7      	bne.n	8008520 <__sflush_r+0x34>
 8008590:	682b      	ldr	r3, [r5, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d0c4      	beq.n	8008520 <__sflush_r+0x34>
 8008596:	2b1d      	cmp	r3, #29
 8008598:	d001      	beq.n	800859e <__sflush_r+0xb2>
 800859a:	2b16      	cmp	r3, #22
 800859c:	d101      	bne.n	80085a2 <__sflush_r+0xb6>
 800859e:	602f      	str	r7, [r5, #0]
 80085a0:	e7b1      	b.n	8008506 <__sflush_r+0x1a>
 80085a2:	89a3      	ldrh	r3, [r4, #12]
 80085a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085a8:	81a3      	strh	r3, [r4, #12]
 80085aa:	e7ad      	b.n	8008508 <__sflush_r+0x1c>
 80085ac:	690f      	ldr	r7, [r1, #16]
 80085ae:	2f00      	cmp	r7, #0
 80085b0:	d0a9      	beq.n	8008506 <__sflush_r+0x1a>
 80085b2:	0793      	lsls	r3, r2, #30
 80085b4:	680e      	ldr	r6, [r1, #0]
 80085b6:	bf08      	it	eq
 80085b8:	694b      	ldreq	r3, [r1, #20]
 80085ba:	600f      	str	r7, [r1, #0]
 80085bc:	bf18      	it	ne
 80085be:	2300      	movne	r3, #0
 80085c0:	eba6 0807 	sub.w	r8, r6, r7
 80085c4:	608b      	str	r3, [r1, #8]
 80085c6:	f1b8 0f00 	cmp.w	r8, #0
 80085ca:	dd9c      	ble.n	8008506 <__sflush_r+0x1a>
 80085cc:	6a21      	ldr	r1, [r4, #32]
 80085ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80085d0:	4643      	mov	r3, r8
 80085d2:	463a      	mov	r2, r7
 80085d4:	4628      	mov	r0, r5
 80085d6:	47b0      	blx	r6
 80085d8:	2800      	cmp	r0, #0
 80085da:	dc06      	bgt.n	80085ea <__sflush_r+0xfe>
 80085dc:	89a3      	ldrh	r3, [r4, #12]
 80085de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085e2:	81a3      	strh	r3, [r4, #12]
 80085e4:	f04f 30ff 	mov.w	r0, #4294967295
 80085e8:	e78e      	b.n	8008508 <__sflush_r+0x1c>
 80085ea:	4407      	add	r7, r0
 80085ec:	eba8 0800 	sub.w	r8, r8, r0
 80085f0:	e7e9      	b.n	80085c6 <__sflush_r+0xda>
 80085f2:	bf00      	nop
 80085f4:	20400001 	.word	0x20400001

080085f8 <_fflush_r>:
 80085f8:	b538      	push	{r3, r4, r5, lr}
 80085fa:	690b      	ldr	r3, [r1, #16]
 80085fc:	4605      	mov	r5, r0
 80085fe:	460c      	mov	r4, r1
 8008600:	b913      	cbnz	r3, 8008608 <_fflush_r+0x10>
 8008602:	2500      	movs	r5, #0
 8008604:	4628      	mov	r0, r5
 8008606:	bd38      	pop	{r3, r4, r5, pc}
 8008608:	b118      	cbz	r0, 8008612 <_fflush_r+0x1a>
 800860a:	6983      	ldr	r3, [r0, #24]
 800860c:	b90b      	cbnz	r3, 8008612 <_fflush_r+0x1a>
 800860e:	f000 f887 	bl	8008720 <__sinit>
 8008612:	4b14      	ldr	r3, [pc, #80]	; (8008664 <_fflush_r+0x6c>)
 8008614:	429c      	cmp	r4, r3
 8008616:	d11b      	bne.n	8008650 <_fflush_r+0x58>
 8008618:	686c      	ldr	r4, [r5, #4]
 800861a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d0ef      	beq.n	8008602 <_fflush_r+0xa>
 8008622:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008624:	07d0      	lsls	r0, r2, #31
 8008626:	d404      	bmi.n	8008632 <_fflush_r+0x3a>
 8008628:	0599      	lsls	r1, r3, #22
 800862a:	d402      	bmi.n	8008632 <_fflush_r+0x3a>
 800862c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800862e:	f000 f915 	bl	800885c <__retarget_lock_acquire_recursive>
 8008632:	4628      	mov	r0, r5
 8008634:	4621      	mov	r1, r4
 8008636:	f7ff ff59 	bl	80084ec <__sflush_r>
 800863a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800863c:	07da      	lsls	r2, r3, #31
 800863e:	4605      	mov	r5, r0
 8008640:	d4e0      	bmi.n	8008604 <_fflush_r+0xc>
 8008642:	89a3      	ldrh	r3, [r4, #12]
 8008644:	059b      	lsls	r3, r3, #22
 8008646:	d4dd      	bmi.n	8008604 <_fflush_r+0xc>
 8008648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800864a:	f000 f908 	bl	800885e <__retarget_lock_release_recursive>
 800864e:	e7d9      	b.n	8008604 <_fflush_r+0xc>
 8008650:	4b05      	ldr	r3, [pc, #20]	; (8008668 <_fflush_r+0x70>)
 8008652:	429c      	cmp	r4, r3
 8008654:	d101      	bne.n	800865a <_fflush_r+0x62>
 8008656:	68ac      	ldr	r4, [r5, #8]
 8008658:	e7df      	b.n	800861a <_fflush_r+0x22>
 800865a:	4b04      	ldr	r3, [pc, #16]	; (800866c <_fflush_r+0x74>)
 800865c:	429c      	cmp	r4, r3
 800865e:	bf08      	it	eq
 8008660:	68ec      	ldreq	r4, [r5, #12]
 8008662:	e7da      	b.n	800861a <_fflush_r+0x22>
 8008664:	08009768 	.word	0x08009768
 8008668:	08009788 	.word	0x08009788
 800866c:	08009748 	.word	0x08009748

08008670 <std>:
 8008670:	2300      	movs	r3, #0
 8008672:	b510      	push	{r4, lr}
 8008674:	4604      	mov	r4, r0
 8008676:	e9c0 3300 	strd	r3, r3, [r0]
 800867a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800867e:	6083      	str	r3, [r0, #8]
 8008680:	8181      	strh	r1, [r0, #12]
 8008682:	6643      	str	r3, [r0, #100]	; 0x64
 8008684:	81c2      	strh	r2, [r0, #14]
 8008686:	6183      	str	r3, [r0, #24]
 8008688:	4619      	mov	r1, r3
 800868a:	2208      	movs	r2, #8
 800868c:	305c      	adds	r0, #92	; 0x5c
 800868e:	f7ff fd83 	bl	8008198 <memset>
 8008692:	4b05      	ldr	r3, [pc, #20]	; (80086a8 <std+0x38>)
 8008694:	6263      	str	r3, [r4, #36]	; 0x24
 8008696:	4b05      	ldr	r3, [pc, #20]	; (80086ac <std+0x3c>)
 8008698:	62a3      	str	r3, [r4, #40]	; 0x28
 800869a:	4b05      	ldr	r3, [pc, #20]	; (80086b0 <std+0x40>)
 800869c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800869e:	4b05      	ldr	r3, [pc, #20]	; (80086b4 <std+0x44>)
 80086a0:	6224      	str	r4, [r4, #32]
 80086a2:	6323      	str	r3, [r4, #48]	; 0x30
 80086a4:	bd10      	pop	{r4, pc}
 80086a6:	bf00      	nop
 80086a8:	080093a1 	.word	0x080093a1
 80086ac:	080093c3 	.word	0x080093c3
 80086b0:	080093fb 	.word	0x080093fb
 80086b4:	0800941f 	.word	0x0800941f

080086b8 <_cleanup_r>:
 80086b8:	4901      	ldr	r1, [pc, #4]	; (80086c0 <_cleanup_r+0x8>)
 80086ba:	f000 b8af 	b.w	800881c <_fwalk_reent>
 80086be:	bf00      	nop
 80086c0:	080085f9 	.word	0x080085f9

080086c4 <__sfmoreglue>:
 80086c4:	b570      	push	{r4, r5, r6, lr}
 80086c6:	2268      	movs	r2, #104	; 0x68
 80086c8:	1e4d      	subs	r5, r1, #1
 80086ca:	4355      	muls	r5, r2
 80086cc:	460e      	mov	r6, r1
 80086ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80086d2:	f000 f997 	bl	8008a04 <_malloc_r>
 80086d6:	4604      	mov	r4, r0
 80086d8:	b140      	cbz	r0, 80086ec <__sfmoreglue+0x28>
 80086da:	2100      	movs	r1, #0
 80086dc:	e9c0 1600 	strd	r1, r6, [r0]
 80086e0:	300c      	adds	r0, #12
 80086e2:	60a0      	str	r0, [r4, #8]
 80086e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80086e8:	f7ff fd56 	bl	8008198 <memset>
 80086ec:	4620      	mov	r0, r4
 80086ee:	bd70      	pop	{r4, r5, r6, pc}

080086f0 <__sfp_lock_acquire>:
 80086f0:	4801      	ldr	r0, [pc, #4]	; (80086f8 <__sfp_lock_acquire+0x8>)
 80086f2:	f000 b8b3 	b.w	800885c <__retarget_lock_acquire_recursive>
 80086f6:	bf00      	nop
 80086f8:	20000599 	.word	0x20000599

080086fc <__sfp_lock_release>:
 80086fc:	4801      	ldr	r0, [pc, #4]	; (8008704 <__sfp_lock_release+0x8>)
 80086fe:	f000 b8ae 	b.w	800885e <__retarget_lock_release_recursive>
 8008702:	bf00      	nop
 8008704:	20000599 	.word	0x20000599

08008708 <__sinit_lock_acquire>:
 8008708:	4801      	ldr	r0, [pc, #4]	; (8008710 <__sinit_lock_acquire+0x8>)
 800870a:	f000 b8a7 	b.w	800885c <__retarget_lock_acquire_recursive>
 800870e:	bf00      	nop
 8008710:	2000059a 	.word	0x2000059a

08008714 <__sinit_lock_release>:
 8008714:	4801      	ldr	r0, [pc, #4]	; (800871c <__sinit_lock_release+0x8>)
 8008716:	f000 b8a2 	b.w	800885e <__retarget_lock_release_recursive>
 800871a:	bf00      	nop
 800871c:	2000059a 	.word	0x2000059a

08008720 <__sinit>:
 8008720:	b510      	push	{r4, lr}
 8008722:	4604      	mov	r4, r0
 8008724:	f7ff fff0 	bl	8008708 <__sinit_lock_acquire>
 8008728:	69a3      	ldr	r3, [r4, #24]
 800872a:	b11b      	cbz	r3, 8008734 <__sinit+0x14>
 800872c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008730:	f7ff bff0 	b.w	8008714 <__sinit_lock_release>
 8008734:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008738:	6523      	str	r3, [r4, #80]	; 0x50
 800873a:	4b13      	ldr	r3, [pc, #76]	; (8008788 <__sinit+0x68>)
 800873c:	4a13      	ldr	r2, [pc, #76]	; (800878c <__sinit+0x6c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	62a2      	str	r2, [r4, #40]	; 0x28
 8008742:	42a3      	cmp	r3, r4
 8008744:	bf04      	itt	eq
 8008746:	2301      	moveq	r3, #1
 8008748:	61a3      	streq	r3, [r4, #24]
 800874a:	4620      	mov	r0, r4
 800874c:	f000 f820 	bl	8008790 <__sfp>
 8008750:	6060      	str	r0, [r4, #4]
 8008752:	4620      	mov	r0, r4
 8008754:	f000 f81c 	bl	8008790 <__sfp>
 8008758:	60a0      	str	r0, [r4, #8]
 800875a:	4620      	mov	r0, r4
 800875c:	f000 f818 	bl	8008790 <__sfp>
 8008760:	2200      	movs	r2, #0
 8008762:	60e0      	str	r0, [r4, #12]
 8008764:	2104      	movs	r1, #4
 8008766:	6860      	ldr	r0, [r4, #4]
 8008768:	f7ff ff82 	bl	8008670 <std>
 800876c:	68a0      	ldr	r0, [r4, #8]
 800876e:	2201      	movs	r2, #1
 8008770:	2109      	movs	r1, #9
 8008772:	f7ff ff7d 	bl	8008670 <std>
 8008776:	68e0      	ldr	r0, [r4, #12]
 8008778:	2202      	movs	r2, #2
 800877a:	2112      	movs	r1, #18
 800877c:	f7ff ff78 	bl	8008670 <std>
 8008780:	2301      	movs	r3, #1
 8008782:	61a3      	str	r3, [r4, #24]
 8008784:	e7d2      	b.n	800872c <__sinit+0xc>
 8008786:	bf00      	nop
 8008788:	08009744 	.word	0x08009744
 800878c:	080086b9 	.word	0x080086b9

08008790 <__sfp>:
 8008790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008792:	4607      	mov	r7, r0
 8008794:	f7ff ffac 	bl	80086f0 <__sfp_lock_acquire>
 8008798:	4b1e      	ldr	r3, [pc, #120]	; (8008814 <__sfp+0x84>)
 800879a:	681e      	ldr	r6, [r3, #0]
 800879c:	69b3      	ldr	r3, [r6, #24]
 800879e:	b913      	cbnz	r3, 80087a6 <__sfp+0x16>
 80087a0:	4630      	mov	r0, r6
 80087a2:	f7ff ffbd 	bl	8008720 <__sinit>
 80087a6:	3648      	adds	r6, #72	; 0x48
 80087a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80087ac:	3b01      	subs	r3, #1
 80087ae:	d503      	bpl.n	80087b8 <__sfp+0x28>
 80087b0:	6833      	ldr	r3, [r6, #0]
 80087b2:	b30b      	cbz	r3, 80087f8 <__sfp+0x68>
 80087b4:	6836      	ldr	r6, [r6, #0]
 80087b6:	e7f7      	b.n	80087a8 <__sfp+0x18>
 80087b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80087bc:	b9d5      	cbnz	r5, 80087f4 <__sfp+0x64>
 80087be:	4b16      	ldr	r3, [pc, #88]	; (8008818 <__sfp+0x88>)
 80087c0:	60e3      	str	r3, [r4, #12]
 80087c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80087c6:	6665      	str	r5, [r4, #100]	; 0x64
 80087c8:	f000 f847 	bl	800885a <__retarget_lock_init_recursive>
 80087cc:	f7ff ff96 	bl	80086fc <__sfp_lock_release>
 80087d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80087d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80087d8:	6025      	str	r5, [r4, #0]
 80087da:	61a5      	str	r5, [r4, #24]
 80087dc:	2208      	movs	r2, #8
 80087de:	4629      	mov	r1, r5
 80087e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80087e4:	f7ff fcd8 	bl	8008198 <memset>
 80087e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087f0:	4620      	mov	r0, r4
 80087f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087f4:	3468      	adds	r4, #104	; 0x68
 80087f6:	e7d9      	b.n	80087ac <__sfp+0x1c>
 80087f8:	2104      	movs	r1, #4
 80087fa:	4638      	mov	r0, r7
 80087fc:	f7ff ff62 	bl	80086c4 <__sfmoreglue>
 8008800:	4604      	mov	r4, r0
 8008802:	6030      	str	r0, [r6, #0]
 8008804:	2800      	cmp	r0, #0
 8008806:	d1d5      	bne.n	80087b4 <__sfp+0x24>
 8008808:	f7ff ff78 	bl	80086fc <__sfp_lock_release>
 800880c:	230c      	movs	r3, #12
 800880e:	603b      	str	r3, [r7, #0]
 8008810:	e7ee      	b.n	80087f0 <__sfp+0x60>
 8008812:	bf00      	nop
 8008814:	08009744 	.word	0x08009744
 8008818:	ffff0001 	.word	0xffff0001

0800881c <_fwalk_reent>:
 800881c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008820:	4606      	mov	r6, r0
 8008822:	4688      	mov	r8, r1
 8008824:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008828:	2700      	movs	r7, #0
 800882a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800882e:	f1b9 0901 	subs.w	r9, r9, #1
 8008832:	d505      	bpl.n	8008840 <_fwalk_reent+0x24>
 8008834:	6824      	ldr	r4, [r4, #0]
 8008836:	2c00      	cmp	r4, #0
 8008838:	d1f7      	bne.n	800882a <_fwalk_reent+0xe>
 800883a:	4638      	mov	r0, r7
 800883c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008840:	89ab      	ldrh	r3, [r5, #12]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d907      	bls.n	8008856 <_fwalk_reent+0x3a>
 8008846:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800884a:	3301      	adds	r3, #1
 800884c:	d003      	beq.n	8008856 <_fwalk_reent+0x3a>
 800884e:	4629      	mov	r1, r5
 8008850:	4630      	mov	r0, r6
 8008852:	47c0      	blx	r8
 8008854:	4307      	orrs	r7, r0
 8008856:	3568      	adds	r5, #104	; 0x68
 8008858:	e7e9      	b.n	800882e <_fwalk_reent+0x12>

0800885a <__retarget_lock_init_recursive>:
 800885a:	4770      	bx	lr

0800885c <__retarget_lock_acquire_recursive>:
 800885c:	4770      	bx	lr

0800885e <__retarget_lock_release_recursive>:
 800885e:	4770      	bx	lr

08008860 <__swhatbuf_r>:
 8008860:	b570      	push	{r4, r5, r6, lr}
 8008862:	460e      	mov	r6, r1
 8008864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008868:	2900      	cmp	r1, #0
 800886a:	b096      	sub	sp, #88	; 0x58
 800886c:	4614      	mov	r4, r2
 800886e:	461d      	mov	r5, r3
 8008870:	da08      	bge.n	8008884 <__swhatbuf_r+0x24>
 8008872:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	602a      	str	r2, [r5, #0]
 800887a:	061a      	lsls	r2, r3, #24
 800887c:	d410      	bmi.n	80088a0 <__swhatbuf_r+0x40>
 800887e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008882:	e00e      	b.n	80088a2 <__swhatbuf_r+0x42>
 8008884:	466a      	mov	r2, sp
 8008886:	f000 fdf1 	bl	800946c <_fstat_r>
 800888a:	2800      	cmp	r0, #0
 800888c:	dbf1      	blt.n	8008872 <__swhatbuf_r+0x12>
 800888e:	9a01      	ldr	r2, [sp, #4]
 8008890:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008894:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008898:	425a      	negs	r2, r3
 800889a:	415a      	adcs	r2, r3
 800889c:	602a      	str	r2, [r5, #0]
 800889e:	e7ee      	b.n	800887e <__swhatbuf_r+0x1e>
 80088a0:	2340      	movs	r3, #64	; 0x40
 80088a2:	2000      	movs	r0, #0
 80088a4:	6023      	str	r3, [r4, #0]
 80088a6:	b016      	add	sp, #88	; 0x58
 80088a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080088ac <__smakebuf_r>:
 80088ac:	898b      	ldrh	r3, [r1, #12]
 80088ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088b0:	079d      	lsls	r5, r3, #30
 80088b2:	4606      	mov	r6, r0
 80088b4:	460c      	mov	r4, r1
 80088b6:	d507      	bpl.n	80088c8 <__smakebuf_r+0x1c>
 80088b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	6123      	str	r3, [r4, #16]
 80088c0:	2301      	movs	r3, #1
 80088c2:	6163      	str	r3, [r4, #20]
 80088c4:	b002      	add	sp, #8
 80088c6:	bd70      	pop	{r4, r5, r6, pc}
 80088c8:	ab01      	add	r3, sp, #4
 80088ca:	466a      	mov	r2, sp
 80088cc:	f7ff ffc8 	bl	8008860 <__swhatbuf_r>
 80088d0:	9900      	ldr	r1, [sp, #0]
 80088d2:	4605      	mov	r5, r0
 80088d4:	4630      	mov	r0, r6
 80088d6:	f000 f895 	bl	8008a04 <_malloc_r>
 80088da:	b948      	cbnz	r0, 80088f0 <__smakebuf_r+0x44>
 80088dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088e0:	059a      	lsls	r2, r3, #22
 80088e2:	d4ef      	bmi.n	80088c4 <__smakebuf_r+0x18>
 80088e4:	f023 0303 	bic.w	r3, r3, #3
 80088e8:	f043 0302 	orr.w	r3, r3, #2
 80088ec:	81a3      	strh	r3, [r4, #12]
 80088ee:	e7e3      	b.n	80088b8 <__smakebuf_r+0xc>
 80088f0:	4b0d      	ldr	r3, [pc, #52]	; (8008928 <__smakebuf_r+0x7c>)
 80088f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80088f4:	89a3      	ldrh	r3, [r4, #12]
 80088f6:	6020      	str	r0, [r4, #0]
 80088f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088fc:	81a3      	strh	r3, [r4, #12]
 80088fe:	9b00      	ldr	r3, [sp, #0]
 8008900:	6163      	str	r3, [r4, #20]
 8008902:	9b01      	ldr	r3, [sp, #4]
 8008904:	6120      	str	r0, [r4, #16]
 8008906:	b15b      	cbz	r3, 8008920 <__smakebuf_r+0x74>
 8008908:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800890c:	4630      	mov	r0, r6
 800890e:	f000 fdbf 	bl	8009490 <_isatty_r>
 8008912:	b128      	cbz	r0, 8008920 <__smakebuf_r+0x74>
 8008914:	89a3      	ldrh	r3, [r4, #12]
 8008916:	f023 0303 	bic.w	r3, r3, #3
 800891a:	f043 0301 	orr.w	r3, r3, #1
 800891e:	81a3      	strh	r3, [r4, #12]
 8008920:	89a0      	ldrh	r0, [r4, #12]
 8008922:	4305      	orrs	r5, r0
 8008924:	81a5      	strh	r5, [r4, #12]
 8008926:	e7cd      	b.n	80088c4 <__smakebuf_r+0x18>
 8008928:	080086b9 	.word	0x080086b9

0800892c <_free_r>:
 800892c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800892e:	2900      	cmp	r1, #0
 8008930:	d044      	beq.n	80089bc <_free_r+0x90>
 8008932:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008936:	9001      	str	r0, [sp, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	f1a1 0404 	sub.w	r4, r1, #4
 800893e:	bfb8      	it	lt
 8008940:	18e4      	addlt	r4, r4, r3
 8008942:	f000 fdef 	bl	8009524 <__malloc_lock>
 8008946:	4a1e      	ldr	r2, [pc, #120]	; (80089c0 <_free_r+0x94>)
 8008948:	9801      	ldr	r0, [sp, #4]
 800894a:	6813      	ldr	r3, [r2, #0]
 800894c:	b933      	cbnz	r3, 800895c <_free_r+0x30>
 800894e:	6063      	str	r3, [r4, #4]
 8008950:	6014      	str	r4, [r2, #0]
 8008952:	b003      	add	sp, #12
 8008954:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008958:	f000 bdea 	b.w	8009530 <__malloc_unlock>
 800895c:	42a3      	cmp	r3, r4
 800895e:	d908      	bls.n	8008972 <_free_r+0x46>
 8008960:	6825      	ldr	r5, [r4, #0]
 8008962:	1961      	adds	r1, r4, r5
 8008964:	428b      	cmp	r3, r1
 8008966:	bf01      	itttt	eq
 8008968:	6819      	ldreq	r1, [r3, #0]
 800896a:	685b      	ldreq	r3, [r3, #4]
 800896c:	1949      	addeq	r1, r1, r5
 800896e:	6021      	streq	r1, [r4, #0]
 8008970:	e7ed      	b.n	800894e <_free_r+0x22>
 8008972:	461a      	mov	r2, r3
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	b10b      	cbz	r3, 800897c <_free_r+0x50>
 8008978:	42a3      	cmp	r3, r4
 800897a:	d9fa      	bls.n	8008972 <_free_r+0x46>
 800897c:	6811      	ldr	r1, [r2, #0]
 800897e:	1855      	adds	r5, r2, r1
 8008980:	42a5      	cmp	r5, r4
 8008982:	d10b      	bne.n	800899c <_free_r+0x70>
 8008984:	6824      	ldr	r4, [r4, #0]
 8008986:	4421      	add	r1, r4
 8008988:	1854      	adds	r4, r2, r1
 800898a:	42a3      	cmp	r3, r4
 800898c:	6011      	str	r1, [r2, #0]
 800898e:	d1e0      	bne.n	8008952 <_free_r+0x26>
 8008990:	681c      	ldr	r4, [r3, #0]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	6053      	str	r3, [r2, #4]
 8008996:	4421      	add	r1, r4
 8008998:	6011      	str	r1, [r2, #0]
 800899a:	e7da      	b.n	8008952 <_free_r+0x26>
 800899c:	d902      	bls.n	80089a4 <_free_r+0x78>
 800899e:	230c      	movs	r3, #12
 80089a0:	6003      	str	r3, [r0, #0]
 80089a2:	e7d6      	b.n	8008952 <_free_r+0x26>
 80089a4:	6825      	ldr	r5, [r4, #0]
 80089a6:	1961      	adds	r1, r4, r5
 80089a8:	428b      	cmp	r3, r1
 80089aa:	bf04      	itt	eq
 80089ac:	6819      	ldreq	r1, [r3, #0]
 80089ae:	685b      	ldreq	r3, [r3, #4]
 80089b0:	6063      	str	r3, [r4, #4]
 80089b2:	bf04      	itt	eq
 80089b4:	1949      	addeq	r1, r1, r5
 80089b6:	6021      	streq	r1, [r4, #0]
 80089b8:	6054      	str	r4, [r2, #4]
 80089ba:	e7ca      	b.n	8008952 <_free_r+0x26>
 80089bc:	b003      	add	sp, #12
 80089be:	bd30      	pop	{r4, r5, pc}
 80089c0:	2000059c 	.word	0x2000059c

080089c4 <sbrk_aligned>:
 80089c4:	b570      	push	{r4, r5, r6, lr}
 80089c6:	4e0e      	ldr	r6, [pc, #56]	; (8008a00 <sbrk_aligned+0x3c>)
 80089c8:	460c      	mov	r4, r1
 80089ca:	6831      	ldr	r1, [r6, #0]
 80089cc:	4605      	mov	r5, r0
 80089ce:	b911      	cbnz	r1, 80089d6 <sbrk_aligned+0x12>
 80089d0:	f000 fcd6 	bl	8009380 <_sbrk_r>
 80089d4:	6030      	str	r0, [r6, #0]
 80089d6:	4621      	mov	r1, r4
 80089d8:	4628      	mov	r0, r5
 80089da:	f000 fcd1 	bl	8009380 <_sbrk_r>
 80089de:	1c43      	adds	r3, r0, #1
 80089e0:	d00a      	beq.n	80089f8 <sbrk_aligned+0x34>
 80089e2:	1cc4      	adds	r4, r0, #3
 80089e4:	f024 0403 	bic.w	r4, r4, #3
 80089e8:	42a0      	cmp	r0, r4
 80089ea:	d007      	beq.n	80089fc <sbrk_aligned+0x38>
 80089ec:	1a21      	subs	r1, r4, r0
 80089ee:	4628      	mov	r0, r5
 80089f0:	f000 fcc6 	bl	8009380 <_sbrk_r>
 80089f4:	3001      	adds	r0, #1
 80089f6:	d101      	bne.n	80089fc <sbrk_aligned+0x38>
 80089f8:	f04f 34ff 	mov.w	r4, #4294967295
 80089fc:	4620      	mov	r0, r4
 80089fe:	bd70      	pop	{r4, r5, r6, pc}
 8008a00:	200005a0 	.word	0x200005a0

08008a04 <_malloc_r>:
 8008a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a08:	1ccd      	adds	r5, r1, #3
 8008a0a:	f025 0503 	bic.w	r5, r5, #3
 8008a0e:	3508      	adds	r5, #8
 8008a10:	2d0c      	cmp	r5, #12
 8008a12:	bf38      	it	cc
 8008a14:	250c      	movcc	r5, #12
 8008a16:	2d00      	cmp	r5, #0
 8008a18:	4607      	mov	r7, r0
 8008a1a:	db01      	blt.n	8008a20 <_malloc_r+0x1c>
 8008a1c:	42a9      	cmp	r1, r5
 8008a1e:	d905      	bls.n	8008a2c <_malloc_r+0x28>
 8008a20:	230c      	movs	r3, #12
 8008a22:	603b      	str	r3, [r7, #0]
 8008a24:	2600      	movs	r6, #0
 8008a26:	4630      	mov	r0, r6
 8008a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a2c:	4e2e      	ldr	r6, [pc, #184]	; (8008ae8 <_malloc_r+0xe4>)
 8008a2e:	f000 fd79 	bl	8009524 <__malloc_lock>
 8008a32:	6833      	ldr	r3, [r6, #0]
 8008a34:	461c      	mov	r4, r3
 8008a36:	bb34      	cbnz	r4, 8008a86 <_malloc_r+0x82>
 8008a38:	4629      	mov	r1, r5
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	f7ff ffc2 	bl	80089c4 <sbrk_aligned>
 8008a40:	1c43      	adds	r3, r0, #1
 8008a42:	4604      	mov	r4, r0
 8008a44:	d14d      	bne.n	8008ae2 <_malloc_r+0xde>
 8008a46:	6834      	ldr	r4, [r6, #0]
 8008a48:	4626      	mov	r6, r4
 8008a4a:	2e00      	cmp	r6, #0
 8008a4c:	d140      	bne.n	8008ad0 <_malloc_r+0xcc>
 8008a4e:	6823      	ldr	r3, [r4, #0]
 8008a50:	4631      	mov	r1, r6
 8008a52:	4638      	mov	r0, r7
 8008a54:	eb04 0803 	add.w	r8, r4, r3
 8008a58:	f000 fc92 	bl	8009380 <_sbrk_r>
 8008a5c:	4580      	cmp	r8, r0
 8008a5e:	d13a      	bne.n	8008ad6 <_malloc_r+0xd2>
 8008a60:	6821      	ldr	r1, [r4, #0]
 8008a62:	3503      	adds	r5, #3
 8008a64:	1a6d      	subs	r5, r5, r1
 8008a66:	f025 0503 	bic.w	r5, r5, #3
 8008a6a:	3508      	adds	r5, #8
 8008a6c:	2d0c      	cmp	r5, #12
 8008a6e:	bf38      	it	cc
 8008a70:	250c      	movcc	r5, #12
 8008a72:	4629      	mov	r1, r5
 8008a74:	4638      	mov	r0, r7
 8008a76:	f7ff ffa5 	bl	80089c4 <sbrk_aligned>
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	d02b      	beq.n	8008ad6 <_malloc_r+0xd2>
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	442b      	add	r3, r5
 8008a82:	6023      	str	r3, [r4, #0]
 8008a84:	e00e      	b.n	8008aa4 <_malloc_r+0xa0>
 8008a86:	6822      	ldr	r2, [r4, #0]
 8008a88:	1b52      	subs	r2, r2, r5
 8008a8a:	d41e      	bmi.n	8008aca <_malloc_r+0xc6>
 8008a8c:	2a0b      	cmp	r2, #11
 8008a8e:	d916      	bls.n	8008abe <_malloc_r+0xba>
 8008a90:	1961      	adds	r1, r4, r5
 8008a92:	42a3      	cmp	r3, r4
 8008a94:	6025      	str	r5, [r4, #0]
 8008a96:	bf18      	it	ne
 8008a98:	6059      	strne	r1, [r3, #4]
 8008a9a:	6863      	ldr	r3, [r4, #4]
 8008a9c:	bf08      	it	eq
 8008a9e:	6031      	streq	r1, [r6, #0]
 8008aa0:	5162      	str	r2, [r4, r5]
 8008aa2:	604b      	str	r3, [r1, #4]
 8008aa4:	4638      	mov	r0, r7
 8008aa6:	f104 060b 	add.w	r6, r4, #11
 8008aaa:	f000 fd41 	bl	8009530 <__malloc_unlock>
 8008aae:	f026 0607 	bic.w	r6, r6, #7
 8008ab2:	1d23      	adds	r3, r4, #4
 8008ab4:	1af2      	subs	r2, r6, r3
 8008ab6:	d0b6      	beq.n	8008a26 <_malloc_r+0x22>
 8008ab8:	1b9b      	subs	r3, r3, r6
 8008aba:	50a3      	str	r3, [r4, r2]
 8008abc:	e7b3      	b.n	8008a26 <_malloc_r+0x22>
 8008abe:	6862      	ldr	r2, [r4, #4]
 8008ac0:	42a3      	cmp	r3, r4
 8008ac2:	bf0c      	ite	eq
 8008ac4:	6032      	streq	r2, [r6, #0]
 8008ac6:	605a      	strne	r2, [r3, #4]
 8008ac8:	e7ec      	b.n	8008aa4 <_malloc_r+0xa0>
 8008aca:	4623      	mov	r3, r4
 8008acc:	6864      	ldr	r4, [r4, #4]
 8008ace:	e7b2      	b.n	8008a36 <_malloc_r+0x32>
 8008ad0:	4634      	mov	r4, r6
 8008ad2:	6876      	ldr	r6, [r6, #4]
 8008ad4:	e7b9      	b.n	8008a4a <_malloc_r+0x46>
 8008ad6:	230c      	movs	r3, #12
 8008ad8:	603b      	str	r3, [r7, #0]
 8008ada:	4638      	mov	r0, r7
 8008adc:	f000 fd28 	bl	8009530 <__malloc_unlock>
 8008ae0:	e7a1      	b.n	8008a26 <_malloc_r+0x22>
 8008ae2:	6025      	str	r5, [r4, #0]
 8008ae4:	e7de      	b.n	8008aa4 <_malloc_r+0xa0>
 8008ae6:	bf00      	nop
 8008ae8:	2000059c 	.word	0x2000059c

08008aec <__ssputs_r>:
 8008aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008af0:	688e      	ldr	r6, [r1, #8]
 8008af2:	429e      	cmp	r6, r3
 8008af4:	4682      	mov	sl, r0
 8008af6:	460c      	mov	r4, r1
 8008af8:	4690      	mov	r8, r2
 8008afa:	461f      	mov	r7, r3
 8008afc:	d838      	bhi.n	8008b70 <__ssputs_r+0x84>
 8008afe:	898a      	ldrh	r2, [r1, #12]
 8008b00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b04:	d032      	beq.n	8008b6c <__ssputs_r+0x80>
 8008b06:	6825      	ldr	r5, [r4, #0]
 8008b08:	6909      	ldr	r1, [r1, #16]
 8008b0a:	eba5 0901 	sub.w	r9, r5, r1
 8008b0e:	6965      	ldr	r5, [r4, #20]
 8008b10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b18:	3301      	adds	r3, #1
 8008b1a:	444b      	add	r3, r9
 8008b1c:	106d      	asrs	r5, r5, #1
 8008b1e:	429d      	cmp	r5, r3
 8008b20:	bf38      	it	cc
 8008b22:	461d      	movcc	r5, r3
 8008b24:	0553      	lsls	r3, r2, #21
 8008b26:	d531      	bpl.n	8008b8c <__ssputs_r+0xa0>
 8008b28:	4629      	mov	r1, r5
 8008b2a:	f7ff ff6b 	bl	8008a04 <_malloc_r>
 8008b2e:	4606      	mov	r6, r0
 8008b30:	b950      	cbnz	r0, 8008b48 <__ssputs_r+0x5c>
 8008b32:	230c      	movs	r3, #12
 8008b34:	f8ca 3000 	str.w	r3, [sl]
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b3e:	81a3      	strh	r3, [r4, #12]
 8008b40:	f04f 30ff 	mov.w	r0, #4294967295
 8008b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b48:	6921      	ldr	r1, [r4, #16]
 8008b4a:	464a      	mov	r2, r9
 8008b4c:	f000 fcc2 	bl	80094d4 <memcpy>
 8008b50:	89a3      	ldrh	r3, [r4, #12]
 8008b52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b5a:	81a3      	strh	r3, [r4, #12]
 8008b5c:	6126      	str	r6, [r4, #16]
 8008b5e:	6165      	str	r5, [r4, #20]
 8008b60:	444e      	add	r6, r9
 8008b62:	eba5 0509 	sub.w	r5, r5, r9
 8008b66:	6026      	str	r6, [r4, #0]
 8008b68:	60a5      	str	r5, [r4, #8]
 8008b6a:	463e      	mov	r6, r7
 8008b6c:	42be      	cmp	r6, r7
 8008b6e:	d900      	bls.n	8008b72 <__ssputs_r+0x86>
 8008b70:	463e      	mov	r6, r7
 8008b72:	6820      	ldr	r0, [r4, #0]
 8008b74:	4632      	mov	r2, r6
 8008b76:	4641      	mov	r1, r8
 8008b78:	f000 fcba 	bl	80094f0 <memmove>
 8008b7c:	68a3      	ldr	r3, [r4, #8]
 8008b7e:	1b9b      	subs	r3, r3, r6
 8008b80:	60a3      	str	r3, [r4, #8]
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	4433      	add	r3, r6
 8008b86:	6023      	str	r3, [r4, #0]
 8008b88:	2000      	movs	r0, #0
 8008b8a:	e7db      	b.n	8008b44 <__ssputs_r+0x58>
 8008b8c:	462a      	mov	r2, r5
 8008b8e:	f000 fcd5 	bl	800953c <_realloc_r>
 8008b92:	4606      	mov	r6, r0
 8008b94:	2800      	cmp	r0, #0
 8008b96:	d1e1      	bne.n	8008b5c <__ssputs_r+0x70>
 8008b98:	6921      	ldr	r1, [r4, #16]
 8008b9a:	4650      	mov	r0, sl
 8008b9c:	f7ff fec6 	bl	800892c <_free_r>
 8008ba0:	e7c7      	b.n	8008b32 <__ssputs_r+0x46>
	...

08008ba4 <_svfiprintf_r>:
 8008ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba8:	4698      	mov	r8, r3
 8008baa:	898b      	ldrh	r3, [r1, #12]
 8008bac:	061b      	lsls	r3, r3, #24
 8008bae:	b09d      	sub	sp, #116	; 0x74
 8008bb0:	4607      	mov	r7, r0
 8008bb2:	460d      	mov	r5, r1
 8008bb4:	4614      	mov	r4, r2
 8008bb6:	d50e      	bpl.n	8008bd6 <_svfiprintf_r+0x32>
 8008bb8:	690b      	ldr	r3, [r1, #16]
 8008bba:	b963      	cbnz	r3, 8008bd6 <_svfiprintf_r+0x32>
 8008bbc:	2140      	movs	r1, #64	; 0x40
 8008bbe:	f7ff ff21 	bl	8008a04 <_malloc_r>
 8008bc2:	6028      	str	r0, [r5, #0]
 8008bc4:	6128      	str	r0, [r5, #16]
 8008bc6:	b920      	cbnz	r0, 8008bd2 <_svfiprintf_r+0x2e>
 8008bc8:	230c      	movs	r3, #12
 8008bca:	603b      	str	r3, [r7, #0]
 8008bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd0:	e0d1      	b.n	8008d76 <_svfiprintf_r+0x1d2>
 8008bd2:	2340      	movs	r3, #64	; 0x40
 8008bd4:	616b      	str	r3, [r5, #20]
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8008bda:	2320      	movs	r3, #32
 8008bdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008be0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008be4:	2330      	movs	r3, #48	; 0x30
 8008be6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d90 <_svfiprintf_r+0x1ec>
 8008bea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bee:	f04f 0901 	mov.w	r9, #1
 8008bf2:	4623      	mov	r3, r4
 8008bf4:	469a      	mov	sl, r3
 8008bf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bfa:	b10a      	cbz	r2, 8008c00 <_svfiprintf_r+0x5c>
 8008bfc:	2a25      	cmp	r2, #37	; 0x25
 8008bfe:	d1f9      	bne.n	8008bf4 <_svfiprintf_r+0x50>
 8008c00:	ebba 0b04 	subs.w	fp, sl, r4
 8008c04:	d00b      	beq.n	8008c1e <_svfiprintf_r+0x7a>
 8008c06:	465b      	mov	r3, fp
 8008c08:	4622      	mov	r2, r4
 8008c0a:	4629      	mov	r1, r5
 8008c0c:	4638      	mov	r0, r7
 8008c0e:	f7ff ff6d 	bl	8008aec <__ssputs_r>
 8008c12:	3001      	adds	r0, #1
 8008c14:	f000 80aa 	beq.w	8008d6c <_svfiprintf_r+0x1c8>
 8008c18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c1a:	445a      	add	r2, fp
 8008c1c:	9209      	str	r2, [sp, #36]	; 0x24
 8008c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f000 80a2 	beq.w	8008d6c <_svfiprintf_r+0x1c8>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c32:	f10a 0a01 	add.w	sl, sl, #1
 8008c36:	9304      	str	r3, [sp, #16]
 8008c38:	9307      	str	r3, [sp, #28]
 8008c3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c3e:	931a      	str	r3, [sp, #104]	; 0x68
 8008c40:	4654      	mov	r4, sl
 8008c42:	2205      	movs	r2, #5
 8008c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c48:	4851      	ldr	r0, [pc, #324]	; (8008d90 <_svfiprintf_r+0x1ec>)
 8008c4a:	f7f7 fad9 	bl	8000200 <memchr>
 8008c4e:	9a04      	ldr	r2, [sp, #16]
 8008c50:	b9d8      	cbnz	r0, 8008c8a <_svfiprintf_r+0xe6>
 8008c52:	06d0      	lsls	r0, r2, #27
 8008c54:	bf44      	itt	mi
 8008c56:	2320      	movmi	r3, #32
 8008c58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c5c:	0711      	lsls	r1, r2, #28
 8008c5e:	bf44      	itt	mi
 8008c60:	232b      	movmi	r3, #43	; 0x2b
 8008c62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c66:	f89a 3000 	ldrb.w	r3, [sl]
 8008c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c6c:	d015      	beq.n	8008c9a <_svfiprintf_r+0xf6>
 8008c6e:	9a07      	ldr	r2, [sp, #28]
 8008c70:	4654      	mov	r4, sl
 8008c72:	2000      	movs	r0, #0
 8008c74:	f04f 0c0a 	mov.w	ip, #10
 8008c78:	4621      	mov	r1, r4
 8008c7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c7e:	3b30      	subs	r3, #48	; 0x30
 8008c80:	2b09      	cmp	r3, #9
 8008c82:	d94e      	bls.n	8008d22 <_svfiprintf_r+0x17e>
 8008c84:	b1b0      	cbz	r0, 8008cb4 <_svfiprintf_r+0x110>
 8008c86:	9207      	str	r2, [sp, #28]
 8008c88:	e014      	b.n	8008cb4 <_svfiprintf_r+0x110>
 8008c8a:	eba0 0308 	sub.w	r3, r0, r8
 8008c8e:	fa09 f303 	lsl.w	r3, r9, r3
 8008c92:	4313      	orrs	r3, r2
 8008c94:	9304      	str	r3, [sp, #16]
 8008c96:	46a2      	mov	sl, r4
 8008c98:	e7d2      	b.n	8008c40 <_svfiprintf_r+0x9c>
 8008c9a:	9b03      	ldr	r3, [sp, #12]
 8008c9c:	1d19      	adds	r1, r3, #4
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	9103      	str	r1, [sp, #12]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	bfbb      	ittet	lt
 8008ca6:	425b      	neglt	r3, r3
 8008ca8:	f042 0202 	orrlt.w	r2, r2, #2
 8008cac:	9307      	strge	r3, [sp, #28]
 8008cae:	9307      	strlt	r3, [sp, #28]
 8008cb0:	bfb8      	it	lt
 8008cb2:	9204      	strlt	r2, [sp, #16]
 8008cb4:	7823      	ldrb	r3, [r4, #0]
 8008cb6:	2b2e      	cmp	r3, #46	; 0x2e
 8008cb8:	d10c      	bne.n	8008cd4 <_svfiprintf_r+0x130>
 8008cba:	7863      	ldrb	r3, [r4, #1]
 8008cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8008cbe:	d135      	bne.n	8008d2c <_svfiprintf_r+0x188>
 8008cc0:	9b03      	ldr	r3, [sp, #12]
 8008cc2:	1d1a      	adds	r2, r3, #4
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	9203      	str	r2, [sp, #12]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	bfb8      	it	lt
 8008ccc:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cd0:	3402      	adds	r4, #2
 8008cd2:	9305      	str	r3, [sp, #20]
 8008cd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008da0 <_svfiprintf_r+0x1fc>
 8008cd8:	7821      	ldrb	r1, [r4, #0]
 8008cda:	2203      	movs	r2, #3
 8008cdc:	4650      	mov	r0, sl
 8008cde:	f7f7 fa8f 	bl	8000200 <memchr>
 8008ce2:	b140      	cbz	r0, 8008cf6 <_svfiprintf_r+0x152>
 8008ce4:	2340      	movs	r3, #64	; 0x40
 8008ce6:	eba0 000a 	sub.w	r0, r0, sl
 8008cea:	fa03 f000 	lsl.w	r0, r3, r0
 8008cee:	9b04      	ldr	r3, [sp, #16]
 8008cf0:	4303      	orrs	r3, r0
 8008cf2:	3401      	adds	r4, #1
 8008cf4:	9304      	str	r3, [sp, #16]
 8008cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cfa:	4826      	ldr	r0, [pc, #152]	; (8008d94 <_svfiprintf_r+0x1f0>)
 8008cfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d00:	2206      	movs	r2, #6
 8008d02:	f7f7 fa7d 	bl	8000200 <memchr>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d038      	beq.n	8008d7c <_svfiprintf_r+0x1d8>
 8008d0a:	4b23      	ldr	r3, [pc, #140]	; (8008d98 <_svfiprintf_r+0x1f4>)
 8008d0c:	bb1b      	cbnz	r3, 8008d56 <_svfiprintf_r+0x1b2>
 8008d0e:	9b03      	ldr	r3, [sp, #12]
 8008d10:	3307      	adds	r3, #7
 8008d12:	f023 0307 	bic.w	r3, r3, #7
 8008d16:	3308      	adds	r3, #8
 8008d18:	9303      	str	r3, [sp, #12]
 8008d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d1c:	4433      	add	r3, r6
 8008d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d20:	e767      	b.n	8008bf2 <_svfiprintf_r+0x4e>
 8008d22:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d26:	460c      	mov	r4, r1
 8008d28:	2001      	movs	r0, #1
 8008d2a:	e7a5      	b.n	8008c78 <_svfiprintf_r+0xd4>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	3401      	adds	r4, #1
 8008d30:	9305      	str	r3, [sp, #20]
 8008d32:	4619      	mov	r1, r3
 8008d34:	f04f 0c0a 	mov.w	ip, #10
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d3e:	3a30      	subs	r2, #48	; 0x30
 8008d40:	2a09      	cmp	r2, #9
 8008d42:	d903      	bls.n	8008d4c <_svfiprintf_r+0x1a8>
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d0c5      	beq.n	8008cd4 <_svfiprintf_r+0x130>
 8008d48:	9105      	str	r1, [sp, #20]
 8008d4a:	e7c3      	b.n	8008cd4 <_svfiprintf_r+0x130>
 8008d4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d50:	4604      	mov	r4, r0
 8008d52:	2301      	movs	r3, #1
 8008d54:	e7f0      	b.n	8008d38 <_svfiprintf_r+0x194>
 8008d56:	ab03      	add	r3, sp, #12
 8008d58:	9300      	str	r3, [sp, #0]
 8008d5a:	462a      	mov	r2, r5
 8008d5c:	4b0f      	ldr	r3, [pc, #60]	; (8008d9c <_svfiprintf_r+0x1f8>)
 8008d5e:	a904      	add	r1, sp, #16
 8008d60:	4638      	mov	r0, r7
 8008d62:	f3af 8000 	nop.w
 8008d66:	1c42      	adds	r2, r0, #1
 8008d68:	4606      	mov	r6, r0
 8008d6a:	d1d6      	bne.n	8008d1a <_svfiprintf_r+0x176>
 8008d6c:	89ab      	ldrh	r3, [r5, #12]
 8008d6e:	065b      	lsls	r3, r3, #25
 8008d70:	f53f af2c 	bmi.w	8008bcc <_svfiprintf_r+0x28>
 8008d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d76:	b01d      	add	sp, #116	; 0x74
 8008d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d7c:	ab03      	add	r3, sp, #12
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	462a      	mov	r2, r5
 8008d82:	4b06      	ldr	r3, [pc, #24]	; (8008d9c <_svfiprintf_r+0x1f8>)
 8008d84:	a904      	add	r1, sp, #16
 8008d86:	4638      	mov	r0, r7
 8008d88:	f000 f9d4 	bl	8009134 <_printf_i>
 8008d8c:	e7eb      	b.n	8008d66 <_svfiprintf_r+0x1c2>
 8008d8e:	bf00      	nop
 8008d90:	080097a8 	.word	0x080097a8
 8008d94:	080097b2 	.word	0x080097b2
 8008d98:	00000000 	.word	0x00000000
 8008d9c:	08008aed 	.word	0x08008aed
 8008da0:	080097ae 	.word	0x080097ae

08008da4 <__sfputc_r>:
 8008da4:	6893      	ldr	r3, [r2, #8]
 8008da6:	3b01      	subs	r3, #1
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	b410      	push	{r4}
 8008dac:	6093      	str	r3, [r2, #8]
 8008dae:	da08      	bge.n	8008dc2 <__sfputc_r+0x1e>
 8008db0:	6994      	ldr	r4, [r2, #24]
 8008db2:	42a3      	cmp	r3, r4
 8008db4:	db01      	blt.n	8008dba <__sfputc_r+0x16>
 8008db6:	290a      	cmp	r1, #10
 8008db8:	d103      	bne.n	8008dc2 <__sfputc_r+0x1e>
 8008dba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dbe:	f7ff bad5 	b.w	800836c <__swbuf_r>
 8008dc2:	6813      	ldr	r3, [r2, #0]
 8008dc4:	1c58      	adds	r0, r3, #1
 8008dc6:	6010      	str	r0, [r2, #0]
 8008dc8:	7019      	strb	r1, [r3, #0]
 8008dca:	4608      	mov	r0, r1
 8008dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <__sfputs_r>:
 8008dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd4:	4606      	mov	r6, r0
 8008dd6:	460f      	mov	r7, r1
 8008dd8:	4614      	mov	r4, r2
 8008dda:	18d5      	adds	r5, r2, r3
 8008ddc:	42ac      	cmp	r4, r5
 8008dde:	d101      	bne.n	8008de4 <__sfputs_r+0x12>
 8008de0:	2000      	movs	r0, #0
 8008de2:	e007      	b.n	8008df4 <__sfputs_r+0x22>
 8008de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de8:	463a      	mov	r2, r7
 8008dea:	4630      	mov	r0, r6
 8008dec:	f7ff ffda 	bl	8008da4 <__sfputc_r>
 8008df0:	1c43      	adds	r3, r0, #1
 8008df2:	d1f3      	bne.n	8008ddc <__sfputs_r+0xa>
 8008df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008df8 <_vfiprintf_r>:
 8008df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfc:	460d      	mov	r5, r1
 8008dfe:	b09d      	sub	sp, #116	; 0x74
 8008e00:	4614      	mov	r4, r2
 8008e02:	4698      	mov	r8, r3
 8008e04:	4606      	mov	r6, r0
 8008e06:	b118      	cbz	r0, 8008e10 <_vfiprintf_r+0x18>
 8008e08:	6983      	ldr	r3, [r0, #24]
 8008e0a:	b90b      	cbnz	r3, 8008e10 <_vfiprintf_r+0x18>
 8008e0c:	f7ff fc88 	bl	8008720 <__sinit>
 8008e10:	4b89      	ldr	r3, [pc, #548]	; (8009038 <_vfiprintf_r+0x240>)
 8008e12:	429d      	cmp	r5, r3
 8008e14:	d11b      	bne.n	8008e4e <_vfiprintf_r+0x56>
 8008e16:	6875      	ldr	r5, [r6, #4]
 8008e18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e1a:	07d9      	lsls	r1, r3, #31
 8008e1c:	d405      	bmi.n	8008e2a <_vfiprintf_r+0x32>
 8008e1e:	89ab      	ldrh	r3, [r5, #12]
 8008e20:	059a      	lsls	r2, r3, #22
 8008e22:	d402      	bmi.n	8008e2a <_vfiprintf_r+0x32>
 8008e24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e26:	f7ff fd19 	bl	800885c <__retarget_lock_acquire_recursive>
 8008e2a:	89ab      	ldrh	r3, [r5, #12]
 8008e2c:	071b      	lsls	r3, r3, #28
 8008e2e:	d501      	bpl.n	8008e34 <_vfiprintf_r+0x3c>
 8008e30:	692b      	ldr	r3, [r5, #16]
 8008e32:	b9eb      	cbnz	r3, 8008e70 <_vfiprintf_r+0x78>
 8008e34:	4629      	mov	r1, r5
 8008e36:	4630      	mov	r0, r6
 8008e38:	f7ff faea 	bl	8008410 <__swsetup_r>
 8008e3c:	b1c0      	cbz	r0, 8008e70 <_vfiprintf_r+0x78>
 8008e3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e40:	07dc      	lsls	r4, r3, #31
 8008e42:	d50e      	bpl.n	8008e62 <_vfiprintf_r+0x6a>
 8008e44:	f04f 30ff 	mov.w	r0, #4294967295
 8008e48:	b01d      	add	sp, #116	; 0x74
 8008e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e4e:	4b7b      	ldr	r3, [pc, #492]	; (800903c <_vfiprintf_r+0x244>)
 8008e50:	429d      	cmp	r5, r3
 8008e52:	d101      	bne.n	8008e58 <_vfiprintf_r+0x60>
 8008e54:	68b5      	ldr	r5, [r6, #8]
 8008e56:	e7df      	b.n	8008e18 <_vfiprintf_r+0x20>
 8008e58:	4b79      	ldr	r3, [pc, #484]	; (8009040 <_vfiprintf_r+0x248>)
 8008e5a:	429d      	cmp	r5, r3
 8008e5c:	bf08      	it	eq
 8008e5e:	68f5      	ldreq	r5, [r6, #12]
 8008e60:	e7da      	b.n	8008e18 <_vfiprintf_r+0x20>
 8008e62:	89ab      	ldrh	r3, [r5, #12]
 8008e64:	0598      	lsls	r0, r3, #22
 8008e66:	d4ed      	bmi.n	8008e44 <_vfiprintf_r+0x4c>
 8008e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e6a:	f7ff fcf8 	bl	800885e <__retarget_lock_release_recursive>
 8008e6e:	e7e9      	b.n	8008e44 <_vfiprintf_r+0x4c>
 8008e70:	2300      	movs	r3, #0
 8008e72:	9309      	str	r3, [sp, #36]	; 0x24
 8008e74:	2320      	movs	r3, #32
 8008e76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e7e:	2330      	movs	r3, #48	; 0x30
 8008e80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009044 <_vfiprintf_r+0x24c>
 8008e84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e88:	f04f 0901 	mov.w	r9, #1
 8008e8c:	4623      	mov	r3, r4
 8008e8e:	469a      	mov	sl, r3
 8008e90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e94:	b10a      	cbz	r2, 8008e9a <_vfiprintf_r+0xa2>
 8008e96:	2a25      	cmp	r2, #37	; 0x25
 8008e98:	d1f9      	bne.n	8008e8e <_vfiprintf_r+0x96>
 8008e9a:	ebba 0b04 	subs.w	fp, sl, r4
 8008e9e:	d00b      	beq.n	8008eb8 <_vfiprintf_r+0xc0>
 8008ea0:	465b      	mov	r3, fp
 8008ea2:	4622      	mov	r2, r4
 8008ea4:	4629      	mov	r1, r5
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f7ff ff93 	bl	8008dd2 <__sfputs_r>
 8008eac:	3001      	adds	r0, #1
 8008eae:	f000 80aa 	beq.w	8009006 <_vfiprintf_r+0x20e>
 8008eb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eb4:	445a      	add	r2, fp
 8008eb6:	9209      	str	r2, [sp, #36]	; 0x24
 8008eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f000 80a2 	beq.w	8009006 <_vfiprintf_r+0x20e>
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ecc:	f10a 0a01 	add.w	sl, sl, #1
 8008ed0:	9304      	str	r3, [sp, #16]
 8008ed2:	9307      	str	r3, [sp, #28]
 8008ed4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ed8:	931a      	str	r3, [sp, #104]	; 0x68
 8008eda:	4654      	mov	r4, sl
 8008edc:	2205      	movs	r2, #5
 8008ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee2:	4858      	ldr	r0, [pc, #352]	; (8009044 <_vfiprintf_r+0x24c>)
 8008ee4:	f7f7 f98c 	bl	8000200 <memchr>
 8008ee8:	9a04      	ldr	r2, [sp, #16]
 8008eea:	b9d8      	cbnz	r0, 8008f24 <_vfiprintf_r+0x12c>
 8008eec:	06d1      	lsls	r1, r2, #27
 8008eee:	bf44      	itt	mi
 8008ef0:	2320      	movmi	r3, #32
 8008ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ef6:	0713      	lsls	r3, r2, #28
 8008ef8:	bf44      	itt	mi
 8008efa:	232b      	movmi	r3, #43	; 0x2b
 8008efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f00:	f89a 3000 	ldrb.w	r3, [sl]
 8008f04:	2b2a      	cmp	r3, #42	; 0x2a
 8008f06:	d015      	beq.n	8008f34 <_vfiprintf_r+0x13c>
 8008f08:	9a07      	ldr	r2, [sp, #28]
 8008f0a:	4654      	mov	r4, sl
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	f04f 0c0a 	mov.w	ip, #10
 8008f12:	4621      	mov	r1, r4
 8008f14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f18:	3b30      	subs	r3, #48	; 0x30
 8008f1a:	2b09      	cmp	r3, #9
 8008f1c:	d94e      	bls.n	8008fbc <_vfiprintf_r+0x1c4>
 8008f1e:	b1b0      	cbz	r0, 8008f4e <_vfiprintf_r+0x156>
 8008f20:	9207      	str	r2, [sp, #28]
 8008f22:	e014      	b.n	8008f4e <_vfiprintf_r+0x156>
 8008f24:	eba0 0308 	sub.w	r3, r0, r8
 8008f28:	fa09 f303 	lsl.w	r3, r9, r3
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	9304      	str	r3, [sp, #16]
 8008f30:	46a2      	mov	sl, r4
 8008f32:	e7d2      	b.n	8008eda <_vfiprintf_r+0xe2>
 8008f34:	9b03      	ldr	r3, [sp, #12]
 8008f36:	1d19      	adds	r1, r3, #4
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	9103      	str	r1, [sp, #12]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	bfbb      	ittet	lt
 8008f40:	425b      	neglt	r3, r3
 8008f42:	f042 0202 	orrlt.w	r2, r2, #2
 8008f46:	9307      	strge	r3, [sp, #28]
 8008f48:	9307      	strlt	r3, [sp, #28]
 8008f4a:	bfb8      	it	lt
 8008f4c:	9204      	strlt	r2, [sp, #16]
 8008f4e:	7823      	ldrb	r3, [r4, #0]
 8008f50:	2b2e      	cmp	r3, #46	; 0x2e
 8008f52:	d10c      	bne.n	8008f6e <_vfiprintf_r+0x176>
 8008f54:	7863      	ldrb	r3, [r4, #1]
 8008f56:	2b2a      	cmp	r3, #42	; 0x2a
 8008f58:	d135      	bne.n	8008fc6 <_vfiprintf_r+0x1ce>
 8008f5a:	9b03      	ldr	r3, [sp, #12]
 8008f5c:	1d1a      	adds	r2, r3, #4
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	9203      	str	r2, [sp, #12]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	bfb8      	it	lt
 8008f66:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f6a:	3402      	adds	r4, #2
 8008f6c:	9305      	str	r3, [sp, #20]
 8008f6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009054 <_vfiprintf_r+0x25c>
 8008f72:	7821      	ldrb	r1, [r4, #0]
 8008f74:	2203      	movs	r2, #3
 8008f76:	4650      	mov	r0, sl
 8008f78:	f7f7 f942 	bl	8000200 <memchr>
 8008f7c:	b140      	cbz	r0, 8008f90 <_vfiprintf_r+0x198>
 8008f7e:	2340      	movs	r3, #64	; 0x40
 8008f80:	eba0 000a 	sub.w	r0, r0, sl
 8008f84:	fa03 f000 	lsl.w	r0, r3, r0
 8008f88:	9b04      	ldr	r3, [sp, #16]
 8008f8a:	4303      	orrs	r3, r0
 8008f8c:	3401      	adds	r4, #1
 8008f8e:	9304      	str	r3, [sp, #16]
 8008f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f94:	482c      	ldr	r0, [pc, #176]	; (8009048 <_vfiprintf_r+0x250>)
 8008f96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f9a:	2206      	movs	r2, #6
 8008f9c:	f7f7 f930 	bl	8000200 <memchr>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d03f      	beq.n	8009024 <_vfiprintf_r+0x22c>
 8008fa4:	4b29      	ldr	r3, [pc, #164]	; (800904c <_vfiprintf_r+0x254>)
 8008fa6:	bb1b      	cbnz	r3, 8008ff0 <_vfiprintf_r+0x1f8>
 8008fa8:	9b03      	ldr	r3, [sp, #12]
 8008faa:	3307      	adds	r3, #7
 8008fac:	f023 0307 	bic.w	r3, r3, #7
 8008fb0:	3308      	adds	r3, #8
 8008fb2:	9303      	str	r3, [sp, #12]
 8008fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fb6:	443b      	add	r3, r7
 8008fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8008fba:	e767      	b.n	8008e8c <_vfiprintf_r+0x94>
 8008fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fc0:	460c      	mov	r4, r1
 8008fc2:	2001      	movs	r0, #1
 8008fc4:	e7a5      	b.n	8008f12 <_vfiprintf_r+0x11a>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	3401      	adds	r4, #1
 8008fca:	9305      	str	r3, [sp, #20]
 8008fcc:	4619      	mov	r1, r3
 8008fce:	f04f 0c0a 	mov.w	ip, #10
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fd8:	3a30      	subs	r2, #48	; 0x30
 8008fda:	2a09      	cmp	r2, #9
 8008fdc:	d903      	bls.n	8008fe6 <_vfiprintf_r+0x1ee>
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d0c5      	beq.n	8008f6e <_vfiprintf_r+0x176>
 8008fe2:	9105      	str	r1, [sp, #20]
 8008fe4:	e7c3      	b.n	8008f6e <_vfiprintf_r+0x176>
 8008fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fea:	4604      	mov	r4, r0
 8008fec:	2301      	movs	r3, #1
 8008fee:	e7f0      	b.n	8008fd2 <_vfiprintf_r+0x1da>
 8008ff0:	ab03      	add	r3, sp, #12
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	462a      	mov	r2, r5
 8008ff6:	4b16      	ldr	r3, [pc, #88]	; (8009050 <_vfiprintf_r+0x258>)
 8008ff8:	a904      	add	r1, sp, #16
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f3af 8000 	nop.w
 8009000:	4607      	mov	r7, r0
 8009002:	1c78      	adds	r0, r7, #1
 8009004:	d1d6      	bne.n	8008fb4 <_vfiprintf_r+0x1bc>
 8009006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009008:	07d9      	lsls	r1, r3, #31
 800900a:	d405      	bmi.n	8009018 <_vfiprintf_r+0x220>
 800900c:	89ab      	ldrh	r3, [r5, #12]
 800900e:	059a      	lsls	r2, r3, #22
 8009010:	d402      	bmi.n	8009018 <_vfiprintf_r+0x220>
 8009012:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009014:	f7ff fc23 	bl	800885e <__retarget_lock_release_recursive>
 8009018:	89ab      	ldrh	r3, [r5, #12]
 800901a:	065b      	lsls	r3, r3, #25
 800901c:	f53f af12 	bmi.w	8008e44 <_vfiprintf_r+0x4c>
 8009020:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009022:	e711      	b.n	8008e48 <_vfiprintf_r+0x50>
 8009024:	ab03      	add	r3, sp, #12
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	462a      	mov	r2, r5
 800902a:	4b09      	ldr	r3, [pc, #36]	; (8009050 <_vfiprintf_r+0x258>)
 800902c:	a904      	add	r1, sp, #16
 800902e:	4630      	mov	r0, r6
 8009030:	f000 f880 	bl	8009134 <_printf_i>
 8009034:	e7e4      	b.n	8009000 <_vfiprintf_r+0x208>
 8009036:	bf00      	nop
 8009038:	08009768 	.word	0x08009768
 800903c:	08009788 	.word	0x08009788
 8009040:	08009748 	.word	0x08009748
 8009044:	080097a8 	.word	0x080097a8
 8009048:	080097b2 	.word	0x080097b2
 800904c:	00000000 	.word	0x00000000
 8009050:	08008dd3 	.word	0x08008dd3
 8009054:	080097ae 	.word	0x080097ae

08009058 <_printf_common>:
 8009058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800905c:	4616      	mov	r6, r2
 800905e:	4699      	mov	r9, r3
 8009060:	688a      	ldr	r2, [r1, #8]
 8009062:	690b      	ldr	r3, [r1, #16]
 8009064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009068:	4293      	cmp	r3, r2
 800906a:	bfb8      	it	lt
 800906c:	4613      	movlt	r3, r2
 800906e:	6033      	str	r3, [r6, #0]
 8009070:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009074:	4607      	mov	r7, r0
 8009076:	460c      	mov	r4, r1
 8009078:	b10a      	cbz	r2, 800907e <_printf_common+0x26>
 800907a:	3301      	adds	r3, #1
 800907c:	6033      	str	r3, [r6, #0]
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	0699      	lsls	r1, r3, #26
 8009082:	bf42      	ittt	mi
 8009084:	6833      	ldrmi	r3, [r6, #0]
 8009086:	3302      	addmi	r3, #2
 8009088:	6033      	strmi	r3, [r6, #0]
 800908a:	6825      	ldr	r5, [r4, #0]
 800908c:	f015 0506 	ands.w	r5, r5, #6
 8009090:	d106      	bne.n	80090a0 <_printf_common+0x48>
 8009092:	f104 0a19 	add.w	sl, r4, #25
 8009096:	68e3      	ldr	r3, [r4, #12]
 8009098:	6832      	ldr	r2, [r6, #0]
 800909a:	1a9b      	subs	r3, r3, r2
 800909c:	42ab      	cmp	r3, r5
 800909e:	dc26      	bgt.n	80090ee <_printf_common+0x96>
 80090a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090a4:	1e13      	subs	r3, r2, #0
 80090a6:	6822      	ldr	r2, [r4, #0]
 80090a8:	bf18      	it	ne
 80090aa:	2301      	movne	r3, #1
 80090ac:	0692      	lsls	r2, r2, #26
 80090ae:	d42b      	bmi.n	8009108 <_printf_common+0xb0>
 80090b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090b4:	4649      	mov	r1, r9
 80090b6:	4638      	mov	r0, r7
 80090b8:	47c0      	blx	r8
 80090ba:	3001      	adds	r0, #1
 80090bc:	d01e      	beq.n	80090fc <_printf_common+0xa4>
 80090be:	6823      	ldr	r3, [r4, #0]
 80090c0:	68e5      	ldr	r5, [r4, #12]
 80090c2:	6832      	ldr	r2, [r6, #0]
 80090c4:	f003 0306 	and.w	r3, r3, #6
 80090c8:	2b04      	cmp	r3, #4
 80090ca:	bf08      	it	eq
 80090cc:	1aad      	subeq	r5, r5, r2
 80090ce:	68a3      	ldr	r3, [r4, #8]
 80090d0:	6922      	ldr	r2, [r4, #16]
 80090d2:	bf0c      	ite	eq
 80090d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090d8:	2500      	movne	r5, #0
 80090da:	4293      	cmp	r3, r2
 80090dc:	bfc4      	itt	gt
 80090de:	1a9b      	subgt	r3, r3, r2
 80090e0:	18ed      	addgt	r5, r5, r3
 80090e2:	2600      	movs	r6, #0
 80090e4:	341a      	adds	r4, #26
 80090e6:	42b5      	cmp	r5, r6
 80090e8:	d11a      	bne.n	8009120 <_printf_common+0xc8>
 80090ea:	2000      	movs	r0, #0
 80090ec:	e008      	b.n	8009100 <_printf_common+0xa8>
 80090ee:	2301      	movs	r3, #1
 80090f0:	4652      	mov	r2, sl
 80090f2:	4649      	mov	r1, r9
 80090f4:	4638      	mov	r0, r7
 80090f6:	47c0      	blx	r8
 80090f8:	3001      	adds	r0, #1
 80090fa:	d103      	bne.n	8009104 <_printf_common+0xac>
 80090fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009104:	3501      	adds	r5, #1
 8009106:	e7c6      	b.n	8009096 <_printf_common+0x3e>
 8009108:	18e1      	adds	r1, r4, r3
 800910a:	1c5a      	adds	r2, r3, #1
 800910c:	2030      	movs	r0, #48	; 0x30
 800910e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009112:	4422      	add	r2, r4
 8009114:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009118:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800911c:	3302      	adds	r3, #2
 800911e:	e7c7      	b.n	80090b0 <_printf_common+0x58>
 8009120:	2301      	movs	r3, #1
 8009122:	4622      	mov	r2, r4
 8009124:	4649      	mov	r1, r9
 8009126:	4638      	mov	r0, r7
 8009128:	47c0      	blx	r8
 800912a:	3001      	adds	r0, #1
 800912c:	d0e6      	beq.n	80090fc <_printf_common+0xa4>
 800912e:	3601      	adds	r6, #1
 8009130:	e7d9      	b.n	80090e6 <_printf_common+0x8e>
	...

08009134 <_printf_i>:
 8009134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009138:	7e0f      	ldrb	r7, [r1, #24]
 800913a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800913c:	2f78      	cmp	r7, #120	; 0x78
 800913e:	4691      	mov	r9, r2
 8009140:	4680      	mov	r8, r0
 8009142:	460c      	mov	r4, r1
 8009144:	469a      	mov	sl, r3
 8009146:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800914a:	d807      	bhi.n	800915c <_printf_i+0x28>
 800914c:	2f62      	cmp	r7, #98	; 0x62
 800914e:	d80a      	bhi.n	8009166 <_printf_i+0x32>
 8009150:	2f00      	cmp	r7, #0
 8009152:	f000 80d8 	beq.w	8009306 <_printf_i+0x1d2>
 8009156:	2f58      	cmp	r7, #88	; 0x58
 8009158:	f000 80a3 	beq.w	80092a2 <_printf_i+0x16e>
 800915c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009160:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009164:	e03a      	b.n	80091dc <_printf_i+0xa8>
 8009166:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800916a:	2b15      	cmp	r3, #21
 800916c:	d8f6      	bhi.n	800915c <_printf_i+0x28>
 800916e:	a101      	add	r1, pc, #4	; (adr r1, 8009174 <_printf_i+0x40>)
 8009170:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009174:	080091cd 	.word	0x080091cd
 8009178:	080091e1 	.word	0x080091e1
 800917c:	0800915d 	.word	0x0800915d
 8009180:	0800915d 	.word	0x0800915d
 8009184:	0800915d 	.word	0x0800915d
 8009188:	0800915d 	.word	0x0800915d
 800918c:	080091e1 	.word	0x080091e1
 8009190:	0800915d 	.word	0x0800915d
 8009194:	0800915d 	.word	0x0800915d
 8009198:	0800915d 	.word	0x0800915d
 800919c:	0800915d 	.word	0x0800915d
 80091a0:	080092ed 	.word	0x080092ed
 80091a4:	08009211 	.word	0x08009211
 80091a8:	080092cf 	.word	0x080092cf
 80091ac:	0800915d 	.word	0x0800915d
 80091b0:	0800915d 	.word	0x0800915d
 80091b4:	0800930f 	.word	0x0800930f
 80091b8:	0800915d 	.word	0x0800915d
 80091bc:	08009211 	.word	0x08009211
 80091c0:	0800915d 	.word	0x0800915d
 80091c4:	0800915d 	.word	0x0800915d
 80091c8:	080092d7 	.word	0x080092d7
 80091cc:	682b      	ldr	r3, [r5, #0]
 80091ce:	1d1a      	adds	r2, r3, #4
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	602a      	str	r2, [r5, #0]
 80091d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091dc:	2301      	movs	r3, #1
 80091de:	e0a3      	b.n	8009328 <_printf_i+0x1f4>
 80091e0:	6820      	ldr	r0, [r4, #0]
 80091e2:	6829      	ldr	r1, [r5, #0]
 80091e4:	0606      	lsls	r6, r0, #24
 80091e6:	f101 0304 	add.w	r3, r1, #4
 80091ea:	d50a      	bpl.n	8009202 <_printf_i+0xce>
 80091ec:	680e      	ldr	r6, [r1, #0]
 80091ee:	602b      	str	r3, [r5, #0]
 80091f0:	2e00      	cmp	r6, #0
 80091f2:	da03      	bge.n	80091fc <_printf_i+0xc8>
 80091f4:	232d      	movs	r3, #45	; 0x2d
 80091f6:	4276      	negs	r6, r6
 80091f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091fc:	485e      	ldr	r0, [pc, #376]	; (8009378 <_printf_i+0x244>)
 80091fe:	230a      	movs	r3, #10
 8009200:	e019      	b.n	8009236 <_printf_i+0x102>
 8009202:	680e      	ldr	r6, [r1, #0]
 8009204:	602b      	str	r3, [r5, #0]
 8009206:	f010 0f40 	tst.w	r0, #64	; 0x40
 800920a:	bf18      	it	ne
 800920c:	b236      	sxthne	r6, r6
 800920e:	e7ef      	b.n	80091f0 <_printf_i+0xbc>
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	6820      	ldr	r0, [r4, #0]
 8009214:	1d19      	adds	r1, r3, #4
 8009216:	6029      	str	r1, [r5, #0]
 8009218:	0601      	lsls	r1, r0, #24
 800921a:	d501      	bpl.n	8009220 <_printf_i+0xec>
 800921c:	681e      	ldr	r6, [r3, #0]
 800921e:	e002      	b.n	8009226 <_printf_i+0xf2>
 8009220:	0646      	lsls	r6, r0, #25
 8009222:	d5fb      	bpl.n	800921c <_printf_i+0xe8>
 8009224:	881e      	ldrh	r6, [r3, #0]
 8009226:	4854      	ldr	r0, [pc, #336]	; (8009378 <_printf_i+0x244>)
 8009228:	2f6f      	cmp	r7, #111	; 0x6f
 800922a:	bf0c      	ite	eq
 800922c:	2308      	moveq	r3, #8
 800922e:	230a      	movne	r3, #10
 8009230:	2100      	movs	r1, #0
 8009232:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009236:	6865      	ldr	r5, [r4, #4]
 8009238:	60a5      	str	r5, [r4, #8]
 800923a:	2d00      	cmp	r5, #0
 800923c:	bfa2      	ittt	ge
 800923e:	6821      	ldrge	r1, [r4, #0]
 8009240:	f021 0104 	bicge.w	r1, r1, #4
 8009244:	6021      	strge	r1, [r4, #0]
 8009246:	b90e      	cbnz	r6, 800924c <_printf_i+0x118>
 8009248:	2d00      	cmp	r5, #0
 800924a:	d04d      	beq.n	80092e8 <_printf_i+0x1b4>
 800924c:	4615      	mov	r5, r2
 800924e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009252:	fb03 6711 	mls	r7, r3, r1, r6
 8009256:	5dc7      	ldrb	r7, [r0, r7]
 8009258:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800925c:	4637      	mov	r7, r6
 800925e:	42bb      	cmp	r3, r7
 8009260:	460e      	mov	r6, r1
 8009262:	d9f4      	bls.n	800924e <_printf_i+0x11a>
 8009264:	2b08      	cmp	r3, #8
 8009266:	d10b      	bne.n	8009280 <_printf_i+0x14c>
 8009268:	6823      	ldr	r3, [r4, #0]
 800926a:	07de      	lsls	r6, r3, #31
 800926c:	d508      	bpl.n	8009280 <_printf_i+0x14c>
 800926e:	6923      	ldr	r3, [r4, #16]
 8009270:	6861      	ldr	r1, [r4, #4]
 8009272:	4299      	cmp	r1, r3
 8009274:	bfde      	ittt	le
 8009276:	2330      	movle	r3, #48	; 0x30
 8009278:	f805 3c01 	strble.w	r3, [r5, #-1]
 800927c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009280:	1b52      	subs	r2, r2, r5
 8009282:	6122      	str	r2, [r4, #16]
 8009284:	f8cd a000 	str.w	sl, [sp]
 8009288:	464b      	mov	r3, r9
 800928a:	aa03      	add	r2, sp, #12
 800928c:	4621      	mov	r1, r4
 800928e:	4640      	mov	r0, r8
 8009290:	f7ff fee2 	bl	8009058 <_printf_common>
 8009294:	3001      	adds	r0, #1
 8009296:	d14c      	bne.n	8009332 <_printf_i+0x1fe>
 8009298:	f04f 30ff 	mov.w	r0, #4294967295
 800929c:	b004      	add	sp, #16
 800929e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092a2:	4835      	ldr	r0, [pc, #212]	; (8009378 <_printf_i+0x244>)
 80092a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80092a8:	6829      	ldr	r1, [r5, #0]
 80092aa:	6823      	ldr	r3, [r4, #0]
 80092ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80092b0:	6029      	str	r1, [r5, #0]
 80092b2:	061d      	lsls	r5, r3, #24
 80092b4:	d514      	bpl.n	80092e0 <_printf_i+0x1ac>
 80092b6:	07df      	lsls	r7, r3, #31
 80092b8:	bf44      	itt	mi
 80092ba:	f043 0320 	orrmi.w	r3, r3, #32
 80092be:	6023      	strmi	r3, [r4, #0]
 80092c0:	b91e      	cbnz	r6, 80092ca <_printf_i+0x196>
 80092c2:	6823      	ldr	r3, [r4, #0]
 80092c4:	f023 0320 	bic.w	r3, r3, #32
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	2310      	movs	r3, #16
 80092cc:	e7b0      	b.n	8009230 <_printf_i+0xfc>
 80092ce:	6823      	ldr	r3, [r4, #0]
 80092d0:	f043 0320 	orr.w	r3, r3, #32
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	2378      	movs	r3, #120	; 0x78
 80092d8:	4828      	ldr	r0, [pc, #160]	; (800937c <_printf_i+0x248>)
 80092da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092de:	e7e3      	b.n	80092a8 <_printf_i+0x174>
 80092e0:	0659      	lsls	r1, r3, #25
 80092e2:	bf48      	it	mi
 80092e4:	b2b6      	uxthmi	r6, r6
 80092e6:	e7e6      	b.n	80092b6 <_printf_i+0x182>
 80092e8:	4615      	mov	r5, r2
 80092ea:	e7bb      	b.n	8009264 <_printf_i+0x130>
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	6826      	ldr	r6, [r4, #0]
 80092f0:	6961      	ldr	r1, [r4, #20]
 80092f2:	1d18      	adds	r0, r3, #4
 80092f4:	6028      	str	r0, [r5, #0]
 80092f6:	0635      	lsls	r5, r6, #24
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	d501      	bpl.n	8009300 <_printf_i+0x1cc>
 80092fc:	6019      	str	r1, [r3, #0]
 80092fe:	e002      	b.n	8009306 <_printf_i+0x1d2>
 8009300:	0670      	lsls	r0, r6, #25
 8009302:	d5fb      	bpl.n	80092fc <_printf_i+0x1c8>
 8009304:	8019      	strh	r1, [r3, #0]
 8009306:	2300      	movs	r3, #0
 8009308:	6123      	str	r3, [r4, #16]
 800930a:	4615      	mov	r5, r2
 800930c:	e7ba      	b.n	8009284 <_printf_i+0x150>
 800930e:	682b      	ldr	r3, [r5, #0]
 8009310:	1d1a      	adds	r2, r3, #4
 8009312:	602a      	str	r2, [r5, #0]
 8009314:	681d      	ldr	r5, [r3, #0]
 8009316:	6862      	ldr	r2, [r4, #4]
 8009318:	2100      	movs	r1, #0
 800931a:	4628      	mov	r0, r5
 800931c:	f7f6 ff70 	bl	8000200 <memchr>
 8009320:	b108      	cbz	r0, 8009326 <_printf_i+0x1f2>
 8009322:	1b40      	subs	r0, r0, r5
 8009324:	6060      	str	r0, [r4, #4]
 8009326:	6863      	ldr	r3, [r4, #4]
 8009328:	6123      	str	r3, [r4, #16]
 800932a:	2300      	movs	r3, #0
 800932c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009330:	e7a8      	b.n	8009284 <_printf_i+0x150>
 8009332:	6923      	ldr	r3, [r4, #16]
 8009334:	462a      	mov	r2, r5
 8009336:	4649      	mov	r1, r9
 8009338:	4640      	mov	r0, r8
 800933a:	47d0      	blx	sl
 800933c:	3001      	adds	r0, #1
 800933e:	d0ab      	beq.n	8009298 <_printf_i+0x164>
 8009340:	6823      	ldr	r3, [r4, #0]
 8009342:	079b      	lsls	r3, r3, #30
 8009344:	d413      	bmi.n	800936e <_printf_i+0x23a>
 8009346:	68e0      	ldr	r0, [r4, #12]
 8009348:	9b03      	ldr	r3, [sp, #12]
 800934a:	4298      	cmp	r0, r3
 800934c:	bfb8      	it	lt
 800934e:	4618      	movlt	r0, r3
 8009350:	e7a4      	b.n	800929c <_printf_i+0x168>
 8009352:	2301      	movs	r3, #1
 8009354:	4632      	mov	r2, r6
 8009356:	4649      	mov	r1, r9
 8009358:	4640      	mov	r0, r8
 800935a:	47d0      	blx	sl
 800935c:	3001      	adds	r0, #1
 800935e:	d09b      	beq.n	8009298 <_printf_i+0x164>
 8009360:	3501      	adds	r5, #1
 8009362:	68e3      	ldr	r3, [r4, #12]
 8009364:	9903      	ldr	r1, [sp, #12]
 8009366:	1a5b      	subs	r3, r3, r1
 8009368:	42ab      	cmp	r3, r5
 800936a:	dcf2      	bgt.n	8009352 <_printf_i+0x21e>
 800936c:	e7eb      	b.n	8009346 <_printf_i+0x212>
 800936e:	2500      	movs	r5, #0
 8009370:	f104 0619 	add.w	r6, r4, #25
 8009374:	e7f5      	b.n	8009362 <_printf_i+0x22e>
 8009376:	bf00      	nop
 8009378:	080097b9 	.word	0x080097b9
 800937c:	080097ca 	.word	0x080097ca

08009380 <_sbrk_r>:
 8009380:	b538      	push	{r3, r4, r5, lr}
 8009382:	4d06      	ldr	r5, [pc, #24]	; (800939c <_sbrk_r+0x1c>)
 8009384:	2300      	movs	r3, #0
 8009386:	4604      	mov	r4, r0
 8009388:	4608      	mov	r0, r1
 800938a:	602b      	str	r3, [r5, #0]
 800938c:	f7f9 f98c 	bl	80026a8 <_sbrk>
 8009390:	1c43      	adds	r3, r0, #1
 8009392:	d102      	bne.n	800939a <_sbrk_r+0x1a>
 8009394:	682b      	ldr	r3, [r5, #0]
 8009396:	b103      	cbz	r3, 800939a <_sbrk_r+0x1a>
 8009398:	6023      	str	r3, [r4, #0]
 800939a:	bd38      	pop	{r3, r4, r5, pc}
 800939c:	200005a4 	.word	0x200005a4

080093a0 <__sread>:
 80093a0:	b510      	push	{r4, lr}
 80093a2:	460c      	mov	r4, r1
 80093a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a8:	f000 f8f8 	bl	800959c <_read_r>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	bfab      	itete	ge
 80093b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80093b2:	89a3      	ldrhlt	r3, [r4, #12]
 80093b4:	181b      	addge	r3, r3, r0
 80093b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80093ba:	bfac      	ite	ge
 80093bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80093be:	81a3      	strhlt	r3, [r4, #12]
 80093c0:	bd10      	pop	{r4, pc}

080093c2 <__swrite>:
 80093c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c6:	461f      	mov	r7, r3
 80093c8:	898b      	ldrh	r3, [r1, #12]
 80093ca:	05db      	lsls	r3, r3, #23
 80093cc:	4605      	mov	r5, r0
 80093ce:	460c      	mov	r4, r1
 80093d0:	4616      	mov	r6, r2
 80093d2:	d505      	bpl.n	80093e0 <__swrite+0x1e>
 80093d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093d8:	2302      	movs	r3, #2
 80093da:	2200      	movs	r2, #0
 80093dc:	f000 f868 	bl	80094b0 <_lseek_r>
 80093e0:	89a3      	ldrh	r3, [r4, #12]
 80093e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093ea:	81a3      	strh	r3, [r4, #12]
 80093ec:	4632      	mov	r2, r6
 80093ee:	463b      	mov	r3, r7
 80093f0:	4628      	mov	r0, r5
 80093f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093f6:	f000 b817 	b.w	8009428 <_write_r>

080093fa <__sseek>:
 80093fa:	b510      	push	{r4, lr}
 80093fc:	460c      	mov	r4, r1
 80093fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009402:	f000 f855 	bl	80094b0 <_lseek_r>
 8009406:	1c43      	adds	r3, r0, #1
 8009408:	89a3      	ldrh	r3, [r4, #12]
 800940a:	bf15      	itete	ne
 800940c:	6560      	strne	r0, [r4, #84]	; 0x54
 800940e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009412:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009416:	81a3      	strheq	r3, [r4, #12]
 8009418:	bf18      	it	ne
 800941a:	81a3      	strhne	r3, [r4, #12]
 800941c:	bd10      	pop	{r4, pc}

0800941e <__sclose>:
 800941e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009422:	f000 b813 	b.w	800944c <_close_r>
	...

08009428 <_write_r>:
 8009428:	b538      	push	{r3, r4, r5, lr}
 800942a:	4d07      	ldr	r5, [pc, #28]	; (8009448 <_write_r+0x20>)
 800942c:	4604      	mov	r4, r0
 800942e:	4608      	mov	r0, r1
 8009430:	4611      	mov	r1, r2
 8009432:	2200      	movs	r2, #0
 8009434:	602a      	str	r2, [r5, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	f7f9 f8e5 	bl	8002606 <_write>
 800943c:	1c43      	adds	r3, r0, #1
 800943e:	d102      	bne.n	8009446 <_write_r+0x1e>
 8009440:	682b      	ldr	r3, [r5, #0]
 8009442:	b103      	cbz	r3, 8009446 <_write_r+0x1e>
 8009444:	6023      	str	r3, [r4, #0]
 8009446:	bd38      	pop	{r3, r4, r5, pc}
 8009448:	200005a4 	.word	0x200005a4

0800944c <_close_r>:
 800944c:	b538      	push	{r3, r4, r5, lr}
 800944e:	4d06      	ldr	r5, [pc, #24]	; (8009468 <_close_r+0x1c>)
 8009450:	2300      	movs	r3, #0
 8009452:	4604      	mov	r4, r0
 8009454:	4608      	mov	r0, r1
 8009456:	602b      	str	r3, [r5, #0]
 8009458:	f7f9 f8f1 	bl	800263e <_close>
 800945c:	1c43      	adds	r3, r0, #1
 800945e:	d102      	bne.n	8009466 <_close_r+0x1a>
 8009460:	682b      	ldr	r3, [r5, #0]
 8009462:	b103      	cbz	r3, 8009466 <_close_r+0x1a>
 8009464:	6023      	str	r3, [r4, #0]
 8009466:	bd38      	pop	{r3, r4, r5, pc}
 8009468:	200005a4 	.word	0x200005a4

0800946c <_fstat_r>:
 800946c:	b538      	push	{r3, r4, r5, lr}
 800946e:	4d07      	ldr	r5, [pc, #28]	; (800948c <_fstat_r+0x20>)
 8009470:	2300      	movs	r3, #0
 8009472:	4604      	mov	r4, r0
 8009474:	4608      	mov	r0, r1
 8009476:	4611      	mov	r1, r2
 8009478:	602b      	str	r3, [r5, #0]
 800947a:	f7f9 f8ec 	bl	8002656 <_fstat>
 800947e:	1c43      	adds	r3, r0, #1
 8009480:	d102      	bne.n	8009488 <_fstat_r+0x1c>
 8009482:	682b      	ldr	r3, [r5, #0]
 8009484:	b103      	cbz	r3, 8009488 <_fstat_r+0x1c>
 8009486:	6023      	str	r3, [r4, #0]
 8009488:	bd38      	pop	{r3, r4, r5, pc}
 800948a:	bf00      	nop
 800948c:	200005a4 	.word	0x200005a4

08009490 <_isatty_r>:
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	4d06      	ldr	r5, [pc, #24]	; (80094ac <_isatty_r+0x1c>)
 8009494:	2300      	movs	r3, #0
 8009496:	4604      	mov	r4, r0
 8009498:	4608      	mov	r0, r1
 800949a:	602b      	str	r3, [r5, #0]
 800949c:	f7f9 f8eb 	bl	8002676 <_isatty>
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	d102      	bne.n	80094aa <_isatty_r+0x1a>
 80094a4:	682b      	ldr	r3, [r5, #0]
 80094a6:	b103      	cbz	r3, 80094aa <_isatty_r+0x1a>
 80094a8:	6023      	str	r3, [r4, #0]
 80094aa:	bd38      	pop	{r3, r4, r5, pc}
 80094ac:	200005a4 	.word	0x200005a4

080094b0 <_lseek_r>:
 80094b0:	b538      	push	{r3, r4, r5, lr}
 80094b2:	4d07      	ldr	r5, [pc, #28]	; (80094d0 <_lseek_r+0x20>)
 80094b4:	4604      	mov	r4, r0
 80094b6:	4608      	mov	r0, r1
 80094b8:	4611      	mov	r1, r2
 80094ba:	2200      	movs	r2, #0
 80094bc:	602a      	str	r2, [r5, #0]
 80094be:	461a      	mov	r2, r3
 80094c0:	f7f9 f8e4 	bl	800268c <_lseek>
 80094c4:	1c43      	adds	r3, r0, #1
 80094c6:	d102      	bne.n	80094ce <_lseek_r+0x1e>
 80094c8:	682b      	ldr	r3, [r5, #0]
 80094ca:	b103      	cbz	r3, 80094ce <_lseek_r+0x1e>
 80094cc:	6023      	str	r3, [r4, #0]
 80094ce:	bd38      	pop	{r3, r4, r5, pc}
 80094d0:	200005a4 	.word	0x200005a4

080094d4 <memcpy>:
 80094d4:	440a      	add	r2, r1
 80094d6:	4291      	cmp	r1, r2
 80094d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80094dc:	d100      	bne.n	80094e0 <memcpy+0xc>
 80094de:	4770      	bx	lr
 80094e0:	b510      	push	{r4, lr}
 80094e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094ea:	4291      	cmp	r1, r2
 80094ec:	d1f9      	bne.n	80094e2 <memcpy+0xe>
 80094ee:	bd10      	pop	{r4, pc}

080094f0 <memmove>:
 80094f0:	4288      	cmp	r0, r1
 80094f2:	b510      	push	{r4, lr}
 80094f4:	eb01 0402 	add.w	r4, r1, r2
 80094f8:	d902      	bls.n	8009500 <memmove+0x10>
 80094fa:	4284      	cmp	r4, r0
 80094fc:	4623      	mov	r3, r4
 80094fe:	d807      	bhi.n	8009510 <memmove+0x20>
 8009500:	1e43      	subs	r3, r0, #1
 8009502:	42a1      	cmp	r1, r4
 8009504:	d008      	beq.n	8009518 <memmove+0x28>
 8009506:	f811 2b01 	ldrb.w	r2, [r1], #1
 800950a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800950e:	e7f8      	b.n	8009502 <memmove+0x12>
 8009510:	4402      	add	r2, r0
 8009512:	4601      	mov	r1, r0
 8009514:	428a      	cmp	r2, r1
 8009516:	d100      	bne.n	800951a <memmove+0x2a>
 8009518:	bd10      	pop	{r4, pc}
 800951a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800951e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009522:	e7f7      	b.n	8009514 <memmove+0x24>

08009524 <__malloc_lock>:
 8009524:	4801      	ldr	r0, [pc, #4]	; (800952c <__malloc_lock+0x8>)
 8009526:	f7ff b999 	b.w	800885c <__retarget_lock_acquire_recursive>
 800952a:	bf00      	nop
 800952c:	20000598 	.word	0x20000598

08009530 <__malloc_unlock>:
 8009530:	4801      	ldr	r0, [pc, #4]	; (8009538 <__malloc_unlock+0x8>)
 8009532:	f7ff b994 	b.w	800885e <__retarget_lock_release_recursive>
 8009536:	bf00      	nop
 8009538:	20000598 	.word	0x20000598

0800953c <_realloc_r>:
 800953c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009540:	4680      	mov	r8, r0
 8009542:	4614      	mov	r4, r2
 8009544:	460e      	mov	r6, r1
 8009546:	b921      	cbnz	r1, 8009552 <_realloc_r+0x16>
 8009548:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800954c:	4611      	mov	r1, r2
 800954e:	f7ff ba59 	b.w	8008a04 <_malloc_r>
 8009552:	b92a      	cbnz	r2, 8009560 <_realloc_r+0x24>
 8009554:	f7ff f9ea 	bl	800892c <_free_r>
 8009558:	4625      	mov	r5, r4
 800955a:	4628      	mov	r0, r5
 800955c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009560:	f000 f82e 	bl	80095c0 <_malloc_usable_size_r>
 8009564:	4284      	cmp	r4, r0
 8009566:	4607      	mov	r7, r0
 8009568:	d802      	bhi.n	8009570 <_realloc_r+0x34>
 800956a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800956e:	d812      	bhi.n	8009596 <_realloc_r+0x5a>
 8009570:	4621      	mov	r1, r4
 8009572:	4640      	mov	r0, r8
 8009574:	f7ff fa46 	bl	8008a04 <_malloc_r>
 8009578:	4605      	mov	r5, r0
 800957a:	2800      	cmp	r0, #0
 800957c:	d0ed      	beq.n	800955a <_realloc_r+0x1e>
 800957e:	42bc      	cmp	r4, r7
 8009580:	4622      	mov	r2, r4
 8009582:	4631      	mov	r1, r6
 8009584:	bf28      	it	cs
 8009586:	463a      	movcs	r2, r7
 8009588:	f7ff ffa4 	bl	80094d4 <memcpy>
 800958c:	4631      	mov	r1, r6
 800958e:	4640      	mov	r0, r8
 8009590:	f7ff f9cc 	bl	800892c <_free_r>
 8009594:	e7e1      	b.n	800955a <_realloc_r+0x1e>
 8009596:	4635      	mov	r5, r6
 8009598:	e7df      	b.n	800955a <_realloc_r+0x1e>
	...

0800959c <_read_r>:
 800959c:	b538      	push	{r3, r4, r5, lr}
 800959e:	4d07      	ldr	r5, [pc, #28]	; (80095bc <_read_r+0x20>)
 80095a0:	4604      	mov	r4, r0
 80095a2:	4608      	mov	r0, r1
 80095a4:	4611      	mov	r1, r2
 80095a6:	2200      	movs	r2, #0
 80095a8:	602a      	str	r2, [r5, #0]
 80095aa:	461a      	mov	r2, r3
 80095ac:	f7f9 f80e 	bl	80025cc <_read>
 80095b0:	1c43      	adds	r3, r0, #1
 80095b2:	d102      	bne.n	80095ba <_read_r+0x1e>
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	b103      	cbz	r3, 80095ba <_read_r+0x1e>
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	bd38      	pop	{r3, r4, r5, pc}
 80095bc:	200005a4 	.word	0x200005a4

080095c0 <_malloc_usable_size_r>:
 80095c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095c4:	1f18      	subs	r0, r3, #4
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	bfbc      	itt	lt
 80095ca:	580b      	ldrlt	r3, [r1, r0]
 80095cc:	18c0      	addlt	r0, r0, r3
 80095ce:	4770      	bx	lr

080095d0 <_init>:
 80095d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d2:	bf00      	nop
 80095d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095d6:	bc08      	pop	{r3}
 80095d8:	469e      	mov	lr, r3
 80095da:	4770      	bx	lr

080095dc <_fini>:
 80095dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095de:	bf00      	nop
 80095e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e2:	bc08      	pop	{r3}
 80095e4:	469e      	mov	lr, r3
 80095e6:	4770      	bx	lr
