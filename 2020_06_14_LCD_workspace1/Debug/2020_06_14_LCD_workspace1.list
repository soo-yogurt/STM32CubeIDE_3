
2020_06_14_LCD_workspace1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049e8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004b98  08004b98  00014b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c5c  08004c5c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c5c  08004c5c  00014c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c64  08004c64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c64  08004c64  00014c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c68  08004c68  00014c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000014c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012da9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000291c  00000000  00000000  00032e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d8  00000000  00000000  00035768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb8  00000000  00000000  00036840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000258c6  00000000  00000000  000377f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015faa  00000000  00000000  0005d0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2990  00000000  00000000  00073068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001559f8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a9c  00000000  00000000  00155a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004b80 	.word	0x08004b80

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004b80 	.word	0x08004b80

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
 80005be:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <MX_GPIO_Init+0xd0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a2c      	ldr	r2, [pc, #176]	; (8000674 <MX_GPIO_Init+0xd0>)
 80005c4:	f043 0310 	orr.w	r3, r3, #16
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <MX_GPIO_Init+0xd0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0310 	and.w	r3, r3, #16
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	4b26      	ldr	r3, [pc, #152]	; (8000674 <MX_GPIO_Init+0xd0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a25      	ldr	r2, [pc, #148]	; (8000674 <MX_GPIO_Init+0xd0>)
 80005e0:	f043 0304 	orr.w	r3, r3, #4
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b23      	ldr	r3, [pc, #140]	; (8000674 <MX_GPIO_Init+0xd0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0304 	and.w	r3, r3, #4
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <MX_GPIO_Init+0xd0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a1e      	ldr	r2, [pc, #120]	; (8000674 <MX_GPIO_Init+0xd0>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_GPIO_Init+0xd0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_GPIO_Init+0xd0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a17      	ldr	r2, [pc, #92]	; (8000674 <MX_GPIO_Init+0xd0>)
 8000618:	f043 0308 	orr.w	r3, r3, #8
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_GPIO_Init+0xd0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0308 	and.w	r3, r3, #8
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_GPIO_Init+0xd0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a10      	ldr	r2, [pc, #64]	; (8000674 <MX_GPIO_Init+0xd0>)
 8000634:	f043 0302 	orr.w	r3, r3, #2
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_GPIO_Init+0xd0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000646:	2200      	movs	r2, #0
 8000648:	217f      	movs	r1, #127	; 0x7f
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <MX_GPIO_Init+0xd4>)
 800064c:	f000 ffc2 	bl	80015d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000650:	237f      	movs	r3, #127	; 0x7f
 8000652:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2300      	movs	r3, #0
 800065e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4619      	mov	r1, r3
 8000666:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_GPIO_Init+0xd4>)
 8000668:	f000 fe08 	bl	800127c <HAL_GPIO_Init>

}
 800066c:	bf00      	nop
 800066e:	3728      	adds	r7, #40	; 0x28
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40023800 	.word	0x40023800
 8000678:	40021000 	.word	0x40021000

0800067c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_I2C1_Init+0x74>)
 8000682:	4a1c      	ldr	r2, [pc, #112]	; (80006f4 <MX_I2C1_Init+0x78>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <MX_I2C1_Init+0x74>)
 8000688:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <MX_I2C1_Init+0x7c>)
 800068a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_I2C1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_I2C1_Init+0x74>)
 800069a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800069e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ac:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b8:	480d      	ldr	r0, [pc, #52]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006ba:	f000 ffa5 	bl	8001608 <HAL_I2C_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c4:	f000 fa2f 	bl	8000b26 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c8:	2100      	movs	r1, #0
 80006ca:	4809      	ldr	r0, [pc, #36]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006cc:	f001 fd15 	bl	80020fa <HAL_I2CEx_ConfigAnalogFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006d6:	f000 fa26 	bl	8000b26 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006da:	2100      	movs	r1, #0
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006de:	f001 fd48 	bl	8002172 <HAL_I2CEx_ConfigDigitalFilter>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006e8:	f000 fa1d 	bl	8000b26 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000008c 	.word	0x2000008c
 80006f4:	40005400 	.word	0x40005400
 80006f8:	000186a0 	.word	0x000186a0

080006fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	; 0x28
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a19      	ldr	r2, [pc, #100]	; (8000780 <HAL_I2C_MspInit+0x84>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d12c      	bne.n	8000778 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <HAL_I2C_MspInit+0x88>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a17      	ldr	r2, [pc, #92]	; (8000784 <HAL_I2C_MspInit+0x88>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <HAL_I2C_MspInit+0x88>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800073a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800073e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000740:	2312      	movs	r3, #18
 8000742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000744:	2301      	movs	r3, #1
 8000746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	2303      	movs	r3, #3
 800074a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800074c:	2304      	movs	r3, #4
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4619      	mov	r1, r3
 8000756:	480c      	ldr	r0, [pc, #48]	; (8000788 <HAL_I2C_MspInit+0x8c>)
 8000758:	f000 fd90 	bl	800127c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <HAL_I2C_MspInit+0x88>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	4a07      	ldr	r2, [pc, #28]	; (8000784 <HAL_I2C_MspInit+0x88>)
 8000766:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800076a:	6413      	str	r3, [r2, #64]	; 0x40
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <HAL_I2C_MspInit+0x88>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000778:	bf00      	nop
 800077a:	3728      	adds	r7, #40	; 0x28
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40005400 	.word	0x40005400
 8000784:	40023800 	.word	0x40023800
 8000788:	40020400 	.word	0x40020400

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800078e:	b0a3      	sub	sp, #140	; 0x8c
 8000790:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
  char temp[100];
  char ampm[2][3] = {"AM", "PM"};
 8000792:	4a2d      	ldr	r2, [pc, #180]	; (8000848 <main+0xbc>)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	e892 0003 	ldmia.w	r2, {r0, r1}
 800079a:	6018      	str	r0, [r3, #0]
 800079c:	3304      	adds	r3, #4
 800079e:	8019      	strh	r1, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a0:	f000 fbf0 	bl	8000f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a4:	f000 f85c 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a8:	f7ff fefc 	bl	80005a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007ac:	f7ff ff66 	bl	800067c <MX_I2C1_Init>
  MX_RTC_Init();
 80007b0:	f000 f9be 	bl	8000b30 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80007b4:	f000 fb4a 	bl	8000e4c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80007b8:	f000 fada 	bl	8000d70 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
/*  LCD_Init(LCD_ADDR);*/
  I2C_Scan();
 80007bc:	f000 f8c2 	bl	8000944 <I2C_Scan>
  LCD_Init(LCD_ADDR);
 80007c0:	204e      	movs	r0, #78	; 0x4e
 80007c2:	f000 f993 	bl	8000aec <LCD_Init>

    /* USER CODE BEGIN 3 */



	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80007c6:	2200      	movs	r2, #0
 80007c8:	4920      	ldr	r1, [pc, #128]	; (800084c <main+0xc0>)
 80007ca:	4821      	ldr	r0, [pc, #132]	; (8000850 <main+0xc4>)
 80007cc:	f002 fd6a 	bl	80032a4 <HAL_RTC_GetDate>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80007d0:	2200      	movs	r2, #0
 80007d2:	4920      	ldr	r1, [pc, #128]	; (8000854 <main+0xc8>)
 80007d4:	481e      	ldr	r0, [pc, #120]	; (8000850 <main+0xc4>)
 80007d6:	f002 fc83 	bl	80030e0 <HAL_RTC_GetTime>


	  sprintf(temp,"\r\n20%02d-%02d-%02d %s %02d:%02d:%02d", sDate.Year, sDate.Month,
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <main+0xc0>)
 80007dc:	78db      	ldrb	r3, [r3, #3]
 80007de:	461e      	mov	r6, r3
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <main+0xc0>)
 80007e2:	785b      	ldrb	r3, [r3, #1]
 80007e4:	469c      	mov	ip, r3
	         sDate.Date, ampm[sTime.TimeFormat >> 6], sTime.Hours, sTime.Minutes,
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <main+0xc0>)
 80007e8:	789b      	ldrb	r3, [r3, #2]
	  sprintf(temp,"\r\n20%02d-%02d-%02d %s %02d:%02d:%02d", sDate.Year, sDate.Month,
 80007ea:	461c      	mov	r4, r3
	         sDate.Date, ampm[sTime.TimeFormat >> 6], sTime.Hours, sTime.Minutes,
 80007ec:	4b19      	ldr	r3, [pc, #100]	; (8000854 <main+0xc8>)
 80007ee:	78db      	ldrb	r3, [r3, #3]
 80007f0:	099b      	lsrs	r3, r3, #6
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	4619      	mov	r1, r3
 80007f6:	1d3a      	adds	r2, r7, #4
 80007f8:	460b      	mov	r3, r1
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	440b      	add	r3, r1
 80007fe:	4413      	add	r3, r2
 8000800:	4a14      	ldr	r2, [pc, #80]	; (8000854 <main+0xc8>)
 8000802:	7812      	ldrb	r2, [r2, #0]
	  sprintf(temp,"\r\n20%02d-%02d-%02d %s %02d:%02d:%02d", sDate.Year, sDate.Month,
 8000804:	4611      	mov	r1, r2
	         sDate.Date, ampm[sTime.TimeFormat >> 6], sTime.Hours, sTime.Minutes,
 8000806:	4a13      	ldr	r2, [pc, #76]	; (8000854 <main+0xc8>)
 8000808:	7852      	ldrb	r2, [r2, #1]
	  sprintf(temp,"\r\n20%02d-%02d-%02d %s %02d:%02d:%02d", sDate.Year, sDate.Month,
 800080a:	4615      	mov	r5, r2
	         sTime.Seconds);
 800080c:	4a11      	ldr	r2, [pc, #68]	; (8000854 <main+0xc8>)
 800080e:	7892      	ldrb	r2, [r2, #2]
	  sprintf(temp,"\r\n20%02d-%02d-%02d %s %02d:%02d:%02d", sDate.Year, sDate.Month,
 8000810:	f107 000c 	add.w	r0, r7, #12
 8000814:	9204      	str	r2, [sp, #16]
 8000816:	9503      	str	r5, [sp, #12]
 8000818:	9102      	str	r1, [sp, #8]
 800081a:	9301      	str	r3, [sp, #4]
 800081c:	9400      	str	r4, [sp, #0]
 800081e:	4663      	mov	r3, ip
 8000820:	4632      	mov	r2, r6
 8000822:	490d      	ldr	r1, [pc, #52]	; (8000858 <main+0xcc>)
 8000824:	f003 fd3e 	bl	80042a4 <siprintf>

	  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fcdf 	bl	80001f0 <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	b29a      	uxth	r2, r3
 8000836:	f107 010c 	add.w	r1, r7, #12
 800083a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083e:	4807      	ldr	r0, [pc, #28]	; (800085c <main+0xd0>)
 8000840:	f003 f955 	bl	8003aee <HAL_UART_Transmit>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000844:	e7bf      	b.n	80007c6 <main+0x3a>
 8000846:	bf00      	nop
 8000848:	08004bc0 	.word	0x08004bc0
 800084c:	200000f4 	.word	0x200000f4
 8000850:	200000f8 	.word	0x200000f8
 8000854:	200000e0 	.word	0x200000e0
 8000858:	08004b98 	.word	0x08004b98
 800085c:	20000164 	.word	0x20000164

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b094      	sub	sp, #80	; 0x50
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	2230      	movs	r2, #48	; 0x30
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f003 fcdc 	bl	800422c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	4b2c      	ldr	r3, [pc, #176]	; (800093c <SystemClock_Config+0xdc>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	4a2b      	ldr	r2, [pc, #172]	; (800093c <SystemClock_Config+0xdc>)
 800088e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000892:	6413      	str	r3, [r2, #64]	; 0x40
 8000894:	4b29      	ldr	r3, [pc, #164]	; (800093c <SystemClock_Config+0xdc>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a0:	2300      	movs	r3, #0
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	4b26      	ldr	r3, [pc, #152]	; (8000940 <SystemClock_Config+0xe0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a25      	ldr	r2, [pc, #148]	; (8000940 <SystemClock_Config+0xe0>)
 80008aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ae:	6013      	str	r3, [r2, #0]
 80008b0:	4b23      	ldr	r3, [pc, #140]	; (8000940 <SystemClock_Config+0xe0>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80008bc:	2306      	movs	r3, #6
 80008be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008c0:	2301      	movs	r3, #1
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c4:	2301      	movs	r3, #1
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c8:	2310      	movs	r3, #16
 80008ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008cc:	2302      	movs	r3, #2
 80008ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d0:	2300      	movs	r3, #0
 80008d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008d4:	2308      	movs	r3, #8
 80008d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80008d8:	23b4      	movs	r3, #180	; 0xb4
 80008da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008dc:	2302      	movs	r3, #2
 80008de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008e0:	2304      	movs	r3, #4
 80008e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e4:	f107 0320 	add.w	r3, r7, #32
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 fcd1 	bl	8002290 <HAL_RCC_OscConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008f4:	f000 f917 	bl	8000b26 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008f8:	f001 fc7a 	bl	80021f0 <HAL_PWREx_EnableOverDrive>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000902:	f000 f910 	bl	8000b26 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000906:	230f      	movs	r3, #15
 8000908:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090a:	2302      	movs	r3, #2
 800090c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000912:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000916:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	2105      	movs	r1, #5
 8000924:	4618      	mov	r0, r3
 8000926:	f001 ff2b 	bl	8002780 <HAL_RCC_ClockConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000930:	f000 f8f9 	bl	8000b26 <Error_Handler>
  }
}
 8000934:	bf00      	nop
 8000936:	3750      	adds	r7, #80	; 0x50
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	40007000 	.word	0x40007000

08000944 <I2C_Scan>:

/* USER CODE BEGIN 4 */


void I2C_Scan() {
 8000944:	b5b0      	push	{r4, r5, r7, lr}
 8000946:	b098      	sub	sp, #96	; 0x60
 8000948:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 800094a:	4b2e      	ldr	r3, [pc, #184]	; (8000a04 <I2C_Scan+0xc0>)
 800094c:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000950:	461d      	mov	r5, r3
 8000952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000956:	e895 0003 	ldmia.w	r5, {r0, r1}
 800095a:	6020      	str	r0, [r4, #0]
 800095c:	3404      	adds	r4, #4
 800095e:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8000960:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fc43 	bl	80001f0 <strlen>
 800096a:	4603      	mov	r3, r0
 800096c:	b29a      	uxth	r2, r3
 800096e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
 8000976:	4824      	ldr	r0, [pc, #144]	; (8000a08 <I2C_Scan+0xc4>)
 8000978:	f003 f8b9 	bl	8003aee <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 800097c:	2300      	movs	r3, #0
 800097e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000982:	e02f      	b.n	80009e4 <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000984:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	b299      	uxth	r1, r3
 800098c:	230a      	movs	r3, #10
 800098e:	2201      	movs	r2, #1
 8000990:	481e      	ldr	r0, [pc, #120]	; (8000a0c <I2C_Scan+0xc8>)
 8000992:	f001 f87b 	bl	8001a8c <HAL_I2C_IsDeviceReady>
 8000996:	4603      	mov	r3, r0
 8000998:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 800099c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d113      	bne.n	80009cc <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 80009a4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80009a8:	1d38      	adds	r0, r7, #4
 80009aa:	4a19      	ldr	r2, [pc, #100]	; (8000a10 <I2C_Scan+0xcc>)
 80009ac:	2140      	movs	r1, #64	; 0x40
 80009ae:	f003 fc45 	bl	800423c <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fc1b 	bl	80001f0 <strlen>
 80009ba:	4603      	mov	r3, r0
 80009bc:	b29a      	uxth	r2, r3
 80009be:	1d39      	adds	r1, r7, #4
 80009c0:	f04f 33ff 	mov.w	r3, #4294967295
 80009c4:	4810      	ldr	r0, [pc, #64]	; (8000a08 <I2C_Scan+0xc4>)
 80009c6:	f003 f892 	bl	8003aee <HAL_UART_Transmit>
 80009ca:	e006      	b.n	80009da <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart2, (uint8_t*)".", 1, HAL_MAX_DELAY);
 80009cc:	f04f 33ff 	mov.w	r3, #4294967295
 80009d0:	2201      	movs	r2, #1
 80009d2:	4910      	ldr	r1, [pc, #64]	; (8000a14 <I2C_Scan+0xd0>)
 80009d4:	480c      	ldr	r0, [pc, #48]	; (8000a08 <I2C_Scan+0xc4>)
 80009d6:	f003 f88a 	bl	8003aee <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 80009da:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80009de:	3301      	adds	r3, #1
 80009e0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80009e4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80009e8:	2b7f      	cmp	r3, #127	; 0x7f
 80009ea:	d9cb      	bls.n	8000984 <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295
 80009f0:	2202      	movs	r2, #2
 80009f2:	4909      	ldr	r1, [pc, #36]	; (8000a18 <I2C_Scan+0xd4>)
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <I2C_Scan+0xc4>)
 80009f6:	f003 f87a 	bl	8003aee <HAL_UART_Transmit>
}
 80009fa:	bf00      	nop
 80009fc:	3760      	adds	r7, #96	; 0x60
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bdb0      	pop	{r4, r5, r7, pc}
 8000a02:	bf00      	nop
 8000a04:	08004bd8 	.word	0x08004bd8
 8000a08:	20000164 	.word	0x20000164
 8000a0c:	2000008c 	.word	0x2000008c
 8000a10:	08004bc8 	.word	0x08004bc8
 8000a14:	08004bd0 	.word	0x08004bd0
 8000a18:	08004bd4 	.word	0x08004bd4

08000a1c <LCD_SendInternal>:



HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
 8000a26:	460b      	mov	r3, r1
 8000a28:	71bb      	strb	r3, [r7, #6]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	b299      	uxth	r1, r3
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	2201      	movs	r2, #1
 8000a38:	4822      	ldr	r0, [pc, #136]	; (8000ac4 <LCD_SendInternal+0xa8>)
 8000a3a:	f001 f827 	bl	8001a8c <HAL_I2C_IsDeviceReady>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d000      	beq.n	8000a4a <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000a48:	e7f1      	b.n	8000a2e <LCD_SendInternal+0x12>
            break;
 8000a4a:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 8000a4c:	79bb      	ldrb	r3, [r7, #6]
 8000a4e:	f023 030f 	bic.w	r3, r3, #15
 8000a52:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 8000a54:	79bb      	ldrb	r3, [r7, #6]
 8000a56:	011b      	lsls	r3, r3, #4
 8000a58:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 8000a5a:	7bba      	ldrb	r2, [r7, #14]
 8000a5c:	797b      	ldrb	r3, [r7, #5]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	f043 030c 	orr.w	r3, r3, #12
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 8000a6a:	7bba      	ldrb	r2, [r7, #14]
 8000a6c:	797b      	ldrb	r3, [r7, #5]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f043 0308 	orr.w	r3, r3, #8
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8000a7a:	7b7a      	ldrb	r2, [r7, #13]
 8000a7c:	797b      	ldrb	r3, [r7, #5]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	f043 030c 	orr.w	r3, r3, #12
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 8000a8a:	7b7a      	ldrb	r2, [r7, #13]
 8000a8c:	797b      	ldrb	r3, [r7, #5]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	f043 0308 	orr.w	r3, r3, #8
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	b299      	uxth	r1, r3
 8000a9e:	f107 0208 	add.w	r2, r7, #8
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <LCD_SendInternal+0xa8>)
 8000aac:	f000 fef0 	bl	8001890 <HAL_I2C_Master_Transmit>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 8000ab4:	2005      	movs	r0, #5
 8000ab6:	f000 fad7 	bl	8001068 <HAL_Delay>
    return res;
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000008c 	.word	0x2000008c

08000ac8 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	460a      	mov	r2, r1
 8000ad2:	71fb      	strb	r3, [r7, #7]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000ad8:	79b9      	ldrb	r1, [r7, #6]
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2200      	movs	r2, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff ff9c 	bl	8000a1c <LCD_SendInternal>
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <LCD_Init>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
    LCD_SendInternal(lcd_addr, data, PIN_RS);
}

void LCD_Init(uint8_t lcd_addr) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2130      	movs	r1, #48	; 0x30
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ffe4 	bl	8000ac8 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	2102      	movs	r1, #2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ffdf 	bl	8000ac8 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	210c      	movs	r1, #12
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ffda 	bl	8000ac8 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	2101      	movs	r1, #1
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ffd5 	bl	8000ac8 <LCD_SendCommand>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2a:	b672      	cpsid	i
}
 8000b2c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <Error_Handler+0x8>

08000b30 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b44:	2300      	movs	r3, #0
 8000b46:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b48:	4b25      	ldr	r3, [pc, #148]	; (8000be0 <MX_RTC_Init+0xb0>)
 8000b4a:	4a26      	ldr	r2, [pc, #152]	; (8000be4 <MX_RTC_Init+0xb4>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000b4e:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <MX_RTC_Init+0xb0>)
 8000b50:	2240      	movs	r2, #64	; 0x40
 8000b52:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b54:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <MX_RTC_Init+0xb0>)
 8000b56:	227f      	movs	r2, #127	; 0x7f
 8000b58:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_RTC_Init+0xb0>)
 8000b5c:	22ff      	movs	r2, #255	; 0xff
 8000b5e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <MX_RTC_Init+0xb0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <MX_RTC_Init+0xb0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b6c:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <MX_RTC_Init+0xb0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b72:	481b      	ldr	r0, [pc, #108]	; (8000be0 <MX_RTC_Init+0xb0>)
 8000b74:	f002 f9a4 	bl	8002ec0 <HAL_RTC_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000b7e:	f7ff ffd2 	bl	8000b26 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 12;
 8000b82:	230c      	movs	r3, #12
 8000b84:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480f      	ldr	r0, [pc, #60]	; (8000be0 <MX_RTC_Init+0xb0>)
 8000ba2:	f002 fa03 	bl	8002fac <HAL_RTC_SetTime>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8000bac:	f7ff ffbb 	bl	8000b26 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8000bb4:	2306      	movs	r3, #6
 8000bb6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 15;
 8000bb8:	230f      	movs	r3, #15
 8000bba:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8000bbc:	2316      	movs	r3, #22
 8000bbe:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4806      	ldr	r0, [pc, #24]	; (8000be0 <MX_RTC_Init+0xb0>)
 8000bc8:	f002 fae8 	bl	800319c <HAL_RTC_SetDate>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8000bd2:	f7ff ffa8 	bl	8000b26 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200000f8 	.word	0x200000f8
 8000be4:	40002800 	.word	0x40002800

08000be8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08e      	sub	sp, #56	; 0x38
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	2230      	movs	r2, #48	; 0x30
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f003 fb17 	bl	800422c <memset>
  if(rtcHandle->Instance==RTC)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <HAL_RTC_MspInit+0x4c>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d111      	bne.n	8000c2c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c08:	2320      	movs	r3, #32
 8000c0a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c12:	f107 0308 	add.w	r3, r7, #8
 8000c16:	4618      	mov	r0, r3
 8000c18:	f001 ff92 	bl	8002b40 <HAL_RCCEx_PeriphCLKConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000c22:	f7ff ff80 	bl	8000b26 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <HAL_RTC_MspInit+0x50>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	3738      	adds	r7, #56	; 0x38
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40002800 	.word	0x40002800
 8000c38:	42470e3c 	.word	0x42470e3c

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a0f      	ldr	r2, [pc, #60]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f9a6 	bl	8001028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f003 fa62 	bl	80041d8 <__errno>
 8000d14:	4603      	mov	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20030000 	.word	0x20030000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	20000118 	.word	0x20000118
 8000d48:	200001c0 	.word	0x200001c0

08000d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <SystemInit+0x20>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <SystemInit+0x20>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	463b      	mov	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <MX_TIM2_Init+0x98>)
 8000d8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8000d94:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <MX_TIM2_Init+0x98>)
 8000d96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_TIM2_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 900;
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <MX_TIM2_Init+0x98>)
 8000da4:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000da8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <MX_TIM2_Init+0x98>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MX_TIM2_Init+0x98>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000db6:	4814      	ldr	r0, [pc, #80]	; (8000e08 <MX_TIM2_Init+0x98>)
 8000db8:	f002 fb80 	bl	80034bc <HAL_TIM_Base_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000dc2:	f7ff feb0 	bl	8000b26 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480d      	ldr	r0, [pc, #52]	; (8000e08 <MX_TIM2_Init+0x98>)
 8000dd4:	f002 fbc1 	bl	800355a <HAL_TIM_ConfigClockSource>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dde:	f7ff fea2 	bl	8000b26 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dea:	463b      	mov	r3, r7
 8000dec:	4619      	mov	r1, r3
 8000dee:	4806      	ldr	r0, [pc, #24]	; (8000e08 <MX_TIM2_Init+0x98>)
 8000df0:	f002 fdb4 	bl	800395c <HAL_TIMEx_MasterConfigSynchronization>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000dfa:	f7ff fe94 	bl	8000b26 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	2000011c 	.word	0x2000011c

08000e0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e1c:	d10d      	bne.n	8000e3a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_TIM_Base_MspInit+0x3c>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_TIM_Base_MspInit+0x3c>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_TIM_Base_MspInit+0x3c>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800

08000e4c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <MX_USART2_UART_Init+0x50>)
 8000e54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e72:	220c      	movs	r2, #12
 8000e74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e84:	f002 fde6 	bl	8003a54 <HAL_UART_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e8e:	f7ff fe4a 	bl	8000b26 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000164 	.word	0x20000164
 8000e9c:	40004400 	.word	0x40004400

08000ea0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a19      	ldr	r2, [pc, #100]	; (8000f24 <HAL_UART_MspInit+0x84>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d12b      	bne.n	8000f1a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <HAL_UART_MspInit+0x88>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a17      	ldr	r2, [pc, #92]	; (8000f28 <HAL_UART_MspInit+0x88>)
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_UART_MspInit+0x88>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_UART_MspInit+0x88>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <HAL_UART_MspInit+0x88>)
 8000ee8:	f043 0308 	orr.w	r3, r3, #8
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_UART_MspInit+0x88>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000efa:	2360      	movs	r3, #96	; 0x60
 8000efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <HAL_UART_MspInit+0x8c>)
 8000f16:	f000 f9b1 	bl	800127c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	3728      	adds	r7, #40	; 0x28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40004400 	.word	0x40004400
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020c00 	.word	0x40020c00

08000f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f68 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f34:	480d      	ldr	r0, [pc, #52]	; (8000f6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f36:	490e      	ldr	r1, [pc, #56]	; (8000f70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f38:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f3c:	e002      	b.n	8000f44 <LoopCopyDataInit>

08000f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f42:	3304      	adds	r3, #4

08000f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f48:	d3f9      	bcc.n	8000f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4a:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f4c:	4c0b      	ldr	r4, [pc, #44]	; (8000f7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f50:	e001      	b.n	8000f56 <LoopFillZerobss>

08000f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f54:	3204      	adds	r2, #4

08000f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f58:	d3fb      	bcc.n	8000f52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f5a:	f7ff fef7 	bl	8000d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f003 f941 	bl	80041e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f62:	f7ff fc13 	bl	800078c <main>
  bx  lr    
 8000f66:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f68:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f74:	08004c6c 	.word	0x08004c6c
  ldr r2, =_sbss
 8000f78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f7c:	200001bc 	.word	0x200001bc

08000f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC_IRQHandler>
	...

08000f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f88:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <HAL_Init+0x40>)
 8000f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <HAL_Init+0x40>)
 8000f9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <HAL_Init+0x40>)
 8000fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fac:	2003      	movs	r0, #3
 8000fae:	f000 f931 	bl	8001214 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb2:	200f      	movs	r0, #15
 8000fb4:	f000 f808 	bl	8000fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb8:	f7ff fe40 	bl	8000c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40023c00 	.word	0x40023c00

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0x54>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x58>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f93b 	bl	8001262 <HAL_SYSTICK_Config>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00e      	b.n	8001014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b0f      	cmp	r3, #15
 8000ffa:	d80a      	bhi.n	8001012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f000 f911 	bl	800122a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001008:	4a06      	ldr	r2, [pc, #24]	; (8001024 <HAL_InitTick+0x5c>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	e000      	b.n	8001014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000000 	.word	0x20000000
 8001020:	20000008 	.word	0x20000008
 8001024:	20000004 	.word	0x20000004

08001028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x20>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x24>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <HAL_IncTick+0x24>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000008 	.word	0x20000008
 800104c:	200001a8 	.word	0x200001a8

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	200001a8 	.word	0x200001a8

08001068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff ffee 	bl	8001050 <HAL_GetTick>
 8001074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001080:	d005      	beq.n	800108e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_Delay+0x44>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800108e:	bf00      	nop
 8001090:	f7ff ffde 	bl	8001050 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	429a      	cmp	r2, r3
 800109e:	d8f7      	bhi.n	8001090 <HAL_Delay+0x28>
  {
  }
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000008 	.word	0x20000008

080010b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e2:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	60d3      	str	r3, [r2, #12]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <__NVIC_GetPriorityGrouping+0x18>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	f003 0307 	and.w	r3, r3, #7
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	; (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	; (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
         );
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e0:	d301      	bcc.n	80011e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00f      	b.n	8001206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <SysTick_Config+0x40>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ee:	210f      	movs	r1, #15
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f7ff ff8e 	bl	8001114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <SysTick_Config+0x40>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <SysTick_Config+0x40>)
 8001200:	2207      	movs	r2, #7
 8001202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	e000e010 	.word	0xe000e010

08001214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff47 	bl	80010b0 <__NVIC_SetPriorityGrouping>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800123c:	f7ff ff5c 	bl	80010f8 <__NVIC_GetPriorityGrouping>
 8001240:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	6978      	ldr	r0, [r7, #20]
 8001248:	f7ff ff8e 	bl	8001168 <NVIC_EncodePriority>
 800124c:	4602      	mov	r2, r0
 800124e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff5d 	bl	8001114 <__NVIC_SetPriority>
}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ffb0 	bl	80011d0 <SysTick_Config>
 8001270:	4603      	mov	r3, r0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	e177      	b.n	8001588 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001298:	2201      	movs	r2, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	f040 8166 	bne.w	8001582 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d005      	beq.n	80012ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d130      	bne.n	8001330 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	2203      	movs	r2, #3
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001304:	2201      	movs	r2, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	091b      	lsrs	r3, r3, #4
 800131a:	f003 0201 	and.w	r2, r3, #1
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b03      	cmp	r3, #3
 800133a:	d017      	beq.n	800136c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d123      	bne.n	80013c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	08da      	lsrs	r2, r3, #3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3208      	adds	r2, #8
 8001380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	220f      	movs	r2, #15
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	08da      	lsrs	r2, r3, #3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3208      	adds	r2, #8
 80013ba:	69b9      	ldr	r1, [r7, #24]
 80013bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	2203      	movs	r2, #3
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0203 	and.w	r2, r3, #3
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80c0 	beq.w	8001582 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b66      	ldr	r3, [pc, #408]	; (80015a0 <HAL_GPIO_Init+0x324>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a65      	ldr	r2, [pc, #404]	; (80015a0 <HAL_GPIO_Init+0x324>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b63      	ldr	r3, [pc, #396]	; (80015a0 <HAL_GPIO_Init+0x324>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800141e:	4a61      	ldr	r2, [pc, #388]	; (80015a4 <HAL_GPIO_Init+0x328>)
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	3302      	adds	r3, #2
 8001426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	220f      	movs	r2, #15
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a58      	ldr	r2, [pc, #352]	; (80015a8 <HAL_GPIO_Init+0x32c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d037      	beq.n	80014ba <HAL_GPIO_Init+0x23e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a57      	ldr	r2, [pc, #348]	; (80015ac <HAL_GPIO_Init+0x330>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d031      	beq.n	80014b6 <HAL_GPIO_Init+0x23a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a56      	ldr	r2, [pc, #344]	; (80015b0 <HAL_GPIO_Init+0x334>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d02b      	beq.n	80014b2 <HAL_GPIO_Init+0x236>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a55      	ldr	r2, [pc, #340]	; (80015b4 <HAL_GPIO_Init+0x338>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d025      	beq.n	80014ae <HAL_GPIO_Init+0x232>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a54      	ldr	r2, [pc, #336]	; (80015b8 <HAL_GPIO_Init+0x33c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d01f      	beq.n	80014aa <HAL_GPIO_Init+0x22e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a53      	ldr	r2, [pc, #332]	; (80015bc <HAL_GPIO_Init+0x340>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d019      	beq.n	80014a6 <HAL_GPIO_Init+0x22a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a52      	ldr	r2, [pc, #328]	; (80015c0 <HAL_GPIO_Init+0x344>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0x226>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a51      	ldr	r2, [pc, #324]	; (80015c4 <HAL_GPIO_Init+0x348>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d00d      	beq.n	800149e <HAL_GPIO_Init+0x222>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a50      	ldr	r2, [pc, #320]	; (80015c8 <HAL_GPIO_Init+0x34c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d007      	beq.n	800149a <HAL_GPIO_Init+0x21e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4f      	ldr	r2, [pc, #316]	; (80015cc <HAL_GPIO_Init+0x350>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d101      	bne.n	8001496 <HAL_GPIO_Init+0x21a>
 8001492:	2309      	movs	r3, #9
 8001494:	e012      	b.n	80014bc <HAL_GPIO_Init+0x240>
 8001496:	230a      	movs	r3, #10
 8001498:	e010      	b.n	80014bc <HAL_GPIO_Init+0x240>
 800149a:	2308      	movs	r3, #8
 800149c:	e00e      	b.n	80014bc <HAL_GPIO_Init+0x240>
 800149e:	2307      	movs	r3, #7
 80014a0:	e00c      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014a2:	2306      	movs	r3, #6
 80014a4:	e00a      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014a6:	2305      	movs	r3, #5
 80014a8:	e008      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014aa:	2304      	movs	r3, #4
 80014ac:	e006      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014ae:	2303      	movs	r3, #3
 80014b0:	e004      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e002      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014ba:	2300      	movs	r3, #0
 80014bc:	69fa      	ldr	r2, [r7, #28]
 80014be:	f002 0203 	and.w	r2, r2, #3
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	4093      	lsls	r3, r2
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014cc:	4935      	ldr	r1, [pc, #212]	; (80015a4 <HAL_GPIO_Init+0x328>)
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	3302      	adds	r3, #2
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014da:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <HAL_GPIO_Init+0x354>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014fe:	4a34      	ldr	r2, [pc, #208]	; (80015d0 <HAL_GPIO_Init+0x354>)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001504:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <HAL_GPIO_Init+0x354>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001528:	4a29      	ldr	r2, [pc, #164]	; (80015d0 <HAL_GPIO_Init+0x354>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800152e:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <HAL_GPIO_Init+0x354>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001552:	4a1f      	ldr	r2, [pc, #124]	; (80015d0 <HAL_GPIO_Init+0x354>)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <HAL_GPIO_Init+0x354>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <HAL_GPIO_Init+0x354>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3301      	adds	r3, #1
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	2b0f      	cmp	r3, #15
 800158c:	f67f ae84 	bls.w	8001298 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3724      	adds	r7, #36	; 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40013800 	.word	0x40013800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40020400 	.word	0x40020400
 80015b0:	40020800 	.word	0x40020800
 80015b4:	40020c00 	.word	0x40020c00
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40021400 	.word	0x40021400
 80015c0:	40021800 	.word	0x40021800
 80015c4:	40021c00 	.word	0x40021c00
 80015c8:	40022000 	.word	0x40022000
 80015cc:	40022400 	.word	0x40022400
 80015d0:	40013c00 	.word	0x40013c00

080015d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]
 80015e0:	4613      	mov	r3, r2
 80015e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e4:	787b      	ldrb	r3, [r7, #1]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ea:	887a      	ldrh	r2, [r7, #2]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015f0:	e003      	b.n	80015fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015f2:	887b      	ldrh	r3, [r7, #2]
 80015f4:	041a      	lsls	r2, r3, #16
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	619a      	str	r2, [r3, #24]
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e12b      	b.n	8001872 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d106      	bne.n	8001634 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff f864 	bl	80006fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2224      	movs	r2, #36	; 0x24
 8001638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0201 	bic.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800165a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800166a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800166c:	f001 fa40 	bl	8002af0 <HAL_RCC_GetPCLK1Freq>
 8001670:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4a81      	ldr	r2, [pc, #516]	; (800187c <HAL_I2C_Init+0x274>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d807      	bhi.n	800168c <HAL_I2C_Init+0x84>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4a80      	ldr	r2, [pc, #512]	; (8001880 <HAL_I2C_Init+0x278>)
 8001680:	4293      	cmp	r3, r2
 8001682:	bf94      	ite	ls
 8001684:	2301      	movls	r3, #1
 8001686:	2300      	movhi	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	e006      	b.n	800169a <HAL_I2C_Init+0x92>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4a7d      	ldr	r2, [pc, #500]	; (8001884 <HAL_I2C_Init+0x27c>)
 8001690:	4293      	cmp	r3, r2
 8001692:	bf94      	ite	ls
 8001694:	2301      	movls	r3, #1
 8001696:	2300      	movhi	r3, #0
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0e7      	b.n	8001872 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4a78      	ldr	r2, [pc, #480]	; (8001888 <HAL_I2C_Init+0x280>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	0c9b      	lsrs	r3, r3, #18
 80016ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	430a      	orrs	r2, r1
 80016c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4a6a      	ldr	r2, [pc, #424]	; (800187c <HAL_I2C_Init+0x274>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d802      	bhi.n	80016dc <HAL_I2C_Init+0xd4>
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	3301      	adds	r3, #1
 80016da:	e009      	b.n	80016f0 <HAL_I2C_Init+0xe8>
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016e2:	fb02 f303 	mul.w	r3, r2, r3
 80016e6:	4a69      	ldr	r2, [pc, #420]	; (800188c <HAL_I2C_Init+0x284>)
 80016e8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ec:	099b      	lsrs	r3, r3, #6
 80016ee:	3301      	adds	r3, #1
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	430b      	orrs	r3, r1
 80016f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001702:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	495c      	ldr	r1, [pc, #368]	; (800187c <HAL_I2C_Init+0x274>)
 800170c:	428b      	cmp	r3, r1
 800170e:	d819      	bhi.n	8001744 <HAL_I2C_Init+0x13c>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	1e59      	subs	r1, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	fbb1 f3f3 	udiv	r3, r1, r3
 800171e:	1c59      	adds	r1, r3, #1
 8001720:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001724:	400b      	ands	r3, r1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00a      	beq.n	8001740 <HAL_I2C_Init+0x138>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1e59      	subs	r1, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fbb1 f3f3 	udiv	r3, r1, r3
 8001738:	3301      	adds	r3, #1
 800173a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800173e:	e051      	b.n	80017e4 <HAL_I2C_Init+0x1dc>
 8001740:	2304      	movs	r3, #4
 8001742:	e04f      	b.n	80017e4 <HAL_I2C_Init+0x1dc>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d111      	bne.n	8001770 <HAL_I2C_Init+0x168>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	1e58      	subs	r0, r3, #1
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6859      	ldr	r1, [r3, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	440b      	add	r3, r1
 800175a:	fbb0 f3f3 	udiv	r3, r0, r3
 800175e:	3301      	adds	r3, #1
 8001760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf0c      	ite	eq
 8001768:	2301      	moveq	r3, #1
 800176a:	2300      	movne	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	e012      	b.n	8001796 <HAL_I2C_Init+0x18e>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	1e58      	subs	r0, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6859      	ldr	r1, [r3, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	0099      	lsls	r1, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	fbb0 f3f3 	udiv	r3, r0, r3
 8001786:	3301      	adds	r3, #1
 8001788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800178c:	2b00      	cmp	r3, #0
 800178e:	bf0c      	ite	eq
 8001790:	2301      	moveq	r3, #1
 8001792:	2300      	movne	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_I2C_Init+0x196>
 800179a:	2301      	movs	r3, #1
 800179c:	e022      	b.n	80017e4 <HAL_I2C_Init+0x1dc>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10e      	bne.n	80017c4 <HAL_I2C_Init+0x1bc>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1e58      	subs	r0, r3, #1
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6859      	ldr	r1, [r3, #4]
 80017ae:	460b      	mov	r3, r1
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	440b      	add	r3, r1
 80017b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b8:	3301      	adds	r3, #1
 80017ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017c2:	e00f      	b.n	80017e4 <HAL_I2C_Init+0x1dc>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	1e58      	subs	r0, r3, #1
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6859      	ldr	r1, [r3, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	440b      	add	r3, r1
 80017d2:	0099      	lsls	r1, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017da:	3301      	adds	r3, #1
 80017dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	6809      	ldr	r1, [r1, #0]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69da      	ldr	r2, [r3, #28]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001812:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6911      	ldr	r1, [r2, #16]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68d2      	ldr	r2, [r2, #12]
 800181e:	4311      	orrs	r1, r2
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	430b      	orrs	r3, r1
 8001826:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0201 	orr.w	r2, r2, #1
 8001852:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2220      	movs	r2, #32
 800185e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	000186a0 	.word	0x000186a0
 8001880:	001e847f 	.word	0x001e847f
 8001884:	003d08ff 	.word	0x003d08ff
 8001888:	431bde83 	.word	0x431bde83
 800188c:	10624dd3 	.word	0x10624dd3

08001890 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af02      	add	r7, sp, #8
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	461a      	mov	r2, r3
 800189c:	460b      	mov	r3, r1
 800189e:	817b      	strh	r3, [r7, #10]
 80018a0:	4613      	mov	r3, r2
 80018a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff fbd4 	bl	8001050 <HAL_GetTick>
 80018a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b20      	cmp	r3, #32
 80018b4:	f040 80e0 	bne.w	8001a78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	2319      	movs	r3, #25
 80018be:	2201      	movs	r2, #1
 80018c0:	4970      	ldr	r1, [pc, #448]	; (8001a84 <HAL_I2C_Master_Transmit+0x1f4>)
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 fa92 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80018ce:	2302      	movs	r3, #2
 80018d0:	e0d3      	b.n	8001a7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_I2C_Master_Transmit+0x50>
 80018dc:	2302      	movs	r3, #2
 80018de:	e0cc      	b.n	8001a7a <HAL_I2C_Master_Transmit+0x1ea>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d007      	beq.n	8001906 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f042 0201 	orr.w	r2, r2, #1
 8001904:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001914:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2221      	movs	r2, #33	; 0x21
 800191a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2210      	movs	r2, #16
 8001922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	893a      	ldrh	r2, [r7, #8]
 8001936:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800193c:	b29a      	uxth	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4a50      	ldr	r2, [pc, #320]	; (8001a88 <HAL_I2C_Master_Transmit+0x1f8>)
 8001946:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001948:	8979      	ldrh	r1, [r7, #10]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	6a3a      	ldr	r2, [r7, #32]
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 f9ca 	bl	8001ce8 <I2C_MasterRequestWrite>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e08d      	b.n	8001a7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001974:	e066      	b.n	8001a44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	6a39      	ldr	r1, [r7, #32]
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 fb0c 	bl	8001f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00d      	beq.n	80019a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	2b04      	cmp	r3, #4
 800198c:	d107      	bne.n	800199e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800199c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e06b      	b.n	8001a7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	781a      	ldrb	r2, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019bc:	b29b      	uxth	r3, r3
 80019be:	3b01      	subs	r3, #1
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d11b      	bne.n	8001a18 <HAL_I2C_Master_Transmit+0x188>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d017      	beq.n	8001a18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	781a      	ldrb	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	3b01      	subs	r3, #1
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a10:	3b01      	subs	r3, #1
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	6a39      	ldr	r1, [r7, #32]
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f000 fafc 	bl	800201a <I2C_WaitOnBTFFlagUntilTimeout>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00d      	beq.n	8001a44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d107      	bne.n	8001a40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d194      	bne.n	8001976 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	e000      	b.n	8001a7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a78:	2302      	movs	r3, #2
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	00100002 	.word	0x00100002
 8001a88:	ffff0000 	.word	0xffff0000

08001a8c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af02      	add	r7, sp, #8
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001a9c:	f7ff fad8 	bl	8001050 <HAL_GetTick>
 8001aa0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b20      	cmp	r3, #32
 8001ab0:	f040 8111 	bne.w	8001cd6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2319      	movs	r3, #25
 8001aba:	2201      	movs	r2, #1
 8001abc:	4988      	ldr	r1, [pc, #544]	; (8001ce0 <HAL_I2C_IsDeviceReady+0x254>)
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 f994 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001aca:	2302      	movs	r3, #2
 8001acc:	e104      	b.n	8001cd8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_I2C_IsDeviceReady+0x50>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e0fd      	b.n	8001cd8 <HAL_I2C_IsDeviceReady+0x24c>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d007      	beq.n	8001b02 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f042 0201 	orr.w	r2, r2, #1
 8001b00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2224      	movs	r2, #36	; 0x24
 8001b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4a70      	ldr	r2, [pc, #448]	; (8001ce4 <HAL_I2C_IsDeviceReady+0x258>)
 8001b24:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b34:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f952 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00d      	beq.n	8001b6a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b5c:	d103      	bne.n	8001b66 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b64:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e0b6      	b.n	8001cd8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b6a:	897b      	ldrh	r3, [r7, #10]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b78:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001b7a:	f7ff fa69 	bl	8001050 <HAL_GetTick>
 8001b7e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	bf0c      	ite	eq
 8001b8e:	2301      	moveq	r3, #1
 8001b90:	2300      	movne	r3, #0
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba4:	bf0c      	ite	eq
 8001ba6:	2301      	moveq	r3, #1
 8001ba8:	2300      	movne	r3, #0
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001bae:	e025      	b.n	8001bfc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bb0:	f7ff fa4e 	bl	8001050 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d302      	bcc.n	8001bc6 <HAL_I2C_IsDeviceReady+0x13a>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d103      	bne.n	8001bce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	22a0      	movs	r2, #160	; 0xa0
 8001bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	bf0c      	ite	eq
 8001bdc:	2301      	moveq	r3, #1
 8001bde:	2300      	movne	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf2:	bf0c      	ite	eq
 8001bf4:	2301      	moveq	r3, #1
 8001bf6:	2300      	movne	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2ba0      	cmp	r3, #160	; 0xa0
 8001c06:	d005      	beq.n	8001c14 <HAL_I2C_IsDeviceReady+0x188>
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d102      	bne.n	8001c14 <HAL_I2C_IsDeviceReady+0x188>
 8001c0e:	7dbb      	ldrb	r3, [r7, #22]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0cd      	beq.n	8001bb0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2220      	movs	r2, #32
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d129      	bne.n	8001c7e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c38:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	2319      	movs	r3, #25
 8001c56:	2201      	movs	r2, #1
 8001c58:	4921      	ldr	r1, [pc, #132]	; (8001ce0 <HAL_I2C_IsDeviceReady+0x254>)
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 f8c6 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e036      	b.n	8001cd8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e02c      	b.n	8001cd8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c96:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	2319      	movs	r3, #25
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	490f      	ldr	r1, [pc, #60]	; (8001ce0 <HAL_I2C_IsDeviceReady+0x254>)
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 f8a2 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e012      	b.n	8001cd8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	f4ff af32 	bcc.w	8001b26 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001cd6:	2302      	movs	r3, #2
  }
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3720      	adds	r7, #32
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	00100002 	.word	0x00100002
 8001ce4:	ffff0000 	.word	0xffff0000

08001ce8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d006      	beq.n	8001d12 <I2C_MasterRequestWrite+0x2a>
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d003      	beq.n	8001d12 <I2C_MasterRequestWrite+0x2a>
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d10:	d108      	bne.n	8001d24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	e00b      	b.n	8001d3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	2b12      	cmp	r3, #18
 8001d2a:	d107      	bne.n	8001d3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f000 f84f 	bl	8001dec <I2C_WaitOnFlagUntilTimeout>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00d      	beq.n	8001d70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d62:	d103      	bne.n	8001d6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e035      	b.n	8001ddc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d78:	d108      	bne.n	8001d8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d7a:	897b      	ldrh	r3, [r7, #10]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d88:	611a      	str	r2, [r3, #16]
 8001d8a:	e01b      	b.n	8001dc4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d8c:	897b      	ldrh	r3, [r7, #10]
 8001d8e:	11db      	asrs	r3, r3, #7
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	f003 0306 	and.w	r3, r3, #6
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	f063 030f 	orn	r3, r3, #15
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	490e      	ldr	r1, [pc, #56]	; (8001de4 <I2C_MasterRequestWrite+0xfc>)
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 f875 	bl	8001e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e010      	b.n	8001ddc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001dba:	897b      	ldrh	r3, [r7, #10]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	4907      	ldr	r1, [pc, #28]	; (8001de8 <I2C_MasterRequestWrite+0x100>)
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 f865 	bl	8001e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	00010008 	.word	0x00010008
 8001de8:	00010002 	.word	0x00010002

08001dec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dfc:	e025      	b.n	8001e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d021      	beq.n	8001e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e06:	f7ff f923 	bl	8001050 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d302      	bcc.n	8001e1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d116      	bne.n	8001e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2220      	movs	r2, #32
 8001e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f043 0220 	orr.w	r2, r3, #32
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e023      	b.n	8001e92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d10d      	bne.n	8001e70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bf0c      	ite	eq
 8001e66:	2301      	moveq	r3, #1
 8001e68:	2300      	movne	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	e00c      	b.n	8001e8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	43da      	mvns	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	bf0c      	ite	eq
 8001e82:	2301      	moveq	r3, #1
 8001e84:	2300      	movne	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d0b6      	beq.n	8001dfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ea8:	e051      	b.n	8001f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb8:	d123      	bne.n	8001f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ec8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ed2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f043 0204 	orr.w	r2, r3, #4
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e046      	b.n	8001f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f08:	d021      	beq.n	8001f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f0a:	f7ff f8a1 	bl	8001050 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d302      	bcc.n	8001f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d116      	bne.n	8001f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f043 0220 	orr.w	r2, r3, #32
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e020      	b.n	8001f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	0c1b      	lsrs	r3, r3, #16
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d10c      	bne.n	8001f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4013      	ands	r3, r2
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	bf14      	ite	ne
 8001f6a:	2301      	movne	r3, #1
 8001f6c:	2300      	moveq	r3, #0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	e00b      	b.n	8001f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	43da      	mvns	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf14      	ite	ne
 8001f84:	2301      	movne	r3, #1
 8001f86:	2300      	moveq	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d18d      	bne.n	8001eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fa4:	e02d      	b.n	8002002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 f878 	bl	800209c <I2C_IsAcknowledgeFailed>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e02d      	b.n	8002012 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbc:	d021      	beq.n	8002002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fbe:	f7ff f847 	bl	8001050 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d302      	bcc.n	8001fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d116      	bne.n	8002002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f043 0220 	orr.w	r2, r3, #32
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e007      	b.n	8002012 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200c:	2b80      	cmp	r3, #128	; 0x80
 800200e:	d1ca      	bne.n	8001fa6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002026:	e02d      	b.n	8002084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 f837 	bl	800209c <I2C_IsAcknowledgeFailed>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e02d      	b.n	8002094 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203e:	d021      	beq.n	8002084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002040:	f7ff f806 	bl	8001050 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	429a      	cmp	r2, r3
 800204e:	d302      	bcc.n	8002056 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d116      	bne.n	8002084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2220      	movs	r2, #32
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	f043 0220 	orr.w	r2, r3, #32
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e007      	b.n	8002094 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	2b04      	cmp	r3, #4
 8002090:	d1ca      	bne.n	8002028 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b2:	d11b      	bne.n	80020ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f043 0204 	orr.w	r2, r3, #4
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b20      	cmp	r3, #32
 800210e:	d129      	bne.n	8002164 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2224      	movs	r2, #36	; 0x24
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0201 	bic.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0210 	bic.w	r2, r2, #16
 8002136:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	e000      	b.n	8002166 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002164:	2302      	movs	r3, #2
  }
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002172:	b480      	push	{r7}
 8002174:	b085      	sub	sp, #20
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b20      	cmp	r3, #32
 800218a:	d12a      	bne.n	80021e2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2224      	movs	r2, #36	; 0x24
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80021ac:	89fb      	ldrh	r3, [r7, #14]
 80021ae:	f023 030f 	bic.w	r3, r3, #15
 80021b2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	89fb      	ldrh	r3, [r7, #14]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	89fa      	ldrh	r2, [r7, #14]
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 0201 	orr.w	r2, r2, #1
 80021d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2220      	movs	r2, #32
 80021da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80021e2:	2302      	movs	r3, #2
  }
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	603b      	str	r3, [r7, #0]
 80021fe:	4b20      	ldr	r3, [pc, #128]	; (8002280 <HAL_PWREx_EnableOverDrive+0x90>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a1f      	ldr	r2, [pc, #124]	; (8002280 <HAL_PWREx_EnableOverDrive+0x90>)
 8002204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <HAL_PWREx_EnableOverDrive+0x90>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002216:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_PWREx_EnableOverDrive+0x94>)
 8002218:	2201      	movs	r2, #1
 800221a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800221c:	f7fe ff18 	bl	8001050 <HAL_GetTick>
 8002220:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002222:	e009      	b.n	8002238 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002224:	f7fe ff14 	bl	8001050 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002232:	d901      	bls.n	8002238 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e01f      	b.n	8002278 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002238:	4b13      	ldr	r3, [pc, #76]	; (8002288 <HAL_PWREx_EnableOverDrive+0x98>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002244:	d1ee      	bne.n	8002224 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002246:	4b11      	ldr	r3, [pc, #68]	; (800228c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002248:	2201      	movs	r2, #1
 800224a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800224c:	f7fe ff00 	bl	8001050 <HAL_GetTick>
 8002250:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002252:	e009      	b.n	8002268 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002254:	f7fe fefc 	bl	8001050 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002262:	d901      	bls.n	8002268 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e007      	b.n	8002278 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <HAL_PWREx_EnableOverDrive+0x98>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002270:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002274:	d1ee      	bne.n	8002254 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40023800 	.word	0x40023800
 8002284:	420e0040 	.word	0x420e0040
 8002288:	40007000 	.word	0x40007000
 800228c:	420e0044 	.word	0x420e0044

08002290 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e267      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d075      	beq.n	800239a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ae:	4b88      	ldr	r3, [pc, #544]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d00c      	beq.n	80022d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ba:	4b85      	ldr	r3, [pc, #532]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d112      	bne.n	80022ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c6:	4b82      	ldr	r3, [pc, #520]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022d2:	d10b      	bne.n	80022ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d4:	4b7e      	ldr	r3, [pc, #504]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d05b      	beq.n	8002398 <HAL_RCC_OscConfig+0x108>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d157      	bne.n	8002398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e242      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f4:	d106      	bne.n	8002304 <HAL_RCC_OscConfig+0x74>
 80022f6:	4b76      	ldr	r3, [pc, #472]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a75      	ldr	r2, [pc, #468]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e01d      	b.n	8002340 <HAL_RCC_OscConfig+0xb0>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800230c:	d10c      	bne.n	8002328 <HAL_RCC_OscConfig+0x98>
 800230e:	4b70      	ldr	r3, [pc, #448]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a6f      	ldr	r2, [pc, #444]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 8002314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b6d      	ldr	r3, [pc, #436]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a6c      	ldr	r2, [pc, #432]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 8002320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e00b      	b.n	8002340 <HAL_RCC_OscConfig+0xb0>
 8002328:	4b69      	ldr	r3, [pc, #420]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a68      	ldr	r2, [pc, #416]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 800232e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b66      	ldr	r3, [pc, #408]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a65      	ldr	r2, [pc, #404]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 800233a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800233e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d013      	beq.n	8002370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7fe fe82 	bl	8001050 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002350:	f7fe fe7e 	bl	8001050 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e207      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	4b5b      	ldr	r3, [pc, #364]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0xc0>
 800236e:	e014      	b.n	800239a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7fe fe6e 	bl	8001050 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002378:	f7fe fe6a 	bl	8001050 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	; 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e1f3      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238a:	4b51      	ldr	r3, [pc, #324]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0xe8>
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d063      	beq.n	800246e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023a6:	4b4a      	ldr	r3, [pc, #296]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00b      	beq.n	80023ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023b2:	4b47      	ldr	r3, [pc, #284]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d11c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023be:	4b44      	ldr	r3, [pc, #272]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d116      	bne.n	80023f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ca:	4b41      	ldr	r3, [pc, #260]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_RCC_OscConfig+0x152>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e1c7      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e2:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4937      	ldr	r1, [pc, #220]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f6:	e03a      	b.n	800246e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d020      	beq.n	8002442 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002400:	4b34      	ldr	r3, [pc, #208]	; (80024d4 <HAL_RCC_OscConfig+0x244>)
 8002402:	2201      	movs	r2, #1
 8002404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002406:	f7fe fe23 	bl	8001050 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800240e:	f7fe fe1f 	bl	8001050 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e1a8      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002420:	4b2b      	ldr	r3, [pc, #172]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242c:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4925      	ldr	r1, [pc, #148]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]
 8002440:	e015      	b.n	800246e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002442:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <HAL_RCC_OscConfig+0x244>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7fe fe02 	bl	8001050 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002450:	f7fe fdfe 	bl	8001050 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e187      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002462:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d036      	beq.n	80024e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d016      	beq.n	80024b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_RCC_OscConfig+0x248>)
 8002484:	2201      	movs	r2, #1
 8002486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002488:	f7fe fde2 	bl	8001050 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002490:	f7fe fdde 	bl	8001050 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e167      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80024a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x200>
 80024ae:	e01b      	b.n	80024e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_RCC_OscConfig+0x248>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b6:	f7fe fdcb 	bl	8001050 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024bc:	e00e      	b.n	80024dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024be:	f7fe fdc7 	bl	8001050 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d907      	bls.n	80024dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e150      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
 80024d0:	40023800 	.word	0x40023800
 80024d4:	42470000 	.word	0x42470000
 80024d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024dc:	4b88      	ldr	r3, [pc, #544]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 80024de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ea      	bne.n	80024be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 8097 	beq.w	8002624 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fa:	4b81      	ldr	r3, [pc, #516]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10f      	bne.n	8002526 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	4b7d      	ldr	r3, [pc, #500]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a7c      	ldr	r2, [pc, #496]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
 8002516:	4b7a      	ldr	r3, [pc, #488]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002522:	2301      	movs	r3, #1
 8002524:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002526:	4b77      	ldr	r3, [pc, #476]	; (8002704 <HAL_RCC_OscConfig+0x474>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252e:	2b00      	cmp	r3, #0
 8002530:	d118      	bne.n	8002564 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002532:	4b74      	ldr	r3, [pc, #464]	; (8002704 <HAL_RCC_OscConfig+0x474>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a73      	ldr	r2, [pc, #460]	; (8002704 <HAL_RCC_OscConfig+0x474>)
 8002538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253e:	f7fe fd87 	bl	8001050 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002546:	f7fe fd83 	bl	8001050 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e10c      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002558:	4b6a      	ldr	r3, [pc, #424]	; (8002704 <HAL_RCC_OscConfig+0x474>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d106      	bne.n	800257a <HAL_RCC_OscConfig+0x2ea>
 800256c:	4b64      	ldr	r3, [pc, #400]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	4a63      	ldr	r2, [pc, #396]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6713      	str	r3, [r2, #112]	; 0x70
 8002578:	e01c      	b.n	80025b4 <HAL_RCC_OscConfig+0x324>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b05      	cmp	r3, #5
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0x30c>
 8002582:	4b5f      	ldr	r3, [pc, #380]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 8002584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002586:	4a5e      	ldr	r2, [pc, #376]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	6713      	str	r3, [r2, #112]	; 0x70
 800258e:	4b5c      	ldr	r3, [pc, #368]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	4a5b      	ldr	r2, [pc, #364]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6713      	str	r3, [r2, #112]	; 0x70
 800259a:	e00b      	b.n	80025b4 <HAL_RCC_OscConfig+0x324>
 800259c:	4b58      	ldr	r3, [pc, #352]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a0:	4a57      	ldr	r2, [pc, #348]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 80025a2:	f023 0301 	bic.w	r3, r3, #1
 80025a6:	6713      	str	r3, [r2, #112]	; 0x70
 80025a8:	4b55      	ldr	r3, [pc, #340]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	4a54      	ldr	r2, [pc, #336]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 80025ae:	f023 0304 	bic.w	r3, r3, #4
 80025b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d015      	beq.n	80025e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025bc:	f7fe fd48 	bl	8001050 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c2:	e00a      	b.n	80025da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025c4:	f7fe fd44 	bl	8001050 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e0cb      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025da:	4b49      	ldr	r3, [pc, #292]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0ee      	beq.n	80025c4 <HAL_RCC_OscConfig+0x334>
 80025e6:	e014      	b.n	8002612 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e8:	f7fe fd32 	bl	8001050 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f0:	f7fe fd2e 	bl	8001050 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0b5      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002606:	4b3e      	ldr	r3, [pc, #248]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1ee      	bne.n	80025f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002612:	7dfb      	ldrb	r3, [r7, #23]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d105      	bne.n	8002624 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002618:	4b39      	ldr	r3, [pc, #228]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	4a38      	ldr	r2, [pc, #224]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 800261e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002622:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80a1 	beq.w	8002770 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800262e:	4b34      	ldr	r3, [pc, #208]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b08      	cmp	r3, #8
 8002638:	d05c      	beq.n	80026f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d141      	bne.n	80026c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002642:	4b31      	ldr	r3, [pc, #196]	; (8002708 <HAL_RCC_OscConfig+0x478>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7fe fd02 	bl	8001050 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002650:	f7fe fcfe 	bl	8001050 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e087      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002662:	4b27      	ldr	r3, [pc, #156]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69da      	ldr	r2, [r3, #28]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	019b      	lsls	r3, r3, #6
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	3b01      	subs	r3, #1
 8002688:	041b      	lsls	r3, r3, #16
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	061b      	lsls	r3, r3, #24
 8002692:	491b      	ldr	r1, [pc, #108]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002698:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <HAL_RCC_OscConfig+0x478>)
 800269a:	2201      	movs	r2, #1
 800269c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269e:	f7fe fcd7 	bl	8001050 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a6:	f7fe fcd3 	bl	8001050 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e05c      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x416>
 80026c4:	e054      	b.n	8002770 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <HAL_RCC_OscConfig+0x478>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026cc:	f7fe fcc0 	bl	8001050 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d4:	f7fe fcbc 	bl	8001050 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e045      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0x444>
 80026f2:	e03d      	b.n	8002770 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d107      	bne.n	800270c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e038      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
 8002700:	40023800 	.word	0x40023800
 8002704:	40007000 	.word	0x40007000
 8002708:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800270c:	4b1b      	ldr	r3, [pc, #108]	; (800277c <HAL_RCC_OscConfig+0x4ec>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d028      	beq.n	800276c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002724:	429a      	cmp	r2, r3
 8002726:	d121      	bne.n	800276c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002732:	429a      	cmp	r2, r3
 8002734:	d11a      	bne.n	800276c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800273c:	4013      	ands	r3, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002742:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002744:	4293      	cmp	r3, r2
 8002746:	d111      	bne.n	800276c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002752:	085b      	lsrs	r3, r3, #1
 8002754:	3b01      	subs	r3, #1
 8002756:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002758:	429a      	cmp	r2, r3
 800275a:	d107      	bne.n	800276c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800

08002780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0cc      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002794:	4b68      	ldr	r3, [pc, #416]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d90c      	bls.n	80027bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b65      	ldr	r3, [pc, #404]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b63      	ldr	r3, [pc, #396]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0b8      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d020      	beq.n	800280a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027d4:	4b59      	ldr	r3, [pc, #356]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	4a58      	ldr	r2, [pc, #352]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027ec:	4b53      	ldr	r3, [pc, #332]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	4a52      	ldr	r2, [pc, #328]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f8:	4b50      	ldr	r3, [pc, #320]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	494d      	ldr	r1, [pc, #308]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	4313      	orrs	r3, r2
 8002808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d044      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d107      	bne.n	800282e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	4b47      	ldr	r3, [pc, #284]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d119      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e07f      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d003      	beq.n	800283e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800283a:	2b03      	cmp	r3, #3
 800283c:	d107      	bne.n	800284e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283e:	4b3f      	ldr	r3, [pc, #252]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e06f      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284e:	4b3b      	ldr	r3, [pc, #236]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e067      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800285e:	4b37      	ldr	r3, [pc, #220]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f023 0203 	bic.w	r2, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4934      	ldr	r1, [pc, #208]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	4313      	orrs	r3, r2
 800286e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002870:	f7fe fbee 	bl	8001050 <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	e00a      	b.n	800288e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002878:	f7fe fbea 	bl	8001050 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	; 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e04f      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288e:	4b2b      	ldr	r3, [pc, #172]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 020c 	and.w	r2, r3, #12
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	429a      	cmp	r2, r3
 800289e:	d1eb      	bne.n	8002878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028a0:	4b25      	ldr	r3, [pc, #148]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d20c      	bcs.n	80028c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ae:	4b22      	ldr	r3, [pc, #136]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b20      	ldr	r3, [pc, #128]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e032      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4916      	ldr	r1, [pc, #88]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	490e      	ldr	r1, [pc, #56]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002906:	f000 f821 	bl	800294c <HAL_RCC_GetSysClockFreq>
 800290a:	4602      	mov	r2, r0
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	490a      	ldr	r1, [pc, #40]	; (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	5ccb      	ldrb	r3, [r1, r3]
 800291a:	fa22 f303 	lsr.w	r3, r2, r3
 800291e:	4a09      	ldr	r2, [pc, #36]	; (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002922:	4b09      	ldr	r3, [pc, #36]	; (8002948 <HAL_RCC_ClockConfig+0x1c8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fb4e 	bl	8000fc8 <HAL_InitTick>

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023c00 	.word	0x40023c00
 800293c:	40023800 	.word	0x40023800
 8002940:	08004c10 	.word	0x08004c10
 8002944:	20000000 	.word	0x20000000
 8002948:	20000004 	.word	0x20000004

0800294c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800294c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002950:	b090      	sub	sp, #64	; 0x40
 8002952:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	637b      	str	r3, [r7, #52]	; 0x34
 8002958:	2300      	movs	r3, #0
 800295a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800295c:	2300      	movs	r3, #0
 800295e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002964:	4b59      	ldr	r3, [pc, #356]	; (8002acc <HAL_RCC_GetSysClockFreq+0x180>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 030c 	and.w	r3, r3, #12
 800296c:	2b08      	cmp	r3, #8
 800296e:	d00d      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0x40>
 8002970:	2b08      	cmp	r3, #8
 8002972:	f200 80a1 	bhi.w	8002ab8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_RCC_GetSysClockFreq+0x34>
 800297a:	2b04      	cmp	r3, #4
 800297c:	d003      	beq.n	8002986 <HAL_RCC_GetSysClockFreq+0x3a>
 800297e:	e09b      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002980:	4b53      	ldr	r3, [pc, #332]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002982:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002984:	e09b      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002986:	4b53      	ldr	r3, [pc, #332]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002988:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800298a:	e098      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800298c:	4b4f      	ldr	r3, [pc, #316]	; (8002acc <HAL_RCC_GetSysClockFreq+0x180>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002994:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002996:	4b4d      	ldr	r3, [pc, #308]	; (8002acc <HAL_RCC_GetSysClockFreq+0x180>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d028      	beq.n	80029f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a2:	4b4a      	ldr	r3, [pc, #296]	; (8002acc <HAL_RCC_GetSysClockFreq+0x180>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	099b      	lsrs	r3, r3, #6
 80029a8:	2200      	movs	r2, #0
 80029aa:	623b      	str	r3, [r7, #32]
 80029ac:	627a      	str	r2, [r7, #36]	; 0x24
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029b4:	2100      	movs	r1, #0
 80029b6:	4b47      	ldr	r3, [pc, #284]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x188>)
 80029b8:	fb03 f201 	mul.w	r2, r3, r1
 80029bc:	2300      	movs	r3, #0
 80029be:	fb00 f303 	mul.w	r3, r0, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	4a43      	ldr	r2, [pc, #268]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x188>)
 80029c6:	fba0 1202 	umull	r1, r2, r0, r2
 80029ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029cc:	460a      	mov	r2, r1
 80029ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80029d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029d2:	4413      	add	r3, r2
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d8:	2200      	movs	r2, #0
 80029da:	61bb      	str	r3, [r7, #24]
 80029dc:	61fa      	str	r2, [r7, #28]
 80029de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029e6:	f7fd fc5b 	bl	80002a0 <__aeabi_uldivmod>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4613      	mov	r3, r2
 80029f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029f2:	e053      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f4:	4b35      	ldr	r3, [pc, #212]	; (8002acc <HAL_RCC_GetSysClockFreq+0x180>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	099b      	lsrs	r3, r3, #6
 80029fa:	2200      	movs	r2, #0
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	617a      	str	r2, [r7, #20]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a06:	f04f 0b00 	mov.w	fp, #0
 8002a0a:	4652      	mov	r2, sl
 8002a0c:	465b      	mov	r3, fp
 8002a0e:	f04f 0000 	mov.w	r0, #0
 8002a12:	f04f 0100 	mov.w	r1, #0
 8002a16:	0159      	lsls	r1, r3, #5
 8002a18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a1c:	0150      	lsls	r0, r2, #5
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	ebb2 080a 	subs.w	r8, r2, sl
 8002a26:	eb63 090b 	sbc.w	r9, r3, fp
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a3e:	ebb2 0408 	subs.w	r4, r2, r8
 8002a42:	eb63 0509 	sbc.w	r5, r3, r9
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	00eb      	lsls	r3, r5, #3
 8002a50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a54:	00e2      	lsls	r2, r4, #3
 8002a56:	4614      	mov	r4, r2
 8002a58:	461d      	mov	r5, r3
 8002a5a:	eb14 030a 	adds.w	r3, r4, sl
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	eb45 030b 	adc.w	r3, r5, fp
 8002a64:	607b      	str	r3, [r7, #4]
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a72:	4629      	mov	r1, r5
 8002a74:	028b      	lsls	r3, r1, #10
 8002a76:	4621      	mov	r1, r4
 8002a78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a7c:	4621      	mov	r1, r4
 8002a7e:	028a      	lsls	r2, r1, #10
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a86:	2200      	movs	r2, #0
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	60fa      	str	r2, [r7, #12]
 8002a8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a90:	f7fd fc06 	bl	80002a0 <__aeabi_uldivmod>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4613      	mov	r3, r2
 8002a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_RCC_GetSysClockFreq+0x180>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	0c1b      	lsrs	r3, r3, #16
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002aac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ab6:	e002      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002aba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002abc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3740      	adds	r7, #64	; 0x40
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	00f42400 	.word	0x00f42400
 8002ad4:	017d7840 	.word	0x017d7840

08002ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002adc:	4b03      	ldr	r3, [pc, #12]	; (8002aec <HAL_RCC_GetHCLKFreq+0x14>)
 8002ade:	681b      	ldr	r3, [r3, #0]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	20000000 	.word	0x20000000

08002af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002af4:	f7ff fff0 	bl	8002ad8 <HAL_RCC_GetHCLKFreq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	0a9b      	lsrs	r3, r3, #10
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	4903      	ldr	r1, [pc, #12]	; (8002b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40023800 	.word	0x40023800
 8002b14:	08004c20 	.word	0x08004c20

08002b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b1c:	f7ff ffdc 	bl	8002ad8 <HAL_RCC_GetHCLKFreq>
 8002b20:	4602      	mov	r2, r0
 8002b22:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	0b5b      	lsrs	r3, r3, #13
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	4903      	ldr	r1, [pc, #12]	; (8002b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b2e:	5ccb      	ldrb	r3, [r1, r3]
 8002b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	08004c20 	.word	0x08004c20

08002b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10b      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d105      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d075      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b74:	4b91      	ldr	r3, [pc, #580]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b7a:	f7fe fa69 	bl	8001050 <HAL_GetTick>
 8002b7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b82:	f7fe fa65 	bl	8001050 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e189      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b94:	4b8a      	ldr	r3, [pc, #552]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f0      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d009      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	019a      	lsls	r2, r3, #6
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	071b      	lsls	r3, r3, #28
 8002bb8:	4981      	ldr	r1, [pc, #516]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d01f      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bcc:	4b7c      	ldr	r3, [pc, #496]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd2:	0f1b      	lsrs	r3, r3, #28
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	019a      	lsls	r2, r3, #6
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	431a      	orrs	r2, r3
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	071b      	lsls	r3, r3, #28
 8002bec:	4974      	ldr	r1, [pc, #464]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bf4:	4b72      	ldr	r3, [pc, #456]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bfa:	f023 021f 	bic.w	r2, r3, #31
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	496e      	ldr	r1, [pc, #440]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00d      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	019a      	lsls	r2, r3, #6
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	061b      	lsls	r3, r3, #24
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	071b      	lsls	r3, r3, #28
 8002c2c:	4964      	ldr	r1, [pc, #400]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c34:	4b61      	ldr	r3, [pc, #388]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c3a:	f7fe fa09 	bl	8001050 <HAL_GetTick>
 8002c3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c40:	e008      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c42:	f7fe fa05 	bl	8001050 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e129      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c54:	4b5a      	ldr	r3, [pc, #360]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d105      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d079      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c78:	4b52      	ldr	r3, [pc, #328]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c7e:	f7fe f9e7 	bl	8001050 <HAL_GetTick>
 8002c82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c84:	e008      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c86:	f7fe f9e3 	bl	8001050 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e107      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c98:	4b49      	ldr	r3, [pc, #292]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ca4:	d0ef      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d020      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cb2:	4b43      	ldr	r3, [pc, #268]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb8:	0f1b      	lsrs	r3, r3, #28
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	019a      	lsls	r2, r3, #6
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	061b      	lsls	r3, r3, #24
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	071b      	lsls	r3, r3, #28
 8002cd2:	493b      	ldr	r1, [pc, #236]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002cda:	4b39      	ldr	r3, [pc, #228]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ce0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	4934      	ldr	r1, [pc, #208]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d01e      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d00:	4b2f      	ldr	r3, [pc, #188]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d06:	0e1b      	lsrs	r3, r3, #24
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	019a      	lsls	r2, r3, #6
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	061b      	lsls	r3, r3, #24
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	071b      	lsls	r3, r3, #28
 8002d20:	4927      	ldr	r1, [pc, #156]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d28:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	4922      	ldr	r1, [pc, #136]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d3e:	4b21      	ldr	r3, [pc, #132]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d44:	f7fe f984 	bl	8001050 <HAL_GetTick>
 8002d48:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002d4c:	f7fe f980 	bl	8001050 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e0a4      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d5e:	4b18      	ldr	r3, [pc, #96]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d6a:	d1ef      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 808b 	beq.w	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	4a0f      	ldr	r2, [pc, #60]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d88:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d96:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a0b      	ldr	r2, [pc, #44]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002da2:	f7fe f955 	bl	8001050 <HAL_GetTick>
 8002da6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002da8:	e010      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002daa:	f7fe f951 	bl	8001050 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d909      	bls.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e075      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002dbc:	42470068 	.word	0x42470068
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	42470070 	.word	0x42470070
 8002dc8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002dcc:	4b38      	ldr	r3, [pc, #224]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0e8      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dd8:	4b36      	ldr	r3, [pc, #216]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d02f      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d028      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002df6:	4b2f      	ldr	r3, [pc, #188]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dfe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e00:	4b2d      	ldr	r3, [pc, #180]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e06:	4b2c      	ldr	r3, [pc, #176]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e0c:	4a29      	ldr	r2, [pc, #164]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e12:	4b28      	ldr	r3, [pc, #160]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d114      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002e1e:	f7fe f917 	bl	8001050 <HAL_GetTick>
 8002e22:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e24:	e00a      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e26:	f7fe f913 	bl	8001050 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e035      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0ee      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e54:	d10d      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002e56:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e6a:	4912      	ldr	r1, [pc, #72]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	608b      	str	r3, [r1, #8]
 8002e70:	e005      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8002e72:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	4a0f      	ldr	r2, [pc, #60]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002e78:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e7c:	6093      	str	r3, [r2, #8]
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002e80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8a:	490a      	ldr	r1, [pc, #40]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d004      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002ea2:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8002ea4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40007000 	.word	0x40007000
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	42470e40 	.word	0x42470e40
 8002ebc:	424711e0 	.word	0x424711e0

08002ec0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e066      	b.n	8002fa4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	7f5b      	ldrb	r3, [r3, #29]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d105      	bne.n	8002eec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fd fe7e 	bl	8000be8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	22ca      	movs	r2, #202	; 0xca
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2253      	movs	r2, #83	; 0x53
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fa45 	bl	8003392 <RTC_EnterInitMode>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d12c      	bne.n	8002f6c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f24:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6899      	ldr	r1, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	68d2      	ldr	r2, [r2, #12]
 8002f4c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6919      	ldr	r1, [r3, #16]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	041a      	lsls	r2, r3, #16
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fa4c 	bl	8003400 <RTC_ExitInitMode>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d113      	bne.n	8002f9a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699a      	ldr	r2, [r3, #24]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	22ff      	movs	r2, #255	; 0xff
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002fac:	b590      	push	{r4, r7, lr}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	7f1b      	ldrb	r3, [r3, #28]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RTC_SetTime+0x1c>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e087      	b.n	80030d8 <HAL_RTC_SetTime+0x12c>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d126      	bne.n	8003028 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d102      	bne.n	8002fee <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2200      	movs	r2, #0
 8002fec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fa29 	bl	800344a <RTC_ByteToBcd2>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	785b      	ldrb	r3, [r3, #1]
 8003000:	4618      	mov	r0, r3
 8003002:	f000 fa22 	bl	800344a <RTC_ByteToBcd2>
 8003006:	4603      	mov	r3, r0
 8003008:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800300a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	789b      	ldrb	r3, [r3, #2]
 8003010:	4618      	mov	r0, r3
 8003012:	f000 fa1a 	bl	800344a <RTC_ByteToBcd2>
 8003016:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003018:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	78db      	ldrb	r3, [r3, #3]
 8003020:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003022:	4313      	orrs	r3, r2
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	e018      	b.n	800305a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	d102      	bne.n	800303c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2200      	movs	r2, #0
 800303a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	785b      	ldrb	r3, [r3, #1]
 8003046:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003048:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800304e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	78db      	ldrb	r3, [r3, #3]
 8003054:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	22ca      	movs	r2, #202	; 0xca
 8003060:	625a      	str	r2, [r3, #36]	; 0x24
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2253      	movs	r2, #83	; 0x53
 8003068:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f991 	bl	8003392 <RTC_EnterInitMode>
 8003070:	4603      	mov	r3, r0
 8003072:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003074:	7cfb      	ldrb	r3, [r7, #19]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d120      	bne.n	80030bc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003084:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003088:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003098:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6899      	ldr	r1, [r3, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f9a4 	bl	8003400 <RTC_ExitInitMode>
 80030b8:	4603      	mov	r3, r0
 80030ba:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d102      	bne.n	80030c8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	22ff      	movs	r2, #255	; 0xff
 80030ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	771a      	strb	r2, [r3, #28]

  return status;
 80030d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	371c      	adds	r7, #28
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd90      	pop	{r4, r7, pc}

080030e0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003112:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003116:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	0c1b      	lsrs	r3, r3, #16
 800311c:	b2db      	uxtb	r3, r3
 800311e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003122:	b2da      	uxtb	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	0a1b      	lsrs	r3, r3, #8
 800312c:	b2db      	uxtb	r3, r3
 800312e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003132:	b2da      	uxtb	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003140:	b2da      	uxtb	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	0d9b      	lsrs	r3, r3, #22
 800314a:	b2db      	uxtb	r3, r3
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	b2da      	uxtb	r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d11a      	bne.n	8003192 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f000 f98f 	bl	8003484 <RTC_Bcd2ToByte>
 8003166:	4603      	mov	r3, r0
 8003168:	461a      	mov	r2, r3
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	785b      	ldrb	r3, [r3, #1]
 8003172:	4618      	mov	r0, r3
 8003174:	f000 f986 	bl	8003484 <RTC_Bcd2ToByte>
 8003178:	4603      	mov	r3, r0
 800317a:	461a      	mov	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	789b      	ldrb	r3, [r3, #2]
 8003184:	4618      	mov	r0, r3
 8003186:	f000 f97d 	bl	8003484 <RTC_Bcd2ToByte>
 800318a:	4603      	mov	r3, r0
 800318c:	461a      	mov	r2, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800319c:	b590      	push	{r4, r7, lr}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	7f1b      	ldrb	r3, [r3, #28]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_RTC_SetDate+0x1c>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e071      	b.n	800329c <HAL_RTC_SetDate+0x100>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2202      	movs	r2, #2
 80031c2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10e      	bne.n	80031e8 <HAL_RTC_SetDate+0x4c>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	785b      	ldrb	r3, [r3, #1]
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d008      	beq.n	80031e8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	785b      	ldrb	r3, [r3, #1]
 80031da:	f023 0310 	bic.w	r3, r3, #16
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	330a      	adds	r3, #10
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d11c      	bne.n	8003228 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	78db      	ldrb	r3, [r3, #3]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f929 	bl	800344a <RTC_ByteToBcd2>
 80031f8:	4603      	mov	r3, r0
 80031fa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	785b      	ldrb	r3, [r3, #1]
 8003200:	4618      	mov	r0, r3
 8003202:	f000 f922 	bl	800344a <RTC_ByteToBcd2>
 8003206:	4603      	mov	r3, r0
 8003208:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800320a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	789b      	ldrb	r3, [r3, #2]
 8003210:	4618      	mov	r0, r3
 8003212:	f000 f91a 	bl	800344a <RTC_ByteToBcd2>
 8003216:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003218:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003222:	4313      	orrs	r3, r2
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	e00e      	b.n	8003246 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	78db      	ldrb	r3, [r3, #3]
 800322c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	785b      	ldrb	r3, [r3, #1]
 8003232:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003234:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800323a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	22ca      	movs	r2, #202	; 0xca
 800324c:	625a      	str	r2, [r3, #36]	; 0x24
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2253      	movs	r2, #83	; 0x53
 8003254:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f89b 	bl	8003392 <RTC_EnterInitMode>
 800325c:	4603      	mov	r3, r0
 800325e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003260:	7cfb      	ldrb	r3, [r7, #19]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10c      	bne.n	8003280 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003270:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003274:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 f8c2 	bl	8003400 <RTC_ExitInitMode>
 800327c:	4603      	mov	r3, r0
 800327e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003280:	7cfb      	ldrb	r3, [r7, #19]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d102      	bne.n	800328c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	22ff      	movs	r2, #255	; 0xff
 8003292:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	771a      	strb	r2, [r3, #28]

  return status;
 800329a:	7cfb      	ldrb	r3, [r7, #19]
}
 800329c:	4618      	mov	r0, r3
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd90      	pop	{r4, r7, pc}

080032a4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80032be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80032c2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	0c1b      	lsrs	r3, r3, #16
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	0a1b      	lsrs	r3, r3, #8
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	0b5b      	lsrs	r3, r3, #13
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d11a      	bne.n	8003338 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	78db      	ldrb	r3, [r3, #3]
 8003306:	4618      	mov	r0, r3
 8003308:	f000 f8bc 	bl	8003484 <RTC_Bcd2ToByte>
 800330c:	4603      	mov	r3, r0
 800330e:	461a      	mov	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	785b      	ldrb	r3, [r3, #1]
 8003318:	4618      	mov	r0, r3
 800331a:	f000 f8b3 	bl	8003484 <RTC_Bcd2ToByte>
 800331e:	4603      	mov	r3, r0
 8003320:	461a      	mov	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	789b      	ldrb	r3, [r3, #2]
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f8aa 	bl	8003484 <RTC_Bcd2ToByte>
 8003330:	4603      	mov	r3, r0
 8003332:	461a      	mov	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800335c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800335e:	f7fd fe77 	bl	8001050 <HAL_GetTick>
 8003362:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003364:	e009      	b.n	800337a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003366:	f7fd fe73 	bl	8001050 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003374:	d901      	bls.n	800337a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e007      	b.n	800338a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ee      	beq.n	8003366 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d122      	bne.n	80033f6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033be:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033c0:	f7fd fe46 	bl	8001050 <HAL_GetTick>
 80033c4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80033c6:	e00c      	b.n	80033e2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80033c8:	f7fd fe42 	bl	8001050 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033d6:	d904      	bls.n	80033e2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2204      	movs	r2, #4
 80033dc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d102      	bne.n	80033f6 <RTC_EnterInitMode+0x64>
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d1e8      	bne.n	80033c8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003408:	2300      	movs	r3, #0
 800340a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800341a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10a      	bne.n	8003440 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff ff89 	bl	8003342 <HAL_RTC_WaitForSynchro>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d004      	beq.n	8003440 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2204      	movs	r2, #4
 800343a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003440:	7bfb      	ldrb	r3, [r7, #15]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800344a:	b480      	push	{r7}
 800344c:	b085      	sub	sp, #20
 800344e:	af00      	add	r7, sp, #0
 8003450:	4603      	mov	r3, r0
 8003452:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003458:	e005      	b.n	8003466 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	3301      	adds	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	3b0a      	subs	r3, #10
 8003464:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	2b09      	cmp	r3, #9
 800346a:	d8f6      	bhi.n	800345a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	b2da      	uxtb	r2, r3
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	4313      	orrs	r3, r2
 8003476:	b2db      	uxtb	r3, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	091b      	lsrs	r3, r3, #4
 8003496:	b2db      	uxtb	r3, r3
 8003498:	461a      	mov	r2, r3
 800349a:	0092      	lsls	r2, r2, #2
 800349c:	4413      	add	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	4413      	add	r3, r2
 80034ae:	b2db      	uxtb	r3, r3
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e041      	b.n	8003552 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d106      	bne.n	80034e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7fd fc92 	bl	8000e0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	4619      	mov	r1, r3
 80034fa:	4610      	mov	r0, r2
 80034fc:	f000 f8f4 	bl	80036e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_TIM_ConfigClockSource+0x1c>
 8003572:	2302      	movs	r3, #2
 8003574:	e0b4      	b.n	80036e0 <HAL_TIM_ConfigClockSource+0x186>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2202      	movs	r2, #2
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003594:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800359c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ae:	d03e      	beq.n	800362e <HAL_TIM_ConfigClockSource+0xd4>
 80035b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035b4:	f200 8087 	bhi.w	80036c6 <HAL_TIM_ConfigClockSource+0x16c>
 80035b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035bc:	f000 8086 	beq.w	80036cc <HAL_TIM_ConfigClockSource+0x172>
 80035c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c4:	d87f      	bhi.n	80036c6 <HAL_TIM_ConfigClockSource+0x16c>
 80035c6:	2b70      	cmp	r3, #112	; 0x70
 80035c8:	d01a      	beq.n	8003600 <HAL_TIM_ConfigClockSource+0xa6>
 80035ca:	2b70      	cmp	r3, #112	; 0x70
 80035cc:	d87b      	bhi.n	80036c6 <HAL_TIM_ConfigClockSource+0x16c>
 80035ce:	2b60      	cmp	r3, #96	; 0x60
 80035d0:	d050      	beq.n	8003674 <HAL_TIM_ConfigClockSource+0x11a>
 80035d2:	2b60      	cmp	r3, #96	; 0x60
 80035d4:	d877      	bhi.n	80036c6 <HAL_TIM_ConfigClockSource+0x16c>
 80035d6:	2b50      	cmp	r3, #80	; 0x50
 80035d8:	d03c      	beq.n	8003654 <HAL_TIM_ConfigClockSource+0xfa>
 80035da:	2b50      	cmp	r3, #80	; 0x50
 80035dc:	d873      	bhi.n	80036c6 <HAL_TIM_ConfigClockSource+0x16c>
 80035de:	2b40      	cmp	r3, #64	; 0x40
 80035e0:	d058      	beq.n	8003694 <HAL_TIM_ConfigClockSource+0x13a>
 80035e2:	2b40      	cmp	r3, #64	; 0x40
 80035e4:	d86f      	bhi.n	80036c6 <HAL_TIM_ConfigClockSource+0x16c>
 80035e6:	2b30      	cmp	r3, #48	; 0x30
 80035e8:	d064      	beq.n	80036b4 <HAL_TIM_ConfigClockSource+0x15a>
 80035ea:	2b30      	cmp	r3, #48	; 0x30
 80035ec:	d86b      	bhi.n	80036c6 <HAL_TIM_ConfigClockSource+0x16c>
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	d060      	beq.n	80036b4 <HAL_TIM_ConfigClockSource+0x15a>
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	d867      	bhi.n	80036c6 <HAL_TIM_ConfigClockSource+0x16c>
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d05c      	beq.n	80036b4 <HAL_TIM_ConfigClockSource+0x15a>
 80035fa:	2b10      	cmp	r3, #16
 80035fc:	d05a      	beq.n	80036b4 <HAL_TIM_ConfigClockSource+0x15a>
 80035fe:	e062      	b.n	80036c6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	6899      	ldr	r1, [r3, #8]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f000 f984 	bl	800391c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003622:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	609a      	str	r2, [r3, #8]
      break;
 800362c:	e04f      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	6899      	ldr	r1, [r3, #8]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f000 f96d 	bl	800391c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003650:	609a      	str	r2, [r3, #8]
      break;
 8003652:	e03c      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	6859      	ldr	r1, [r3, #4]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	461a      	mov	r2, r3
 8003662:	f000 f8e1 	bl	8003828 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2150      	movs	r1, #80	; 0x50
 800366c:	4618      	mov	r0, r3
 800366e:	f000 f93a 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 8003672:	e02c      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	6859      	ldr	r1, [r3, #4]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	461a      	mov	r2, r3
 8003682:	f000 f900 	bl	8003886 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2160      	movs	r1, #96	; 0x60
 800368c:	4618      	mov	r0, r3
 800368e:	f000 f92a 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 8003692:	e01c      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6818      	ldr	r0, [r3, #0]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	6859      	ldr	r1, [r3, #4]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	461a      	mov	r2, r3
 80036a2:	f000 f8c1 	bl	8003828 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2140      	movs	r1, #64	; 0x40
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 f91a 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 80036b2:	e00c      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4619      	mov	r1, r3
 80036be:	4610      	mov	r0, r2
 80036c0:	f000 f911 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 80036c4:	e003      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	73fb      	strb	r3, [r7, #15]
      break;
 80036ca:	e000      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036de:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a40      	ldr	r2, [pc, #256]	; (80037fc <TIM_Base_SetConfig+0x114>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d013      	beq.n	8003728 <TIM_Base_SetConfig+0x40>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003706:	d00f      	beq.n	8003728 <TIM_Base_SetConfig+0x40>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a3d      	ldr	r2, [pc, #244]	; (8003800 <TIM_Base_SetConfig+0x118>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00b      	beq.n	8003728 <TIM_Base_SetConfig+0x40>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a3c      	ldr	r2, [pc, #240]	; (8003804 <TIM_Base_SetConfig+0x11c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d007      	beq.n	8003728 <TIM_Base_SetConfig+0x40>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a3b      	ldr	r2, [pc, #236]	; (8003808 <TIM_Base_SetConfig+0x120>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d003      	beq.n	8003728 <TIM_Base_SetConfig+0x40>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a3a      	ldr	r2, [pc, #232]	; (800380c <TIM_Base_SetConfig+0x124>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d108      	bne.n	800373a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a2f      	ldr	r2, [pc, #188]	; (80037fc <TIM_Base_SetConfig+0x114>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d02b      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003748:	d027      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a2c      	ldr	r2, [pc, #176]	; (8003800 <TIM_Base_SetConfig+0x118>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d023      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a2b      	ldr	r2, [pc, #172]	; (8003804 <TIM_Base_SetConfig+0x11c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d01f      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a2a      	ldr	r2, [pc, #168]	; (8003808 <TIM_Base_SetConfig+0x120>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d01b      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a29      	ldr	r2, [pc, #164]	; (800380c <TIM_Base_SetConfig+0x124>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d017      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a28      	ldr	r2, [pc, #160]	; (8003810 <TIM_Base_SetConfig+0x128>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d013      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a27      	ldr	r2, [pc, #156]	; (8003814 <TIM_Base_SetConfig+0x12c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00f      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a26      	ldr	r2, [pc, #152]	; (8003818 <TIM_Base_SetConfig+0x130>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00b      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a25      	ldr	r2, [pc, #148]	; (800381c <TIM_Base_SetConfig+0x134>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d007      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a24      	ldr	r2, [pc, #144]	; (8003820 <TIM_Base_SetConfig+0x138>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d003      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a23      	ldr	r2, [pc, #140]	; (8003824 <TIM_Base_SetConfig+0x13c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d108      	bne.n	80037ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a0a      	ldr	r2, [pc, #40]	; (80037fc <TIM_Base_SetConfig+0x114>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d003      	beq.n	80037e0 <TIM_Base_SetConfig+0xf8>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a0c      	ldr	r2, [pc, #48]	; (800380c <TIM_Base_SetConfig+0x124>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d103      	bne.n	80037e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	615a      	str	r2, [r3, #20]
}
 80037ee:	bf00      	nop
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40010000 	.word	0x40010000
 8003800:	40000400 	.word	0x40000400
 8003804:	40000800 	.word	0x40000800
 8003808:	40000c00 	.word	0x40000c00
 800380c:	40010400 	.word	0x40010400
 8003810:	40014000 	.word	0x40014000
 8003814:	40014400 	.word	0x40014400
 8003818:	40014800 	.word	0x40014800
 800381c:	40001800 	.word	0x40001800
 8003820:	40001c00 	.word	0x40001c00
 8003824:	40002000 	.word	0x40002000

08003828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	f023 0201 	bic.w	r2, r3, #1
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f023 030a 	bic.w	r3, r3, #10
 8003864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4313      	orrs	r3, r2
 800386c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	621a      	str	r2, [r3, #32]
}
 800387a:	bf00      	nop
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003886:	b480      	push	{r7}
 8003888:	b087      	sub	sp, #28
 800388a:	af00      	add	r7, sp, #0
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f023 0210 	bic.w	r2, r3, #16
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	031b      	lsls	r3, r3, #12
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	621a      	str	r2, [r3, #32]
}
 80038da:	bf00      	nop
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b085      	sub	sp, #20
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	f043 0307 	orr.w	r3, r3, #7
 8003908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	609a      	str	r2, [r3, #8]
}
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	021a      	lsls	r2, r3, #8
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	431a      	orrs	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4313      	orrs	r3, r2
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	609a      	str	r2, [r3, #8]
}
 8003950:	bf00      	nop
 8003952:	371c      	adds	r7, #28
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003970:	2302      	movs	r3, #2
 8003972:	e05a      	b.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a21      	ldr	r2, [pc, #132]	; (8003a38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d022      	beq.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c0:	d01d      	beq.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1d      	ldr	r2, [pc, #116]	; (8003a3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d018      	beq.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1b      	ldr	r2, [pc, #108]	; (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d013      	beq.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1a      	ldr	r2, [pc, #104]	; (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d00e      	beq.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a18      	ldr	r2, [pc, #96]	; (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d009      	beq.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a17      	ldr	r2, [pc, #92]	; (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d004      	beq.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a15      	ldr	r2, [pc, #84]	; (8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d10c      	bne.n	8003a18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40010000 	.word	0x40010000
 8003a3c:	40000400 	.word	0x40000400
 8003a40:	40000800 	.word	0x40000800
 8003a44:	40000c00 	.word	0x40000c00
 8003a48:	40010400 	.word	0x40010400
 8003a4c:	40014000 	.word	0x40014000
 8003a50:	40001800 	.word	0x40001800

08003a54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e03f      	b.n	8003ae6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fd fa10 	bl	8000ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2224      	movs	r2, #36	; 0x24
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f929 	bl	8003cf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695a      	ldr	r2, [r3, #20]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003abc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003acc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b08a      	sub	sp, #40	; 0x28
 8003af2:	af02      	add	r7, sp, #8
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	4613      	mov	r3, r2
 8003afc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	d17c      	bne.n	8003c08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <HAL_UART_Transmit+0x2c>
 8003b14:	88fb      	ldrh	r3, [r7, #6]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e075      	b.n	8003c0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_UART_Transmit+0x3e>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e06e      	b.n	8003c0a <HAL_UART_Transmit+0x11c>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2221      	movs	r2, #33	; 0x21
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b42:	f7fd fa85 	bl	8001050 <HAL_GetTick>
 8003b46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	88fa      	ldrh	r2, [r7, #6]
 8003b4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	88fa      	ldrh	r2, [r7, #6]
 8003b52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b5c:	d108      	bne.n	8003b70 <HAL_UART_Transmit+0x82>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d104      	bne.n	8003b70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	e003      	b.n	8003b78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b80:	e02a      	b.n	8003bd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2180      	movs	r1, #128	; 0x80
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f840 	bl	8003c12 <UART_WaitOnFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e036      	b.n	8003c0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10b      	bne.n	8003bba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	61bb      	str	r3, [r7, #24]
 8003bb8:	e007      	b.n	8003bca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	781a      	ldrb	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1cf      	bne.n	8003b82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2200      	movs	r2, #0
 8003bea:	2140      	movs	r1, #64	; 0x40
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f810 	bl	8003c12 <UART_WaitOnFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e006      	b.n	8003c0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	e000      	b.n	8003c0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c08:	2302      	movs	r3, #2
  }
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b090      	sub	sp, #64	; 0x40
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	603b      	str	r3, [r7, #0]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c22:	e050      	b.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2a:	d04c      	beq.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d007      	beq.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c32:	f7fd fa0d 	bl	8001050 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d241      	bcs.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	330c      	adds	r3, #12
 8003c48:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	330c      	adds	r3, #12
 8003c60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c62:	637a      	str	r2, [r7, #52]	; 0x34
 8003c64:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e5      	bne.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3314      	adds	r3, #20
 8003c7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	e853 3f00 	ldrex	r3, [r3]
 8003c84:	613b      	str	r3, [r7, #16]
   return(result);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f023 0301 	bic.w	r3, r3, #1
 8003c8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3314      	adds	r3, #20
 8003c94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c96:	623a      	str	r2, [r7, #32]
 8003c98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	69f9      	ldr	r1, [r7, #28]
 8003c9c:	6a3a      	ldr	r2, [r7, #32]
 8003c9e:	e841 2300 	strex	r3, r2, [r1]
 8003ca2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e5      	bne.n	8003c76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e00f      	b.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	bf0c      	ite	eq
 8003cd6:	2301      	moveq	r3, #1
 8003cd8:	2300      	movne	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	461a      	mov	r2, r3
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d09f      	beq.n	8003c24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3740      	adds	r7, #64	; 0x40
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cf4:	b0c0      	sub	sp, #256	; 0x100
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0c:	68d9      	ldr	r1, [r3, #12]
 8003d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	ea40 0301 	orr.w	r3, r0, r1
 8003d18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d48:	f021 010c 	bic.w	r1, r1, #12
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d56:	430b      	orrs	r3, r1
 8003d58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6a:	6999      	ldr	r1, [r3, #24]
 8003d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	ea40 0301 	orr.w	r3, r0, r1
 8003d76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	4b8f      	ldr	r3, [pc, #572]	; (8003fbc <UART_SetConfig+0x2cc>)
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d005      	beq.n	8003d90 <UART_SetConfig+0xa0>
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4b8d      	ldr	r3, [pc, #564]	; (8003fc0 <UART_SetConfig+0x2d0>)
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d104      	bne.n	8003d9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d90:	f7fe fec2 	bl	8002b18 <HAL_RCC_GetPCLK2Freq>
 8003d94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d98:	e003      	b.n	8003da2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d9a:	f7fe fea9 	bl	8002af0 <HAL_RCC_GetPCLK1Freq>
 8003d9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dac:	f040 810c 	bne.w	8003fc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003db4:	2200      	movs	r2, #0
 8003db6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003dba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003dbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003dc2:	4622      	mov	r2, r4
 8003dc4:	462b      	mov	r3, r5
 8003dc6:	1891      	adds	r1, r2, r2
 8003dc8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003dca:	415b      	adcs	r3, r3
 8003dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	eb12 0801 	adds.w	r8, r2, r1
 8003dd8:	4629      	mov	r1, r5
 8003dda:	eb43 0901 	adc.w	r9, r3, r1
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003df2:	4690      	mov	r8, r2
 8003df4:	4699      	mov	r9, r3
 8003df6:	4623      	mov	r3, r4
 8003df8:	eb18 0303 	adds.w	r3, r8, r3
 8003dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e00:	462b      	mov	r3, r5
 8003e02:	eb49 0303 	adc.w	r3, r9, r3
 8003e06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e1e:	460b      	mov	r3, r1
 8003e20:	18db      	adds	r3, r3, r3
 8003e22:	653b      	str	r3, [r7, #80]	; 0x50
 8003e24:	4613      	mov	r3, r2
 8003e26:	eb42 0303 	adc.w	r3, r2, r3
 8003e2a:	657b      	str	r3, [r7, #84]	; 0x54
 8003e2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e34:	f7fc fa34 	bl	80002a0 <__aeabi_uldivmod>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4b61      	ldr	r3, [pc, #388]	; (8003fc4 <UART_SetConfig+0x2d4>)
 8003e3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	011c      	lsls	r4, r3, #4
 8003e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e58:	4642      	mov	r2, r8
 8003e5a:	464b      	mov	r3, r9
 8003e5c:	1891      	adds	r1, r2, r2
 8003e5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e60:	415b      	adcs	r3, r3
 8003e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e68:	4641      	mov	r1, r8
 8003e6a:	eb12 0a01 	adds.w	sl, r2, r1
 8003e6e:	4649      	mov	r1, r9
 8003e70:	eb43 0b01 	adc.w	fp, r3, r1
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e88:	4692      	mov	sl, r2
 8003e8a:	469b      	mov	fp, r3
 8003e8c:	4643      	mov	r3, r8
 8003e8e:	eb1a 0303 	adds.w	r3, sl, r3
 8003e92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e96:	464b      	mov	r3, r9
 8003e98:	eb4b 0303 	adc.w	r3, fp, r3
 8003e9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003eb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	18db      	adds	r3, r3, r3
 8003eb8:	643b      	str	r3, [r7, #64]	; 0x40
 8003eba:	4613      	mov	r3, r2
 8003ebc:	eb42 0303 	adc.w	r3, r2, r3
 8003ec0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ec2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ec6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003eca:	f7fc f9e9 	bl	80002a0 <__aeabi_uldivmod>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4b3b      	ldr	r3, [pc, #236]	; (8003fc4 <UART_SetConfig+0x2d4>)
 8003ed6:	fba3 2301 	umull	r2, r3, r3, r1
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	2264      	movs	r2, #100	; 0x64
 8003ede:	fb02 f303 	mul.w	r3, r2, r3
 8003ee2:	1acb      	subs	r3, r1, r3
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003eea:	4b36      	ldr	r3, [pc, #216]	; (8003fc4 <UART_SetConfig+0x2d4>)
 8003eec:	fba3 2302 	umull	r2, r3, r3, r2
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ef8:	441c      	add	r4, r3
 8003efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003efe:	2200      	movs	r2, #0
 8003f00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f0c:	4642      	mov	r2, r8
 8003f0e:	464b      	mov	r3, r9
 8003f10:	1891      	adds	r1, r2, r2
 8003f12:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f14:	415b      	adcs	r3, r3
 8003f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f1c:	4641      	mov	r1, r8
 8003f1e:	1851      	adds	r1, r2, r1
 8003f20:	6339      	str	r1, [r7, #48]	; 0x30
 8003f22:	4649      	mov	r1, r9
 8003f24:	414b      	adcs	r3, r1
 8003f26:	637b      	str	r3, [r7, #52]	; 0x34
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f34:	4659      	mov	r1, fp
 8003f36:	00cb      	lsls	r3, r1, #3
 8003f38:	4651      	mov	r1, sl
 8003f3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f3e:	4651      	mov	r1, sl
 8003f40:	00ca      	lsls	r2, r1, #3
 8003f42:	4610      	mov	r0, r2
 8003f44:	4619      	mov	r1, r3
 8003f46:	4603      	mov	r3, r0
 8003f48:	4642      	mov	r2, r8
 8003f4a:	189b      	adds	r3, r3, r2
 8003f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f50:	464b      	mov	r3, r9
 8003f52:	460a      	mov	r2, r1
 8003f54:	eb42 0303 	adc.w	r3, r2, r3
 8003f58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f70:	460b      	mov	r3, r1
 8003f72:	18db      	adds	r3, r3, r3
 8003f74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f76:	4613      	mov	r3, r2
 8003f78:	eb42 0303 	adc.w	r3, r2, r3
 8003f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f86:	f7fc f98b 	bl	80002a0 <__aeabi_uldivmod>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4b0d      	ldr	r3, [pc, #52]	; (8003fc4 <UART_SetConfig+0x2d4>)
 8003f90:	fba3 1302 	umull	r1, r3, r3, r2
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	2164      	movs	r1, #100	; 0x64
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	3332      	adds	r3, #50	; 0x32
 8003fa2:	4a08      	ldr	r2, [pc, #32]	; (8003fc4 <UART_SetConfig+0x2d4>)
 8003fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	f003 0207 	and.w	r2, r3, #7
 8003fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4422      	add	r2, r4
 8003fb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fb8:	e105      	b.n	80041c6 <UART_SetConfig+0x4d6>
 8003fba:	bf00      	nop
 8003fbc:	40011000 	.word	0x40011000
 8003fc0:	40011400 	.word	0x40011400
 8003fc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003fd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003fda:	4642      	mov	r2, r8
 8003fdc:	464b      	mov	r3, r9
 8003fde:	1891      	adds	r1, r2, r2
 8003fe0:	6239      	str	r1, [r7, #32]
 8003fe2:	415b      	adcs	r3, r3
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fea:	4641      	mov	r1, r8
 8003fec:	1854      	adds	r4, r2, r1
 8003fee:	4649      	mov	r1, r9
 8003ff0:	eb43 0501 	adc.w	r5, r3, r1
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	00eb      	lsls	r3, r5, #3
 8003ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004002:	00e2      	lsls	r2, r4, #3
 8004004:	4614      	mov	r4, r2
 8004006:	461d      	mov	r5, r3
 8004008:	4643      	mov	r3, r8
 800400a:	18e3      	adds	r3, r4, r3
 800400c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004010:	464b      	mov	r3, r9
 8004012:	eb45 0303 	adc.w	r3, r5, r3
 8004016:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800401a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004026:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004036:	4629      	mov	r1, r5
 8004038:	008b      	lsls	r3, r1, #2
 800403a:	4621      	mov	r1, r4
 800403c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004040:	4621      	mov	r1, r4
 8004042:	008a      	lsls	r2, r1, #2
 8004044:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004048:	f7fc f92a 	bl	80002a0 <__aeabi_uldivmod>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4b60      	ldr	r3, [pc, #384]	; (80041d4 <UART_SetConfig+0x4e4>)
 8004052:	fba3 2302 	umull	r2, r3, r3, r2
 8004056:	095b      	lsrs	r3, r3, #5
 8004058:	011c      	lsls	r4, r3, #4
 800405a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800405e:	2200      	movs	r2, #0
 8004060:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004064:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004068:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800406c:	4642      	mov	r2, r8
 800406e:	464b      	mov	r3, r9
 8004070:	1891      	adds	r1, r2, r2
 8004072:	61b9      	str	r1, [r7, #24]
 8004074:	415b      	adcs	r3, r3
 8004076:	61fb      	str	r3, [r7, #28]
 8004078:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800407c:	4641      	mov	r1, r8
 800407e:	1851      	adds	r1, r2, r1
 8004080:	6139      	str	r1, [r7, #16]
 8004082:	4649      	mov	r1, r9
 8004084:	414b      	adcs	r3, r1
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004094:	4659      	mov	r1, fp
 8004096:	00cb      	lsls	r3, r1, #3
 8004098:	4651      	mov	r1, sl
 800409a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800409e:	4651      	mov	r1, sl
 80040a0:	00ca      	lsls	r2, r1, #3
 80040a2:	4610      	mov	r0, r2
 80040a4:	4619      	mov	r1, r3
 80040a6:	4603      	mov	r3, r0
 80040a8:	4642      	mov	r2, r8
 80040aa:	189b      	adds	r3, r3, r2
 80040ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040b0:	464b      	mov	r3, r9
 80040b2:	460a      	mov	r2, r1
 80040b4:	eb42 0303 	adc.w	r3, r2, r3
 80040b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80040c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040d4:	4649      	mov	r1, r9
 80040d6:	008b      	lsls	r3, r1, #2
 80040d8:	4641      	mov	r1, r8
 80040da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040de:	4641      	mov	r1, r8
 80040e0:	008a      	lsls	r2, r1, #2
 80040e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80040e6:	f7fc f8db 	bl	80002a0 <__aeabi_uldivmod>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4b39      	ldr	r3, [pc, #228]	; (80041d4 <UART_SetConfig+0x4e4>)
 80040f0:	fba3 1302 	umull	r1, r3, r3, r2
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	2164      	movs	r1, #100	; 0x64
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	3332      	adds	r3, #50	; 0x32
 8004102:	4a34      	ldr	r2, [pc, #208]	; (80041d4 <UART_SetConfig+0x4e4>)
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800410e:	441c      	add	r4, r3
 8004110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004114:	2200      	movs	r2, #0
 8004116:	673b      	str	r3, [r7, #112]	; 0x70
 8004118:	677a      	str	r2, [r7, #116]	; 0x74
 800411a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800411e:	4642      	mov	r2, r8
 8004120:	464b      	mov	r3, r9
 8004122:	1891      	adds	r1, r2, r2
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	415b      	adcs	r3, r3
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800412e:	4641      	mov	r1, r8
 8004130:	1851      	adds	r1, r2, r1
 8004132:	6039      	str	r1, [r7, #0]
 8004134:	4649      	mov	r1, r9
 8004136:	414b      	adcs	r3, r1
 8004138:	607b      	str	r3, [r7, #4]
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004146:	4659      	mov	r1, fp
 8004148:	00cb      	lsls	r3, r1, #3
 800414a:	4651      	mov	r1, sl
 800414c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004150:	4651      	mov	r1, sl
 8004152:	00ca      	lsls	r2, r1, #3
 8004154:	4610      	mov	r0, r2
 8004156:	4619      	mov	r1, r3
 8004158:	4603      	mov	r3, r0
 800415a:	4642      	mov	r2, r8
 800415c:	189b      	adds	r3, r3, r2
 800415e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004160:	464b      	mov	r3, r9
 8004162:	460a      	mov	r2, r1
 8004164:	eb42 0303 	adc.w	r3, r2, r3
 8004168:	66fb      	str	r3, [r7, #108]	; 0x6c
 800416a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	663b      	str	r3, [r7, #96]	; 0x60
 8004174:	667a      	str	r2, [r7, #100]	; 0x64
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004182:	4649      	mov	r1, r9
 8004184:	008b      	lsls	r3, r1, #2
 8004186:	4641      	mov	r1, r8
 8004188:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800418c:	4641      	mov	r1, r8
 800418e:	008a      	lsls	r2, r1, #2
 8004190:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004194:	f7fc f884 	bl	80002a0 <__aeabi_uldivmod>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4b0d      	ldr	r3, [pc, #52]	; (80041d4 <UART_SetConfig+0x4e4>)
 800419e:	fba3 1302 	umull	r1, r3, r3, r2
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	2164      	movs	r1, #100	; 0x64
 80041a6:	fb01 f303 	mul.w	r3, r1, r3
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	3332      	adds	r3, #50	; 0x32
 80041b0:	4a08      	ldr	r2, [pc, #32]	; (80041d4 <UART_SetConfig+0x4e4>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	f003 020f 	and.w	r2, r3, #15
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4422      	add	r2, r4
 80041c4:	609a      	str	r2, [r3, #8]
}
 80041c6:	bf00      	nop
 80041c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041cc:	46bd      	mov	sp, r7
 80041ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041d2:	bf00      	nop
 80041d4:	51eb851f 	.word	0x51eb851f

080041d8 <__errno>:
 80041d8:	4b01      	ldr	r3, [pc, #4]	; (80041e0 <__errno+0x8>)
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	2000000c 	.word	0x2000000c

080041e4 <__libc_init_array>:
 80041e4:	b570      	push	{r4, r5, r6, lr}
 80041e6:	4d0d      	ldr	r5, [pc, #52]	; (800421c <__libc_init_array+0x38>)
 80041e8:	4c0d      	ldr	r4, [pc, #52]	; (8004220 <__libc_init_array+0x3c>)
 80041ea:	1b64      	subs	r4, r4, r5
 80041ec:	10a4      	asrs	r4, r4, #2
 80041ee:	2600      	movs	r6, #0
 80041f0:	42a6      	cmp	r6, r4
 80041f2:	d109      	bne.n	8004208 <__libc_init_array+0x24>
 80041f4:	4d0b      	ldr	r5, [pc, #44]	; (8004224 <__libc_init_array+0x40>)
 80041f6:	4c0c      	ldr	r4, [pc, #48]	; (8004228 <__libc_init_array+0x44>)
 80041f8:	f000 fcc2 	bl	8004b80 <_init>
 80041fc:	1b64      	subs	r4, r4, r5
 80041fe:	10a4      	asrs	r4, r4, #2
 8004200:	2600      	movs	r6, #0
 8004202:	42a6      	cmp	r6, r4
 8004204:	d105      	bne.n	8004212 <__libc_init_array+0x2e>
 8004206:	bd70      	pop	{r4, r5, r6, pc}
 8004208:	f855 3b04 	ldr.w	r3, [r5], #4
 800420c:	4798      	blx	r3
 800420e:	3601      	adds	r6, #1
 8004210:	e7ee      	b.n	80041f0 <__libc_init_array+0xc>
 8004212:	f855 3b04 	ldr.w	r3, [r5], #4
 8004216:	4798      	blx	r3
 8004218:	3601      	adds	r6, #1
 800421a:	e7f2      	b.n	8004202 <__libc_init_array+0x1e>
 800421c:	08004c64 	.word	0x08004c64
 8004220:	08004c64 	.word	0x08004c64
 8004224:	08004c64 	.word	0x08004c64
 8004228:	08004c68 	.word	0x08004c68

0800422c <memset>:
 800422c:	4402      	add	r2, r0
 800422e:	4603      	mov	r3, r0
 8004230:	4293      	cmp	r3, r2
 8004232:	d100      	bne.n	8004236 <memset+0xa>
 8004234:	4770      	bx	lr
 8004236:	f803 1b01 	strb.w	r1, [r3], #1
 800423a:	e7f9      	b.n	8004230 <memset+0x4>

0800423c <sniprintf>:
 800423c:	b40c      	push	{r2, r3}
 800423e:	b530      	push	{r4, r5, lr}
 8004240:	4b17      	ldr	r3, [pc, #92]	; (80042a0 <sniprintf+0x64>)
 8004242:	1e0c      	subs	r4, r1, #0
 8004244:	681d      	ldr	r5, [r3, #0]
 8004246:	b09d      	sub	sp, #116	; 0x74
 8004248:	da08      	bge.n	800425c <sniprintf+0x20>
 800424a:	238b      	movs	r3, #139	; 0x8b
 800424c:	602b      	str	r3, [r5, #0]
 800424e:	f04f 30ff 	mov.w	r0, #4294967295
 8004252:	b01d      	add	sp, #116	; 0x74
 8004254:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004258:	b002      	add	sp, #8
 800425a:	4770      	bx	lr
 800425c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004260:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004264:	bf14      	ite	ne
 8004266:	f104 33ff 	addne.w	r3, r4, #4294967295
 800426a:	4623      	moveq	r3, r4
 800426c:	9304      	str	r3, [sp, #16]
 800426e:	9307      	str	r3, [sp, #28]
 8004270:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004274:	9002      	str	r0, [sp, #8]
 8004276:	9006      	str	r0, [sp, #24]
 8004278:	f8ad 3016 	strh.w	r3, [sp, #22]
 800427c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800427e:	ab21      	add	r3, sp, #132	; 0x84
 8004280:	a902      	add	r1, sp, #8
 8004282:	4628      	mov	r0, r5
 8004284:	9301      	str	r3, [sp, #4]
 8004286:	f000 f889 	bl	800439c <_svfiprintf_r>
 800428a:	1c43      	adds	r3, r0, #1
 800428c:	bfbc      	itt	lt
 800428e:	238b      	movlt	r3, #139	; 0x8b
 8004290:	602b      	strlt	r3, [r5, #0]
 8004292:	2c00      	cmp	r4, #0
 8004294:	d0dd      	beq.n	8004252 <sniprintf+0x16>
 8004296:	9b02      	ldr	r3, [sp, #8]
 8004298:	2200      	movs	r2, #0
 800429a:	701a      	strb	r2, [r3, #0]
 800429c:	e7d9      	b.n	8004252 <sniprintf+0x16>
 800429e:	bf00      	nop
 80042a0:	2000000c 	.word	0x2000000c

080042a4 <siprintf>:
 80042a4:	b40e      	push	{r1, r2, r3}
 80042a6:	b500      	push	{lr}
 80042a8:	b09c      	sub	sp, #112	; 0x70
 80042aa:	ab1d      	add	r3, sp, #116	; 0x74
 80042ac:	9002      	str	r0, [sp, #8]
 80042ae:	9006      	str	r0, [sp, #24]
 80042b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042b4:	4809      	ldr	r0, [pc, #36]	; (80042dc <siprintf+0x38>)
 80042b6:	9107      	str	r1, [sp, #28]
 80042b8:	9104      	str	r1, [sp, #16]
 80042ba:	4909      	ldr	r1, [pc, #36]	; (80042e0 <siprintf+0x3c>)
 80042bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80042c0:	9105      	str	r1, [sp, #20]
 80042c2:	6800      	ldr	r0, [r0, #0]
 80042c4:	9301      	str	r3, [sp, #4]
 80042c6:	a902      	add	r1, sp, #8
 80042c8:	f000 f868 	bl	800439c <_svfiprintf_r>
 80042cc:	9b02      	ldr	r3, [sp, #8]
 80042ce:	2200      	movs	r2, #0
 80042d0:	701a      	strb	r2, [r3, #0]
 80042d2:	b01c      	add	sp, #112	; 0x70
 80042d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80042d8:	b003      	add	sp, #12
 80042da:	4770      	bx	lr
 80042dc:	2000000c 	.word	0x2000000c
 80042e0:	ffff0208 	.word	0xffff0208

080042e4 <__ssputs_r>:
 80042e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042e8:	688e      	ldr	r6, [r1, #8]
 80042ea:	429e      	cmp	r6, r3
 80042ec:	4682      	mov	sl, r0
 80042ee:	460c      	mov	r4, r1
 80042f0:	4690      	mov	r8, r2
 80042f2:	461f      	mov	r7, r3
 80042f4:	d838      	bhi.n	8004368 <__ssputs_r+0x84>
 80042f6:	898a      	ldrh	r2, [r1, #12]
 80042f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042fc:	d032      	beq.n	8004364 <__ssputs_r+0x80>
 80042fe:	6825      	ldr	r5, [r4, #0]
 8004300:	6909      	ldr	r1, [r1, #16]
 8004302:	eba5 0901 	sub.w	r9, r5, r1
 8004306:	6965      	ldr	r5, [r4, #20]
 8004308:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800430c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004310:	3301      	adds	r3, #1
 8004312:	444b      	add	r3, r9
 8004314:	106d      	asrs	r5, r5, #1
 8004316:	429d      	cmp	r5, r3
 8004318:	bf38      	it	cc
 800431a:	461d      	movcc	r5, r3
 800431c:	0553      	lsls	r3, r2, #21
 800431e:	d531      	bpl.n	8004384 <__ssputs_r+0xa0>
 8004320:	4629      	mov	r1, r5
 8004322:	f000 fb63 	bl	80049ec <_malloc_r>
 8004326:	4606      	mov	r6, r0
 8004328:	b950      	cbnz	r0, 8004340 <__ssputs_r+0x5c>
 800432a:	230c      	movs	r3, #12
 800432c:	f8ca 3000 	str.w	r3, [sl]
 8004330:	89a3      	ldrh	r3, [r4, #12]
 8004332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004336:	81a3      	strh	r3, [r4, #12]
 8004338:	f04f 30ff 	mov.w	r0, #4294967295
 800433c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004340:	6921      	ldr	r1, [r4, #16]
 8004342:	464a      	mov	r2, r9
 8004344:	f000 fabe 	bl	80048c4 <memcpy>
 8004348:	89a3      	ldrh	r3, [r4, #12]
 800434a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800434e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004352:	81a3      	strh	r3, [r4, #12]
 8004354:	6126      	str	r6, [r4, #16]
 8004356:	6165      	str	r5, [r4, #20]
 8004358:	444e      	add	r6, r9
 800435a:	eba5 0509 	sub.w	r5, r5, r9
 800435e:	6026      	str	r6, [r4, #0]
 8004360:	60a5      	str	r5, [r4, #8]
 8004362:	463e      	mov	r6, r7
 8004364:	42be      	cmp	r6, r7
 8004366:	d900      	bls.n	800436a <__ssputs_r+0x86>
 8004368:	463e      	mov	r6, r7
 800436a:	6820      	ldr	r0, [r4, #0]
 800436c:	4632      	mov	r2, r6
 800436e:	4641      	mov	r1, r8
 8004370:	f000 fab6 	bl	80048e0 <memmove>
 8004374:	68a3      	ldr	r3, [r4, #8]
 8004376:	1b9b      	subs	r3, r3, r6
 8004378:	60a3      	str	r3, [r4, #8]
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	4433      	add	r3, r6
 800437e:	6023      	str	r3, [r4, #0]
 8004380:	2000      	movs	r0, #0
 8004382:	e7db      	b.n	800433c <__ssputs_r+0x58>
 8004384:	462a      	mov	r2, r5
 8004386:	f000 fba5 	bl	8004ad4 <_realloc_r>
 800438a:	4606      	mov	r6, r0
 800438c:	2800      	cmp	r0, #0
 800438e:	d1e1      	bne.n	8004354 <__ssputs_r+0x70>
 8004390:	6921      	ldr	r1, [r4, #16]
 8004392:	4650      	mov	r0, sl
 8004394:	f000 fabe 	bl	8004914 <_free_r>
 8004398:	e7c7      	b.n	800432a <__ssputs_r+0x46>
	...

0800439c <_svfiprintf_r>:
 800439c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a0:	4698      	mov	r8, r3
 80043a2:	898b      	ldrh	r3, [r1, #12]
 80043a4:	061b      	lsls	r3, r3, #24
 80043a6:	b09d      	sub	sp, #116	; 0x74
 80043a8:	4607      	mov	r7, r0
 80043aa:	460d      	mov	r5, r1
 80043ac:	4614      	mov	r4, r2
 80043ae:	d50e      	bpl.n	80043ce <_svfiprintf_r+0x32>
 80043b0:	690b      	ldr	r3, [r1, #16]
 80043b2:	b963      	cbnz	r3, 80043ce <_svfiprintf_r+0x32>
 80043b4:	2140      	movs	r1, #64	; 0x40
 80043b6:	f000 fb19 	bl	80049ec <_malloc_r>
 80043ba:	6028      	str	r0, [r5, #0]
 80043bc:	6128      	str	r0, [r5, #16]
 80043be:	b920      	cbnz	r0, 80043ca <_svfiprintf_r+0x2e>
 80043c0:	230c      	movs	r3, #12
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	f04f 30ff 	mov.w	r0, #4294967295
 80043c8:	e0d1      	b.n	800456e <_svfiprintf_r+0x1d2>
 80043ca:	2340      	movs	r3, #64	; 0x40
 80043cc:	616b      	str	r3, [r5, #20]
 80043ce:	2300      	movs	r3, #0
 80043d0:	9309      	str	r3, [sp, #36]	; 0x24
 80043d2:	2320      	movs	r3, #32
 80043d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80043dc:	2330      	movs	r3, #48	; 0x30
 80043de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004588 <_svfiprintf_r+0x1ec>
 80043e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043e6:	f04f 0901 	mov.w	r9, #1
 80043ea:	4623      	mov	r3, r4
 80043ec:	469a      	mov	sl, r3
 80043ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043f2:	b10a      	cbz	r2, 80043f8 <_svfiprintf_r+0x5c>
 80043f4:	2a25      	cmp	r2, #37	; 0x25
 80043f6:	d1f9      	bne.n	80043ec <_svfiprintf_r+0x50>
 80043f8:	ebba 0b04 	subs.w	fp, sl, r4
 80043fc:	d00b      	beq.n	8004416 <_svfiprintf_r+0x7a>
 80043fe:	465b      	mov	r3, fp
 8004400:	4622      	mov	r2, r4
 8004402:	4629      	mov	r1, r5
 8004404:	4638      	mov	r0, r7
 8004406:	f7ff ff6d 	bl	80042e4 <__ssputs_r>
 800440a:	3001      	adds	r0, #1
 800440c:	f000 80aa 	beq.w	8004564 <_svfiprintf_r+0x1c8>
 8004410:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004412:	445a      	add	r2, fp
 8004414:	9209      	str	r2, [sp, #36]	; 0x24
 8004416:	f89a 3000 	ldrb.w	r3, [sl]
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 80a2 	beq.w	8004564 <_svfiprintf_r+0x1c8>
 8004420:	2300      	movs	r3, #0
 8004422:	f04f 32ff 	mov.w	r2, #4294967295
 8004426:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800442a:	f10a 0a01 	add.w	sl, sl, #1
 800442e:	9304      	str	r3, [sp, #16]
 8004430:	9307      	str	r3, [sp, #28]
 8004432:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004436:	931a      	str	r3, [sp, #104]	; 0x68
 8004438:	4654      	mov	r4, sl
 800443a:	2205      	movs	r2, #5
 800443c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004440:	4851      	ldr	r0, [pc, #324]	; (8004588 <_svfiprintf_r+0x1ec>)
 8004442:	f7fb fedd 	bl	8000200 <memchr>
 8004446:	9a04      	ldr	r2, [sp, #16]
 8004448:	b9d8      	cbnz	r0, 8004482 <_svfiprintf_r+0xe6>
 800444a:	06d0      	lsls	r0, r2, #27
 800444c:	bf44      	itt	mi
 800444e:	2320      	movmi	r3, #32
 8004450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004454:	0711      	lsls	r1, r2, #28
 8004456:	bf44      	itt	mi
 8004458:	232b      	movmi	r3, #43	; 0x2b
 800445a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800445e:	f89a 3000 	ldrb.w	r3, [sl]
 8004462:	2b2a      	cmp	r3, #42	; 0x2a
 8004464:	d015      	beq.n	8004492 <_svfiprintf_r+0xf6>
 8004466:	9a07      	ldr	r2, [sp, #28]
 8004468:	4654      	mov	r4, sl
 800446a:	2000      	movs	r0, #0
 800446c:	f04f 0c0a 	mov.w	ip, #10
 8004470:	4621      	mov	r1, r4
 8004472:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004476:	3b30      	subs	r3, #48	; 0x30
 8004478:	2b09      	cmp	r3, #9
 800447a:	d94e      	bls.n	800451a <_svfiprintf_r+0x17e>
 800447c:	b1b0      	cbz	r0, 80044ac <_svfiprintf_r+0x110>
 800447e:	9207      	str	r2, [sp, #28]
 8004480:	e014      	b.n	80044ac <_svfiprintf_r+0x110>
 8004482:	eba0 0308 	sub.w	r3, r0, r8
 8004486:	fa09 f303 	lsl.w	r3, r9, r3
 800448a:	4313      	orrs	r3, r2
 800448c:	9304      	str	r3, [sp, #16]
 800448e:	46a2      	mov	sl, r4
 8004490:	e7d2      	b.n	8004438 <_svfiprintf_r+0x9c>
 8004492:	9b03      	ldr	r3, [sp, #12]
 8004494:	1d19      	adds	r1, r3, #4
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	9103      	str	r1, [sp, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	bfbb      	ittet	lt
 800449e:	425b      	neglt	r3, r3
 80044a0:	f042 0202 	orrlt.w	r2, r2, #2
 80044a4:	9307      	strge	r3, [sp, #28]
 80044a6:	9307      	strlt	r3, [sp, #28]
 80044a8:	bfb8      	it	lt
 80044aa:	9204      	strlt	r2, [sp, #16]
 80044ac:	7823      	ldrb	r3, [r4, #0]
 80044ae:	2b2e      	cmp	r3, #46	; 0x2e
 80044b0:	d10c      	bne.n	80044cc <_svfiprintf_r+0x130>
 80044b2:	7863      	ldrb	r3, [r4, #1]
 80044b4:	2b2a      	cmp	r3, #42	; 0x2a
 80044b6:	d135      	bne.n	8004524 <_svfiprintf_r+0x188>
 80044b8:	9b03      	ldr	r3, [sp, #12]
 80044ba:	1d1a      	adds	r2, r3, #4
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	9203      	str	r2, [sp, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bfb8      	it	lt
 80044c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80044c8:	3402      	adds	r4, #2
 80044ca:	9305      	str	r3, [sp, #20]
 80044cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004598 <_svfiprintf_r+0x1fc>
 80044d0:	7821      	ldrb	r1, [r4, #0]
 80044d2:	2203      	movs	r2, #3
 80044d4:	4650      	mov	r0, sl
 80044d6:	f7fb fe93 	bl	8000200 <memchr>
 80044da:	b140      	cbz	r0, 80044ee <_svfiprintf_r+0x152>
 80044dc:	2340      	movs	r3, #64	; 0x40
 80044de:	eba0 000a 	sub.w	r0, r0, sl
 80044e2:	fa03 f000 	lsl.w	r0, r3, r0
 80044e6:	9b04      	ldr	r3, [sp, #16]
 80044e8:	4303      	orrs	r3, r0
 80044ea:	3401      	adds	r4, #1
 80044ec:	9304      	str	r3, [sp, #16]
 80044ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044f2:	4826      	ldr	r0, [pc, #152]	; (800458c <_svfiprintf_r+0x1f0>)
 80044f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044f8:	2206      	movs	r2, #6
 80044fa:	f7fb fe81 	bl	8000200 <memchr>
 80044fe:	2800      	cmp	r0, #0
 8004500:	d038      	beq.n	8004574 <_svfiprintf_r+0x1d8>
 8004502:	4b23      	ldr	r3, [pc, #140]	; (8004590 <_svfiprintf_r+0x1f4>)
 8004504:	bb1b      	cbnz	r3, 800454e <_svfiprintf_r+0x1b2>
 8004506:	9b03      	ldr	r3, [sp, #12]
 8004508:	3307      	adds	r3, #7
 800450a:	f023 0307 	bic.w	r3, r3, #7
 800450e:	3308      	adds	r3, #8
 8004510:	9303      	str	r3, [sp, #12]
 8004512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004514:	4433      	add	r3, r6
 8004516:	9309      	str	r3, [sp, #36]	; 0x24
 8004518:	e767      	b.n	80043ea <_svfiprintf_r+0x4e>
 800451a:	fb0c 3202 	mla	r2, ip, r2, r3
 800451e:	460c      	mov	r4, r1
 8004520:	2001      	movs	r0, #1
 8004522:	e7a5      	b.n	8004470 <_svfiprintf_r+0xd4>
 8004524:	2300      	movs	r3, #0
 8004526:	3401      	adds	r4, #1
 8004528:	9305      	str	r3, [sp, #20]
 800452a:	4619      	mov	r1, r3
 800452c:	f04f 0c0a 	mov.w	ip, #10
 8004530:	4620      	mov	r0, r4
 8004532:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004536:	3a30      	subs	r2, #48	; 0x30
 8004538:	2a09      	cmp	r2, #9
 800453a:	d903      	bls.n	8004544 <_svfiprintf_r+0x1a8>
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0c5      	beq.n	80044cc <_svfiprintf_r+0x130>
 8004540:	9105      	str	r1, [sp, #20]
 8004542:	e7c3      	b.n	80044cc <_svfiprintf_r+0x130>
 8004544:	fb0c 2101 	mla	r1, ip, r1, r2
 8004548:	4604      	mov	r4, r0
 800454a:	2301      	movs	r3, #1
 800454c:	e7f0      	b.n	8004530 <_svfiprintf_r+0x194>
 800454e:	ab03      	add	r3, sp, #12
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	462a      	mov	r2, r5
 8004554:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <_svfiprintf_r+0x1f8>)
 8004556:	a904      	add	r1, sp, #16
 8004558:	4638      	mov	r0, r7
 800455a:	f3af 8000 	nop.w
 800455e:	1c42      	adds	r2, r0, #1
 8004560:	4606      	mov	r6, r0
 8004562:	d1d6      	bne.n	8004512 <_svfiprintf_r+0x176>
 8004564:	89ab      	ldrh	r3, [r5, #12]
 8004566:	065b      	lsls	r3, r3, #25
 8004568:	f53f af2c 	bmi.w	80043c4 <_svfiprintf_r+0x28>
 800456c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800456e:	b01d      	add	sp, #116	; 0x74
 8004570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004574:	ab03      	add	r3, sp, #12
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	462a      	mov	r2, r5
 800457a:	4b06      	ldr	r3, [pc, #24]	; (8004594 <_svfiprintf_r+0x1f8>)
 800457c:	a904      	add	r1, sp, #16
 800457e:	4638      	mov	r0, r7
 8004580:	f000 f87a 	bl	8004678 <_printf_i>
 8004584:	e7eb      	b.n	800455e <_svfiprintf_r+0x1c2>
 8004586:	bf00      	nop
 8004588:	08004c28 	.word	0x08004c28
 800458c:	08004c32 	.word	0x08004c32
 8004590:	00000000 	.word	0x00000000
 8004594:	080042e5 	.word	0x080042e5
 8004598:	08004c2e 	.word	0x08004c2e

0800459c <_printf_common>:
 800459c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a0:	4616      	mov	r6, r2
 80045a2:	4699      	mov	r9, r3
 80045a4:	688a      	ldr	r2, [r1, #8]
 80045a6:	690b      	ldr	r3, [r1, #16]
 80045a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045ac:	4293      	cmp	r3, r2
 80045ae:	bfb8      	it	lt
 80045b0:	4613      	movlt	r3, r2
 80045b2:	6033      	str	r3, [r6, #0]
 80045b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045b8:	4607      	mov	r7, r0
 80045ba:	460c      	mov	r4, r1
 80045bc:	b10a      	cbz	r2, 80045c2 <_printf_common+0x26>
 80045be:	3301      	adds	r3, #1
 80045c0:	6033      	str	r3, [r6, #0]
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	0699      	lsls	r1, r3, #26
 80045c6:	bf42      	ittt	mi
 80045c8:	6833      	ldrmi	r3, [r6, #0]
 80045ca:	3302      	addmi	r3, #2
 80045cc:	6033      	strmi	r3, [r6, #0]
 80045ce:	6825      	ldr	r5, [r4, #0]
 80045d0:	f015 0506 	ands.w	r5, r5, #6
 80045d4:	d106      	bne.n	80045e4 <_printf_common+0x48>
 80045d6:	f104 0a19 	add.w	sl, r4, #25
 80045da:	68e3      	ldr	r3, [r4, #12]
 80045dc:	6832      	ldr	r2, [r6, #0]
 80045de:	1a9b      	subs	r3, r3, r2
 80045e0:	42ab      	cmp	r3, r5
 80045e2:	dc26      	bgt.n	8004632 <_printf_common+0x96>
 80045e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045e8:	1e13      	subs	r3, r2, #0
 80045ea:	6822      	ldr	r2, [r4, #0]
 80045ec:	bf18      	it	ne
 80045ee:	2301      	movne	r3, #1
 80045f0:	0692      	lsls	r2, r2, #26
 80045f2:	d42b      	bmi.n	800464c <_printf_common+0xb0>
 80045f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045f8:	4649      	mov	r1, r9
 80045fa:	4638      	mov	r0, r7
 80045fc:	47c0      	blx	r8
 80045fe:	3001      	adds	r0, #1
 8004600:	d01e      	beq.n	8004640 <_printf_common+0xa4>
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	68e5      	ldr	r5, [r4, #12]
 8004606:	6832      	ldr	r2, [r6, #0]
 8004608:	f003 0306 	and.w	r3, r3, #6
 800460c:	2b04      	cmp	r3, #4
 800460e:	bf08      	it	eq
 8004610:	1aad      	subeq	r5, r5, r2
 8004612:	68a3      	ldr	r3, [r4, #8]
 8004614:	6922      	ldr	r2, [r4, #16]
 8004616:	bf0c      	ite	eq
 8004618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800461c:	2500      	movne	r5, #0
 800461e:	4293      	cmp	r3, r2
 8004620:	bfc4      	itt	gt
 8004622:	1a9b      	subgt	r3, r3, r2
 8004624:	18ed      	addgt	r5, r5, r3
 8004626:	2600      	movs	r6, #0
 8004628:	341a      	adds	r4, #26
 800462a:	42b5      	cmp	r5, r6
 800462c:	d11a      	bne.n	8004664 <_printf_common+0xc8>
 800462e:	2000      	movs	r0, #0
 8004630:	e008      	b.n	8004644 <_printf_common+0xa8>
 8004632:	2301      	movs	r3, #1
 8004634:	4652      	mov	r2, sl
 8004636:	4649      	mov	r1, r9
 8004638:	4638      	mov	r0, r7
 800463a:	47c0      	blx	r8
 800463c:	3001      	adds	r0, #1
 800463e:	d103      	bne.n	8004648 <_printf_common+0xac>
 8004640:	f04f 30ff 	mov.w	r0, #4294967295
 8004644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004648:	3501      	adds	r5, #1
 800464a:	e7c6      	b.n	80045da <_printf_common+0x3e>
 800464c:	18e1      	adds	r1, r4, r3
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	2030      	movs	r0, #48	; 0x30
 8004652:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004656:	4422      	add	r2, r4
 8004658:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800465c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004660:	3302      	adds	r3, #2
 8004662:	e7c7      	b.n	80045f4 <_printf_common+0x58>
 8004664:	2301      	movs	r3, #1
 8004666:	4622      	mov	r2, r4
 8004668:	4649      	mov	r1, r9
 800466a:	4638      	mov	r0, r7
 800466c:	47c0      	blx	r8
 800466e:	3001      	adds	r0, #1
 8004670:	d0e6      	beq.n	8004640 <_printf_common+0xa4>
 8004672:	3601      	adds	r6, #1
 8004674:	e7d9      	b.n	800462a <_printf_common+0x8e>
	...

08004678 <_printf_i>:
 8004678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800467c:	7e0f      	ldrb	r7, [r1, #24]
 800467e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004680:	2f78      	cmp	r7, #120	; 0x78
 8004682:	4691      	mov	r9, r2
 8004684:	4680      	mov	r8, r0
 8004686:	460c      	mov	r4, r1
 8004688:	469a      	mov	sl, r3
 800468a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800468e:	d807      	bhi.n	80046a0 <_printf_i+0x28>
 8004690:	2f62      	cmp	r7, #98	; 0x62
 8004692:	d80a      	bhi.n	80046aa <_printf_i+0x32>
 8004694:	2f00      	cmp	r7, #0
 8004696:	f000 80d8 	beq.w	800484a <_printf_i+0x1d2>
 800469a:	2f58      	cmp	r7, #88	; 0x58
 800469c:	f000 80a3 	beq.w	80047e6 <_printf_i+0x16e>
 80046a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046a8:	e03a      	b.n	8004720 <_printf_i+0xa8>
 80046aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046ae:	2b15      	cmp	r3, #21
 80046b0:	d8f6      	bhi.n	80046a0 <_printf_i+0x28>
 80046b2:	a101      	add	r1, pc, #4	; (adr r1, 80046b8 <_printf_i+0x40>)
 80046b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046b8:	08004711 	.word	0x08004711
 80046bc:	08004725 	.word	0x08004725
 80046c0:	080046a1 	.word	0x080046a1
 80046c4:	080046a1 	.word	0x080046a1
 80046c8:	080046a1 	.word	0x080046a1
 80046cc:	080046a1 	.word	0x080046a1
 80046d0:	08004725 	.word	0x08004725
 80046d4:	080046a1 	.word	0x080046a1
 80046d8:	080046a1 	.word	0x080046a1
 80046dc:	080046a1 	.word	0x080046a1
 80046e0:	080046a1 	.word	0x080046a1
 80046e4:	08004831 	.word	0x08004831
 80046e8:	08004755 	.word	0x08004755
 80046ec:	08004813 	.word	0x08004813
 80046f0:	080046a1 	.word	0x080046a1
 80046f4:	080046a1 	.word	0x080046a1
 80046f8:	08004853 	.word	0x08004853
 80046fc:	080046a1 	.word	0x080046a1
 8004700:	08004755 	.word	0x08004755
 8004704:	080046a1 	.word	0x080046a1
 8004708:	080046a1 	.word	0x080046a1
 800470c:	0800481b 	.word	0x0800481b
 8004710:	682b      	ldr	r3, [r5, #0]
 8004712:	1d1a      	adds	r2, r3, #4
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	602a      	str	r2, [r5, #0]
 8004718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800471c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004720:	2301      	movs	r3, #1
 8004722:	e0a3      	b.n	800486c <_printf_i+0x1f4>
 8004724:	6820      	ldr	r0, [r4, #0]
 8004726:	6829      	ldr	r1, [r5, #0]
 8004728:	0606      	lsls	r6, r0, #24
 800472a:	f101 0304 	add.w	r3, r1, #4
 800472e:	d50a      	bpl.n	8004746 <_printf_i+0xce>
 8004730:	680e      	ldr	r6, [r1, #0]
 8004732:	602b      	str	r3, [r5, #0]
 8004734:	2e00      	cmp	r6, #0
 8004736:	da03      	bge.n	8004740 <_printf_i+0xc8>
 8004738:	232d      	movs	r3, #45	; 0x2d
 800473a:	4276      	negs	r6, r6
 800473c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004740:	485e      	ldr	r0, [pc, #376]	; (80048bc <_printf_i+0x244>)
 8004742:	230a      	movs	r3, #10
 8004744:	e019      	b.n	800477a <_printf_i+0x102>
 8004746:	680e      	ldr	r6, [r1, #0]
 8004748:	602b      	str	r3, [r5, #0]
 800474a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800474e:	bf18      	it	ne
 8004750:	b236      	sxthne	r6, r6
 8004752:	e7ef      	b.n	8004734 <_printf_i+0xbc>
 8004754:	682b      	ldr	r3, [r5, #0]
 8004756:	6820      	ldr	r0, [r4, #0]
 8004758:	1d19      	adds	r1, r3, #4
 800475a:	6029      	str	r1, [r5, #0]
 800475c:	0601      	lsls	r1, r0, #24
 800475e:	d501      	bpl.n	8004764 <_printf_i+0xec>
 8004760:	681e      	ldr	r6, [r3, #0]
 8004762:	e002      	b.n	800476a <_printf_i+0xf2>
 8004764:	0646      	lsls	r6, r0, #25
 8004766:	d5fb      	bpl.n	8004760 <_printf_i+0xe8>
 8004768:	881e      	ldrh	r6, [r3, #0]
 800476a:	4854      	ldr	r0, [pc, #336]	; (80048bc <_printf_i+0x244>)
 800476c:	2f6f      	cmp	r7, #111	; 0x6f
 800476e:	bf0c      	ite	eq
 8004770:	2308      	moveq	r3, #8
 8004772:	230a      	movne	r3, #10
 8004774:	2100      	movs	r1, #0
 8004776:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800477a:	6865      	ldr	r5, [r4, #4]
 800477c:	60a5      	str	r5, [r4, #8]
 800477e:	2d00      	cmp	r5, #0
 8004780:	bfa2      	ittt	ge
 8004782:	6821      	ldrge	r1, [r4, #0]
 8004784:	f021 0104 	bicge.w	r1, r1, #4
 8004788:	6021      	strge	r1, [r4, #0]
 800478a:	b90e      	cbnz	r6, 8004790 <_printf_i+0x118>
 800478c:	2d00      	cmp	r5, #0
 800478e:	d04d      	beq.n	800482c <_printf_i+0x1b4>
 8004790:	4615      	mov	r5, r2
 8004792:	fbb6 f1f3 	udiv	r1, r6, r3
 8004796:	fb03 6711 	mls	r7, r3, r1, r6
 800479a:	5dc7      	ldrb	r7, [r0, r7]
 800479c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047a0:	4637      	mov	r7, r6
 80047a2:	42bb      	cmp	r3, r7
 80047a4:	460e      	mov	r6, r1
 80047a6:	d9f4      	bls.n	8004792 <_printf_i+0x11a>
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d10b      	bne.n	80047c4 <_printf_i+0x14c>
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	07de      	lsls	r6, r3, #31
 80047b0:	d508      	bpl.n	80047c4 <_printf_i+0x14c>
 80047b2:	6923      	ldr	r3, [r4, #16]
 80047b4:	6861      	ldr	r1, [r4, #4]
 80047b6:	4299      	cmp	r1, r3
 80047b8:	bfde      	ittt	le
 80047ba:	2330      	movle	r3, #48	; 0x30
 80047bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047c4:	1b52      	subs	r2, r2, r5
 80047c6:	6122      	str	r2, [r4, #16]
 80047c8:	f8cd a000 	str.w	sl, [sp]
 80047cc:	464b      	mov	r3, r9
 80047ce:	aa03      	add	r2, sp, #12
 80047d0:	4621      	mov	r1, r4
 80047d2:	4640      	mov	r0, r8
 80047d4:	f7ff fee2 	bl	800459c <_printf_common>
 80047d8:	3001      	adds	r0, #1
 80047da:	d14c      	bne.n	8004876 <_printf_i+0x1fe>
 80047dc:	f04f 30ff 	mov.w	r0, #4294967295
 80047e0:	b004      	add	sp, #16
 80047e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e6:	4835      	ldr	r0, [pc, #212]	; (80048bc <_printf_i+0x244>)
 80047e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80047ec:	6829      	ldr	r1, [r5, #0]
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80047f4:	6029      	str	r1, [r5, #0]
 80047f6:	061d      	lsls	r5, r3, #24
 80047f8:	d514      	bpl.n	8004824 <_printf_i+0x1ac>
 80047fa:	07df      	lsls	r7, r3, #31
 80047fc:	bf44      	itt	mi
 80047fe:	f043 0320 	orrmi.w	r3, r3, #32
 8004802:	6023      	strmi	r3, [r4, #0]
 8004804:	b91e      	cbnz	r6, 800480e <_printf_i+0x196>
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	f023 0320 	bic.w	r3, r3, #32
 800480c:	6023      	str	r3, [r4, #0]
 800480e:	2310      	movs	r3, #16
 8004810:	e7b0      	b.n	8004774 <_printf_i+0xfc>
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	f043 0320 	orr.w	r3, r3, #32
 8004818:	6023      	str	r3, [r4, #0]
 800481a:	2378      	movs	r3, #120	; 0x78
 800481c:	4828      	ldr	r0, [pc, #160]	; (80048c0 <_printf_i+0x248>)
 800481e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004822:	e7e3      	b.n	80047ec <_printf_i+0x174>
 8004824:	0659      	lsls	r1, r3, #25
 8004826:	bf48      	it	mi
 8004828:	b2b6      	uxthmi	r6, r6
 800482a:	e7e6      	b.n	80047fa <_printf_i+0x182>
 800482c:	4615      	mov	r5, r2
 800482e:	e7bb      	b.n	80047a8 <_printf_i+0x130>
 8004830:	682b      	ldr	r3, [r5, #0]
 8004832:	6826      	ldr	r6, [r4, #0]
 8004834:	6961      	ldr	r1, [r4, #20]
 8004836:	1d18      	adds	r0, r3, #4
 8004838:	6028      	str	r0, [r5, #0]
 800483a:	0635      	lsls	r5, r6, #24
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	d501      	bpl.n	8004844 <_printf_i+0x1cc>
 8004840:	6019      	str	r1, [r3, #0]
 8004842:	e002      	b.n	800484a <_printf_i+0x1d2>
 8004844:	0670      	lsls	r0, r6, #25
 8004846:	d5fb      	bpl.n	8004840 <_printf_i+0x1c8>
 8004848:	8019      	strh	r1, [r3, #0]
 800484a:	2300      	movs	r3, #0
 800484c:	6123      	str	r3, [r4, #16]
 800484e:	4615      	mov	r5, r2
 8004850:	e7ba      	b.n	80047c8 <_printf_i+0x150>
 8004852:	682b      	ldr	r3, [r5, #0]
 8004854:	1d1a      	adds	r2, r3, #4
 8004856:	602a      	str	r2, [r5, #0]
 8004858:	681d      	ldr	r5, [r3, #0]
 800485a:	6862      	ldr	r2, [r4, #4]
 800485c:	2100      	movs	r1, #0
 800485e:	4628      	mov	r0, r5
 8004860:	f7fb fcce 	bl	8000200 <memchr>
 8004864:	b108      	cbz	r0, 800486a <_printf_i+0x1f2>
 8004866:	1b40      	subs	r0, r0, r5
 8004868:	6060      	str	r0, [r4, #4]
 800486a:	6863      	ldr	r3, [r4, #4]
 800486c:	6123      	str	r3, [r4, #16]
 800486e:	2300      	movs	r3, #0
 8004870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004874:	e7a8      	b.n	80047c8 <_printf_i+0x150>
 8004876:	6923      	ldr	r3, [r4, #16]
 8004878:	462a      	mov	r2, r5
 800487a:	4649      	mov	r1, r9
 800487c:	4640      	mov	r0, r8
 800487e:	47d0      	blx	sl
 8004880:	3001      	adds	r0, #1
 8004882:	d0ab      	beq.n	80047dc <_printf_i+0x164>
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	079b      	lsls	r3, r3, #30
 8004888:	d413      	bmi.n	80048b2 <_printf_i+0x23a>
 800488a:	68e0      	ldr	r0, [r4, #12]
 800488c:	9b03      	ldr	r3, [sp, #12]
 800488e:	4298      	cmp	r0, r3
 8004890:	bfb8      	it	lt
 8004892:	4618      	movlt	r0, r3
 8004894:	e7a4      	b.n	80047e0 <_printf_i+0x168>
 8004896:	2301      	movs	r3, #1
 8004898:	4632      	mov	r2, r6
 800489a:	4649      	mov	r1, r9
 800489c:	4640      	mov	r0, r8
 800489e:	47d0      	blx	sl
 80048a0:	3001      	adds	r0, #1
 80048a2:	d09b      	beq.n	80047dc <_printf_i+0x164>
 80048a4:	3501      	adds	r5, #1
 80048a6:	68e3      	ldr	r3, [r4, #12]
 80048a8:	9903      	ldr	r1, [sp, #12]
 80048aa:	1a5b      	subs	r3, r3, r1
 80048ac:	42ab      	cmp	r3, r5
 80048ae:	dcf2      	bgt.n	8004896 <_printf_i+0x21e>
 80048b0:	e7eb      	b.n	800488a <_printf_i+0x212>
 80048b2:	2500      	movs	r5, #0
 80048b4:	f104 0619 	add.w	r6, r4, #25
 80048b8:	e7f5      	b.n	80048a6 <_printf_i+0x22e>
 80048ba:	bf00      	nop
 80048bc:	08004c39 	.word	0x08004c39
 80048c0:	08004c4a 	.word	0x08004c4a

080048c4 <memcpy>:
 80048c4:	440a      	add	r2, r1
 80048c6:	4291      	cmp	r1, r2
 80048c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80048cc:	d100      	bne.n	80048d0 <memcpy+0xc>
 80048ce:	4770      	bx	lr
 80048d0:	b510      	push	{r4, lr}
 80048d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048da:	4291      	cmp	r1, r2
 80048dc:	d1f9      	bne.n	80048d2 <memcpy+0xe>
 80048de:	bd10      	pop	{r4, pc}

080048e0 <memmove>:
 80048e0:	4288      	cmp	r0, r1
 80048e2:	b510      	push	{r4, lr}
 80048e4:	eb01 0402 	add.w	r4, r1, r2
 80048e8:	d902      	bls.n	80048f0 <memmove+0x10>
 80048ea:	4284      	cmp	r4, r0
 80048ec:	4623      	mov	r3, r4
 80048ee:	d807      	bhi.n	8004900 <memmove+0x20>
 80048f0:	1e43      	subs	r3, r0, #1
 80048f2:	42a1      	cmp	r1, r4
 80048f4:	d008      	beq.n	8004908 <memmove+0x28>
 80048f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048fe:	e7f8      	b.n	80048f2 <memmove+0x12>
 8004900:	4402      	add	r2, r0
 8004902:	4601      	mov	r1, r0
 8004904:	428a      	cmp	r2, r1
 8004906:	d100      	bne.n	800490a <memmove+0x2a>
 8004908:	bd10      	pop	{r4, pc}
 800490a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800490e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004912:	e7f7      	b.n	8004904 <memmove+0x24>

08004914 <_free_r>:
 8004914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004916:	2900      	cmp	r1, #0
 8004918:	d044      	beq.n	80049a4 <_free_r+0x90>
 800491a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800491e:	9001      	str	r0, [sp, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	f1a1 0404 	sub.w	r4, r1, #4
 8004926:	bfb8      	it	lt
 8004928:	18e4      	addlt	r4, r4, r3
 800492a:	f000 f913 	bl	8004b54 <__malloc_lock>
 800492e:	4a1e      	ldr	r2, [pc, #120]	; (80049a8 <_free_r+0x94>)
 8004930:	9801      	ldr	r0, [sp, #4]
 8004932:	6813      	ldr	r3, [r2, #0]
 8004934:	b933      	cbnz	r3, 8004944 <_free_r+0x30>
 8004936:	6063      	str	r3, [r4, #4]
 8004938:	6014      	str	r4, [r2, #0]
 800493a:	b003      	add	sp, #12
 800493c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004940:	f000 b90e 	b.w	8004b60 <__malloc_unlock>
 8004944:	42a3      	cmp	r3, r4
 8004946:	d908      	bls.n	800495a <_free_r+0x46>
 8004948:	6825      	ldr	r5, [r4, #0]
 800494a:	1961      	adds	r1, r4, r5
 800494c:	428b      	cmp	r3, r1
 800494e:	bf01      	itttt	eq
 8004950:	6819      	ldreq	r1, [r3, #0]
 8004952:	685b      	ldreq	r3, [r3, #4]
 8004954:	1949      	addeq	r1, r1, r5
 8004956:	6021      	streq	r1, [r4, #0]
 8004958:	e7ed      	b.n	8004936 <_free_r+0x22>
 800495a:	461a      	mov	r2, r3
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	b10b      	cbz	r3, 8004964 <_free_r+0x50>
 8004960:	42a3      	cmp	r3, r4
 8004962:	d9fa      	bls.n	800495a <_free_r+0x46>
 8004964:	6811      	ldr	r1, [r2, #0]
 8004966:	1855      	adds	r5, r2, r1
 8004968:	42a5      	cmp	r5, r4
 800496a:	d10b      	bne.n	8004984 <_free_r+0x70>
 800496c:	6824      	ldr	r4, [r4, #0]
 800496e:	4421      	add	r1, r4
 8004970:	1854      	adds	r4, r2, r1
 8004972:	42a3      	cmp	r3, r4
 8004974:	6011      	str	r1, [r2, #0]
 8004976:	d1e0      	bne.n	800493a <_free_r+0x26>
 8004978:	681c      	ldr	r4, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	6053      	str	r3, [r2, #4]
 800497e:	4421      	add	r1, r4
 8004980:	6011      	str	r1, [r2, #0]
 8004982:	e7da      	b.n	800493a <_free_r+0x26>
 8004984:	d902      	bls.n	800498c <_free_r+0x78>
 8004986:	230c      	movs	r3, #12
 8004988:	6003      	str	r3, [r0, #0]
 800498a:	e7d6      	b.n	800493a <_free_r+0x26>
 800498c:	6825      	ldr	r5, [r4, #0]
 800498e:	1961      	adds	r1, r4, r5
 8004990:	428b      	cmp	r3, r1
 8004992:	bf04      	itt	eq
 8004994:	6819      	ldreq	r1, [r3, #0]
 8004996:	685b      	ldreq	r3, [r3, #4]
 8004998:	6063      	str	r3, [r4, #4]
 800499a:	bf04      	itt	eq
 800499c:	1949      	addeq	r1, r1, r5
 800499e:	6021      	streq	r1, [r4, #0]
 80049a0:	6054      	str	r4, [r2, #4]
 80049a2:	e7ca      	b.n	800493a <_free_r+0x26>
 80049a4:	b003      	add	sp, #12
 80049a6:	bd30      	pop	{r4, r5, pc}
 80049a8:	200001ac 	.word	0x200001ac

080049ac <sbrk_aligned>:
 80049ac:	b570      	push	{r4, r5, r6, lr}
 80049ae:	4e0e      	ldr	r6, [pc, #56]	; (80049e8 <sbrk_aligned+0x3c>)
 80049b0:	460c      	mov	r4, r1
 80049b2:	6831      	ldr	r1, [r6, #0]
 80049b4:	4605      	mov	r5, r0
 80049b6:	b911      	cbnz	r1, 80049be <sbrk_aligned+0x12>
 80049b8:	f000 f8bc 	bl	8004b34 <_sbrk_r>
 80049bc:	6030      	str	r0, [r6, #0]
 80049be:	4621      	mov	r1, r4
 80049c0:	4628      	mov	r0, r5
 80049c2:	f000 f8b7 	bl	8004b34 <_sbrk_r>
 80049c6:	1c43      	adds	r3, r0, #1
 80049c8:	d00a      	beq.n	80049e0 <sbrk_aligned+0x34>
 80049ca:	1cc4      	adds	r4, r0, #3
 80049cc:	f024 0403 	bic.w	r4, r4, #3
 80049d0:	42a0      	cmp	r0, r4
 80049d2:	d007      	beq.n	80049e4 <sbrk_aligned+0x38>
 80049d4:	1a21      	subs	r1, r4, r0
 80049d6:	4628      	mov	r0, r5
 80049d8:	f000 f8ac 	bl	8004b34 <_sbrk_r>
 80049dc:	3001      	adds	r0, #1
 80049de:	d101      	bne.n	80049e4 <sbrk_aligned+0x38>
 80049e0:	f04f 34ff 	mov.w	r4, #4294967295
 80049e4:	4620      	mov	r0, r4
 80049e6:	bd70      	pop	{r4, r5, r6, pc}
 80049e8:	200001b0 	.word	0x200001b0

080049ec <_malloc_r>:
 80049ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f0:	1ccd      	adds	r5, r1, #3
 80049f2:	f025 0503 	bic.w	r5, r5, #3
 80049f6:	3508      	adds	r5, #8
 80049f8:	2d0c      	cmp	r5, #12
 80049fa:	bf38      	it	cc
 80049fc:	250c      	movcc	r5, #12
 80049fe:	2d00      	cmp	r5, #0
 8004a00:	4607      	mov	r7, r0
 8004a02:	db01      	blt.n	8004a08 <_malloc_r+0x1c>
 8004a04:	42a9      	cmp	r1, r5
 8004a06:	d905      	bls.n	8004a14 <_malloc_r+0x28>
 8004a08:	230c      	movs	r3, #12
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	2600      	movs	r6, #0
 8004a0e:	4630      	mov	r0, r6
 8004a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a14:	4e2e      	ldr	r6, [pc, #184]	; (8004ad0 <_malloc_r+0xe4>)
 8004a16:	f000 f89d 	bl	8004b54 <__malloc_lock>
 8004a1a:	6833      	ldr	r3, [r6, #0]
 8004a1c:	461c      	mov	r4, r3
 8004a1e:	bb34      	cbnz	r4, 8004a6e <_malloc_r+0x82>
 8004a20:	4629      	mov	r1, r5
 8004a22:	4638      	mov	r0, r7
 8004a24:	f7ff ffc2 	bl	80049ac <sbrk_aligned>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	d14d      	bne.n	8004aca <_malloc_r+0xde>
 8004a2e:	6834      	ldr	r4, [r6, #0]
 8004a30:	4626      	mov	r6, r4
 8004a32:	2e00      	cmp	r6, #0
 8004a34:	d140      	bne.n	8004ab8 <_malloc_r+0xcc>
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	4631      	mov	r1, r6
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	eb04 0803 	add.w	r8, r4, r3
 8004a40:	f000 f878 	bl	8004b34 <_sbrk_r>
 8004a44:	4580      	cmp	r8, r0
 8004a46:	d13a      	bne.n	8004abe <_malloc_r+0xd2>
 8004a48:	6821      	ldr	r1, [r4, #0]
 8004a4a:	3503      	adds	r5, #3
 8004a4c:	1a6d      	subs	r5, r5, r1
 8004a4e:	f025 0503 	bic.w	r5, r5, #3
 8004a52:	3508      	adds	r5, #8
 8004a54:	2d0c      	cmp	r5, #12
 8004a56:	bf38      	it	cc
 8004a58:	250c      	movcc	r5, #12
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	4638      	mov	r0, r7
 8004a5e:	f7ff ffa5 	bl	80049ac <sbrk_aligned>
 8004a62:	3001      	adds	r0, #1
 8004a64:	d02b      	beq.n	8004abe <_malloc_r+0xd2>
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	442b      	add	r3, r5
 8004a6a:	6023      	str	r3, [r4, #0]
 8004a6c:	e00e      	b.n	8004a8c <_malloc_r+0xa0>
 8004a6e:	6822      	ldr	r2, [r4, #0]
 8004a70:	1b52      	subs	r2, r2, r5
 8004a72:	d41e      	bmi.n	8004ab2 <_malloc_r+0xc6>
 8004a74:	2a0b      	cmp	r2, #11
 8004a76:	d916      	bls.n	8004aa6 <_malloc_r+0xba>
 8004a78:	1961      	adds	r1, r4, r5
 8004a7a:	42a3      	cmp	r3, r4
 8004a7c:	6025      	str	r5, [r4, #0]
 8004a7e:	bf18      	it	ne
 8004a80:	6059      	strne	r1, [r3, #4]
 8004a82:	6863      	ldr	r3, [r4, #4]
 8004a84:	bf08      	it	eq
 8004a86:	6031      	streq	r1, [r6, #0]
 8004a88:	5162      	str	r2, [r4, r5]
 8004a8a:	604b      	str	r3, [r1, #4]
 8004a8c:	4638      	mov	r0, r7
 8004a8e:	f104 060b 	add.w	r6, r4, #11
 8004a92:	f000 f865 	bl	8004b60 <__malloc_unlock>
 8004a96:	f026 0607 	bic.w	r6, r6, #7
 8004a9a:	1d23      	adds	r3, r4, #4
 8004a9c:	1af2      	subs	r2, r6, r3
 8004a9e:	d0b6      	beq.n	8004a0e <_malloc_r+0x22>
 8004aa0:	1b9b      	subs	r3, r3, r6
 8004aa2:	50a3      	str	r3, [r4, r2]
 8004aa4:	e7b3      	b.n	8004a0e <_malloc_r+0x22>
 8004aa6:	6862      	ldr	r2, [r4, #4]
 8004aa8:	42a3      	cmp	r3, r4
 8004aaa:	bf0c      	ite	eq
 8004aac:	6032      	streq	r2, [r6, #0]
 8004aae:	605a      	strne	r2, [r3, #4]
 8004ab0:	e7ec      	b.n	8004a8c <_malloc_r+0xa0>
 8004ab2:	4623      	mov	r3, r4
 8004ab4:	6864      	ldr	r4, [r4, #4]
 8004ab6:	e7b2      	b.n	8004a1e <_malloc_r+0x32>
 8004ab8:	4634      	mov	r4, r6
 8004aba:	6876      	ldr	r6, [r6, #4]
 8004abc:	e7b9      	b.n	8004a32 <_malloc_r+0x46>
 8004abe:	230c      	movs	r3, #12
 8004ac0:	603b      	str	r3, [r7, #0]
 8004ac2:	4638      	mov	r0, r7
 8004ac4:	f000 f84c 	bl	8004b60 <__malloc_unlock>
 8004ac8:	e7a1      	b.n	8004a0e <_malloc_r+0x22>
 8004aca:	6025      	str	r5, [r4, #0]
 8004acc:	e7de      	b.n	8004a8c <_malloc_r+0xa0>
 8004ace:	bf00      	nop
 8004ad0:	200001ac 	.word	0x200001ac

08004ad4 <_realloc_r>:
 8004ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ad8:	4680      	mov	r8, r0
 8004ada:	4614      	mov	r4, r2
 8004adc:	460e      	mov	r6, r1
 8004ade:	b921      	cbnz	r1, 8004aea <_realloc_r+0x16>
 8004ae0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	f7ff bf81 	b.w	80049ec <_malloc_r>
 8004aea:	b92a      	cbnz	r2, 8004af8 <_realloc_r+0x24>
 8004aec:	f7ff ff12 	bl	8004914 <_free_r>
 8004af0:	4625      	mov	r5, r4
 8004af2:	4628      	mov	r0, r5
 8004af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004af8:	f000 f838 	bl	8004b6c <_malloc_usable_size_r>
 8004afc:	4284      	cmp	r4, r0
 8004afe:	4607      	mov	r7, r0
 8004b00:	d802      	bhi.n	8004b08 <_realloc_r+0x34>
 8004b02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b06:	d812      	bhi.n	8004b2e <_realloc_r+0x5a>
 8004b08:	4621      	mov	r1, r4
 8004b0a:	4640      	mov	r0, r8
 8004b0c:	f7ff ff6e 	bl	80049ec <_malloc_r>
 8004b10:	4605      	mov	r5, r0
 8004b12:	2800      	cmp	r0, #0
 8004b14:	d0ed      	beq.n	8004af2 <_realloc_r+0x1e>
 8004b16:	42bc      	cmp	r4, r7
 8004b18:	4622      	mov	r2, r4
 8004b1a:	4631      	mov	r1, r6
 8004b1c:	bf28      	it	cs
 8004b1e:	463a      	movcs	r2, r7
 8004b20:	f7ff fed0 	bl	80048c4 <memcpy>
 8004b24:	4631      	mov	r1, r6
 8004b26:	4640      	mov	r0, r8
 8004b28:	f7ff fef4 	bl	8004914 <_free_r>
 8004b2c:	e7e1      	b.n	8004af2 <_realloc_r+0x1e>
 8004b2e:	4635      	mov	r5, r6
 8004b30:	e7df      	b.n	8004af2 <_realloc_r+0x1e>
	...

08004b34 <_sbrk_r>:
 8004b34:	b538      	push	{r3, r4, r5, lr}
 8004b36:	4d06      	ldr	r5, [pc, #24]	; (8004b50 <_sbrk_r+0x1c>)
 8004b38:	2300      	movs	r3, #0
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	4608      	mov	r0, r1
 8004b3e:	602b      	str	r3, [r5, #0]
 8004b40:	f7fc f8ce 	bl	8000ce0 <_sbrk>
 8004b44:	1c43      	adds	r3, r0, #1
 8004b46:	d102      	bne.n	8004b4e <_sbrk_r+0x1a>
 8004b48:	682b      	ldr	r3, [r5, #0]
 8004b4a:	b103      	cbz	r3, 8004b4e <_sbrk_r+0x1a>
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	bd38      	pop	{r3, r4, r5, pc}
 8004b50:	200001b4 	.word	0x200001b4

08004b54 <__malloc_lock>:
 8004b54:	4801      	ldr	r0, [pc, #4]	; (8004b5c <__malloc_lock+0x8>)
 8004b56:	f000 b811 	b.w	8004b7c <__retarget_lock_acquire_recursive>
 8004b5a:	bf00      	nop
 8004b5c:	200001b8 	.word	0x200001b8

08004b60 <__malloc_unlock>:
 8004b60:	4801      	ldr	r0, [pc, #4]	; (8004b68 <__malloc_unlock+0x8>)
 8004b62:	f000 b80c 	b.w	8004b7e <__retarget_lock_release_recursive>
 8004b66:	bf00      	nop
 8004b68:	200001b8 	.word	0x200001b8

08004b6c <_malloc_usable_size_r>:
 8004b6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b70:	1f18      	subs	r0, r3, #4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	bfbc      	itt	lt
 8004b76:	580b      	ldrlt	r3, [r1, r0]
 8004b78:	18c0      	addlt	r0, r0, r3
 8004b7a:	4770      	bx	lr

08004b7c <__retarget_lock_acquire_recursive>:
 8004b7c:	4770      	bx	lr

08004b7e <__retarget_lock_release_recursive>:
 8004b7e:	4770      	bx	lr

08004b80 <_init>:
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b82:	bf00      	nop
 8004b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b86:	bc08      	pop	{r3}
 8004b88:	469e      	mov	lr, r3
 8004b8a:	4770      	bx	lr

08004b8c <_fini>:
 8004b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8e:	bf00      	nop
 8004b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b92:	bc08      	pop	{r3}
 8004b94:	469e      	mov	lr, r3
 8004b96:	4770      	bx	lr
