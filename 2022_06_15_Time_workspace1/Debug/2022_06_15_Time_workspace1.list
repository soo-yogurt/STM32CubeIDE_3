
2022_06_15_Time_workspace1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003970  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003b20  08003b20  00013b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b9c  08003b9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003b9c  08003b9c  00013b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ba4  08003ba4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ba4  08003ba4  00013ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ba8  08003ba8  00013ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000f8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000168  20000168  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ee57  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002218  00000000  00000000  0002eef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da0  00000000  00000000  00031110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c98  00000000  00000000  00031eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024dce  00000000  00000000  00032b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000111ec  00000000  00000000  00057916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e013b  00000000  00000000  00068b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00148c3d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bd4  00000000  00000000  00148c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003b08 	.word	0x08003b08

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003b08 	.word	0x08003b08

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <MX_GPIO_Init+0x68>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a16      	ldr	r2, [pc, #88]	; (800060c <MX_GPIO_Init+0x68>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <MX_GPIO_Init+0x68>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <MX_GPIO_Init+0x68>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a0f      	ldr	r2, [pc, #60]	; (800060c <MX_GPIO_Init+0x68>)
 80005d0:	f043 0308 	orr.w	r3, r3, #8
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <MX_GPIO_Init+0x68>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0308 	and.w	r3, r3, #8
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_GPIO_Init+0x68>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a08      	ldr	r2, [pc, #32]	; (800060c <MX_GPIO_Init+0x68>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_GPIO_Init+0x68>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000612:	b0a3      	sub	sp, #140	; 0x8c
 8000614:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
  char temp[100];
  char ampm[2][3] = {"AM", "PM"};
 8000616:	4a33      	ldr	r2, [pc, #204]	; (80006e4 <main+0xd4>)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800061e:	6018      	str	r0, [r3, #0]
 8000620:	3304      	adds	r3, #4
 8000622:	8019      	strh	r1, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fad8 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f868 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f7ff ffba 	bl	80005a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000630:	f000 fa36 	bl	8000aa0 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000634:	f000 f8da 	bl	80007ec <MX_RTC_Init>
  MX_TIM3_Init();
 8000638:	f000 f9c2 	bl	80009c0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  sTime.Hours = 11;
 800063c:	4b2a      	ldr	r3, [pc, #168]	; (80006e8 <main+0xd8>)
 800063e:	220b      	movs	r2, #11
 8000640:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 18;
 8000642:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <main+0xd8>)
 8000644:	2212      	movs	r2, #18
 8000646:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 30;
 8000648:	4b27      	ldr	r3, [pc, #156]	; (80006e8 <main+0xd8>)
 800064a:	221e      	movs	r2, #30
 800064c:	709a      	strb	r2, [r3, #2]
  sDate.Date = 20;
 800064e:	4b27      	ldr	r3, [pc, #156]	; (80006ec <main+0xdc>)
 8000650:	2214      	movs	r2, #20
 8000652:	709a      	strb	r2, [r3, #2]


  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000654:	2200      	movs	r2, #0
 8000656:	4924      	ldr	r1, [pc, #144]	; (80006e8 <main+0xd8>)
 8000658:	4825      	ldr	r0, [pc, #148]	; (80006f0 <main+0xe0>)
 800065a:	f001 fc9f 	bl	8001f9c <HAL_RTC_SetTime>
  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800065e:	2200      	movs	r2, #0
 8000660:	4922      	ldr	r1, [pc, #136]	; (80006ec <main+0xdc>)
 8000662:	4823      	ldr	r0, [pc, #140]	; (80006f0 <main+0xe0>)
 8000664:	f001 fd92 	bl	800218c <HAL_RTC_SetDate>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // 날짜 정보 얻어오기
 8000668:	2200      	movs	r2, #0
 800066a:	4920      	ldr	r1, [pc, #128]	; (80006ec <main+0xdc>)
 800066c:	4820      	ldr	r0, [pc, #128]	; (80006f0 <main+0xe0>)
 800066e:	f001 fe11 	bl	8002294 <HAL_RTC_GetDate>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // 시간 정보 얻어오기
 8000672:	2200      	movs	r2, #0
 8000674:	491c      	ldr	r1, [pc, #112]	; (80006e8 <main+0xd8>)
 8000676:	481e      	ldr	r0, [pc, #120]	; (80006f0 <main+0xe0>)
 8000678:	f001 fd2a 	bl	80020d0 <HAL_RTC_GetTime>
	  sprintf(temp,"\r\n20%02d-%02d-%02d %s %02d:%02d:%02d", sDate.Year, sDate.Month,
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <main+0xdc>)
 800067e:	78db      	ldrb	r3, [r3, #3]
 8000680:	461e      	mov	r6, r3
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <main+0xdc>)
 8000684:	785b      	ldrb	r3, [r3, #1]
 8000686:	469c      	mov	ip, r3
	         sDate.Date, ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes,
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <main+0xdc>)
 800068a:	789b      	ldrb	r3, [r3, #2]
	  sprintf(temp,"\r\n20%02d-%02d-%02d %s %02d:%02d:%02d", sDate.Year, sDate.Month,
 800068c:	461c      	mov	r4, r3
	         sDate.Date, ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes,
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <main+0xd8>)
 8000690:	78db      	ldrb	r3, [r3, #3]
 8000692:	4619      	mov	r1, r3
 8000694:	1d3a      	adds	r2, r7, #4
 8000696:	460b      	mov	r3, r1
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	440b      	add	r3, r1
 800069c:	4413      	add	r3, r2
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <main+0xd8>)
 80006a0:	7812      	ldrb	r2, [r2, #0]
	  sprintf(temp,"\r\n20%02d-%02d-%02d %s %02d:%02d:%02d", sDate.Year, sDate.Month,
 80006a2:	4611      	mov	r1, r2
	         sDate.Date, ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes,
 80006a4:	4a10      	ldr	r2, [pc, #64]	; (80006e8 <main+0xd8>)
 80006a6:	7852      	ldrb	r2, [r2, #1]
	  sprintf(temp,"\r\n20%02d-%02d-%02d %s %02d:%02d:%02d", sDate.Year, sDate.Month,
 80006a8:	4615      	mov	r5, r2
	         sTime.Seconds);
 80006aa:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <main+0xd8>)
 80006ac:	7892      	ldrb	r2, [r2, #2]
	  sprintf(temp,"\r\n20%02d-%02d-%02d %s %02d:%02d:%02d", sDate.Year, sDate.Month,
 80006ae:	f107 000c 	add.w	r0, r7, #12
 80006b2:	9204      	str	r2, [sp, #16]
 80006b4:	9503      	str	r5, [sp, #12]
 80006b6:	9102      	str	r1, [sp, #8]
 80006b8:	9301      	str	r3, [sp, #4]
 80006ba:	9400      	str	r4, [sp, #0]
 80006bc:	4663      	mov	r3, ip
 80006be:	4632      	mov	r2, r6
 80006c0:	490c      	ldr	r1, [pc, #48]	; (80006f4 <main+0xe4>)
 80006c2:	f002 fdb3 	bl	800322c <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)temp, strlen(temp), 1000);
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff fd90 	bl	80001f0 <strlen>
 80006d0:	4603      	mov	r3, r0
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	f107 010c 	add.w	r1, r7, #12
 80006d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006dc:	4806      	ldr	r0, [pc, #24]	; (80006f8 <main+0xe8>)
 80006de:	f002 f9fe 	bl	8002ade <HAL_UART_Transmit>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // 날짜 정보 얻어오기
 80006e2:	e7c1      	b.n	8000668 <main+0x58>
 80006e4:	08003b48 	.word	0x08003b48
 80006e8:	2000008c 	.word	0x2000008c
 80006ec:	200000a0 	.word	0x200000a0
 80006f0:	200000a4 	.word	0x200000a4
 80006f4:	08003b20 	.word	0x08003b20
 80006f8:	20000110 	.word	0x20000110

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2230      	movs	r2, #48	; 0x30
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fd86 	bl	800321c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	4b2c      	ldr	r3, [pc, #176]	; (80007d8 <SystemClock_Config+0xdc>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a2b      	ldr	r2, [pc, #172]	; (80007d8 <SystemClock_Config+0xdc>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <SystemClock_Config+0xdc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b26      	ldr	r3, [pc, #152]	; (80007dc <SystemClock_Config+0xe0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a25      	ldr	r2, [pc, #148]	; (80007dc <SystemClock_Config+0xe0>)
 8000746:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b23      	ldr	r3, [pc, #140]	; (80007dc <SystemClock_Config+0xe0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000758:	2306      	movs	r3, #6
 800075a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2310      	movs	r3, #16
 8000766:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800076c:	2300      	movs	r3, #0
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000770:	2308      	movs	r3, #8
 8000772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000774:	23b4      	movs	r3, #180	; 0xb4
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000778:	2302      	movs	r3, #2
 800077a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800077c:	2304      	movs	r3, #4
 800077e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 0320 	add.w	r3, r7, #32
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fd7b 	bl	8001280 <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000790:	f000 f826 	bl	80007e0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000794:	f000 fd24 	bl	80011e0 <HAL_PWREx_EnableOverDrive>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800079e:	f000 f81f 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	230f      	movs	r3, #15
 80007a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a6:	2302      	movs	r3, #2
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	2105      	movs	r1, #5
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 ffd5 	bl	8001770 <HAL_RCC_ClockConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007cc:	f000 f808 	bl	80007e0 <Error_Handler>
  }
}
 80007d0:	bf00      	nop
 80007d2:	3750      	adds	r7, #80	; 0x50
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40007000 	.word	0x40007000

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <Error_Handler+0x8>
	...

080007ec <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_RTC_Init+0x44>)
 80007f2:	4a10      	ldr	r2, [pc, #64]	; (8000834 <MX_RTC_Init+0x48>)
 80007f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_RTC_Init+0x44>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_RTC_Init+0x44>)
 80007fe:	227f      	movs	r2, #127	; 0x7f
 8000800:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_RTC_Init+0x44>)
 8000804:	22ff      	movs	r2, #255	; 0xff
 8000806:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_RTC_Init+0x44>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_RTC_Init+0x44>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_RTC_Init+0x44>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_RTC_Init+0x44>)
 800081c:	f001 fb48 	bl	8001eb0 <HAL_RTC_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000826:	f7ff ffdb 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000a4 	.word	0x200000a4
 8000834:	40002800 	.word	0x40002800

08000838 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08e      	sub	sp, #56	; 0x38
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	2230      	movs	r2, #48	; 0x30
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f002 fce7 	bl	800321c <memset>
  if(rtcHandle->Instance==RTC)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a0c      	ldr	r2, [pc, #48]	; (8000884 <HAL_RTC_MspInit+0x4c>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d111      	bne.n	800087c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000858:	2320      	movs	r3, #32
 800085a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800085c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000860:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	4618      	mov	r0, r3
 8000868:	f001 f962 	bl	8001b30 <HAL_RCCEx_PeriphCLKConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000872:	f7ff ffb5 	bl	80007e0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000876:	4b04      	ldr	r3, [pc, #16]	; (8000888 <HAL_RTC_MspInit+0x50>)
 8000878:	2201      	movs	r2, #1
 800087a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800087c:	bf00      	nop
 800087e:	3738      	adds	r7, #56	; 0x38
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40002800 	.word	0x40002800
 8000888:	42470e3c 	.word	0x42470e3c

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <HAL_MspInit+0x4c>)
 800089c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a0:	6453      	str	r3, [r2, #68]	; 0x44
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <HAL_MspInit+0x4c>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_MspInit+0x4c>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	4a08      	ldr	r2, [pc, #32]	; (80008d8 <HAL_MspInit+0x4c>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_MspInit+0x4c>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <NMI_Handler+0x4>

080008e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <HardFault_Handler+0x4>

080008e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <MemManage_Handler+0x4>

080008ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <BusFault_Handler+0x4>

080008f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <UsageFault_Handler+0x4>

080008fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000928:	f000 f9a8 	bl	8000c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}

08000930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000938:	4a14      	ldr	r2, [pc, #80]	; (800098c <_sbrk+0x5c>)
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <_sbrk+0x60>)
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <_sbrk+0x64>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d102      	bne.n	8000952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <_sbrk+0x64>)
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <_sbrk+0x68>)
 8000950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <_sbrk+0x64>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	429a      	cmp	r2, r3
 800095e:	d207      	bcs.n	8000970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000960:	f002 fc32 	bl	80031c8 <__errno>
 8000964:	4603      	mov	r3, r0
 8000966:	220c      	movs	r2, #12
 8000968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800096a:	f04f 33ff 	mov.w	r3, #4294967295
 800096e:	e009      	b.n	8000984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <_sbrk+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <_sbrk+0x64>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	4a05      	ldr	r2, [pc, #20]	; (8000994 <_sbrk+0x64>)
 8000980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20030000 	.word	0x20030000
 8000990:	00000400 	.word	0x00000400
 8000994:	200000c4 	.word	0x200000c4
 8000998:	20000168 	.word	0x20000168

0800099c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <SystemInit+0x20>)
 80009a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a6:	4a05      	ldr	r2, [pc, #20]	; (80009bc <SystemInit+0x20>)
 80009a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d4:	463b      	mov	r3, r7
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <MX_TIM3_Init+0x94>)
 80009de:	4a1e      	ldr	r2, [pc, #120]	; (8000a58 <MX_TIM3_Init+0x98>)
 80009e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_TIM3_Init+0x94>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_TIM3_Init+0x94>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009ee:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <MX_TIM3_Init+0x94>)
 80009f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_TIM3_Init+0x94>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_TIM3_Init+0x94>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a02:	4814      	ldr	r0, [pc, #80]	; (8000a54 <MX_TIM3_Init+0x94>)
 8000a04:	f001 fd52 	bl	80024ac <HAL_TIM_Base_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000a0e:	f7ff fee7 	bl	80007e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480d      	ldr	r0, [pc, #52]	; (8000a54 <MX_TIM3_Init+0x94>)
 8000a20:	f001 fd93 	bl	800254a <HAL_TIM_ConfigClockSource>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000a2a:	f7ff fed9 	bl	80007e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a36:	463b      	mov	r3, r7
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4806      	ldr	r0, [pc, #24]	; (8000a54 <MX_TIM3_Init+0x94>)
 8000a3c:	f001 ff86 	bl	800294c <HAL_TIMEx_MasterConfigSynchronization>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000a46:	f7ff fecb 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000c8 	.word	0x200000c8
 8000a58:	40000400 	.word	0x40000400

08000a5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <HAL_TIM_Base_MspInit+0x3c>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d10d      	bne.n	8000a8a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <HAL_TIM_Base_MspInit+0x40>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a09      	ldr	r2, [pc, #36]	; (8000a9c <HAL_TIM_Base_MspInit+0x40>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <HAL_TIM_Base_MspInit+0x40>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40000400 	.word	0x40000400
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_USART3_UART_Init+0x4c>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <MX_USART3_UART_Init+0x50>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_USART3_UART_Init+0x4c>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_USART3_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_USART3_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_USART3_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_USART3_UART_Init+0x4c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_USART3_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_USART3_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_USART3_UART_Init+0x4c>)
 8000ad8:	f001 ffb4 	bl	8002a44 <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ae2:	f7ff fe7d 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000110 	.word	0x20000110
 8000af0:	40004800 	.word	0x40004800

08000af4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a19      	ldr	r2, [pc, #100]	; (8000b78 <HAL_UART_MspInit+0x84>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d12c      	bne.n	8000b70 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <HAL_UART_MspInit+0x88>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <HAL_UART_MspInit+0x88>)
 8000b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_UART_MspInit+0x88>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HAL_UART_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <HAL_UART_MspInit+0x88>)
 8000b3c:	f043 0308 	orr.w	r3, r3, #8
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_UART_MspInit+0x88>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b60:	2307      	movs	r3, #7
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <HAL_UART_MspInit+0x8c>)
 8000b6c:	f000 f98c 	bl	8000e88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b70:	bf00      	nop
 8000b72:	3728      	adds	r7, #40	; 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40004800 	.word	0x40004800
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020c00 	.word	0x40020c00

08000b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bbc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b8a:	490e      	ldr	r1, [pc, #56]	; (8000bc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b8c:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b90:	e002      	b.n	8000b98 <LoopCopyDataInit>

08000b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b96:	3304      	adds	r3, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b9c:	d3f9      	bcc.n	8000b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9e:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ba0:	4c0b      	ldr	r4, [pc, #44]	; (8000bd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba4:	e001      	b.n	8000baa <LoopFillZerobss>

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba8:	3204      	adds	r2, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bae:	f7ff fef5 	bl	800099c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb2:	f002 fb0f 	bl	80031d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bb6:	f7ff fd2b 	bl	8000610 <main>
  bx  lr    
 8000bba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000bbc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bc8:	08003bac 	.word	0x08003bac
  ldr r2, =_sbss
 8000bcc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bd0:	20000168 	.word	0x20000168

08000bd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC_IRQHandler>
	...

08000bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <HAL_Init+0x40>)
 8000be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <HAL_Init+0x40>)
 8000bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <HAL_Init+0x40>)
 8000bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f000 f90d 	bl	8000e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c06:	200f      	movs	r0, #15
 8000c08:	f000 f808 	bl	8000c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c0c:	f7ff fe3e 	bl	800088c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023c00 	.word	0x40023c00

08000c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_InitTick+0x54>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_InitTick+0x58>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f917 	bl	8000e6e <HAL_SYSTICK_Config>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e00e      	b.n	8000c68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b0f      	cmp	r3, #15
 8000c4e:	d80a      	bhi.n	8000c66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c50:	2200      	movs	r2, #0
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295
 8000c58:	f000 f8ed 	bl	8000e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c5c:	4a06      	ldr	r2, [pc, #24]	; (8000c78 <HAL_InitTick+0x5c>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c62:	2300      	movs	r3, #0
 8000c64:	e000      	b.n	8000c68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000000 	.word	0x20000000
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20000004 	.word	0x20000004

08000c7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_IncTick+0x20>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_IncTick+0x24>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <HAL_IncTick+0x24>)
 8000c8e:	6013      	str	r3, [r2, #0]
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000154 	.word	0x20000154

08000ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <HAL_GetTick+0x14>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000154 	.word	0x20000154

08000cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <__NVIC_GetPriorityGrouping+0x18>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	f003 0307 	and.w	r3, r3, #7
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db0a      	blt.n	8000d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	490c      	ldr	r1, [pc, #48]	; (8000d6c <__NVIC_SetPriority+0x4c>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d48:	e00a      	b.n	8000d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4908      	ldr	r1, [pc, #32]	; (8000d70 <__NVIC_SetPriority+0x50>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	3b04      	subs	r3, #4
 8000d58:	0112      	lsls	r2, r2, #4
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	761a      	strb	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000e100 	.word	0xe000e100
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f1c3 0307 	rsb	r3, r3, #7
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	bf28      	it	cs
 8000d92:	2304      	movcs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	2b06      	cmp	r3, #6
 8000d9c:	d902      	bls.n	8000da4 <NVIC_EncodePriority+0x30>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3b03      	subs	r3, #3
 8000da2:	e000      	b.n	8000da6 <NVIC_EncodePriority+0x32>
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	43d9      	mvns	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	4313      	orrs	r3, r2
         );
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3724      	adds	r7, #36	; 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dec:	d301      	bcc.n	8000df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00f      	b.n	8000e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <SysTick_Config+0x40>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfa:	210f      	movs	r1, #15
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f7ff ff8e 	bl	8000d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <SysTick_Config+0x40>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <SysTick_Config+0x40>)
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	e000e010 	.word	0xe000e010

08000e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ff47 	bl	8000cbc <__NVIC_SetPriorityGrouping>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e48:	f7ff ff5c 	bl	8000d04 <__NVIC_GetPriorityGrouping>
 8000e4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	6978      	ldr	r0, [r7, #20]
 8000e54:	f7ff ff8e 	bl	8000d74 <NVIC_EncodePriority>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff5d 	bl	8000d20 <__NVIC_SetPriority>
}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffb0 	bl	8000ddc <SysTick_Config>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
 8000ea2:	e177      	b.n	8001194 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	f040 8166 	bne.w	800118e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d005      	beq.n	8000eda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d130      	bne.n	8000f3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	68da      	ldr	r2, [r3, #12]
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f10:	2201      	movs	r2, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	091b      	lsrs	r3, r3, #4
 8000f26:	f003 0201 	and.w	r2, r3, #1
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b03      	cmp	r3, #3
 8000f46:	d017      	beq.n	8000f78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d123      	bne.n	8000fcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	08da      	lsrs	r2, r3, #3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	691a      	ldr	r2, [r3, #16]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	69b9      	ldr	r1, [r7, #24]
 8000fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0203 	and.w	r2, r3, #3
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 80c0 	beq.w	800118e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b66      	ldr	r3, [pc, #408]	; (80011ac <HAL_GPIO_Init+0x324>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	4a65      	ldr	r2, [pc, #404]	; (80011ac <HAL_GPIO_Init+0x324>)
 8001018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101c:	6453      	str	r3, [r2, #68]	; 0x44
 800101e:	4b63      	ldr	r3, [pc, #396]	; (80011ac <HAL_GPIO_Init+0x324>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800102a:	4a61      	ldr	r2, [pc, #388]	; (80011b0 <HAL_GPIO_Init+0x328>)
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	089b      	lsrs	r3, r3, #2
 8001030:	3302      	adds	r3, #2
 8001032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	220f      	movs	r2, #15
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a58      	ldr	r2, [pc, #352]	; (80011b4 <HAL_GPIO_Init+0x32c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d037      	beq.n	80010c6 <HAL_GPIO_Init+0x23e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a57      	ldr	r2, [pc, #348]	; (80011b8 <HAL_GPIO_Init+0x330>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d031      	beq.n	80010c2 <HAL_GPIO_Init+0x23a>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a56      	ldr	r2, [pc, #344]	; (80011bc <HAL_GPIO_Init+0x334>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d02b      	beq.n	80010be <HAL_GPIO_Init+0x236>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a55      	ldr	r2, [pc, #340]	; (80011c0 <HAL_GPIO_Init+0x338>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d025      	beq.n	80010ba <HAL_GPIO_Init+0x232>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a54      	ldr	r2, [pc, #336]	; (80011c4 <HAL_GPIO_Init+0x33c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d01f      	beq.n	80010b6 <HAL_GPIO_Init+0x22e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a53      	ldr	r2, [pc, #332]	; (80011c8 <HAL_GPIO_Init+0x340>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d019      	beq.n	80010b2 <HAL_GPIO_Init+0x22a>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a52      	ldr	r2, [pc, #328]	; (80011cc <HAL_GPIO_Init+0x344>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d013      	beq.n	80010ae <HAL_GPIO_Init+0x226>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a51      	ldr	r2, [pc, #324]	; (80011d0 <HAL_GPIO_Init+0x348>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d00d      	beq.n	80010aa <HAL_GPIO_Init+0x222>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a50      	ldr	r2, [pc, #320]	; (80011d4 <HAL_GPIO_Init+0x34c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d007      	beq.n	80010a6 <HAL_GPIO_Init+0x21e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4f      	ldr	r2, [pc, #316]	; (80011d8 <HAL_GPIO_Init+0x350>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d101      	bne.n	80010a2 <HAL_GPIO_Init+0x21a>
 800109e:	2309      	movs	r3, #9
 80010a0:	e012      	b.n	80010c8 <HAL_GPIO_Init+0x240>
 80010a2:	230a      	movs	r3, #10
 80010a4:	e010      	b.n	80010c8 <HAL_GPIO_Init+0x240>
 80010a6:	2308      	movs	r3, #8
 80010a8:	e00e      	b.n	80010c8 <HAL_GPIO_Init+0x240>
 80010aa:	2307      	movs	r3, #7
 80010ac:	e00c      	b.n	80010c8 <HAL_GPIO_Init+0x240>
 80010ae:	2306      	movs	r3, #6
 80010b0:	e00a      	b.n	80010c8 <HAL_GPIO_Init+0x240>
 80010b2:	2305      	movs	r3, #5
 80010b4:	e008      	b.n	80010c8 <HAL_GPIO_Init+0x240>
 80010b6:	2304      	movs	r3, #4
 80010b8:	e006      	b.n	80010c8 <HAL_GPIO_Init+0x240>
 80010ba:	2303      	movs	r3, #3
 80010bc:	e004      	b.n	80010c8 <HAL_GPIO_Init+0x240>
 80010be:	2302      	movs	r3, #2
 80010c0:	e002      	b.n	80010c8 <HAL_GPIO_Init+0x240>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <HAL_GPIO_Init+0x240>
 80010c6:	2300      	movs	r3, #0
 80010c8:	69fa      	ldr	r2, [r7, #28]
 80010ca:	f002 0203 	and.w	r2, r2, #3
 80010ce:	0092      	lsls	r2, r2, #2
 80010d0:	4093      	lsls	r3, r2
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d8:	4935      	ldr	r1, [pc, #212]	; (80011b0 <HAL_GPIO_Init+0x328>)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	3302      	adds	r3, #2
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e6:	4b3d      	ldr	r3, [pc, #244]	; (80011dc <HAL_GPIO_Init+0x354>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800110a:	4a34      	ldr	r2, [pc, #208]	; (80011dc <HAL_GPIO_Init+0x354>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001110:	4b32      	ldr	r3, [pc, #200]	; (80011dc <HAL_GPIO_Init+0x354>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001134:	4a29      	ldr	r2, [pc, #164]	; (80011dc <HAL_GPIO_Init+0x354>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800113a:	4b28      	ldr	r3, [pc, #160]	; (80011dc <HAL_GPIO_Init+0x354>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800115e:	4a1f      	ldr	r2, [pc, #124]	; (80011dc <HAL_GPIO_Init+0x354>)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <HAL_GPIO_Init+0x354>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001188:	4a14      	ldr	r2, [pc, #80]	; (80011dc <HAL_GPIO_Init+0x354>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3301      	adds	r3, #1
 8001192:	61fb      	str	r3, [r7, #28]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	2b0f      	cmp	r3, #15
 8001198:	f67f ae84 	bls.w	8000ea4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40013800 	.word	0x40013800
 80011b4:	40020000 	.word	0x40020000
 80011b8:	40020400 	.word	0x40020400
 80011bc:	40020800 	.word	0x40020800
 80011c0:	40020c00 	.word	0x40020c00
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40021400 	.word	0x40021400
 80011cc:	40021800 	.word	0x40021800
 80011d0:	40021c00 	.word	0x40021c00
 80011d4:	40022000 	.word	0x40022000
 80011d8:	40022400 	.word	0x40022400
 80011dc:	40013c00 	.word	0x40013c00

080011e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <HAL_PWREx_EnableOverDrive+0x90>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <HAL_PWREx_EnableOverDrive+0x90>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f8:	6413      	str	r3, [r2, #64]	; 0x40
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <HAL_PWREx_EnableOverDrive+0x90>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001206:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <HAL_PWREx_EnableOverDrive+0x94>)
 8001208:	2201      	movs	r2, #1
 800120a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800120c:	f7ff fd4a 	bl	8000ca4 <HAL_GetTick>
 8001210:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001212:	e009      	b.n	8001228 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001214:	f7ff fd46 	bl	8000ca4 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001222:	d901      	bls.n	8001228 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e01f      	b.n	8001268 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <HAL_PWREx_EnableOverDrive+0x98>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001234:	d1ee      	bne.n	8001214 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001238:	2201      	movs	r2, #1
 800123a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800123c:	f7ff fd32 	bl	8000ca4 <HAL_GetTick>
 8001240:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001242:	e009      	b.n	8001258 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001244:	f7ff fd2e 	bl	8000ca4 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001252:	d901      	bls.n	8001258 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e007      	b.n	8001268 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <HAL_PWREx_EnableOverDrive+0x98>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001260:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001264:	d1ee      	bne.n	8001244 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40023800 	.word	0x40023800
 8001274:	420e0040 	.word	0x420e0040
 8001278:	40007000 	.word	0x40007000
 800127c:	420e0044 	.word	0x420e0044

08001280 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e267      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d075      	beq.n	800138a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800129e:	4b88      	ldr	r3, [pc, #544]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d00c      	beq.n	80012c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012aa:	4b85      	ldr	r3, [pc, #532]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d112      	bne.n	80012dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b6:	4b82      	ldr	r3, [pc, #520]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012c2:	d10b      	bne.n	80012dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c4:	4b7e      	ldr	r3, [pc, #504]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d05b      	beq.n	8001388 <HAL_RCC_OscConfig+0x108>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d157      	bne.n	8001388 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e242      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e4:	d106      	bne.n	80012f4 <HAL_RCC_OscConfig+0x74>
 80012e6:	4b76      	ldr	r3, [pc, #472]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a75      	ldr	r2, [pc, #468]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80012ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	e01d      	b.n	8001330 <HAL_RCC_OscConfig+0xb0>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012fc:	d10c      	bne.n	8001318 <HAL_RCC_OscConfig+0x98>
 80012fe:	4b70      	ldr	r3, [pc, #448]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a6f      	ldr	r2, [pc, #444]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	4b6d      	ldr	r3, [pc, #436]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a6c      	ldr	r2, [pc, #432]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e00b      	b.n	8001330 <HAL_RCC_OscConfig+0xb0>
 8001318:	4b69      	ldr	r3, [pc, #420]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a68      	ldr	r2, [pc, #416]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 800131e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	4b66      	ldr	r3, [pc, #408]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a65      	ldr	r2, [pc, #404]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 800132a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800132e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d013      	beq.n	8001360 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fcb4 	bl	8000ca4 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001340:	f7ff fcb0 	bl	8000ca4 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b64      	cmp	r3, #100	; 0x64
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e207      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001352:	4b5b      	ldr	r3, [pc, #364]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0xc0>
 800135e:	e014      	b.n	800138a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001360:	f7ff fca0 	bl	8000ca4 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001368:	f7ff fc9c 	bl	8000ca4 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	; 0x64
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e1f3      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137a:	4b51      	ldr	r3, [pc, #324]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f0      	bne.n	8001368 <HAL_RCC_OscConfig+0xe8>
 8001386:	e000      	b.n	800138a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d063      	beq.n	800145e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001396:	4b4a      	ldr	r3, [pc, #296]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00b      	beq.n	80013ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013a2:	4b47      	ldr	r3, [pc, #284]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d11c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ae:	4b44      	ldr	r3, [pc, #272]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d116      	bne.n	80013e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ba:	4b41      	ldr	r3, [pc, #260]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d005      	beq.n	80013d2 <HAL_RCC_OscConfig+0x152>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d001      	beq.n	80013d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e1c7      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d2:	4b3b      	ldr	r3, [pc, #236]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4937      	ldr	r1, [pc, #220]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e6:	e03a      	b.n	800145e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d020      	beq.n	8001432 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f0:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <HAL_RCC_OscConfig+0x244>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f6:	f7ff fc55 	bl	8000ca4 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013fe:	f7ff fc51 	bl	8000ca4 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e1a8      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001410:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141c:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4925      	ldr	r1, [pc, #148]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 800142c:	4313      	orrs	r3, r2
 800142e:	600b      	str	r3, [r1, #0]
 8001430:	e015      	b.n	800145e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001432:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <HAL_RCC_OscConfig+0x244>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff fc34 	bl	8000ca4 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001440:	f7ff fc30 	bl	8000ca4 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e187      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001452:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d036      	beq.n	80014d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d016      	beq.n	80014a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_RCC_OscConfig+0x248>)
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001478:	f7ff fc14 	bl	8000ca4 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff fc10 	bl	8000ca4 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e167      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0x200>
 800149e:	e01b      	b.n	80014d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_RCC_OscConfig+0x248>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a6:	f7ff fbfd 	bl	8000ca4 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ac:	e00e      	b.n	80014cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ae:	f7ff fbf9 	bl	8000ca4 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d907      	bls.n	80014cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e150      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
 80014c0:	40023800 	.word	0x40023800
 80014c4:	42470000 	.word	0x42470000
 80014c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014cc:	4b88      	ldr	r3, [pc, #544]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 80014ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1ea      	bne.n	80014ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 8097 	beq.w	8001614 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ea:	4b81      	ldr	r3, [pc, #516]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10f      	bne.n	8001516 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	4b7d      	ldr	r3, [pc, #500]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a7c      	ldr	r2, [pc, #496]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b7a      	ldr	r3, [pc, #488]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001512:	2301      	movs	r3, #1
 8001514:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001516:	4b77      	ldr	r3, [pc, #476]	; (80016f4 <HAL_RCC_OscConfig+0x474>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151e:	2b00      	cmp	r3, #0
 8001520:	d118      	bne.n	8001554 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001522:	4b74      	ldr	r3, [pc, #464]	; (80016f4 <HAL_RCC_OscConfig+0x474>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a73      	ldr	r2, [pc, #460]	; (80016f4 <HAL_RCC_OscConfig+0x474>)
 8001528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800152e:	f7ff fbb9 	bl	8000ca4 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001536:	f7ff fbb5 	bl	8000ca4 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e10c      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001548:	4b6a      	ldr	r3, [pc, #424]	; (80016f4 <HAL_RCC_OscConfig+0x474>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0f0      	beq.n	8001536 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d106      	bne.n	800156a <HAL_RCC_OscConfig+0x2ea>
 800155c:	4b64      	ldr	r3, [pc, #400]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 800155e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001560:	4a63      	ldr	r2, [pc, #396]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6713      	str	r3, [r2, #112]	; 0x70
 8001568:	e01c      	b.n	80015a4 <HAL_RCC_OscConfig+0x324>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b05      	cmp	r3, #5
 8001570:	d10c      	bne.n	800158c <HAL_RCC_OscConfig+0x30c>
 8001572:	4b5f      	ldr	r3, [pc, #380]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001576:	4a5e      	ldr	r2, [pc, #376]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	6713      	str	r3, [r2, #112]	; 0x70
 800157e:	4b5c      	ldr	r3, [pc, #368]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001582:	4a5b      	ldr	r2, [pc, #364]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6713      	str	r3, [r2, #112]	; 0x70
 800158a:	e00b      	b.n	80015a4 <HAL_RCC_OscConfig+0x324>
 800158c:	4b58      	ldr	r3, [pc, #352]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 800158e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001590:	4a57      	ldr	r2, [pc, #348]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001592:	f023 0301 	bic.w	r3, r3, #1
 8001596:	6713      	str	r3, [r2, #112]	; 0x70
 8001598:	4b55      	ldr	r3, [pc, #340]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159c:	4a54      	ldr	r2, [pc, #336]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 800159e:	f023 0304 	bic.w	r3, r3, #4
 80015a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d015      	beq.n	80015d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ac:	f7ff fb7a 	bl	8000ca4 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b2:	e00a      	b.n	80015ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b4:	f7ff fb76 	bl	8000ca4 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e0cb      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ca:	4b49      	ldr	r3, [pc, #292]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0ee      	beq.n	80015b4 <HAL_RCC_OscConfig+0x334>
 80015d6:	e014      	b.n	8001602 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d8:	f7ff fb64 	bl	8000ca4 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e0:	f7ff fb60 	bl	8000ca4 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e0b5      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f6:	4b3e      	ldr	r3, [pc, #248]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1ee      	bne.n	80015e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001602:	7dfb      	ldrb	r3, [r7, #23]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d105      	bne.n	8001614 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001608:	4b39      	ldr	r3, [pc, #228]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	4a38      	ldr	r2, [pc, #224]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 800160e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001612:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80a1 	beq.w	8001760 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800161e:	4b34      	ldr	r3, [pc, #208]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b08      	cmp	r3, #8
 8001628:	d05c      	beq.n	80016e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d141      	bne.n	80016b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001632:	4b31      	ldr	r3, [pc, #196]	; (80016f8 <HAL_RCC_OscConfig+0x478>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff fb34 	bl	8000ca4 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001640:	f7ff fb30 	bl	8000ca4 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e087      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001652:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69da      	ldr	r2, [r3, #28]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	019b      	lsls	r3, r3, #6
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	085b      	lsrs	r3, r3, #1
 8001676:	3b01      	subs	r3, #1
 8001678:	041b      	lsls	r3, r3, #16
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001680:	061b      	lsls	r3, r3, #24
 8001682:	491b      	ldr	r1, [pc, #108]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001684:	4313      	orrs	r3, r2
 8001686:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001688:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <HAL_RCC_OscConfig+0x478>)
 800168a:	2201      	movs	r2, #1
 800168c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168e:	f7ff fb09 	bl	8000ca4 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001696:	f7ff fb05 	bl	8000ca4 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e05c      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x416>
 80016b4:	e054      	b.n	8001760 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_RCC_OscConfig+0x478>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff faf2 	bl	8000ca4 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c4:	f7ff faee 	bl	8000ca4 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e045      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x444>
 80016e2:	e03d      	b.n	8001760 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d107      	bne.n	80016fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e038      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40007000 	.word	0x40007000
 80016f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_RCC_OscConfig+0x4ec>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d028      	beq.n	800175c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001714:	429a      	cmp	r2, r3
 8001716:	d121      	bne.n	800175c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d11a      	bne.n	800175c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800172c:	4013      	ands	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001732:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001734:	4293      	cmp	r3, r2
 8001736:	d111      	bne.n	800175c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001742:	085b      	lsrs	r3, r3, #1
 8001744:	3b01      	subs	r3, #1
 8001746:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001748:	429a      	cmp	r2, r3
 800174a:	d107      	bne.n	800175c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800

08001770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e0cc      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001784:	4b68      	ldr	r3, [pc, #416]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 030f 	and.w	r3, r3, #15
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d90c      	bls.n	80017ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b65      	ldr	r3, [pc, #404]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179a:	4b63      	ldr	r3, [pc, #396]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d001      	beq.n	80017ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0b8      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d020      	beq.n	80017fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c4:	4b59      	ldr	r3, [pc, #356]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	4a58      	ldr	r2, [pc, #352]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0308 	and.w	r3, r3, #8
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017dc:	4b53      	ldr	r3, [pc, #332]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	4a52      	ldr	r2, [pc, #328]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e8:	4b50      	ldr	r3, [pc, #320]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	494d      	ldr	r1, [pc, #308]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d044      	beq.n	8001890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180e:	4b47      	ldr	r3, [pc, #284]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d119      	bne.n	800184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e07f      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d003      	beq.n	800182e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182a:	2b03      	cmp	r3, #3
 800182c:	d107      	bne.n	800183e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182e:	4b3f      	ldr	r3, [pc, #252]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d109      	bne.n	800184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e06f      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183e:	4b3b      	ldr	r3, [pc, #236]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e067      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800184e:	4b37      	ldr	r3, [pc, #220]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f023 0203 	bic.w	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	4934      	ldr	r1, [pc, #208]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	4313      	orrs	r3, r2
 800185e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001860:	f7ff fa20 	bl	8000ca4 <HAL_GetTick>
 8001864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001866:	e00a      	b.n	800187e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001868:	f7ff fa1c 	bl	8000ca4 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f241 3288 	movw	r2, #5000	; 0x1388
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e04f      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187e:	4b2b      	ldr	r3, [pc, #172]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 020c 	and.w	r2, r3, #12
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	429a      	cmp	r2, r3
 800188e:	d1eb      	bne.n	8001868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 030f 	and.w	r3, r3, #15
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d20c      	bcs.n	80018b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189e:	4b22      	ldr	r3, [pc, #136]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e032      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d008      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	4916      	ldr	r1, [pc, #88]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d009      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	490e      	ldr	r1, [pc, #56]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018f6:	f000 f821 	bl	800193c <HAL_RCC_GetSysClockFreq>
 80018fa:	4602      	mov	r2, r0
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	490a      	ldr	r1, [pc, #40]	; (8001930 <HAL_RCC_ClockConfig+0x1c0>)
 8001908:	5ccb      	ldrb	r3, [r1, r3]
 800190a:	fa22 f303 	lsr.w	r3, r2, r3
 800190e:	4a09      	ldr	r2, [pc, #36]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_RCC_ClockConfig+0x1c8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff f980 	bl	8000c1c <HAL_InitTick>

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023c00 	.word	0x40023c00
 800192c:	40023800 	.word	0x40023800
 8001930:	08003b50 	.word	0x08003b50
 8001934:	20000000 	.word	0x20000000
 8001938:	20000004 	.word	0x20000004

0800193c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800193c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001940:	b090      	sub	sp, #64	; 0x40
 8001942:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	637b      	str	r3, [r7, #52]	; 0x34
 8001948:	2300      	movs	r3, #0
 800194a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800194c:	2300      	movs	r3, #0
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001954:	4b59      	ldr	r3, [pc, #356]	; (8001abc <HAL_RCC_GetSysClockFreq+0x180>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	2b08      	cmp	r3, #8
 800195e:	d00d      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x40>
 8001960:	2b08      	cmp	r3, #8
 8001962:	f200 80a1 	bhi.w	8001aa8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <HAL_RCC_GetSysClockFreq+0x34>
 800196a:	2b04      	cmp	r3, #4
 800196c:	d003      	beq.n	8001976 <HAL_RCC_GetSysClockFreq+0x3a>
 800196e:	e09b      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001970:	4b53      	ldr	r3, [pc, #332]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001972:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001974:	e09b      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001976:	4b53      	ldr	r3, [pc, #332]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001978:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800197a:	e098      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800197c:	4b4f      	ldr	r3, [pc, #316]	; (8001abc <HAL_RCC_GetSysClockFreq+0x180>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001984:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001986:	4b4d      	ldr	r3, [pc, #308]	; (8001abc <HAL_RCC_GetSysClockFreq+0x180>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d028      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001992:	4b4a      	ldr	r3, [pc, #296]	; (8001abc <HAL_RCC_GetSysClockFreq+0x180>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	099b      	lsrs	r3, r3, #6
 8001998:	2200      	movs	r2, #0
 800199a:	623b      	str	r3, [r7, #32]
 800199c:	627a      	str	r2, [r7, #36]	; 0x24
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019a4:	2100      	movs	r1, #0
 80019a6:	4b47      	ldr	r3, [pc, #284]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x188>)
 80019a8:	fb03 f201 	mul.w	r2, r3, r1
 80019ac:	2300      	movs	r3, #0
 80019ae:	fb00 f303 	mul.w	r3, r0, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	4a43      	ldr	r2, [pc, #268]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x188>)
 80019b6:	fba0 1202 	umull	r1, r2, r0, r2
 80019ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019bc:	460a      	mov	r2, r1
 80019be:	62ba      	str	r2, [r7, #40]	; 0x28
 80019c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019c2:	4413      	add	r3, r2
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c8:	2200      	movs	r2, #0
 80019ca:	61bb      	str	r3, [r7, #24]
 80019cc:	61fa      	str	r2, [r7, #28]
 80019ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019d6:	f7fe fc63 	bl	80002a0 <__aeabi_uldivmod>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4613      	mov	r3, r2
 80019e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019e2:	e053      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e4:	4b35      	ldr	r3, [pc, #212]	; (8001abc <HAL_RCC_GetSysClockFreq+0x180>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	099b      	lsrs	r3, r3, #6
 80019ea:	2200      	movs	r2, #0
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	617a      	str	r2, [r7, #20]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019f6:	f04f 0b00 	mov.w	fp, #0
 80019fa:	4652      	mov	r2, sl
 80019fc:	465b      	mov	r3, fp
 80019fe:	f04f 0000 	mov.w	r0, #0
 8001a02:	f04f 0100 	mov.w	r1, #0
 8001a06:	0159      	lsls	r1, r3, #5
 8001a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a0c:	0150      	lsls	r0, r2, #5
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	ebb2 080a 	subs.w	r8, r2, sl
 8001a16:	eb63 090b 	sbc.w	r9, r3, fp
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a2e:	ebb2 0408 	subs.w	r4, r2, r8
 8001a32:	eb63 0509 	sbc.w	r5, r3, r9
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	00eb      	lsls	r3, r5, #3
 8001a40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a44:	00e2      	lsls	r2, r4, #3
 8001a46:	4614      	mov	r4, r2
 8001a48:	461d      	mov	r5, r3
 8001a4a:	eb14 030a 	adds.w	r3, r4, sl
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	eb45 030b 	adc.w	r3, r5, fp
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a62:	4629      	mov	r1, r5
 8001a64:	028b      	lsls	r3, r1, #10
 8001a66:	4621      	mov	r1, r4
 8001a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	028a      	lsls	r2, r1, #10
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a76:	2200      	movs	r2, #0
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	60fa      	str	r2, [r7, #12]
 8001a7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a80:	f7fe fc0e 	bl	80002a0 <__aeabi_uldivmod>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4613      	mov	r3, r2
 8001a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_RCC_GetSysClockFreq+0x180>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	0c1b      	lsrs	r3, r3, #16
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	3301      	adds	r3, #1
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001aa6:	e002      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001aaa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3740      	adds	r7, #64	; 0x40
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	00f42400 	.word	0x00f42400
 8001ac4:	017d7840 	.word	0x017d7840

08001ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <HAL_RCC_GetHCLKFreq+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000000 	.word	0x20000000

08001ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ae4:	f7ff fff0 	bl	8001ac8 <HAL_RCC_GetHCLKFreq>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	0a9b      	lsrs	r3, r3, #10
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	4903      	ldr	r1, [pc, #12]	; (8001b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001af6:	5ccb      	ldrb	r3, [r1, r3]
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40023800 	.word	0x40023800
 8001b04:	08003b60 	.word	0x08003b60

08001b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b0c:	f7ff ffdc 	bl	8001ac8 <HAL_RCC_GetHCLKFreq>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0b5b      	lsrs	r3, r3, #13
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4903      	ldr	r1, [pc, #12]	; (8001b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b1e:	5ccb      	ldrb	r3, [r1, r3]
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	08003b60 	.word	0x08003b60

08001b30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10b      	bne.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d105      	bne.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d075      	beq.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001b64:	4b91      	ldr	r3, [pc, #580]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b6a:	f7ff f89b 	bl	8000ca4 <HAL_GetTick>
 8001b6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b72:	f7ff f897 	bl	8000ca4 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e189      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b84:	4b8a      	ldr	r3, [pc, #552]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f0      	bne.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d009      	beq.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	019a      	lsls	r2, r3, #6
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	071b      	lsls	r3, r3, #28
 8001ba8:	4981      	ldr	r1, [pc, #516]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d01f      	beq.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001bbc:	4b7c      	ldr	r3, [pc, #496]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bc2:	0f1b      	lsrs	r3, r3, #28
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	019a      	lsls	r2, r3, #6
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	061b      	lsls	r3, r3, #24
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	071b      	lsls	r3, r3, #28
 8001bdc:	4974      	ldr	r1, [pc, #464]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001be4:	4b72      	ldr	r3, [pc, #456]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bea:	f023 021f 	bic.w	r2, r3, #31
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	496e      	ldr	r1, [pc, #440]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00d      	beq.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	019a      	lsls	r2, r3, #6
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	061b      	lsls	r3, r3, #24
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	071b      	lsls	r3, r3, #28
 8001c1c:	4964      	ldr	r1, [pc, #400]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001c24:	4b61      	ldr	r3, [pc, #388]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c2a:	f7ff f83b 	bl	8000ca4 <HAL_GetTick>
 8001c2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c32:	f7ff f837 	bl	8000ca4 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e129      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c44:	4b5a      	ldr	r3, [pc, #360]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d105      	bne.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d079      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001c68:	4b52      	ldr	r3, [pc, #328]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c6e:	f7ff f819 	bl	8000ca4 <HAL_GetTick>
 8001c72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c74:	e008      	b.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001c76:	f7ff f815 	bl	8000ca4 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e107      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c88:	4b49      	ldr	r3, [pc, #292]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c94:	d0ef      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d020      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001ca2:	4b43      	ldr	r3, [pc, #268]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca8:	0f1b      	lsrs	r3, r3, #28
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	019a      	lsls	r2, r3, #6
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	061b      	lsls	r3, r3, #24
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	071b      	lsls	r3, r3, #28
 8001cc2:	493b      	ldr	r1, [pc, #236]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001cca:	4b39      	ldr	r3, [pc, #228]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cd0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	021b      	lsls	r3, r3, #8
 8001cdc:	4934      	ldr	r1, [pc, #208]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d01e      	beq.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001cf0:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf6:	0e1b      	lsrs	r3, r3, #24
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	019a      	lsls	r2, r3, #6
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	061b      	lsls	r3, r3, #24
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	071b      	lsls	r3, r3, #28
 8001d10:	4927      	ldr	r1, [pc, #156]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001d18:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	4922      	ldr	r1, [pc, #136]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001d2e:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d34:	f7fe ffb6 	bl	8000ca4 <HAL_GetTick>
 8001d38:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001d3c:	f7fe ffb2 	bl	8000ca4 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e0a4      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d5a:	d1ef      	bne.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0320 	and.w	r3, r3, #32
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 808b 	beq.w	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a0f      	ldr	r2, [pc, #60]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d90:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d92:	f7fe ff87 	bl	8000ca4 <HAL_GetTick>
 8001d96:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d98:	e010      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d9a:	f7fe ff83 	bl	8000ca4 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d909      	bls.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e075      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8001dac:	42470068 	.word	0x42470068
 8001db0:	40023800 	.word	0x40023800
 8001db4:	42470070 	.word	0x42470070
 8001db8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001dbc:	4b38      	ldr	r3, [pc, #224]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0e8      	beq.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dc8:	4b36      	ldr	r3, [pc, #216]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d02f      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d028      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001de6:	4b2f      	ldr	r3, [pc, #188]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001df0:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001df6:	4b2c      	ldr	r3, [pc, #176]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001dfc:	4a29      	ldr	r2, [pc, #164]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e02:	4b28      	ldr	r3, [pc, #160]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d114      	bne.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7fe ff49 	bl	8000ca4 <HAL_GetTick>
 8001e12:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7fe ff45 	bl	8000ca4 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e035      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0ee      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e44:	d10d      	bne.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8001e46:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e5a:	4912      	ldr	r1, [pc, #72]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	608b      	str	r3, [r1, #8]
 8001e60:	e005      	b.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	4a0f      	ldr	r2, [pc, #60]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e68:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e6c:	6093      	str	r3, [r2, #8]
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e7a:	490a      	ldr	r1, [pc, #40]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d004      	beq.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8001e94:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40007000 	.word	0x40007000
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	42470e40 	.word	0x42470e40
 8001eac:	424711e0 	.word	0x424711e0

08001eb0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e066      	b.n	8001f94 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	7f5b      	ldrb	r3, [r3, #29]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d105      	bne.n	8001edc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7fe fcae 	bl	8000838 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	22ca      	movs	r2, #202	; 0xca
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2253      	movs	r2, #83	; 0x53
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fa45 	bl	8002382 <RTC_EnterInitMode>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d12c      	bne.n	8001f5c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f14:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6899      	ldr	r1, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	68d2      	ldr	r2, [r2, #12]
 8001f3c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6919      	ldr	r1, [r3, #16]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	041a      	lsls	r2, r3, #16
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 fa4c 	bl	80023f0 <RTC_ExitInitMode>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d113      	bne.n	8001f8a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f70:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699a      	ldr	r2, [r3, #24]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	22ff      	movs	r2, #255	; 0xff
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	7f1b      	ldrb	r3, [r3, #28]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_RTC_SetTime+0x1c>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e087      	b.n	80020c8 <HAL_RTC_SetTime+0x12c>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d126      	bne.n	8002018 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 fa29 	bl	800243a <RTC_ByteToBcd2>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	785b      	ldrb	r3, [r3, #1]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 fa22 	bl	800243a <RTC_ByteToBcd2>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001ffa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	789b      	ldrb	r3, [r3, #2]
 8002000:	4618      	mov	r0, r3
 8002002:	f000 fa1a 	bl	800243a <RTC_ByteToBcd2>
 8002006:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002008:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	78db      	ldrb	r3, [r3, #3]
 8002010:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002012:	4313      	orrs	r3, r2
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	e018      	b.n	800204a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002022:	2b00      	cmp	r3, #0
 8002024:	d102      	bne.n	800202c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2200      	movs	r2, #0
 800202a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	785b      	ldrb	r3, [r3, #1]
 8002036:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002038:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800203e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	78db      	ldrb	r3, [r3, #3]
 8002044:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002046:	4313      	orrs	r3, r2
 8002048:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	22ca      	movs	r2, #202	; 0xca
 8002050:	625a      	str	r2, [r3, #36]	; 0x24
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2253      	movs	r2, #83	; 0x53
 8002058:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 f991 	bl	8002382 <RTC_EnterInitMode>
 8002060:	4603      	mov	r3, r0
 8002062:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002064:	7cfb      	ldrb	r3, [r7, #19]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d120      	bne.n	80020ac <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002074:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002078:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002088:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6899      	ldr	r1, [r3, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	431a      	orrs	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 f9a4 	bl	80023f0 <RTC_ExitInitMode>
 80020a8:	4603      	mov	r3, r0
 80020aa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80020ac:	7cfb      	ldrb	r3, [r7, #19]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2201      	movs	r2, #1
 80020b6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	22ff      	movs	r2, #255	; 0xff
 80020be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	771a      	strb	r2, [r3, #28]

  return status;
 80020c6:	7cfb      	ldrb	r3, [r7, #19]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	371c      	adds	r7, #28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd90      	pop	{r4, r7, pc}

080020d0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002102:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002106:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	0c1b      	lsrs	r3, r3, #16
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002112:	b2da      	uxtb	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	0a1b      	lsrs	r3, r3, #8
 800211c:	b2db      	uxtb	r3, r3
 800211e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002122:	b2da      	uxtb	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002130:	b2da      	uxtb	r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	0d9b      	lsrs	r3, r3, #22
 800213a:	b2db      	uxtb	r3, r3
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	b2da      	uxtb	r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d11a      	bne.n	8002182 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f000 f98f 	bl	8002474 <RTC_Bcd2ToByte>
 8002156:	4603      	mov	r3, r0
 8002158:	461a      	mov	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	785b      	ldrb	r3, [r3, #1]
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f986 	bl	8002474 <RTC_Bcd2ToByte>
 8002168:	4603      	mov	r3, r0
 800216a:	461a      	mov	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	789b      	ldrb	r3, [r3, #2]
 8002174:	4618      	mov	r0, r3
 8002176:	f000 f97d 	bl	8002474 <RTC_Bcd2ToByte>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800218c:	b590      	push	{r4, r7, lr}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	7f1b      	ldrb	r3, [r3, #28]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_RTC_SetDate+0x1c>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e071      	b.n	800228c <HAL_RTC_SetDate+0x100>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2202      	movs	r2, #2
 80021b2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10e      	bne.n	80021d8 <HAL_RTC_SetDate+0x4c>
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	785b      	ldrb	r3, [r3, #1]
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d008      	beq.n	80021d8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	785b      	ldrb	r3, [r3, #1]
 80021ca:	f023 0310 	bic.w	r3, r3, #16
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	330a      	adds	r3, #10
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d11c      	bne.n	8002218 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	78db      	ldrb	r3, [r3, #3]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 f929 	bl	800243a <RTC_ByteToBcd2>
 80021e8:	4603      	mov	r3, r0
 80021ea:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	785b      	ldrb	r3, [r3, #1]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 f922 	bl	800243a <RTC_ByteToBcd2>
 80021f6:	4603      	mov	r3, r0
 80021f8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80021fa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	789b      	ldrb	r3, [r3, #2]
 8002200:	4618      	mov	r0, r3
 8002202:	f000 f91a 	bl	800243a <RTC_ByteToBcd2>
 8002206:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002208:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002212:	4313      	orrs	r3, r2
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	e00e      	b.n	8002236 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	78db      	ldrb	r3, [r3, #3]
 800221c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	785b      	ldrb	r3, [r3, #1]
 8002222:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002224:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800222a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002232:	4313      	orrs	r3, r2
 8002234:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	22ca      	movs	r2, #202	; 0xca
 800223c:	625a      	str	r2, [r3, #36]	; 0x24
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2253      	movs	r2, #83	; 0x53
 8002244:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 f89b 	bl	8002382 <RTC_EnterInitMode>
 800224c:	4603      	mov	r3, r0
 800224e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002250:	7cfb      	ldrb	r3, [r7, #19]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10c      	bne.n	8002270 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002260:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002264:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f8c2 	bl	80023f0 <RTC_ExitInitMode>
 800226c:	4603      	mov	r3, r0
 800226e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002270:	7cfb      	ldrb	r3, [r7, #19]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d102      	bne.n	800227c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2201      	movs	r2, #1
 800227a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	22ff      	movs	r2, #255	; 0xff
 8002282:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	771a      	strb	r2, [r3, #28]

  return status;
 800228a:	7cfb      	ldrb	r3, [r7, #19]
}
 800228c:	4618      	mov	r0, r3
 800228e:	371c      	adds	r7, #28
 8002290:	46bd      	mov	sp, r7
 8002292:	bd90      	pop	{r4, r7, pc}

08002294 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80022b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	0c1b      	lsrs	r3, r3, #16
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	0a1b      	lsrs	r3, r3, #8
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	0b5b      	lsrs	r3, r3, #13
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d11a      	bne.n	8002328 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	78db      	ldrb	r3, [r3, #3]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f8bc 	bl	8002474 <RTC_Bcd2ToByte>
 80022fc:	4603      	mov	r3, r0
 80022fe:	461a      	mov	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	785b      	ldrb	r3, [r3, #1]
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f8b3 	bl	8002474 <RTC_Bcd2ToByte>
 800230e:	4603      	mov	r3, r0
 8002310:	461a      	mov	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	789b      	ldrb	r3, [r3, #2]
 800231a:	4618      	mov	r0, r3
 800231c:	f000 f8aa 	bl	8002474 <RTC_Bcd2ToByte>
 8002320:	4603      	mov	r3, r0
 8002322:	461a      	mov	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800234c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800234e:	f7fe fca9 	bl	8000ca4 <HAL_GetTick>
 8002352:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002354:	e009      	b.n	800236a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002356:	f7fe fca5 	bl	8000ca4 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002364:	d901      	bls.n	800236a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e007      	b.n	800237a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	f003 0320 	and.w	r3, r3, #32
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0ee      	beq.n	8002356 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b084      	sub	sp, #16
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239c:	2b00      	cmp	r3, #0
 800239e:	d122      	bne.n	80023e6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023ae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023b0:	f7fe fc78 	bl	8000ca4 <HAL_GetTick>
 80023b4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80023b6:	e00c      	b.n	80023d2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80023b8:	f7fe fc74 	bl	8000ca4 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023c6:	d904      	bls.n	80023d2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2204      	movs	r2, #4
 80023cc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d102      	bne.n	80023e6 <RTC_EnterInitMode+0x64>
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d1e8      	bne.n	80023b8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800240a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 0320 	and.w	r3, r3, #32
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10a      	bne.n	8002430 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ff89 	bl	8002332 <HAL_RTC_WaitForSynchro>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d004      	beq.n	8002430 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2204      	movs	r2, #4
 800242a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002430:	7bfb      	ldrb	r3, [r7, #15]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800243a:	b480      	push	{r7}
 800243c:	b085      	sub	sp, #20
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8002448:	e005      	b.n	8002456 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	3301      	adds	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	3b0a      	subs	r3, #10
 8002454:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	2b09      	cmp	r3, #9
 800245a:	d8f6      	bhi.n	800244a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	b2da      	uxtb	r2, r3
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	4313      	orrs	r3, r2
 8002466:	b2db      	uxtb	r3, r3
}
 8002468:	4618      	mov	r0, r3
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	b2db      	uxtb	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	0092      	lsls	r2, r2, #2
 800248c:	4413      	add	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	f003 030f 	and.w	r3, r3, #15
 8002498:	b2da      	uxtb	r2, r3
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	4413      	add	r3, r2
 800249e:	b2db      	uxtb	r3, r3
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e041      	b.n	8002542 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe fac2 	bl	8000a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3304      	adds	r3, #4
 80024e8:	4619      	mov	r1, r3
 80024ea:	4610      	mov	r0, r2
 80024ec:	f000 f8f4 	bl	80026d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b084      	sub	sp, #16
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_TIM_ConfigClockSource+0x1c>
 8002562:	2302      	movs	r3, #2
 8002564:	e0b4      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x186>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2202      	movs	r2, #2
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002584:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800258c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800259e:	d03e      	beq.n	800261e <HAL_TIM_ConfigClockSource+0xd4>
 80025a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025a4:	f200 8087 	bhi.w	80026b6 <HAL_TIM_ConfigClockSource+0x16c>
 80025a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ac:	f000 8086 	beq.w	80026bc <HAL_TIM_ConfigClockSource+0x172>
 80025b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b4:	d87f      	bhi.n	80026b6 <HAL_TIM_ConfigClockSource+0x16c>
 80025b6:	2b70      	cmp	r3, #112	; 0x70
 80025b8:	d01a      	beq.n	80025f0 <HAL_TIM_ConfigClockSource+0xa6>
 80025ba:	2b70      	cmp	r3, #112	; 0x70
 80025bc:	d87b      	bhi.n	80026b6 <HAL_TIM_ConfigClockSource+0x16c>
 80025be:	2b60      	cmp	r3, #96	; 0x60
 80025c0:	d050      	beq.n	8002664 <HAL_TIM_ConfigClockSource+0x11a>
 80025c2:	2b60      	cmp	r3, #96	; 0x60
 80025c4:	d877      	bhi.n	80026b6 <HAL_TIM_ConfigClockSource+0x16c>
 80025c6:	2b50      	cmp	r3, #80	; 0x50
 80025c8:	d03c      	beq.n	8002644 <HAL_TIM_ConfigClockSource+0xfa>
 80025ca:	2b50      	cmp	r3, #80	; 0x50
 80025cc:	d873      	bhi.n	80026b6 <HAL_TIM_ConfigClockSource+0x16c>
 80025ce:	2b40      	cmp	r3, #64	; 0x40
 80025d0:	d058      	beq.n	8002684 <HAL_TIM_ConfigClockSource+0x13a>
 80025d2:	2b40      	cmp	r3, #64	; 0x40
 80025d4:	d86f      	bhi.n	80026b6 <HAL_TIM_ConfigClockSource+0x16c>
 80025d6:	2b30      	cmp	r3, #48	; 0x30
 80025d8:	d064      	beq.n	80026a4 <HAL_TIM_ConfigClockSource+0x15a>
 80025da:	2b30      	cmp	r3, #48	; 0x30
 80025dc:	d86b      	bhi.n	80026b6 <HAL_TIM_ConfigClockSource+0x16c>
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d060      	beq.n	80026a4 <HAL_TIM_ConfigClockSource+0x15a>
 80025e2:	2b20      	cmp	r3, #32
 80025e4:	d867      	bhi.n	80026b6 <HAL_TIM_ConfigClockSource+0x16c>
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d05c      	beq.n	80026a4 <HAL_TIM_ConfigClockSource+0x15a>
 80025ea:	2b10      	cmp	r3, #16
 80025ec:	d05a      	beq.n	80026a4 <HAL_TIM_ConfigClockSource+0x15a>
 80025ee:	e062      	b.n	80026b6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	6899      	ldr	r1, [r3, #8]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f000 f984 	bl	800290c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002612:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	609a      	str	r2, [r3, #8]
      break;
 800261c:	e04f      	b.n	80026be <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6899      	ldr	r1, [r3, #8]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f000 f96d 	bl	800290c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002640:	609a      	str	r2, [r3, #8]
      break;
 8002642:	e03c      	b.n	80026be <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	6859      	ldr	r1, [r3, #4]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	461a      	mov	r2, r3
 8002652:	f000 f8e1 	bl	8002818 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2150      	movs	r1, #80	; 0x50
 800265c:	4618      	mov	r0, r3
 800265e:	f000 f93a 	bl	80028d6 <TIM_ITRx_SetConfig>
      break;
 8002662:	e02c      	b.n	80026be <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	6859      	ldr	r1, [r3, #4]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	461a      	mov	r2, r3
 8002672:	f000 f900 	bl	8002876 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2160      	movs	r1, #96	; 0x60
 800267c:	4618      	mov	r0, r3
 800267e:	f000 f92a 	bl	80028d6 <TIM_ITRx_SetConfig>
      break;
 8002682:	e01c      	b.n	80026be <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	6859      	ldr	r1, [r3, #4]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	461a      	mov	r2, r3
 8002692:	f000 f8c1 	bl	8002818 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2140      	movs	r1, #64	; 0x40
 800269c:	4618      	mov	r0, r3
 800269e:	f000 f91a 	bl	80028d6 <TIM_ITRx_SetConfig>
      break;
 80026a2:	e00c      	b.n	80026be <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4619      	mov	r1, r3
 80026ae:	4610      	mov	r0, r2
 80026b0:	f000 f911 	bl	80028d6 <TIM_ITRx_SetConfig>
      break;
 80026b4:	e003      	b.n	80026be <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	73fb      	strb	r3, [r7, #15]
      break;
 80026ba:	e000      	b.n	80026be <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a40      	ldr	r2, [pc, #256]	; (80027ec <TIM_Base_SetConfig+0x114>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d013      	beq.n	8002718 <TIM_Base_SetConfig+0x40>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f6:	d00f      	beq.n	8002718 <TIM_Base_SetConfig+0x40>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a3d      	ldr	r2, [pc, #244]	; (80027f0 <TIM_Base_SetConfig+0x118>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00b      	beq.n	8002718 <TIM_Base_SetConfig+0x40>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a3c      	ldr	r2, [pc, #240]	; (80027f4 <TIM_Base_SetConfig+0x11c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d007      	beq.n	8002718 <TIM_Base_SetConfig+0x40>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a3b      	ldr	r2, [pc, #236]	; (80027f8 <TIM_Base_SetConfig+0x120>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d003      	beq.n	8002718 <TIM_Base_SetConfig+0x40>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a3a      	ldr	r2, [pc, #232]	; (80027fc <TIM_Base_SetConfig+0x124>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d108      	bne.n	800272a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a2f      	ldr	r2, [pc, #188]	; (80027ec <TIM_Base_SetConfig+0x114>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d02b      	beq.n	800278a <TIM_Base_SetConfig+0xb2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002738:	d027      	beq.n	800278a <TIM_Base_SetConfig+0xb2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a2c      	ldr	r2, [pc, #176]	; (80027f0 <TIM_Base_SetConfig+0x118>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d023      	beq.n	800278a <TIM_Base_SetConfig+0xb2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a2b      	ldr	r2, [pc, #172]	; (80027f4 <TIM_Base_SetConfig+0x11c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d01f      	beq.n	800278a <TIM_Base_SetConfig+0xb2>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a2a      	ldr	r2, [pc, #168]	; (80027f8 <TIM_Base_SetConfig+0x120>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d01b      	beq.n	800278a <TIM_Base_SetConfig+0xb2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a29      	ldr	r2, [pc, #164]	; (80027fc <TIM_Base_SetConfig+0x124>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d017      	beq.n	800278a <TIM_Base_SetConfig+0xb2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a28      	ldr	r2, [pc, #160]	; (8002800 <TIM_Base_SetConfig+0x128>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <TIM_Base_SetConfig+0xb2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a27      	ldr	r2, [pc, #156]	; (8002804 <TIM_Base_SetConfig+0x12c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00f      	beq.n	800278a <TIM_Base_SetConfig+0xb2>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a26      	ldr	r2, [pc, #152]	; (8002808 <TIM_Base_SetConfig+0x130>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00b      	beq.n	800278a <TIM_Base_SetConfig+0xb2>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a25      	ldr	r2, [pc, #148]	; (800280c <TIM_Base_SetConfig+0x134>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d007      	beq.n	800278a <TIM_Base_SetConfig+0xb2>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a24      	ldr	r2, [pc, #144]	; (8002810 <TIM_Base_SetConfig+0x138>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d003      	beq.n	800278a <TIM_Base_SetConfig+0xb2>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a23      	ldr	r2, [pc, #140]	; (8002814 <TIM_Base_SetConfig+0x13c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d108      	bne.n	800279c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4313      	orrs	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <TIM_Base_SetConfig+0x114>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d003      	beq.n	80027d0 <TIM_Base_SetConfig+0xf8>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a0c      	ldr	r2, [pc, #48]	; (80027fc <TIM_Base_SetConfig+0x124>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d103      	bne.n	80027d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	615a      	str	r2, [r3, #20]
}
 80027de:	bf00      	nop
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40010000 	.word	0x40010000
 80027f0:	40000400 	.word	0x40000400
 80027f4:	40000800 	.word	0x40000800
 80027f8:	40000c00 	.word	0x40000c00
 80027fc:	40010400 	.word	0x40010400
 8002800:	40014000 	.word	0x40014000
 8002804:	40014400 	.word	0x40014400
 8002808:	40014800 	.word	0x40014800
 800280c:	40001800 	.word	0x40001800
 8002810:	40001c00 	.word	0x40001c00
 8002814:	40002000 	.word	0x40002000

08002818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	f023 0201 	bic.w	r2, r3, #1
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f023 030a 	bic.w	r3, r3, #10
 8002854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4313      	orrs	r3, r2
 800285c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	621a      	str	r2, [r3, #32]
}
 800286a:	bf00      	nop
 800286c:	371c      	adds	r7, #28
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002876:	b480      	push	{r7}
 8002878:	b087      	sub	sp, #28
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	f023 0210 	bic.w	r2, r3, #16
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	031b      	lsls	r3, r3, #12
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	621a      	str	r2, [r3, #32]
}
 80028ca:	bf00      	nop
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b085      	sub	sp, #20
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f043 0307 	orr.w	r3, r3, #7
 80028f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	609a      	str	r2, [r3, #8]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800290c:	b480      	push	{r7}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002926:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	021a      	lsls	r2, r3, #8
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	431a      	orrs	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4313      	orrs	r3, r2
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	4313      	orrs	r3, r2
 8002938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	609a      	str	r2, [r3, #8]
}
 8002940:	bf00      	nop
 8002942:	371c      	adds	r7, #28
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002960:	2302      	movs	r3, #2
 8002962:	e05a      	b.n	8002a1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a21      	ldr	r2, [pc, #132]	; (8002a28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d022      	beq.n	80029ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b0:	d01d      	beq.n	80029ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1d      	ldr	r2, [pc, #116]	; (8002a2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d018      	beq.n	80029ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1b      	ldr	r2, [pc, #108]	; (8002a30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d013      	beq.n	80029ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1a      	ldr	r2, [pc, #104]	; (8002a34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d00e      	beq.n	80029ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a18      	ldr	r2, [pc, #96]	; (8002a38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d009      	beq.n	80029ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a17      	ldr	r2, [pc, #92]	; (8002a3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d004      	beq.n	80029ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a15      	ldr	r2, [pc, #84]	; (8002a40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d10c      	bne.n	8002a08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40010000 	.word	0x40010000
 8002a2c:	40000400 	.word	0x40000400
 8002a30:	40000800 	.word	0x40000800
 8002a34:	40000c00 	.word	0x40000c00
 8002a38:	40010400 	.word	0x40010400
 8002a3c:	40014000 	.word	0x40014000
 8002a40:	40001800 	.word	0x40001800

08002a44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e03f      	b.n	8002ad6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fe f842 	bl	8000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2224      	movs	r2, #36	; 0x24
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f929 	bl	8002ce0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	691a      	ldr	r2, [r3, #16]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002aac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002abc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b08a      	sub	sp, #40	; 0x28
 8002ae2:	af02      	add	r7, sp, #8
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	603b      	str	r3, [r7, #0]
 8002aea:	4613      	mov	r3, r2
 8002aec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	d17c      	bne.n	8002bf8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_UART_Transmit+0x2c>
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e075      	b.n	8002bfa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_UART_Transmit+0x3e>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e06e      	b.n	8002bfa <HAL_UART_Transmit+0x11c>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2221      	movs	r2, #33	; 0x21
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b32:	f7fe f8b7 	bl	8000ca4 <HAL_GetTick>
 8002b36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	88fa      	ldrh	r2, [r7, #6]
 8002b3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	88fa      	ldrh	r2, [r7, #6]
 8002b42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4c:	d108      	bne.n	8002b60 <HAL_UART_Transmit+0x82>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d104      	bne.n	8002b60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	e003      	b.n	8002b68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b70:	e02a      	b.n	8002bc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2180      	movs	r1, #128	; 0x80
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f840 	bl	8002c02 <UART_WaitOnFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e036      	b.n	8002bfa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10b      	bne.n	8002baa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ba0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	3302      	adds	r3, #2
 8002ba6:	61bb      	str	r3, [r7, #24]
 8002ba8:	e007      	b.n	8002bba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	781a      	ldrb	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1cf      	bne.n	8002b72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2140      	movs	r1, #64	; 0x40
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f810 	bl	8002c02 <UART_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e006      	b.n	8002bfa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e000      	b.n	8002bfa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002bf8:	2302      	movs	r3, #2
  }
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3720      	adds	r7, #32
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b090      	sub	sp, #64	; 0x40
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	603b      	str	r3, [r7, #0]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c12:	e050      	b.n	8002cb6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1a:	d04c      	beq.n	8002cb6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d007      	beq.n	8002c32 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c22:	f7fe f83f 	bl	8000ca4 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d241      	bcs.n	8002cb6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	330c      	adds	r3, #12
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3c:	e853 3f00 	ldrex	r3, [r3]
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	330c      	adds	r3, #12
 8002c50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c52:	637a      	str	r2, [r7, #52]	; 0x34
 8002c54:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c5a:	e841 2300 	strex	r3, r2, [r1]
 8002c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1e5      	bne.n	8002c32 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	3314      	adds	r3, #20
 8002c6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	e853 3f00 	ldrex	r3, [r3]
 8002c74:	613b      	str	r3, [r7, #16]
   return(result);
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3314      	adds	r3, #20
 8002c84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c86:	623a      	str	r2, [r7, #32]
 8002c88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8a:	69f9      	ldr	r1, [r7, #28]
 8002c8c:	6a3a      	ldr	r2, [r7, #32]
 8002c8e:	e841 2300 	strex	r3, r2, [r1]
 8002c92:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1e5      	bne.n	8002c66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e00f      	b.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	bf0c      	ite	eq
 8002cc6:	2301      	moveq	r3, #1
 8002cc8:	2300      	movne	r3, #0
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	461a      	mov	r2, r3
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d09f      	beq.n	8002c14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3740      	adds	r7, #64	; 0x40
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce4:	b0c0      	sub	sp, #256	; 0x100
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfc:	68d9      	ldr	r1, [r3, #12]
 8002cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	ea40 0301 	orr.w	r3, r0, r1
 8002d08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d38:	f021 010c 	bic.w	r1, r1, #12
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d46:	430b      	orrs	r3, r1
 8002d48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5a:	6999      	ldr	r1, [r3, #24]
 8002d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	ea40 0301 	orr.w	r3, r0, r1
 8002d66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	4b8f      	ldr	r3, [pc, #572]	; (8002fac <UART_SetConfig+0x2cc>)
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d005      	beq.n	8002d80 <UART_SetConfig+0xa0>
 8002d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	4b8d      	ldr	r3, [pc, #564]	; (8002fb0 <UART_SetConfig+0x2d0>)
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d104      	bne.n	8002d8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d80:	f7fe fec2 	bl	8001b08 <HAL_RCC_GetPCLK2Freq>
 8002d84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002d88:	e003      	b.n	8002d92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d8a:	f7fe fea9 	bl	8001ae0 <HAL_RCC_GetPCLK1Freq>
 8002d8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d9c:	f040 810c 	bne.w	8002fb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002da4:	2200      	movs	r2, #0
 8002da6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002daa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002dae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002db2:	4622      	mov	r2, r4
 8002db4:	462b      	mov	r3, r5
 8002db6:	1891      	adds	r1, r2, r2
 8002db8:	65b9      	str	r1, [r7, #88]	; 0x58
 8002dba:	415b      	adcs	r3, r3
 8002dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	eb12 0801 	adds.w	r8, r2, r1
 8002dc8:	4629      	mov	r1, r5
 8002dca:	eb43 0901 	adc.w	r9, r3, r1
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002de2:	4690      	mov	r8, r2
 8002de4:	4699      	mov	r9, r3
 8002de6:	4623      	mov	r3, r4
 8002de8:	eb18 0303 	adds.w	r3, r8, r3
 8002dec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002df0:	462b      	mov	r3, r5
 8002df2:	eb49 0303 	adc.w	r3, r9, r3
 8002df6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e0e:	460b      	mov	r3, r1
 8002e10:	18db      	adds	r3, r3, r3
 8002e12:	653b      	str	r3, [r7, #80]	; 0x50
 8002e14:	4613      	mov	r3, r2
 8002e16:	eb42 0303 	adc.w	r3, r2, r3
 8002e1a:	657b      	str	r3, [r7, #84]	; 0x54
 8002e1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e24:	f7fd fa3c 	bl	80002a0 <__aeabi_uldivmod>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4b61      	ldr	r3, [pc, #388]	; (8002fb4 <UART_SetConfig+0x2d4>)
 8002e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	011c      	lsls	r4, r3, #4
 8002e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e48:	4642      	mov	r2, r8
 8002e4a:	464b      	mov	r3, r9
 8002e4c:	1891      	adds	r1, r2, r2
 8002e4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e50:	415b      	adcs	r3, r3
 8002e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e58:	4641      	mov	r1, r8
 8002e5a:	eb12 0a01 	adds.w	sl, r2, r1
 8002e5e:	4649      	mov	r1, r9
 8002e60:	eb43 0b01 	adc.w	fp, r3, r1
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e78:	4692      	mov	sl, r2
 8002e7a:	469b      	mov	fp, r3
 8002e7c:	4643      	mov	r3, r8
 8002e7e:	eb1a 0303 	adds.w	r3, sl, r3
 8002e82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e86:	464b      	mov	r3, r9
 8002e88:	eb4b 0303 	adc.w	r3, fp, r3
 8002e8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ea0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	18db      	adds	r3, r3, r3
 8002ea8:	643b      	str	r3, [r7, #64]	; 0x40
 8002eaa:	4613      	mov	r3, r2
 8002eac:	eb42 0303 	adc.w	r3, r2, r3
 8002eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002eb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002eba:	f7fd f9f1 	bl	80002a0 <__aeabi_uldivmod>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4b3b      	ldr	r3, [pc, #236]	; (8002fb4 <UART_SetConfig+0x2d4>)
 8002ec6:	fba3 2301 	umull	r2, r3, r3, r1
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	2264      	movs	r2, #100	; 0x64
 8002ece:	fb02 f303 	mul.w	r3, r2, r3
 8002ed2:	1acb      	subs	r3, r1, r3
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002eda:	4b36      	ldr	r3, [pc, #216]	; (8002fb4 <UART_SetConfig+0x2d4>)
 8002edc:	fba3 2302 	umull	r2, r3, r3, r2
 8002ee0:	095b      	lsrs	r3, r3, #5
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ee8:	441c      	add	r4, r3
 8002eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ef4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ef8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002efc:	4642      	mov	r2, r8
 8002efe:	464b      	mov	r3, r9
 8002f00:	1891      	adds	r1, r2, r2
 8002f02:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f04:	415b      	adcs	r3, r3
 8002f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f0c:	4641      	mov	r1, r8
 8002f0e:	1851      	adds	r1, r2, r1
 8002f10:	6339      	str	r1, [r7, #48]	; 0x30
 8002f12:	4649      	mov	r1, r9
 8002f14:	414b      	adcs	r3, r1
 8002f16:	637b      	str	r3, [r7, #52]	; 0x34
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f24:	4659      	mov	r1, fp
 8002f26:	00cb      	lsls	r3, r1, #3
 8002f28:	4651      	mov	r1, sl
 8002f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f2e:	4651      	mov	r1, sl
 8002f30:	00ca      	lsls	r2, r1, #3
 8002f32:	4610      	mov	r0, r2
 8002f34:	4619      	mov	r1, r3
 8002f36:	4603      	mov	r3, r0
 8002f38:	4642      	mov	r2, r8
 8002f3a:	189b      	adds	r3, r3, r2
 8002f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f40:	464b      	mov	r3, r9
 8002f42:	460a      	mov	r2, r1
 8002f44:	eb42 0303 	adc.w	r3, r2, r3
 8002f48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f60:	460b      	mov	r3, r1
 8002f62:	18db      	adds	r3, r3, r3
 8002f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f66:	4613      	mov	r3, r2
 8002f68:	eb42 0303 	adc.w	r3, r2, r3
 8002f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f76:	f7fd f993 	bl	80002a0 <__aeabi_uldivmod>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <UART_SetConfig+0x2d4>)
 8002f80:	fba3 1302 	umull	r1, r3, r3, r2
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	2164      	movs	r1, #100	; 0x64
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	3332      	adds	r3, #50	; 0x32
 8002f92:	4a08      	ldr	r2, [pc, #32]	; (8002fb4 <UART_SetConfig+0x2d4>)
 8002f94:	fba2 2303 	umull	r2, r3, r2, r3
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	f003 0207 	and.w	r2, r3, #7
 8002f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4422      	add	r2, r4
 8002fa6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fa8:	e105      	b.n	80031b6 <UART_SetConfig+0x4d6>
 8002faa:	bf00      	nop
 8002fac:	40011000 	.word	0x40011000
 8002fb0:	40011400 	.word	0x40011400
 8002fb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002fc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002fc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002fca:	4642      	mov	r2, r8
 8002fcc:	464b      	mov	r3, r9
 8002fce:	1891      	adds	r1, r2, r2
 8002fd0:	6239      	str	r1, [r7, #32]
 8002fd2:	415b      	adcs	r3, r3
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fda:	4641      	mov	r1, r8
 8002fdc:	1854      	adds	r4, r2, r1
 8002fde:	4649      	mov	r1, r9
 8002fe0:	eb43 0501 	adc.w	r5, r3, r1
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	00eb      	lsls	r3, r5, #3
 8002fee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ff2:	00e2      	lsls	r2, r4, #3
 8002ff4:	4614      	mov	r4, r2
 8002ff6:	461d      	mov	r5, r3
 8002ff8:	4643      	mov	r3, r8
 8002ffa:	18e3      	adds	r3, r4, r3
 8002ffc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003000:	464b      	mov	r3, r9
 8003002:	eb45 0303 	adc.w	r3, r5, r3
 8003006:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800300a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003016:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003026:	4629      	mov	r1, r5
 8003028:	008b      	lsls	r3, r1, #2
 800302a:	4621      	mov	r1, r4
 800302c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003030:	4621      	mov	r1, r4
 8003032:	008a      	lsls	r2, r1, #2
 8003034:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003038:	f7fd f932 	bl	80002a0 <__aeabi_uldivmod>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4b60      	ldr	r3, [pc, #384]	; (80031c4 <UART_SetConfig+0x4e4>)
 8003042:	fba3 2302 	umull	r2, r3, r3, r2
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	011c      	lsls	r4, r3, #4
 800304a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800304e:	2200      	movs	r2, #0
 8003050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003054:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003058:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800305c:	4642      	mov	r2, r8
 800305e:	464b      	mov	r3, r9
 8003060:	1891      	adds	r1, r2, r2
 8003062:	61b9      	str	r1, [r7, #24]
 8003064:	415b      	adcs	r3, r3
 8003066:	61fb      	str	r3, [r7, #28]
 8003068:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800306c:	4641      	mov	r1, r8
 800306e:	1851      	adds	r1, r2, r1
 8003070:	6139      	str	r1, [r7, #16]
 8003072:	4649      	mov	r1, r9
 8003074:	414b      	adcs	r3, r1
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003084:	4659      	mov	r1, fp
 8003086:	00cb      	lsls	r3, r1, #3
 8003088:	4651      	mov	r1, sl
 800308a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800308e:	4651      	mov	r1, sl
 8003090:	00ca      	lsls	r2, r1, #3
 8003092:	4610      	mov	r0, r2
 8003094:	4619      	mov	r1, r3
 8003096:	4603      	mov	r3, r0
 8003098:	4642      	mov	r2, r8
 800309a:	189b      	adds	r3, r3, r2
 800309c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030a0:	464b      	mov	r3, r9
 80030a2:	460a      	mov	r2, r1
 80030a4:	eb42 0303 	adc.w	r3, r2, r3
 80030a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80030b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80030c4:	4649      	mov	r1, r9
 80030c6:	008b      	lsls	r3, r1, #2
 80030c8:	4641      	mov	r1, r8
 80030ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ce:	4641      	mov	r1, r8
 80030d0:	008a      	lsls	r2, r1, #2
 80030d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80030d6:	f7fd f8e3 	bl	80002a0 <__aeabi_uldivmod>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4b39      	ldr	r3, [pc, #228]	; (80031c4 <UART_SetConfig+0x4e4>)
 80030e0:	fba3 1302 	umull	r1, r3, r3, r2
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	2164      	movs	r1, #100	; 0x64
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	3332      	adds	r3, #50	; 0x32
 80030f2:	4a34      	ldr	r2, [pc, #208]	; (80031c4 <UART_SetConfig+0x4e4>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	095b      	lsrs	r3, r3, #5
 80030fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030fe:	441c      	add	r4, r3
 8003100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003104:	2200      	movs	r2, #0
 8003106:	673b      	str	r3, [r7, #112]	; 0x70
 8003108:	677a      	str	r2, [r7, #116]	; 0x74
 800310a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800310e:	4642      	mov	r2, r8
 8003110:	464b      	mov	r3, r9
 8003112:	1891      	adds	r1, r2, r2
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	415b      	adcs	r3, r3
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800311e:	4641      	mov	r1, r8
 8003120:	1851      	adds	r1, r2, r1
 8003122:	6039      	str	r1, [r7, #0]
 8003124:	4649      	mov	r1, r9
 8003126:	414b      	adcs	r3, r1
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003136:	4659      	mov	r1, fp
 8003138:	00cb      	lsls	r3, r1, #3
 800313a:	4651      	mov	r1, sl
 800313c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003140:	4651      	mov	r1, sl
 8003142:	00ca      	lsls	r2, r1, #3
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	4603      	mov	r3, r0
 800314a:	4642      	mov	r2, r8
 800314c:	189b      	adds	r3, r3, r2
 800314e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003150:	464b      	mov	r3, r9
 8003152:	460a      	mov	r2, r1
 8003154:	eb42 0303 	adc.w	r3, r2, r3
 8003158:	66fb      	str	r3, [r7, #108]	; 0x6c
 800315a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	663b      	str	r3, [r7, #96]	; 0x60
 8003164:	667a      	str	r2, [r7, #100]	; 0x64
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003172:	4649      	mov	r1, r9
 8003174:	008b      	lsls	r3, r1, #2
 8003176:	4641      	mov	r1, r8
 8003178:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800317c:	4641      	mov	r1, r8
 800317e:	008a      	lsls	r2, r1, #2
 8003180:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003184:	f7fd f88c 	bl	80002a0 <__aeabi_uldivmod>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <UART_SetConfig+0x4e4>)
 800318e:	fba3 1302 	umull	r1, r3, r3, r2
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	2164      	movs	r1, #100	; 0x64
 8003196:	fb01 f303 	mul.w	r3, r1, r3
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	3332      	adds	r3, #50	; 0x32
 80031a0:	4a08      	ldr	r2, [pc, #32]	; (80031c4 <UART_SetConfig+0x4e4>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	f003 020f 	and.w	r2, r3, #15
 80031ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4422      	add	r2, r4
 80031b4:	609a      	str	r2, [r3, #8]
}
 80031b6:	bf00      	nop
 80031b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80031bc:	46bd      	mov	sp, r7
 80031be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031c2:	bf00      	nop
 80031c4:	51eb851f 	.word	0x51eb851f

080031c8 <__errno>:
 80031c8:	4b01      	ldr	r3, [pc, #4]	; (80031d0 <__errno+0x8>)
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	2000000c 	.word	0x2000000c

080031d4 <__libc_init_array>:
 80031d4:	b570      	push	{r4, r5, r6, lr}
 80031d6:	4d0d      	ldr	r5, [pc, #52]	; (800320c <__libc_init_array+0x38>)
 80031d8:	4c0d      	ldr	r4, [pc, #52]	; (8003210 <__libc_init_array+0x3c>)
 80031da:	1b64      	subs	r4, r4, r5
 80031dc:	10a4      	asrs	r4, r4, #2
 80031de:	2600      	movs	r6, #0
 80031e0:	42a6      	cmp	r6, r4
 80031e2:	d109      	bne.n	80031f8 <__libc_init_array+0x24>
 80031e4:	4d0b      	ldr	r5, [pc, #44]	; (8003214 <__libc_init_array+0x40>)
 80031e6:	4c0c      	ldr	r4, [pc, #48]	; (8003218 <__libc_init_array+0x44>)
 80031e8:	f000 fc8e 	bl	8003b08 <_init>
 80031ec:	1b64      	subs	r4, r4, r5
 80031ee:	10a4      	asrs	r4, r4, #2
 80031f0:	2600      	movs	r6, #0
 80031f2:	42a6      	cmp	r6, r4
 80031f4:	d105      	bne.n	8003202 <__libc_init_array+0x2e>
 80031f6:	bd70      	pop	{r4, r5, r6, pc}
 80031f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031fc:	4798      	blx	r3
 80031fe:	3601      	adds	r6, #1
 8003200:	e7ee      	b.n	80031e0 <__libc_init_array+0xc>
 8003202:	f855 3b04 	ldr.w	r3, [r5], #4
 8003206:	4798      	blx	r3
 8003208:	3601      	adds	r6, #1
 800320a:	e7f2      	b.n	80031f2 <__libc_init_array+0x1e>
 800320c:	08003ba4 	.word	0x08003ba4
 8003210:	08003ba4 	.word	0x08003ba4
 8003214:	08003ba4 	.word	0x08003ba4
 8003218:	08003ba8 	.word	0x08003ba8

0800321c <memset>:
 800321c:	4402      	add	r2, r0
 800321e:	4603      	mov	r3, r0
 8003220:	4293      	cmp	r3, r2
 8003222:	d100      	bne.n	8003226 <memset+0xa>
 8003224:	4770      	bx	lr
 8003226:	f803 1b01 	strb.w	r1, [r3], #1
 800322a:	e7f9      	b.n	8003220 <memset+0x4>

0800322c <siprintf>:
 800322c:	b40e      	push	{r1, r2, r3}
 800322e:	b500      	push	{lr}
 8003230:	b09c      	sub	sp, #112	; 0x70
 8003232:	ab1d      	add	r3, sp, #116	; 0x74
 8003234:	9002      	str	r0, [sp, #8]
 8003236:	9006      	str	r0, [sp, #24]
 8003238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800323c:	4809      	ldr	r0, [pc, #36]	; (8003264 <siprintf+0x38>)
 800323e:	9107      	str	r1, [sp, #28]
 8003240:	9104      	str	r1, [sp, #16]
 8003242:	4909      	ldr	r1, [pc, #36]	; (8003268 <siprintf+0x3c>)
 8003244:	f853 2b04 	ldr.w	r2, [r3], #4
 8003248:	9105      	str	r1, [sp, #20]
 800324a:	6800      	ldr	r0, [r0, #0]
 800324c:	9301      	str	r3, [sp, #4]
 800324e:	a902      	add	r1, sp, #8
 8003250:	f000 f868 	bl	8003324 <_svfiprintf_r>
 8003254:	9b02      	ldr	r3, [sp, #8]
 8003256:	2200      	movs	r2, #0
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	b01c      	add	sp, #112	; 0x70
 800325c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003260:	b003      	add	sp, #12
 8003262:	4770      	bx	lr
 8003264:	2000000c 	.word	0x2000000c
 8003268:	ffff0208 	.word	0xffff0208

0800326c <__ssputs_r>:
 800326c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003270:	688e      	ldr	r6, [r1, #8]
 8003272:	429e      	cmp	r6, r3
 8003274:	4682      	mov	sl, r0
 8003276:	460c      	mov	r4, r1
 8003278:	4690      	mov	r8, r2
 800327a:	461f      	mov	r7, r3
 800327c:	d838      	bhi.n	80032f0 <__ssputs_r+0x84>
 800327e:	898a      	ldrh	r2, [r1, #12]
 8003280:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003284:	d032      	beq.n	80032ec <__ssputs_r+0x80>
 8003286:	6825      	ldr	r5, [r4, #0]
 8003288:	6909      	ldr	r1, [r1, #16]
 800328a:	eba5 0901 	sub.w	r9, r5, r1
 800328e:	6965      	ldr	r5, [r4, #20]
 8003290:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003294:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003298:	3301      	adds	r3, #1
 800329a:	444b      	add	r3, r9
 800329c:	106d      	asrs	r5, r5, #1
 800329e:	429d      	cmp	r5, r3
 80032a0:	bf38      	it	cc
 80032a2:	461d      	movcc	r5, r3
 80032a4:	0553      	lsls	r3, r2, #21
 80032a6:	d531      	bpl.n	800330c <__ssputs_r+0xa0>
 80032a8:	4629      	mov	r1, r5
 80032aa:	f000 fb63 	bl	8003974 <_malloc_r>
 80032ae:	4606      	mov	r6, r0
 80032b0:	b950      	cbnz	r0, 80032c8 <__ssputs_r+0x5c>
 80032b2:	230c      	movs	r3, #12
 80032b4:	f8ca 3000 	str.w	r3, [sl]
 80032b8:	89a3      	ldrh	r3, [r4, #12]
 80032ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032be:	81a3      	strh	r3, [r4, #12]
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295
 80032c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032c8:	6921      	ldr	r1, [r4, #16]
 80032ca:	464a      	mov	r2, r9
 80032cc:	f000 fabe 	bl	800384c <memcpy>
 80032d0:	89a3      	ldrh	r3, [r4, #12]
 80032d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032da:	81a3      	strh	r3, [r4, #12]
 80032dc:	6126      	str	r6, [r4, #16]
 80032de:	6165      	str	r5, [r4, #20]
 80032e0:	444e      	add	r6, r9
 80032e2:	eba5 0509 	sub.w	r5, r5, r9
 80032e6:	6026      	str	r6, [r4, #0]
 80032e8:	60a5      	str	r5, [r4, #8]
 80032ea:	463e      	mov	r6, r7
 80032ec:	42be      	cmp	r6, r7
 80032ee:	d900      	bls.n	80032f2 <__ssputs_r+0x86>
 80032f0:	463e      	mov	r6, r7
 80032f2:	6820      	ldr	r0, [r4, #0]
 80032f4:	4632      	mov	r2, r6
 80032f6:	4641      	mov	r1, r8
 80032f8:	f000 fab6 	bl	8003868 <memmove>
 80032fc:	68a3      	ldr	r3, [r4, #8]
 80032fe:	1b9b      	subs	r3, r3, r6
 8003300:	60a3      	str	r3, [r4, #8]
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	4433      	add	r3, r6
 8003306:	6023      	str	r3, [r4, #0]
 8003308:	2000      	movs	r0, #0
 800330a:	e7db      	b.n	80032c4 <__ssputs_r+0x58>
 800330c:	462a      	mov	r2, r5
 800330e:	f000 fba5 	bl	8003a5c <_realloc_r>
 8003312:	4606      	mov	r6, r0
 8003314:	2800      	cmp	r0, #0
 8003316:	d1e1      	bne.n	80032dc <__ssputs_r+0x70>
 8003318:	6921      	ldr	r1, [r4, #16]
 800331a:	4650      	mov	r0, sl
 800331c:	f000 fabe 	bl	800389c <_free_r>
 8003320:	e7c7      	b.n	80032b2 <__ssputs_r+0x46>
	...

08003324 <_svfiprintf_r>:
 8003324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003328:	4698      	mov	r8, r3
 800332a:	898b      	ldrh	r3, [r1, #12]
 800332c:	061b      	lsls	r3, r3, #24
 800332e:	b09d      	sub	sp, #116	; 0x74
 8003330:	4607      	mov	r7, r0
 8003332:	460d      	mov	r5, r1
 8003334:	4614      	mov	r4, r2
 8003336:	d50e      	bpl.n	8003356 <_svfiprintf_r+0x32>
 8003338:	690b      	ldr	r3, [r1, #16]
 800333a:	b963      	cbnz	r3, 8003356 <_svfiprintf_r+0x32>
 800333c:	2140      	movs	r1, #64	; 0x40
 800333e:	f000 fb19 	bl	8003974 <_malloc_r>
 8003342:	6028      	str	r0, [r5, #0]
 8003344:	6128      	str	r0, [r5, #16]
 8003346:	b920      	cbnz	r0, 8003352 <_svfiprintf_r+0x2e>
 8003348:	230c      	movs	r3, #12
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	f04f 30ff 	mov.w	r0, #4294967295
 8003350:	e0d1      	b.n	80034f6 <_svfiprintf_r+0x1d2>
 8003352:	2340      	movs	r3, #64	; 0x40
 8003354:	616b      	str	r3, [r5, #20]
 8003356:	2300      	movs	r3, #0
 8003358:	9309      	str	r3, [sp, #36]	; 0x24
 800335a:	2320      	movs	r3, #32
 800335c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003360:	f8cd 800c 	str.w	r8, [sp, #12]
 8003364:	2330      	movs	r3, #48	; 0x30
 8003366:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003510 <_svfiprintf_r+0x1ec>
 800336a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800336e:	f04f 0901 	mov.w	r9, #1
 8003372:	4623      	mov	r3, r4
 8003374:	469a      	mov	sl, r3
 8003376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800337a:	b10a      	cbz	r2, 8003380 <_svfiprintf_r+0x5c>
 800337c:	2a25      	cmp	r2, #37	; 0x25
 800337e:	d1f9      	bne.n	8003374 <_svfiprintf_r+0x50>
 8003380:	ebba 0b04 	subs.w	fp, sl, r4
 8003384:	d00b      	beq.n	800339e <_svfiprintf_r+0x7a>
 8003386:	465b      	mov	r3, fp
 8003388:	4622      	mov	r2, r4
 800338a:	4629      	mov	r1, r5
 800338c:	4638      	mov	r0, r7
 800338e:	f7ff ff6d 	bl	800326c <__ssputs_r>
 8003392:	3001      	adds	r0, #1
 8003394:	f000 80aa 	beq.w	80034ec <_svfiprintf_r+0x1c8>
 8003398:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800339a:	445a      	add	r2, fp
 800339c:	9209      	str	r2, [sp, #36]	; 0x24
 800339e:	f89a 3000 	ldrb.w	r3, [sl]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 80a2 	beq.w	80034ec <_svfiprintf_r+0x1c8>
 80033a8:	2300      	movs	r3, #0
 80033aa:	f04f 32ff 	mov.w	r2, #4294967295
 80033ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033b2:	f10a 0a01 	add.w	sl, sl, #1
 80033b6:	9304      	str	r3, [sp, #16]
 80033b8:	9307      	str	r3, [sp, #28]
 80033ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033be:	931a      	str	r3, [sp, #104]	; 0x68
 80033c0:	4654      	mov	r4, sl
 80033c2:	2205      	movs	r2, #5
 80033c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033c8:	4851      	ldr	r0, [pc, #324]	; (8003510 <_svfiprintf_r+0x1ec>)
 80033ca:	f7fc ff19 	bl	8000200 <memchr>
 80033ce:	9a04      	ldr	r2, [sp, #16]
 80033d0:	b9d8      	cbnz	r0, 800340a <_svfiprintf_r+0xe6>
 80033d2:	06d0      	lsls	r0, r2, #27
 80033d4:	bf44      	itt	mi
 80033d6:	2320      	movmi	r3, #32
 80033d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033dc:	0711      	lsls	r1, r2, #28
 80033de:	bf44      	itt	mi
 80033e0:	232b      	movmi	r3, #43	; 0x2b
 80033e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033e6:	f89a 3000 	ldrb.w	r3, [sl]
 80033ea:	2b2a      	cmp	r3, #42	; 0x2a
 80033ec:	d015      	beq.n	800341a <_svfiprintf_r+0xf6>
 80033ee:	9a07      	ldr	r2, [sp, #28]
 80033f0:	4654      	mov	r4, sl
 80033f2:	2000      	movs	r0, #0
 80033f4:	f04f 0c0a 	mov.w	ip, #10
 80033f8:	4621      	mov	r1, r4
 80033fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033fe:	3b30      	subs	r3, #48	; 0x30
 8003400:	2b09      	cmp	r3, #9
 8003402:	d94e      	bls.n	80034a2 <_svfiprintf_r+0x17e>
 8003404:	b1b0      	cbz	r0, 8003434 <_svfiprintf_r+0x110>
 8003406:	9207      	str	r2, [sp, #28]
 8003408:	e014      	b.n	8003434 <_svfiprintf_r+0x110>
 800340a:	eba0 0308 	sub.w	r3, r0, r8
 800340e:	fa09 f303 	lsl.w	r3, r9, r3
 8003412:	4313      	orrs	r3, r2
 8003414:	9304      	str	r3, [sp, #16]
 8003416:	46a2      	mov	sl, r4
 8003418:	e7d2      	b.n	80033c0 <_svfiprintf_r+0x9c>
 800341a:	9b03      	ldr	r3, [sp, #12]
 800341c:	1d19      	adds	r1, r3, #4
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	9103      	str	r1, [sp, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	bfbb      	ittet	lt
 8003426:	425b      	neglt	r3, r3
 8003428:	f042 0202 	orrlt.w	r2, r2, #2
 800342c:	9307      	strge	r3, [sp, #28]
 800342e:	9307      	strlt	r3, [sp, #28]
 8003430:	bfb8      	it	lt
 8003432:	9204      	strlt	r2, [sp, #16]
 8003434:	7823      	ldrb	r3, [r4, #0]
 8003436:	2b2e      	cmp	r3, #46	; 0x2e
 8003438:	d10c      	bne.n	8003454 <_svfiprintf_r+0x130>
 800343a:	7863      	ldrb	r3, [r4, #1]
 800343c:	2b2a      	cmp	r3, #42	; 0x2a
 800343e:	d135      	bne.n	80034ac <_svfiprintf_r+0x188>
 8003440:	9b03      	ldr	r3, [sp, #12]
 8003442:	1d1a      	adds	r2, r3, #4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	9203      	str	r2, [sp, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	bfb8      	it	lt
 800344c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003450:	3402      	adds	r4, #2
 8003452:	9305      	str	r3, [sp, #20]
 8003454:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003520 <_svfiprintf_r+0x1fc>
 8003458:	7821      	ldrb	r1, [r4, #0]
 800345a:	2203      	movs	r2, #3
 800345c:	4650      	mov	r0, sl
 800345e:	f7fc fecf 	bl	8000200 <memchr>
 8003462:	b140      	cbz	r0, 8003476 <_svfiprintf_r+0x152>
 8003464:	2340      	movs	r3, #64	; 0x40
 8003466:	eba0 000a 	sub.w	r0, r0, sl
 800346a:	fa03 f000 	lsl.w	r0, r3, r0
 800346e:	9b04      	ldr	r3, [sp, #16]
 8003470:	4303      	orrs	r3, r0
 8003472:	3401      	adds	r4, #1
 8003474:	9304      	str	r3, [sp, #16]
 8003476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800347a:	4826      	ldr	r0, [pc, #152]	; (8003514 <_svfiprintf_r+0x1f0>)
 800347c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003480:	2206      	movs	r2, #6
 8003482:	f7fc febd 	bl	8000200 <memchr>
 8003486:	2800      	cmp	r0, #0
 8003488:	d038      	beq.n	80034fc <_svfiprintf_r+0x1d8>
 800348a:	4b23      	ldr	r3, [pc, #140]	; (8003518 <_svfiprintf_r+0x1f4>)
 800348c:	bb1b      	cbnz	r3, 80034d6 <_svfiprintf_r+0x1b2>
 800348e:	9b03      	ldr	r3, [sp, #12]
 8003490:	3307      	adds	r3, #7
 8003492:	f023 0307 	bic.w	r3, r3, #7
 8003496:	3308      	adds	r3, #8
 8003498:	9303      	str	r3, [sp, #12]
 800349a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800349c:	4433      	add	r3, r6
 800349e:	9309      	str	r3, [sp, #36]	; 0x24
 80034a0:	e767      	b.n	8003372 <_svfiprintf_r+0x4e>
 80034a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80034a6:	460c      	mov	r4, r1
 80034a8:	2001      	movs	r0, #1
 80034aa:	e7a5      	b.n	80033f8 <_svfiprintf_r+0xd4>
 80034ac:	2300      	movs	r3, #0
 80034ae:	3401      	adds	r4, #1
 80034b0:	9305      	str	r3, [sp, #20]
 80034b2:	4619      	mov	r1, r3
 80034b4:	f04f 0c0a 	mov.w	ip, #10
 80034b8:	4620      	mov	r0, r4
 80034ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034be:	3a30      	subs	r2, #48	; 0x30
 80034c0:	2a09      	cmp	r2, #9
 80034c2:	d903      	bls.n	80034cc <_svfiprintf_r+0x1a8>
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0c5      	beq.n	8003454 <_svfiprintf_r+0x130>
 80034c8:	9105      	str	r1, [sp, #20]
 80034ca:	e7c3      	b.n	8003454 <_svfiprintf_r+0x130>
 80034cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80034d0:	4604      	mov	r4, r0
 80034d2:	2301      	movs	r3, #1
 80034d4:	e7f0      	b.n	80034b8 <_svfiprintf_r+0x194>
 80034d6:	ab03      	add	r3, sp, #12
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	462a      	mov	r2, r5
 80034dc:	4b0f      	ldr	r3, [pc, #60]	; (800351c <_svfiprintf_r+0x1f8>)
 80034de:	a904      	add	r1, sp, #16
 80034e0:	4638      	mov	r0, r7
 80034e2:	f3af 8000 	nop.w
 80034e6:	1c42      	adds	r2, r0, #1
 80034e8:	4606      	mov	r6, r0
 80034ea:	d1d6      	bne.n	800349a <_svfiprintf_r+0x176>
 80034ec:	89ab      	ldrh	r3, [r5, #12]
 80034ee:	065b      	lsls	r3, r3, #25
 80034f0:	f53f af2c 	bmi.w	800334c <_svfiprintf_r+0x28>
 80034f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034f6:	b01d      	add	sp, #116	; 0x74
 80034f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034fc:	ab03      	add	r3, sp, #12
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	462a      	mov	r2, r5
 8003502:	4b06      	ldr	r3, [pc, #24]	; (800351c <_svfiprintf_r+0x1f8>)
 8003504:	a904      	add	r1, sp, #16
 8003506:	4638      	mov	r0, r7
 8003508:	f000 f87a 	bl	8003600 <_printf_i>
 800350c:	e7eb      	b.n	80034e6 <_svfiprintf_r+0x1c2>
 800350e:	bf00      	nop
 8003510:	08003b68 	.word	0x08003b68
 8003514:	08003b72 	.word	0x08003b72
 8003518:	00000000 	.word	0x00000000
 800351c:	0800326d 	.word	0x0800326d
 8003520:	08003b6e 	.word	0x08003b6e

08003524 <_printf_common>:
 8003524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003528:	4616      	mov	r6, r2
 800352a:	4699      	mov	r9, r3
 800352c:	688a      	ldr	r2, [r1, #8]
 800352e:	690b      	ldr	r3, [r1, #16]
 8003530:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003534:	4293      	cmp	r3, r2
 8003536:	bfb8      	it	lt
 8003538:	4613      	movlt	r3, r2
 800353a:	6033      	str	r3, [r6, #0]
 800353c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003540:	4607      	mov	r7, r0
 8003542:	460c      	mov	r4, r1
 8003544:	b10a      	cbz	r2, 800354a <_printf_common+0x26>
 8003546:	3301      	adds	r3, #1
 8003548:	6033      	str	r3, [r6, #0]
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	0699      	lsls	r1, r3, #26
 800354e:	bf42      	ittt	mi
 8003550:	6833      	ldrmi	r3, [r6, #0]
 8003552:	3302      	addmi	r3, #2
 8003554:	6033      	strmi	r3, [r6, #0]
 8003556:	6825      	ldr	r5, [r4, #0]
 8003558:	f015 0506 	ands.w	r5, r5, #6
 800355c:	d106      	bne.n	800356c <_printf_common+0x48>
 800355e:	f104 0a19 	add.w	sl, r4, #25
 8003562:	68e3      	ldr	r3, [r4, #12]
 8003564:	6832      	ldr	r2, [r6, #0]
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	42ab      	cmp	r3, r5
 800356a:	dc26      	bgt.n	80035ba <_printf_common+0x96>
 800356c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003570:	1e13      	subs	r3, r2, #0
 8003572:	6822      	ldr	r2, [r4, #0]
 8003574:	bf18      	it	ne
 8003576:	2301      	movne	r3, #1
 8003578:	0692      	lsls	r2, r2, #26
 800357a:	d42b      	bmi.n	80035d4 <_printf_common+0xb0>
 800357c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003580:	4649      	mov	r1, r9
 8003582:	4638      	mov	r0, r7
 8003584:	47c0      	blx	r8
 8003586:	3001      	adds	r0, #1
 8003588:	d01e      	beq.n	80035c8 <_printf_common+0xa4>
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	68e5      	ldr	r5, [r4, #12]
 800358e:	6832      	ldr	r2, [r6, #0]
 8003590:	f003 0306 	and.w	r3, r3, #6
 8003594:	2b04      	cmp	r3, #4
 8003596:	bf08      	it	eq
 8003598:	1aad      	subeq	r5, r5, r2
 800359a:	68a3      	ldr	r3, [r4, #8]
 800359c:	6922      	ldr	r2, [r4, #16]
 800359e:	bf0c      	ite	eq
 80035a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035a4:	2500      	movne	r5, #0
 80035a6:	4293      	cmp	r3, r2
 80035a8:	bfc4      	itt	gt
 80035aa:	1a9b      	subgt	r3, r3, r2
 80035ac:	18ed      	addgt	r5, r5, r3
 80035ae:	2600      	movs	r6, #0
 80035b0:	341a      	adds	r4, #26
 80035b2:	42b5      	cmp	r5, r6
 80035b4:	d11a      	bne.n	80035ec <_printf_common+0xc8>
 80035b6:	2000      	movs	r0, #0
 80035b8:	e008      	b.n	80035cc <_printf_common+0xa8>
 80035ba:	2301      	movs	r3, #1
 80035bc:	4652      	mov	r2, sl
 80035be:	4649      	mov	r1, r9
 80035c0:	4638      	mov	r0, r7
 80035c2:	47c0      	blx	r8
 80035c4:	3001      	adds	r0, #1
 80035c6:	d103      	bne.n	80035d0 <_printf_common+0xac>
 80035c8:	f04f 30ff 	mov.w	r0, #4294967295
 80035cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d0:	3501      	adds	r5, #1
 80035d2:	e7c6      	b.n	8003562 <_printf_common+0x3e>
 80035d4:	18e1      	adds	r1, r4, r3
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	2030      	movs	r0, #48	; 0x30
 80035da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035de:	4422      	add	r2, r4
 80035e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035e8:	3302      	adds	r3, #2
 80035ea:	e7c7      	b.n	800357c <_printf_common+0x58>
 80035ec:	2301      	movs	r3, #1
 80035ee:	4622      	mov	r2, r4
 80035f0:	4649      	mov	r1, r9
 80035f2:	4638      	mov	r0, r7
 80035f4:	47c0      	blx	r8
 80035f6:	3001      	adds	r0, #1
 80035f8:	d0e6      	beq.n	80035c8 <_printf_common+0xa4>
 80035fa:	3601      	adds	r6, #1
 80035fc:	e7d9      	b.n	80035b2 <_printf_common+0x8e>
	...

08003600 <_printf_i>:
 8003600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003604:	7e0f      	ldrb	r7, [r1, #24]
 8003606:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003608:	2f78      	cmp	r7, #120	; 0x78
 800360a:	4691      	mov	r9, r2
 800360c:	4680      	mov	r8, r0
 800360e:	460c      	mov	r4, r1
 8003610:	469a      	mov	sl, r3
 8003612:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003616:	d807      	bhi.n	8003628 <_printf_i+0x28>
 8003618:	2f62      	cmp	r7, #98	; 0x62
 800361a:	d80a      	bhi.n	8003632 <_printf_i+0x32>
 800361c:	2f00      	cmp	r7, #0
 800361e:	f000 80d8 	beq.w	80037d2 <_printf_i+0x1d2>
 8003622:	2f58      	cmp	r7, #88	; 0x58
 8003624:	f000 80a3 	beq.w	800376e <_printf_i+0x16e>
 8003628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800362c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003630:	e03a      	b.n	80036a8 <_printf_i+0xa8>
 8003632:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003636:	2b15      	cmp	r3, #21
 8003638:	d8f6      	bhi.n	8003628 <_printf_i+0x28>
 800363a:	a101      	add	r1, pc, #4	; (adr r1, 8003640 <_printf_i+0x40>)
 800363c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003640:	08003699 	.word	0x08003699
 8003644:	080036ad 	.word	0x080036ad
 8003648:	08003629 	.word	0x08003629
 800364c:	08003629 	.word	0x08003629
 8003650:	08003629 	.word	0x08003629
 8003654:	08003629 	.word	0x08003629
 8003658:	080036ad 	.word	0x080036ad
 800365c:	08003629 	.word	0x08003629
 8003660:	08003629 	.word	0x08003629
 8003664:	08003629 	.word	0x08003629
 8003668:	08003629 	.word	0x08003629
 800366c:	080037b9 	.word	0x080037b9
 8003670:	080036dd 	.word	0x080036dd
 8003674:	0800379b 	.word	0x0800379b
 8003678:	08003629 	.word	0x08003629
 800367c:	08003629 	.word	0x08003629
 8003680:	080037db 	.word	0x080037db
 8003684:	08003629 	.word	0x08003629
 8003688:	080036dd 	.word	0x080036dd
 800368c:	08003629 	.word	0x08003629
 8003690:	08003629 	.word	0x08003629
 8003694:	080037a3 	.word	0x080037a3
 8003698:	682b      	ldr	r3, [r5, #0]
 800369a:	1d1a      	adds	r2, r3, #4
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	602a      	str	r2, [r5, #0]
 80036a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0a3      	b.n	80037f4 <_printf_i+0x1f4>
 80036ac:	6820      	ldr	r0, [r4, #0]
 80036ae:	6829      	ldr	r1, [r5, #0]
 80036b0:	0606      	lsls	r6, r0, #24
 80036b2:	f101 0304 	add.w	r3, r1, #4
 80036b6:	d50a      	bpl.n	80036ce <_printf_i+0xce>
 80036b8:	680e      	ldr	r6, [r1, #0]
 80036ba:	602b      	str	r3, [r5, #0]
 80036bc:	2e00      	cmp	r6, #0
 80036be:	da03      	bge.n	80036c8 <_printf_i+0xc8>
 80036c0:	232d      	movs	r3, #45	; 0x2d
 80036c2:	4276      	negs	r6, r6
 80036c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036c8:	485e      	ldr	r0, [pc, #376]	; (8003844 <_printf_i+0x244>)
 80036ca:	230a      	movs	r3, #10
 80036cc:	e019      	b.n	8003702 <_printf_i+0x102>
 80036ce:	680e      	ldr	r6, [r1, #0]
 80036d0:	602b      	str	r3, [r5, #0]
 80036d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036d6:	bf18      	it	ne
 80036d8:	b236      	sxthne	r6, r6
 80036da:	e7ef      	b.n	80036bc <_printf_i+0xbc>
 80036dc:	682b      	ldr	r3, [r5, #0]
 80036de:	6820      	ldr	r0, [r4, #0]
 80036e0:	1d19      	adds	r1, r3, #4
 80036e2:	6029      	str	r1, [r5, #0]
 80036e4:	0601      	lsls	r1, r0, #24
 80036e6:	d501      	bpl.n	80036ec <_printf_i+0xec>
 80036e8:	681e      	ldr	r6, [r3, #0]
 80036ea:	e002      	b.n	80036f2 <_printf_i+0xf2>
 80036ec:	0646      	lsls	r6, r0, #25
 80036ee:	d5fb      	bpl.n	80036e8 <_printf_i+0xe8>
 80036f0:	881e      	ldrh	r6, [r3, #0]
 80036f2:	4854      	ldr	r0, [pc, #336]	; (8003844 <_printf_i+0x244>)
 80036f4:	2f6f      	cmp	r7, #111	; 0x6f
 80036f6:	bf0c      	ite	eq
 80036f8:	2308      	moveq	r3, #8
 80036fa:	230a      	movne	r3, #10
 80036fc:	2100      	movs	r1, #0
 80036fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003702:	6865      	ldr	r5, [r4, #4]
 8003704:	60a5      	str	r5, [r4, #8]
 8003706:	2d00      	cmp	r5, #0
 8003708:	bfa2      	ittt	ge
 800370a:	6821      	ldrge	r1, [r4, #0]
 800370c:	f021 0104 	bicge.w	r1, r1, #4
 8003710:	6021      	strge	r1, [r4, #0]
 8003712:	b90e      	cbnz	r6, 8003718 <_printf_i+0x118>
 8003714:	2d00      	cmp	r5, #0
 8003716:	d04d      	beq.n	80037b4 <_printf_i+0x1b4>
 8003718:	4615      	mov	r5, r2
 800371a:	fbb6 f1f3 	udiv	r1, r6, r3
 800371e:	fb03 6711 	mls	r7, r3, r1, r6
 8003722:	5dc7      	ldrb	r7, [r0, r7]
 8003724:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003728:	4637      	mov	r7, r6
 800372a:	42bb      	cmp	r3, r7
 800372c:	460e      	mov	r6, r1
 800372e:	d9f4      	bls.n	800371a <_printf_i+0x11a>
 8003730:	2b08      	cmp	r3, #8
 8003732:	d10b      	bne.n	800374c <_printf_i+0x14c>
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	07de      	lsls	r6, r3, #31
 8003738:	d508      	bpl.n	800374c <_printf_i+0x14c>
 800373a:	6923      	ldr	r3, [r4, #16]
 800373c:	6861      	ldr	r1, [r4, #4]
 800373e:	4299      	cmp	r1, r3
 8003740:	bfde      	ittt	le
 8003742:	2330      	movle	r3, #48	; 0x30
 8003744:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003748:	f105 35ff 	addle.w	r5, r5, #4294967295
 800374c:	1b52      	subs	r2, r2, r5
 800374e:	6122      	str	r2, [r4, #16]
 8003750:	f8cd a000 	str.w	sl, [sp]
 8003754:	464b      	mov	r3, r9
 8003756:	aa03      	add	r2, sp, #12
 8003758:	4621      	mov	r1, r4
 800375a:	4640      	mov	r0, r8
 800375c:	f7ff fee2 	bl	8003524 <_printf_common>
 8003760:	3001      	adds	r0, #1
 8003762:	d14c      	bne.n	80037fe <_printf_i+0x1fe>
 8003764:	f04f 30ff 	mov.w	r0, #4294967295
 8003768:	b004      	add	sp, #16
 800376a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800376e:	4835      	ldr	r0, [pc, #212]	; (8003844 <_printf_i+0x244>)
 8003770:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003774:	6829      	ldr	r1, [r5, #0]
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	f851 6b04 	ldr.w	r6, [r1], #4
 800377c:	6029      	str	r1, [r5, #0]
 800377e:	061d      	lsls	r5, r3, #24
 8003780:	d514      	bpl.n	80037ac <_printf_i+0x1ac>
 8003782:	07df      	lsls	r7, r3, #31
 8003784:	bf44      	itt	mi
 8003786:	f043 0320 	orrmi.w	r3, r3, #32
 800378a:	6023      	strmi	r3, [r4, #0]
 800378c:	b91e      	cbnz	r6, 8003796 <_printf_i+0x196>
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	f023 0320 	bic.w	r3, r3, #32
 8003794:	6023      	str	r3, [r4, #0]
 8003796:	2310      	movs	r3, #16
 8003798:	e7b0      	b.n	80036fc <_printf_i+0xfc>
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	f043 0320 	orr.w	r3, r3, #32
 80037a0:	6023      	str	r3, [r4, #0]
 80037a2:	2378      	movs	r3, #120	; 0x78
 80037a4:	4828      	ldr	r0, [pc, #160]	; (8003848 <_printf_i+0x248>)
 80037a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037aa:	e7e3      	b.n	8003774 <_printf_i+0x174>
 80037ac:	0659      	lsls	r1, r3, #25
 80037ae:	bf48      	it	mi
 80037b0:	b2b6      	uxthmi	r6, r6
 80037b2:	e7e6      	b.n	8003782 <_printf_i+0x182>
 80037b4:	4615      	mov	r5, r2
 80037b6:	e7bb      	b.n	8003730 <_printf_i+0x130>
 80037b8:	682b      	ldr	r3, [r5, #0]
 80037ba:	6826      	ldr	r6, [r4, #0]
 80037bc:	6961      	ldr	r1, [r4, #20]
 80037be:	1d18      	adds	r0, r3, #4
 80037c0:	6028      	str	r0, [r5, #0]
 80037c2:	0635      	lsls	r5, r6, #24
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	d501      	bpl.n	80037cc <_printf_i+0x1cc>
 80037c8:	6019      	str	r1, [r3, #0]
 80037ca:	e002      	b.n	80037d2 <_printf_i+0x1d2>
 80037cc:	0670      	lsls	r0, r6, #25
 80037ce:	d5fb      	bpl.n	80037c8 <_printf_i+0x1c8>
 80037d0:	8019      	strh	r1, [r3, #0]
 80037d2:	2300      	movs	r3, #0
 80037d4:	6123      	str	r3, [r4, #16]
 80037d6:	4615      	mov	r5, r2
 80037d8:	e7ba      	b.n	8003750 <_printf_i+0x150>
 80037da:	682b      	ldr	r3, [r5, #0]
 80037dc:	1d1a      	adds	r2, r3, #4
 80037de:	602a      	str	r2, [r5, #0]
 80037e0:	681d      	ldr	r5, [r3, #0]
 80037e2:	6862      	ldr	r2, [r4, #4]
 80037e4:	2100      	movs	r1, #0
 80037e6:	4628      	mov	r0, r5
 80037e8:	f7fc fd0a 	bl	8000200 <memchr>
 80037ec:	b108      	cbz	r0, 80037f2 <_printf_i+0x1f2>
 80037ee:	1b40      	subs	r0, r0, r5
 80037f0:	6060      	str	r0, [r4, #4]
 80037f2:	6863      	ldr	r3, [r4, #4]
 80037f4:	6123      	str	r3, [r4, #16]
 80037f6:	2300      	movs	r3, #0
 80037f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037fc:	e7a8      	b.n	8003750 <_printf_i+0x150>
 80037fe:	6923      	ldr	r3, [r4, #16]
 8003800:	462a      	mov	r2, r5
 8003802:	4649      	mov	r1, r9
 8003804:	4640      	mov	r0, r8
 8003806:	47d0      	blx	sl
 8003808:	3001      	adds	r0, #1
 800380a:	d0ab      	beq.n	8003764 <_printf_i+0x164>
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	079b      	lsls	r3, r3, #30
 8003810:	d413      	bmi.n	800383a <_printf_i+0x23a>
 8003812:	68e0      	ldr	r0, [r4, #12]
 8003814:	9b03      	ldr	r3, [sp, #12]
 8003816:	4298      	cmp	r0, r3
 8003818:	bfb8      	it	lt
 800381a:	4618      	movlt	r0, r3
 800381c:	e7a4      	b.n	8003768 <_printf_i+0x168>
 800381e:	2301      	movs	r3, #1
 8003820:	4632      	mov	r2, r6
 8003822:	4649      	mov	r1, r9
 8003824:	4640      	mov	r0, r8
 8003826:	47d0      	blx	sl
 8003828:	3001      	adds	r0, #1
 800382a:	d09b      	beq.n	8003764 <_printf_i+0x164>
 800382c:	3501      	adds	r5, #1
 800382e:	68e3      	ldr	r3, [r4, #12]
 8003830:	9903      	ldr	r1, [sp, #12]
 8003832:	1a5b      	subs	r3, r3, r1
 8003834:	42ab      	cmp	r3, r5
 8003836:	dcf2      	bgt.n	800381e <_printf_i+0x21e>
 8003838:	e7eb      	b.n	8003812 <_printf_i+0x212>
 800383a:	2500      	movs	r5, #0
 800383c:	f104 0619 	add.w	r6, r4, #25
 8003840:	e7f5      	b.n	800382e <_printf_i+0x22e>
 8003842:	bf00      	nop
 8003844:	08003b79 	.word	0x08003b79
 8003848:	08003b8a 	.word	0x08003b8a

0800384c <memcpy>:
 800384c:	440a      	add	r2, r1
 800384e:	4291      	cmp	r1, r2
 8003850:	f100 33ff 	add.w	r3, r0, #4294967295
 8003854:	d100      	bne.n	8003858 <memcpy+0xc>
 8003856:	4770      	bx	lr
 8003858:	b510      	push	{r4, lr}
 800385a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800385e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003862:	4291      	cmp	r1, r2
 8003864:	d1f9      	bne.n	800385a <memcpy+0xe>
 8003866:	bd10      	pop	{r4, pc}

08003868 <memmove>:
 8003868:	4288      	cmp	r0, r1
 800386a:	b510      	push	{r4, lr}
 800386c:	eb01 0402 	add.w	r4, r1, r2
 8003870:	d902      	bls.n	8003878 <memmove+0x10>
 8003872:	4284      	cmp	r4, r0
 8003874:	4623      	mov	r3, r4
 8003876:	d807      	bhi.n	8003888 <memmove+0x20>
 8003878:	1e43      	subs	r3, r0, #1
 800387a:	42a1      	cmp	r1, r4
 800387c:	d008      	beq.n	8003890 <memmove+0x28>
 800387e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003882:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003886:	e7f8      	b.n	800387a <memmove+0x12>
 8003888:	4402      	add	r2, r0
 800388a:	4601      	mov	r1, r0
 800388c:	428a      	cmp	r2, r1
 800388e:	d100      	bne.n	8003892 <memmove+0x2a>
 8003890:	bd10      	pop	{r4, pc}
 8003892:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003896:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800389a:	e7f7      	b.n	800388c <memmove+0x24>

0800389c <_free_r>:
 800389c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800389e:	2900      	cmp	r1, #0
 80038a0:	d044      	beq.n	800392c <_free_r+0x90>
 80038a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038a6:	9001      	str	r0, [sp, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f1a1 0404 	sub.w	r4, r1, #4
 80038ae:	bfb8      	it	lt
 80038b0:	18e4      	addlt	r4, r4, r3
 80038b2:	f000 f913 	bl	8003adc <__malloc_lock>
 80038b6:	4a1e      	ldr	r2, [pc, #120]	; (8003930 <_free_r+0x94>)
 80038b8:	9801      	ldr	r0, [sp, #4]
 80038ba:	6813      	ldr	r3, [r2, #0]
 80038bc:	b933      	cbnz	r3, 80038cc <_free_r+0x30>
 80038be:	6063      	str	r3, [r4, #4]
 80038c0:	6014      	str	r4, [r2, #0]
 80038c2:	b003      	add	sp, #12
 80038c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038c8:	f000 b90e 	b.w	8003ae8 <__malloc_unlock>
 80038cc:	42a3      	cmp	r3, r4
 80038ce:	d908      	bls.n	80038e2 <_free_r+0x46>
 80038d0:	6825      	ldr	r5, [r4, #0]
 80038d2:	1961      	adds	r1, r4, r5
 80038d4:	428b      	cmp	r3, r1
 80038d6:	bf01      	itttt	eq
 80038d8:	6819      	ldreq	r1, [r3, #0]
 80038da:	685b      	ldreq	r3, [r3, #4]
 80038dc:	1949      	addeq	r1, r1, r5
 80038de:	6021      	streq	r1, [r4, #0]
 80038e0:	e7ed      	b.n	80038be <_free_r+0x22>
 80038e2:	461a      	mov	r2, r3
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	b10b      	cbz	r3, 80038ec <_free_r+0x50>
 80038e8:	42a3      	cmp	r3, r4
 80038ea:	d9fa      	bls.n	80038e2 <_free_r+0x46>
 80038ec:	6811      	ldr	r1, [r2, #0]
 80038ee:	1855      	adds	r5, r2, r1
 80038f0:	42a5      	cmp	r5, r4
 80038f2:	d10b      	bne.n	800390c <_free_r+0x70>
 80038f4:	6824      	ldr	r4, [r4, #0]
 80038f6:	4421      	add	r1, r4
 80038f8:	1854      	adds	r4, r2, r1
 80038fa:	42a3      	cmp	r3, r4
 80038fc:	6011      	str	r1, [r2, #0]
 80038fe:	d1e0      	bne.n	80038c2 <_free_r+0x26>
 8003900:	681c      	ldr	r4, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	6053      	str	r3, [r2, #4]
 8003906:	4421      	add	r1, r4
 8003908:	6011      	str	r1, [r2, #0]
 800390a:	e7da      	b.n	80038c2 <_free_r+0x26>
 800390c:	d902      	bls.n	8003914 <_free_r+0x78>
 800390e:	230c      	movs	r3, #12
 8003910:	6003      	str	r3, [r0, #0]
 8003912:	e7d6      	b.n	80038c2 <_free_r+0x26>
 8003914:	6825      	ldr	r5, [r4, #0]
 8003916:	1961      	adds	r1, r4, r5
 8003918:	428b      	cmp	r3, r1
 800391a:	bf04      	itt	eq
 800391c:	6819      	ldreq	r1, [r3, #0]
 800391e:	685b      	ldreq	r3, [r3, #4]
 8003920:	6063      	str	r3, [r4, #4]
 8003922:	bf04      	itt	eq
 8003924:	1949      	addeq	r1, r1, r5
 8003926:	6021      	streq	r1, [r4, #0]
 8003928:	6054      	str	r4, [r2, #4]
 800392a:	e7ca      	b.n	80038c2 <_free_r+0x26>
 800392c:	b003      	add	sp, #12
 800392e:	bd30      	pop	{r4, r5, pc}
 8003930:	20000158 	.word	0x20000158

08003934 <sbrk_aligned>:
 8003934:	b570      	push	{r4, r5, r6, lr}
 8003936:	4e0e      	ldr	r6, [pc, #56]	; (8003970 <sbrk_aligned+0x3c>)
 8003938:	460c      	mov	r4, r1
 800393a:	6831      	ldr	r1, [r6, #0]
 800393c:	4605      	mov	r5, r0
 800393e:	b911      	cbnz	r1, 8003946 <sbrk_aligned+0x12>
 8003940:	f000 f8bc 	bl	8003abc <_sbrk_r>
 8003944:	6030      	str	r0, [r6, #0]
 8003946:	4621      	mov	r1, r4
 8003948:	4628      	mov	r0, r5
 800394a:	f000 f8b7 	bl	8003abc <_sbrk_r>
 800394e:	1c43      	adds	r3, r0, #1
 8003950:	d00a      	beq.n	8003968 <sbrk_aligned+0x34>
 8003952:	1cc4      	adds	r4, r0, #3
 8003954:	f024 0403 	bic.w	r4, r4, #3
 8003958:	42a0      	cmp	r0, r4
 800395a:	d007      	beq.n	800396c <sbrk_aligned+0x38>
 800395c:	1a21      	subs	r1, r4, r0
 800395e:	4628      	mov	r0, r5
 8003960:	f000 f8ac 	bl	8003abc <_sbrk_r>
 8003964:	3001      	adds	r0, #1
 8003966:	d101      	bne.n	800396c <sbrk_aligned+0x38>
 8003968:	f04f 34ff 	mov.w	r4, #4294967295
 800396c:	4620      	mov	r0, r4
 800396e:	bd70      	pop	{r4, r5, r6, pc}
 8003970:	2000015c 	.word	0x2000015c

08003974 <_malloc_r>:
 8003974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003978:	1ccd      	adds	r5, r1, #3
 800397a:	f025 0503 	bic.w	r5, r5, #3
 800397e:	3508      	adds	r5, #8
 8003980:	2d0c      	cmp	r5, #12
 8003982:	bf38      	it	cc
 8003984:	250c      	movcc	r5, #12
 8003986:	2d00      	cmp	r5, #0
 8003988:	4607      	mov	r7, r0
 800398a:	db01      	blt.n	8003990 <_malloc_r+0x1c>
 800398c:	42a9      	cmp	r1, r5
 800398e:	d905      	bls.n	800399c <_malloc_r+0x28>
 8003990:	230c      	movs	r3, #12
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	2600      	movs	r6, #0
 8003996:	4630      	mov	r0, r6
 8003998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800399c:	4e2e      	ldr	r6, [pc, #184]	; (8003a58 <_malloc_r+0xe4>)
 800399e:	f000 f89d 	bl	8003adc <__malloc_lock>
 80039a2:	6833      	ldr	r3, [r6, #0]
 80039a4:	461c      	mov	r4, r3
 80039a6:	bb34      	cbnz	r4, 80039f6 <_malloc_r+0x82>
 80039a8:	4629      	mov	r1, r5
 80039aa:	4638      	mov	r0, r7
 80039ac:	f7ff ffc2 	bl	8003934 <sbrk_aligned>
 80039b0:	1c43      	adds	r3, r0, #1
 80039b2:	4604      	mov	r4, r0
 80039b4:	d14d      	bne.n	8003a52 <_malloc_r+0xde>
 80039b6:	6834      	ldr	r4, [r6, #0]
 80039b8:	4626      	mov	r6, r4
 80039ba:	2e00      	cmp	r6, #0
 80039bc:	d140      	bne.n	8003a40 <_malloc_r+0xcc>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	4631      	mov	r1, r6
 80039c2:	4638      	mov	r0, r7
 80039c4:	eb04 0803 	add.w	r8, r4, r3
 80039c8:	f000 f878 	bl	8003abc <_sbrk_r>
 80039cc:	4580      	cmp	r8, r0
 80039ce:	d13a      	bne.n	8003a46 <_malloc_r+0xd2>
 80039d0:	6821      	ldr	r1, [r4, #0]
 80039d2:	3503      	adds	r5, #3
 80039d4:	1a6d      	subs	r5, r5, r1
 80039d6:	f025 0503 	bic.w	r5, r5, #3
 80039da:	3508      	adds	r5, #8
 80039dc:	2d0c      	cmp	r5, #12
 80039de:	bf38      	it	cc
 80039e0:	250c      	movcc	r5, #12
 80039e2:	4629      	mov	r1, r5
 80039e4:	4638      	mov	r0, r7
 80039e6:	f7ff ffa5 	bl	8003934 <sbrk_aligned>
 80039ea:	3001      	adds	r0, #1
 80039ec:	d02b      	beq.n	8003a46 <_malloc_r+0xd2>
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	442b      	add	r3, r5
 80039f2:	6023      	str	r3, [r4, #0]
 80039f4:	e00e      	b.n	8003a14 <_malloc_r+0xa0>
 80039f6:	6822      	ldr	r2, [r4, #0]
 80039f8:	1b52      	subs	r2, r2, r5
 80039fa:	d41e      	bmi.n	8003a3a <_malloc_r+0xc6>
 80039fc:	2a0b      	cmp	r2, #11
 80039fe:	d916      	bls.n	8003a2e <_malloc_r+0xba>
 8003a00:	1961      	adds	r1, r4, r5
 8003a02:	42a3      	cmp	r3, r4
 8003a04:	6025      	str	r5, [r4, #0]
 8003a06:	bf18      	it	ne
 8003a08:	6059      	strne	r1, [r3, #4]
 8003a0a:	6863      	ldr	r3, [r4, #4]
 8003a0c:	bf08      	it	eq
 8003a0e:	6031      	streq	r1, [r6, #0]
 8003a10:	5162      	str	r2, [r4, r5]
 8003a12:	604b      	str	r3, [r1, #4]
 8003a14:	4638      	mov	r0, r7
 8003a16:	f104 060b 	add.w	r6, r4, #11
 8003a1a:	f000 f865 	bl	8003ae8 <__malloc_unlock>
 8003a1e:	f026 0607 	bic.w	r6, r6, #7
 8003a22:	1d23      	adds	r3, r4, #4
 8003a24:	1af2      	subs	r2, r6, r3
 8003a26:	d0b6      	beq.n	8003996 <_malloc_r+0x22>
 8003a28:	1b9b      	subs	r3, r3, r6
 8003a2a:	50a3      	str	r3, [r4, r2]
 8003a2c:	e7b3      	b.n	8003996 <_malloc_r+0x22>
 8003a2e:	6862      	ldr	r2, [r4, #4]
 8003a30:	42a3      	cmp	r3, r4
 8003a32:	bf0c      	ite	eq
 8003a34:	6032      	streq	r2, [r6, #0]
 8003a36:	605a      	strne	r2, [r3, #4]
 8003a38:	e7ec      	b.n	8003a14 <_malloc_r+0xa0>
 8003a3a:	4623      	mov	r3, r4
 8003a3c:	6864      	ldr	r4, [r4, #4]
 8003a3e:	e7b2      	b.n	80039a6 <_malloc_r+0x32>
 8003a40:	4634      	mov	r4, r6
 8003a42:	6876      	ldr	r6, [r6, #4]
 8003a44:	e7b9      	b.n	80039ba <_malloc_r+0x46>
 8003a46:	230c      	movs	r3, #12
 8003a48:	603b      	str	r3, [r7, #0]
 8003a4a:	4638      	mov	r0, r7
 8003a4c:	f000 f84c 	bl	8003ae8 <__malloc_unlock>
 8003a50:	e7a1      	b.n	8003996 <_malloc_r+0x22>
 8003a52:	6025      	str	r5, [r4, #0]
 8003a54:	e7de      	b.n	8003a14 <_malloc_r+0xa0>
 8003a56:	bf00      	nop
 8003a58:	20000158 	.word	0x20000158

08003a5c <_realloc_r>:
 8003a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a60:	4680      	mov	r8, r0
 8003a62:	4614      	mov	r4, r2
 8003a64:	460e      	mov	r6, r1
 8003a66:	b921      	cbnz	r1, 8003a72 <_realloc_r+0x16>
 8003a68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	f7ff bf81 	b.w	8003974 <_malloc_r>
 8003a72:	b92a      	cbnz	r2, 8003a80 <_realloc_r+0x24>
 8003a74:	f7ff ff12 	bl	800389c <_free_r>
 8003a78:	4625      	mov	r5, r4
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a80:	f000 f838 	bl	8003af4 <_malloc_usable_size_r>
 8003a84:	4284      	cmp	r4, r0
 8003a86:	4607      	mov	r7, r0
 8003a88:	d802      	bhi.n	8003a90 <_realloc_r+0x34>
 8003a8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a8e:	d812      	bhi.n	8003ab6 <_realloc_r+0x5a>
 8003a90:	4621      	mov	r1, r4
 8003a92:	4640      	mov	r0, r8
 8003a94:	f7ff ff6e 	bl	8003974 <_malloc_r>
 8003a98:	4605      	mov	r5, r0
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d0ed      	beq.n	8003a7a <_realloc_r+0x1e>
 8003a9e:	42bc      	cmp	r4, r7
 8003aa0:	4622      	mov	r2, r4
 8003aa2:	4631      	mov	r1, r6
 8003aa4:	bf28      	it	cs
 8003aa6:	463a      	movcs	r2, r7
 8003aa8:	f7ff fed0 	bl	800384c <memcpy>
 8003aac:	4631      	mov	r1, r6
 8003aae:	4640      	mov	r0, r8
 8003ab0:	f7ff fef4 	bl	800389c <_free_r>
 8003ab4:	e7e1      	b.n	8003a7a <_realloc_r+0x1e>
 8003ab6:	4635      	mov	r5, r6
 8003ab8:	e7df      	b.n	8003a7a <_realloc_r+0x1e>
	...

08003abc <_sbrk_r>:
 8003abc:	b538      	push	{r3, r4, r5, lr}
 8003abe:	4d06      	ldr	r5, [pc, #24]	; (8003ad8 <_sbrk_r+0x1c>)
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	602b      	str	r3, [r5, #0]
 8003ac8:	f7fc ff32 	bl	8000930 <_sbrk>
 8003acc:	1c43      	adds	r3, r0, #1
 8003ace:	d102      	bne.n	8003ad6 <_sbrk_r+0x1a>
 8003ad0:	682b      	ldr	r3, [r5, #0]
 8003ad2:	b103      	cbz	r3, 8003ad6 <_sbrk_r+0x1a>
 8003ad4:	6023      	str	r3, [r4, #0]
 8003ad6:	bd38      	pop	{r3, r4, r5, pc}
 8003ad8:	20000160 	.word	0x20000160

08003adc <__malloc_lock>:
 8003adc:	4801      	ldr	r0, [pc, #4]	; (8003ae4 <__malloc_lock+0x8>)
 8003ade:	f000 b811 	b.w	8003b04 <__retarget_lock_acquire_recursive>
 8003ae2:	bf00      	nop
 8003ae4:	20000164 	.word	0x20000164

08003ae8 <__malloc_unlock>:
 8003ae8:	4801      	ldr	r0, [pc, #4]	; (8003af0 <__malloc_unlock+0x8>)
 8003aea:	f000 b80c 	b.w	8003b06 <__retarget_lock_release_recursive>
 8003aee:	bf00      	nop
 8003af0:	20000164 	.word	0x20000164

08003af4 <_malloc_usable_size_r>:
 8003af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003af8:	1f18      	subs	r0, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bfbc      	itt	lt
 8003afe:	580b      	ldrlt	r3, [r1, r0]
 8003b00:	18c0      	addlt	r0, r0, r3
 8003b02:	4770      	bx	lr

08003b04 <__retarget_lock_acquire_recursive>:
 8003b04:	4770      	bx	lr

08003b06 <__retarget_lock_release_recursive>:
 8003b06:	4770      	bx	lr

08003b08 <_init>:
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0a:	bf00      	nop
 8003b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0e:	bc08      	pop	{r3}
 8003b10:	469e      	mov	lr, r3
 8003b12:	4770      	bx	lr

08003b14 <_fini>:
 8003b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b16:	bf00      	nop
 8003b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1a:	bc08      	pop	{r3}
 8003b1c:	469e      	mov	lr, r3
 8003b1e:	4770      	bx	lr
