
2022_06_15_Time_workspace1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003b60  08003b60  00013b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bdc  08003bdc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003bdc  08003bdc  00013bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003be4  08003be4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000f8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000168  20000168  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef4a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002218  00000000  00000000  0002efea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da0  00000000  00000000  00031208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c98  00000000  00000000  00031fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024dce  00000000  00000000  00032c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011205  00000000  00000000  00057a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e013b  00000000  00000000  00068c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00148d4e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bdc  00000000  00000000  00148da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003b48 	.word	0x08003b48

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003b48 	.word	0x08003b48

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <MX_GPIO_Init+0x68>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a16      	ldr	r2, [pc, #88]	; (800060c <MX_GPIO_Init+0x68>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <MX_GPIO_Init+0x68>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <MX_GPIO_Init+0x68>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a0f      	ldr	r2, [pc, #60]	; (800060c <MX_GPIO_Init+0x68>)
 80005d0:	f043 0308 	orr.w	r3, r3, #8
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <MX_GPIO_Init+0x68>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0308 	and.w	r3, r3, #8
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_GPIO_Init+0x68>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a08      	ldr	r2, [pc, #32]	; (800060c <MX_GPIO_Init+0x68>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_GPIO_Init+0x68>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000612:	b0a3      	sub	sp, #140	; 0x8c
 8000614:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
  char temp[100];
  char ampm[2][3] = {"AM", "PM"};
 8000616:	4a28      	ldr	r2, [pc, #160]	; (80006b8 <main+0xa8>)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800061e:	6018      	str	r0, [r3, #0]
 8000620:	3304      	adds	r3, #4
 8000622:	8019      	strh	r1, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 faf8 	bl	8000c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f852 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f7ff ffba 	bl	80005a4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000630:	f000 f8c6 	bl	80007c0 <MX_RTC_Init>
  MX_TIM3_Init();
 8000634:	f000 f9e4 	bl	8000a00 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000638:	f000 fa52 	bl	8000ae0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // 시간 정보 얻어오기
 800063c:	2200      	movs	r2, #0
 800063e:	491f      	ldr	r1, [pc, #124]	; (80006bc <main+0xac>)
 8000640:	481f      	ldr	r0, [pc, #124]	; (80006c0 <main+0xb0>)
 8000642:	f001 fd65 	bl	8002110 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // 날짜 정보 얻어오기
 8000646:	2200      	movs	r2, #0
 8000648:	491e      	ldr	r1, [pc, #120]	; (80006c4 <main+0xb4>)
 800064a:	481d      	ldr	r0, [pc, #116]	; (80006c0 <main+0xb0>)
 800064c:	f001 fe42 	bl	80022d4 <HAL_RTC_GetDate>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(temp,"\r\n20%02d-%02d-%02d %s %02d:%02d:%02d", sDate.Year, sDate.Month,
 8000650:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <main+0xb4>)
 8000652:	78db      	ldrb	r3, [r3, #3]
 8000654:	461e      	mov	r6, r3
 8000656:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <main+0xb4>)
 8000658:	785b      	ldrb	r3, [r3, #1]
 800065a:	469c      	mov	ip, r3
	         sDate.Date, ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes,
 800065c:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <main+0xb4>)
 800065e:	789b      	ldrb	r3, [r3, #2]
	  sprintf(temp,"\r\n20%02d-%02d-%02d %s %02d:%02d:%02d", sDate.Year, sDate.Month,
 8000660:	461c      	mov	r4, r3
	         sDate.Date, ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes,
 8000662:	4b16      	ldr	r3, [pc, #88]	; (80006bc <main+0xac>)
 8000664:	78db      	ldrb	r3, [r3, #3]
 8000666:	4619      	mov	r1, r3
 8000668:	1d3a      	adds	r2, r7, #4
 800066a:	460b      	mov	r3, r1
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	440b      	add	r3, r1
 8000670:	4413      	add	r3, r2
 8000672:	4a12      	ldr	r2, [pc, #72]	; (80006bc <main+0xac>)
 8000674:	7812      	ldrb	r2, [r2, #0]
	  sprintf(temp,"\r\n20%02d-%02d-%02d %s %02d:%02d:%02d", sDate.Year, sDate.Month,
 8000676:	4611      	mov	r1, r2
	         sDate.Date, ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes,
 8000678:	4a10      	ldr	r2, [pc, #64]	; (80006bc <main+0xac>)
 800067a:	7852      	ldrb	r2, [r2, #1]
	  sprintf(temp,"\r\n20%02d-%02d-%02d %s %02d:%02d:%02d", sDate.Year, sDate.Month,
 800067c:	4615      	mov	r5, r2
	         sTime.Seconds);
 800067e:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <main+0xac>)
 8000680:	7892      	ldrb	r2, [r2, #2]
	  sprintf(temp,"\r\n20%02d-%02d-%02d %s %02d:%02d:%02d", sDate.Year, sDate.Month,
 8000682:	f107 000c 	add.w	r0, r7, #12
 8000686:	9204      	str	r2, [sp, #16]
 8000688:	9503      	str	r5, [sp, #12]
 800068a:	9102      	str	r1, [sp, #8]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	9400      	str	r4, [sp, #0]
 8000690:	4663      	mov	r3, ip
 8000692:	4632      	mov	r2, r6
 8000694:	490c      	ldr	r1, [pc, #48]	; (80006c8 <main+0xb8>)
 8000696:	f002 fde9 	bl	800326c <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)temp, strlen(temp), 1000);
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fda6 	bl	80001f0 <strlen>
 80006a4:	4603      	mov	r3, r0
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	f107 010c 	add.w	r1, r7, #12
 80006ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b0:	4806      	ldr	r0, [pc, #24]	; (80006cc <main+0xbc>)
 80006b2:	f002 fa34 	bl	8002b1e <HAL_UART_Transmit>
	  sprintf(temp,"\r\n20%02d-%02d-%02d %s %02d:%02d:%02d", sDate.Year, sDate.Month,
 80006b6:	e7cb      	b.n	8000650 <main+0x40>
 80006b8:	08003b88 	.word	0x08003b88
 80006bc:	2000008c 	.word	0x2000008c
 80006c0:	200000a4 	.word	0x200000a4
 80006c4:	200000a0 	.word	0x200000a0
 80006c8:	08003b60 	.word	0x08003b60
 80006cc:	20000110 	.word	0x20000110

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	2230      	movs	r2, #48	; 0x30
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 fdbc 	bl	800325c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	4b2c      	ldr	r3, [pc, #176]	; (80007ac <SystemClock_Config+0xdc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a2b      	ldr	r2, [pc, #172]	; (80007ac <SystemClock_Config+0xdc>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b29      	ldr	r3, [pc, #164]	; (80007ac <SystemClock_Config+0xdc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <SystemClock_Config+0xe0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a25      	ldr	r2, [pc, #148]	; (80007b0 <SystemClock_Config+0xe0>)
 800071a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <SystemClock_Config+0xe0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800072c:	2306      	movs	r3, #6
 800072e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000730:	2301      	movs	r3, #1
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000744:	2308      	movs	r3, #8
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000748:	23b4      	movs	r3, #180	; 0xb4
 800074a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000750:	2304      	movs	r3, #4
 8000752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fdb1 	bl	80012c0 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000764:	f000 f826 	bl	80007b4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000768:	f000 fd5a 	bl	8001220 <HAL_PWREx_EnableOverDrive>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000772:	f000 f81f 	bl	80007b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000776:	230f      	movs	r3, #15
 8000778:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077a:	2302      	movs	r3, #2
 800077c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000782:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000786:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2105      	movs	r1, #5
 8000794:	4618      	mov	r0, r3
 8000796:	f001 f80b 	bl	80017b0 <HAL_RCC_ClockConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007a0:	f000 f808 	bl	80007b4 <Error_Handler>
  }
}
 80007a4:	bf00      	nop
 80007a6:	3750      	adds	r7, #80	; 0x50
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
}
 80007ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007bc:	e7fe      	b.n	80007bc <Error_Handler+0x8>
	...

080007c0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80007d4:	2300      	movs	r3, #0
 80007d6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007d8:	4b25      	ldr	r3, [pc, #148]	; (8000870 <MX_RTC_Init+0xb0>)
 80007da:	4a26      	ldr	r2, [pc, #152]	; (8000874 <MX_RTC_Init+0xb4>)
 80007dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80007de:	4b24      	ldr	r3, [pc, #144]	; (8000870 <MX_RTC_Init+0xb0>)
 80007e0:	2240      	movs	r2, #64	; 0x40
 80007e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <MX_RTC_Init+0xb0>)
 80007e6:	227f      	movs	r2, #127	; 0x7f
 80007e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <MX_RTC_Init+0xb0>)
 80007ec:	22ff      	movs	r2, #255	; 0xff
 80007ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <MX_RTC_Init+0xb0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007f6:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <MX_RTC_Init+0xb0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007fc:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_RTC_Init+0xb0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000802:	481b      	ldr	r0, [pc, #108]	; (8000870 <MX_RTC_Init+0xb0>)
 8000804:	f001 fb74 	bl	8001ef0 <HAL_RTC_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800080e:	f7ff ffd1 	bl	80007b4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8000812:	2312      	movs	r3, #18
 8000814:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000816:	2300      	movs	r3, #0
 8000818:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800081a:	2300      	movs	r3, #0
 800081c:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800081e:	2300      	movs	r3, #0
 8000820:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2201      	movs	r2, #1
 800082e:	4619      	mov	r1, r3
 8000830:	480f      	ldr	r0, [pc, #60]	; (8000870 <MX_RTC_Init+0xb0>)
 8000832:	f001 fbd3 	bl	8001fdc <HAL_RTC_SetTime>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 800083c:	f7ff ffba 	bl	80007b4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000840:	2303      	movs	r3, #3
 8000842:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8000844:	2306      	movs	r3, #6
 8000846:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x15;
 8000848:	2315      	movs	r3, #21
 800084a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 800084c:	2322      	movs	r3, #34	; 0x22
 800084e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000850:	463b      	mov	r3, r7
 8000852:	2201      	movs	r2, #1
 8000854:	4619      	mov	r1, r3
 8000856:	4806      	ldr	r0, [pc, #24]	; (8000870 <MX_RTC_Init+0xb0>)
 8000858:	f001 fcb8 	bl	80021cc <HAL_RTC_SetDate>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8000862:	f7ff ffa7 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200000a4 	.word	0x200000a4
 8000874:	40002800 	.word	0x40002800

08000878 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08e      	sub	sp, #56	; 0x38
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000880:	f107 0308 	add.w	r3, r7, #8
 8000884:	2230      	movs	r2, #48	; 0x30
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f002 fce7 	bl	800325c <memset>
  if(rtcHandle->Instance==RTC)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a0c      	ldr	r2, [pc, #48]	; (80008c4 <HAL_RTC_MspInit+0x4c>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d111      	bne.n	80008bc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000898:	2320      	movs	r3, #32
 800089a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800089c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008a2:	f107 0308 	add.w	r3, r7, #8
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 f962 	bl	8001b70 <HAL_RCCEx_PeriphCLKConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80008b2:	f7ff ff7f 	bl	80007b4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008b6:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <HAL_RTC_MspInit+0x50>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80008bc:	bf00      	nop
 80008be:	3738      	adds	r7, #56	; 0x38
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40002800 	.word	0x40002800
 80008c8:	42470e3c 	.word	0x42470e3c

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <HAL_MspInit+0x4c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <HAL_MspInit+0x4c>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e0:	6453      	str	r3, [r2, #68]	; 0x44
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <HAL_MspInit+0x4c>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000968:	f000 f9a8 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000978:	4a14      	ldr	r2, [pc, #80]	; (80009cc <_sbrk+0x5c>)
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <_sbrk+0x60>)
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000984:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <_sbrk+0x64>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d102      	bne.n	8000992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <_sbrk+0x64>)
 800098e:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <_sbrk+0x68>)
 8000990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <_sbrk+0x64>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	429a      	cmp	r2, r3
 800099e:	d207      	bcs.n	80009b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a0:	f002 fc32 	bl	8003208 <__errno>
 80009a4:	4603      	mov	r3, r0
 80009a6:	220c      	movs	r2, #12
 80009a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009aa:	f04f 33ff 	mov.w	r3, #4294967295
 80009ae:	e009      	b.n	80009c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <_sbrk+0x64>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009b6:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <_sbrk+0x64>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <_sbrk+0x64>)
 80009c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009c2:	68fb      	ldr	r3, [r7, #12]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20030000 	.word	0x20030000
 80009d0:	00000400 	.word	0x00000400
 80009d4:	200000c4 	.word	0x200000c4
 80009d8:	20000168 	.word	0x20000168

080009dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <SystemInit+0x20>)
 80009e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e6:	4a05      	ldr	r2, [pc, #20]	; (80009fc <SystemInit+0x20>)
 80009e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a14:	463b      	mov	r3, r7
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <MX_TIM3_Init+0x94>)
 8000a1e:	4a1e      	ldr	r2, [pc, #120]	; (8000a98 <MX_TIM3_Init+0x98>)
 8000a20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <MX_TIM3_Init+0x94>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_TIM3_Init+0x94>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <MX_TIM3_Init+0x94>)
 8000a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_TIM3_Init+0x94>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_TIM3_Init+0x94>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a42:	4814      	ldr	r0, [pc, #80]	; (8000a94 <MX_TIM3_Init+0x94>)
 8000a44:	f001 fd52 	bl	80024ec <HAL_TIM_Base_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000a4e:	f7ff feb1 	bl	80007b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480d      	ldr	r0, [pc, #52]	; (8000a94 <MX_TIM3_Init+0x94>)
 8000a60:	f001 fd93 	bl	800258a <HAL_TIM_ConfigClockSource>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000a6a:	f7ff fea3 	bl	80007b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a76:	463b      	mov	r3, r7
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4806      	ldr	r0, [pc, #24]	; (8000a94 <MX_TIM3_Init+0x94>)
 8000a7c:	f001 ff86 	bl	800298c <HAL_TIMEx_MasterConfigSynchronization>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000a86:	f7ff fe95 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200000c8 	.word	0x200000c8
 8000a98:	40000400 	.word	0x40000400

08000a9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <HAL_TIM_Base_MspInit+0x3c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d10d      	bne.n	8000aca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_TIM_Base_MspInit+0x40>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	4a09      	ldr	r2, [pc, #36]	; (8000adc <HAL_TIM_Base_MspInit+0x40>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6413      	str	r3, [r2, #64]	; 0x40
 8000abe:	4b07      	ldr	r3, [pc, #28]	; (8000adc <HAL_TIM_Base_MspInit+0x40>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000aca:	bf00      	nop
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40000400 	.word	0x40000400
 8000adc:	40023800 	.word	0x40023800

08000ae0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000ae6:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <MX_USART3_UART_Init+0x50>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000aec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000b18:	f001 ffb4 	bl	8002a84 <HAL_UART_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b22:	f7ff fe47 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000110 	.word	0x20000110
 8000b30:	40004800 	.word	0x40004800

08000b34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a19      	ldr	r2, [pc, #100]	; (8000bb8 <HAL_UART_MspInit+0x84>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d12c      	bne.n	8000bb0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a17      	ldr	r2, [pc, #92]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b7c:	f043 0308 	orr.w	r3, r3, #8
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ba0:	2307      	movs	r3, #7
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <HAL_UART_MspInit+0x8c>)
 8000bac:	f000 f98c 	bl	8000ec8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	3728      	adds	r7, #40	; 0x28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40004800 	.word	0x40004800
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020c00 	.word	0x40020c00

08000bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bfc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bca:	490e      	ldr	r1, [pc, #56]	; (8000c04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bcc:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000be0:	4c0b      	ldr	r4, [pc, #44]	; (8000c10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bee:	f7ff fef5 	bl	80009dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f002 fb0f 	bl	8003214 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf6:	f7ff fd0b 	bl	8000610 <main>
  bx  lr    
 8000bfa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000bfc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c08:	08003bec 	.word	0x08003bec
  ldr r2, =_sbss
 8000c0c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c10:	20000168 	.word	0x20000168

08000c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC_IRQHandler>
	...

08000c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <HAL_Init+0x40>)
 8000c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_Init+0x40>)
 8000c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <HAL_Init+0x40>)
 8000c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c40:	2003      	movs	r0, #3
 8000c42:	f000 f90d 	bl	8000e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c46:	200f      	movs	r0, #15
 8000c48:	f000 f808 	bl	8000c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c4c:	f7ff fe3e 	bl	80008cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023c00 	.word	0x40023c00

08000c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_InitTick+0x54>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_InitTick+0x58>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 f917 	bl	8000eae <HAL_SYSTICK_Config>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00e      	b.n	8000ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d80a      	bhi.n	8000ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f000 f8ed 	bl	8000e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c9c:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <HAL_InitTick+0x5c>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e000      	b.n	8000ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000004 	.word	0x20000004

08000cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000154 	.word	0x20000154

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <HAL_GetTick+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000154 	.word	0x20000154

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2e:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	60d3      	str	r3, [r2, #12]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	; (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e2c:	d301      	bcc.n	8000e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00f      	b.n	8000e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <SysTick_Config+0x40>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f7ff ff8e 	bl	8000d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <SysTick_Config+0x40>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <SysTick_Config+0x40>)
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff47 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e88:	f7ff ff5c 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f7ff ff8e 	bl	8000db4 <NVIC_EncodePriority>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff5d 	bl	8000d60 <__NVIC_SetPriority>
}
 8000ea6:	bf00      	nop
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ffb0 	bl	8000e1c <SysTick_Config>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
 8000ee2:	e177      	b.n	80011d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	f040 8166 	bne.w	80011ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d005      	beq.n	8000f1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d130      	bne.n	8000f7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	2203      	movs	r2, #3
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	68da      	ldr	r2, [r3, #12]
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f50:	2201      	movs	r2, #1
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	091b      	lsrs	r3, r3, #4
 8000f66:	f003 0201 	and.w	r2, r3, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d017      	beq.n	8000fb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d123      	bne.n	800100c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	08da      	lsrs	r2, r3, #3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3208      	adds	r2, #8
 8000fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	220f      	movs	r2, #15
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	691a      	ldr	r2, [r3, #16]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	08da      	lsrs	r2, r3, #3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3208      	adds	r2, #8
 8001006:	69b9      	ldr	r1, [r7, #24]
 8001008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0203 	and.w	r2, r3, #3
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 80c0 	beq.w	80011ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b66      	ldr	r3, [pc, #408]	; (80011ec <HAL_GPIO_Init+0x324>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a65      	ldr	r2, [pc, #404]	; (80011ec <HAL_GPIO_Init+0x324>)
 8001058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b63      	ldr	r3, [pc, #396]	; (80011ec <HAL_GPIO_Init+0x324>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106a:	4a61      	ldr	r2, [pc, #388]	; (80011f0 <HAL_GPIO_Init+0x328>)
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	220f      	movs	r2, #15
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a58      	ldr	r2, [pc, #352]	; (80011f4 <HAL_GPIO_Init+0x32c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d037      	beq.n	8001106 <HAL_GPIO_Init+0x23e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a57      	ldr	r2, [pc, #348]	; (80011f8 <HAL_GPIO_Init+0x330>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d031      	beq.n	8001102 <HAL_GPIO_Init+0x23a>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a56      	ldr	r2, [pc, #344]	; (80011fc <HAL_GPIO_Init+0x334>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d02b      	beq.n	80010fe <HAL_GPIO_Init+0x236>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a55      	ldr	r2, [pc, #340]	; (8001200 <HAL_GPIO_Init+0x338>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d025      	beq.n	80010fa <HAL_GPIO_Init+0x232>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a54      	ldr	r2, [pc, #336]	; (8001204 <HAL_GPIO_Init+0x33c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d01f      	beq.n	80010f6 <HAL_GPIO_Init+0x22e>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a53      	ldr	r2, [pc, #332]	; (8001208 <HAL_GPIO_Init+0x340>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d019      	beq.n	80010f2 <HAL_GPIO_Init+0x22a>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a52      	ldr	r2, [pc, #328]	; (800120c <HAL_GPIO_Init+0x344>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d013      	beq.n	80010ee <HAL_GPIO_Init+0x226>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a51      	ldr	r2, [pc, #324]	; (8001210 <HAL_GPIO_Init+0x348>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d00d      	beq.n	80010ea <HAL_GPIO_Init+0x222>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a50      	ldr	r2, [pc, #320]	; (8001214 <HAL_GPIO_Init+0x34c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d007      	beq.n	80010e6 <HAL_GPIO_Init+0x21e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4f      	ldr	r2, [pc, #316]	; (8001218 <HAL_GPIO_Init+0x350>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <HAL_GPIO_Init+0x21a>
 80010de:	2309      	movs	r3, #9
 80010e0:	e012      	b.n	8001108 <HAL_GPIO_Init+0x240>
 80010e2:	230a      	movs	r3, #10
 80010e4:	e010      	b.n	8001108 <HAL_GPIO_Init+0x240>
 80010e6:	2308      	movs	r3, #8
 80010e8:	e00e      	b.n	8001108 <HAL_GPIO_Init+0x240>
 80010ea:	2307      	movs	r3, #7
 80010ec:	e00c      	b.n	8001108 <HAL_GPIO_Init+0x240>
 80010ee:	2306      	movs	r3, #6
 80010f0:	e00a      	b.n	8001108 <HAL_GPIO_Init+0x240>
 80010f2:	2305      	movs	r3, #5
 80010f4:	e008      	b.n	8001108 <HAL_GPIO_Init+0x240>
 80010f6:	2304      	movs	r3, #4
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x240>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e004      	b.n	8001108 <HAL_GPIO_Init+0x240>
 80010fe:	2302      	movs	r3, #2
 8001100:	e002      	b.n	8001108 <HAL_GPIO_Init+0x240>
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <HAL_GPIO_Init+0x240>
 8001106:	2300      	movs	r3, #0
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	f002 0203 	and.w	r2, r2, #3
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	4093      	lsls	r3, r2
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001118:	4935      	ldr	r1, [pc, #212]	; (80011f0 <HAL_GPIO_Init+0x328>)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001126:	4b3d      	ldr	r3, [pc, #244]	; (800121c <HAL_GPIO_Init+0x354>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800114a:	4a34      	ldr	r2, [pc, #208]	; (800121c <HAL_GPIO_Init+0x354>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001150:	4b32      	ldr	r3, [pc, #200]	; (800121c <HAL_GPIO_Init+0x354>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001174:	4a29      	ldr	r2, [pc, #164]	; (800121c <HAL_GPIO_Init+0x354>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800117a:	4b28      	ldr	r3, [pc, #160]	; (800121c <HAL_GPIO_Init+0x354>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800119e:	4a1f      	ldr	r2, [pc, #124]	; (800121c <HAL_GPIO_Init+0x354>)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <HAL_GPIO_Init+0x354>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c8:	4a14      	ldr	r2, [pc, #80]	; (800121c <HAL_GPIO_Init+0x354>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3301      	adds	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	2b0f      	cmp	r3, #15
 80011d8:	f67f ae84 	bls.w	8000ee4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40013800 	.word	0x40013800
 80011f4:	40020000 	.word	0x40020000
 80011f8:	40020400 	.word	0x40020400
 80011fc:	40020800 	.word	0x40020800
 8001200:	40020c00 	.word	0x40020c00
 8001204:	40021000 	.word	0x40021000
 8001208:	40021400 	.word	0x40021400
 800120c:	40021800 	.word	0x40021800
 8001210:	40021c00 	.word	0x40021c00
 8001214:	40022000 	.word	0x40022000
 8001218:	40022400 	.word	0x40022400
 800121c:	40013c00 	.word	0x40013c00

08001220 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	6413      	str	r3, [r2, #64]	; 0x40
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <HAL_PWREx_EnableOverDrive+0x90>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001248:	2201      	movs	r2, #1
 800124a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800124c:	f7ff fd4a 	bl	8000ce4 <HAL_GetTick>
 8001250:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001252:	e009      	b.n	8001268 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001254:	f7ff fd46 	bl	8000ce4 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001262:	d901      	bls.n	8001268 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e01f      	b.n	80012a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001274:	d1ee      	bne.n	8001254 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001278:	2201      	movs	r2, #1
 800127a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800127c:	f7ff fd32 	bl	8000ce4 <HAL_GetTick>
 8001280:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001282:	e009      	b.n	8001298 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001284:	f7ff fd2e 	bl	8000ce4 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001292:	d901      	bls.n	8001298 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e007      	b.n	80012a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012a4:	d1ee      	bne.n	8001284 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40023800 	.word	0x40023800
 80012b4:	420e0040 	.word	0x420e0040
 80012b8:	40007000 	.word	0x40007000
 80012bc:	420e0044 	.word	0x420e0044

080012c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e267      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d075      	beq.n	80013ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012de:	4b88      	ldr	r3, [pc, #544]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d00c      	beq.n	8001304 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ea:	4b85      	ldr	r3, [pc, #532]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d112      	bne.n	800131c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f6:	4b82      	ldr	r3, [pc, #520]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001302:	d10b      	bne.n	800131c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001304:	4b7e      	ldr	r3, [pc, #504]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d05b      	beq.n	80013c8 <HAL_RCC_OscConfig+0x108>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d157      	bne.n	80013c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e242      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001324:	d106      	bne.n	8001334 <HAL_RCC_OscConfig+0x74>
 8001326:	4b76      	ldr	r3, [pc, #472]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a75      	ldr	r2, [pc, #468]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 800132c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	e01d      	b.n	8001370 <HAL_RCC_OscConfig+0xb0>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800133c:	d10c      	bne.n	8001358 <HAL_RCC_OscConfig+0x98>
 800133e:	4b70      	ldr	r3, [pc, #448]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a6f      	ldr	r2, [pc, #444]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b6d      	ldr	r3, [pc, #436]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a6c      	ldr	r2, [pc, #432]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e00b      	b.n	8001370 <HAL_RCC_OscConfig+0xb0>
 8001358:	4b69      	ldr	r3, [pc, #420]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a68      	ldr	r2, [pc, #416]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 800135e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b66      	ldr	r3, [pc, #408]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a65      	ldr	r2, [pc, #404]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 800136a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d013      	beq.n	80013a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fcb4 	bl	8000ce4 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fcb0 	bl	8000ce4 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e207      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	4b5b      	ldr	r3, [pc, #364]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0xc0>
 800139e:	e014      	b.n	80013ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fca0 	bl	8000ce4 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fc9c 	bl	8000ce4 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b64      	cmp	r3, #100	; 0x64
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e1f3      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ba:	4b51      	ldr	r3, [pc, #324]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0xe8>
 80013c6:	e000      	b.n	80013ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d063      	beq.n	800149e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013d6:	4b4a      	ldr	r3, [pc, #296]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00b      	beq.n	80013fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e2:	4b47      	ldr	r3, [pc, #284]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d11c      	bne.n	8001428 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ee:	4b44      	ldr	r3, [pc, #272]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d116      	bne.n	8001428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fa:	4b41      	ldr	r3, [pc, #260]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d005      	beq.n	8001412 <HAL_RCC_OscConfig+0x152>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d001      	beq.n	8001412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e1c7      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001412:	4b3b      	ldr	r3, [pc, #236]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4937      	ldr	r1, [pc, #220]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001422:	4313      	orrs	r3, r2
 8001424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001426:	e03a      	b.n	800149e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d020      	beq.n	8001472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001430:	4b34      	ldr	r3, [pc, #208]	; (8001504 <HAL_RCC_OscConfig+0x244>)
 8001432:	2201      	movs	r2, #1
 8001434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001436:	f7ff fc55 	bl	8000ce4 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143e:	f7ff fc51 	bl	8000ce4 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e1a8      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001450:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b28      	ldr	r3, [pc, #160]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	4925      	ldr	r1, [pc, #148]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 800146c:	4313      	orrs	r3, r2
 800146e:	600b      	str	r3, [r1, #0]
 8001470:	e015      	b.n	800149e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001472:	4b24      	ldr	r3, [pc, #144]	; (8001504 <HAL_RCC_OscConfig+0x244>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001478:	f7ff fc34 	bl	8000ce4 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001480:	f7ff fc30 	bl	8000ce4 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e187      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001492:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d036      	beq.n	8001518 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d016      	beq.n	80014e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <HAL_RCC_OscConfig+0x248>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b8:	f7ff fc14 	bl	8000ce4 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c0:	f7ff fc10 	bl	8000ce4 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e167      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80014d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x200>
 80014de:	e01b      	b.n	8001518 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_RCC_OscConfig+0x248>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fbfd 	bl	8000ce4 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ec:	e00e      	b.n	800150c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ee:	f7ff fbf9 	bl	8000ce4 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d907      	bls.n	800150c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e150      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
 8001500:	40023800 	.word	0x40023800
 8001504:	42470000 	.word	0x42470000
 8001508:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150c:	4b88      	ldr	r3, [pc, #544]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 800150e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1ea      	bne.n	80014ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 8097 	beq.w	8001654 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152a:	4b81      	ldr	r3, [pc, #516]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10f      	bne.n	8001556 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	4b7d      	ldr	r3, [pc, #500]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	4a7c      	ldr	r2, [pc, #496]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001544:	6413      	str	r3, [r2, #64]	; 0x40
 8001546:	4b7a      	ldr	r3, [pc, #488]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001552:	2301      	movs	r3, #1
 8001554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001556:	4b77      	ldr	r3, [pc, #476]	; (8001734 <HAL_RCC_OscConfig+0x474>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d118      	bne.n	8001594 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001562:	4b74      	ldr	r3, [pc, #464]	; (8001734 <HAL_RCC_OscConfig+0x474>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a73      	ldr	r2, [pc, #460]	; (8001734 <HAL_RCC_OscConfig+0x474>)
 8001568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156e:	f7ff fbb9 	bl	8000ce4 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001576:	f7ff fbb5 	bl	8000ce4 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e10c      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001588:	4b6a      	ldr	r3, [pc, #424]	; (8001734 <HAL_RCC_OscConfig+0x474>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d106      	bne.n	80015aa <HAL_RCC_OscConfig+0x2ea>
 800159c:	4b64      	ldr	r3, [pc, #400]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	4a63      	ldr	r2, [pc, #396]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6713      	str	r3, [r2, #112]	; 0x70
 80015a8:	e01c      	b.n	80015e4 <HAL_RCC_OscConfig+0x324>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b05      	cmp	r3, #5
 80015b0:	d10c      	bne.n	80015cc <HAL_RCC_OscConfig+0x30c>
 80015b2:	4b5f      	ldr	r3, [pc, #380]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	4a5e      	ldr	r2, [pc, #376]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	6713      	str	r3, [r2, #112]	; 0x70
 80015be:	4b5c      	ldr	r3, [pc, #368]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c2:	4a5b      	ldr	r2, [pc, #364]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ca:	e00b      	b.n	80015e4 <HAL_RCC_OscConfig+0x324>
 80015cc:	4b58      	ldr	r3, [pc, #352]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d0:	4a57      	ldr	r2, [pc, #348]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015d2:	f023 0301 	bic.w	r3, r3, #1
 80015d6:	6713      	str	r3, [r2, #112]	; 0x70
 80015d8:	4b55      	ldr	r3, [pc, #340]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015dc:	4a54      	ldr	r2, [pc, #336]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015de:	f023 0304 	bic.w	r3, r3, #4
 80015e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d015      	beq.n	8001618 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ec:	f7ff fb7a 	bl	8000ce4 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f2:	e00a      	b.n	800160a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f4:	f7ff fb76 	bl	8000ce4 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001602:	4293      	cmp	r3, r2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e0cb      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160a:	4b49      	ldr	r3, [pc, #292]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0ee      	beq.n	80015f4 <HAL_RCC_OscConfig+0x334>
 8001616:	e014      	b.n	8001642 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001618:	f7ff fb64 	bl	8000ce4 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161e:	e00a      	b.n	8001636 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001620:	f7ff fb60 	bl	8000ce4 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f241 3288 	movw	r2, #5000	; 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e0b5      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001636:	4b3e      	ldr	r3, [pc, #248]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 8001638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1ee      	bne.n	8001620 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001642:	7dfb      	ldrb	r3, [r7, #23]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d105      	bne.n	8001654 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001648:	4b39      	ldr	r3, [pc, #228]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	4a38      	ldr	r2, [pc, #224]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 800164e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001652:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 80a1 	beq.w	80017a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800165e:	4b34      	ldr	r3, [pc, #208]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b08      	cmp	r3, #8
 8001668:	d05c      	beq.n	8001724 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d141      	bne.n	80016f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001672:	4b31      	ldr	r3, [pc, #196]	; (8001738 <HAL_RCC_OscConfig+0x478>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fb34 	bl	8000ce4 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff fb30 	bl	8000ce4 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e087      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001692:	4b27      	ldr	r3, [pc, #156]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69da      	ldr	r2, [r3, #28]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	019b      	lsls	r3, r3, #6
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	085b      	lsrs	r3, r3, #1
 80016b6:	3b01      	subs	r3, #1
 80016b8:	041b      	lsls	r3, r3, #16
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	061b      	lsls	r3, r3, #24
 80016c2:	491b      	ldr	r1, [pc, #108]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <HAL_RCC_OscConfig+0x478>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7ff fb09 	bl	8000ce4 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d6:	f7ff fb05 	bl	8000ce4 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e05c      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x416>
 80016f4:	e054      	b.n	80017a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <HAL_RCC_OscConfig+0x478>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff faf2 	bl	8000ce4 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001704:	f7ff faee 	bl	8000ce4 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e045      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x444>
 8001722:	e03d      	b.n	80017a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d107      	bne.n	800173c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e038      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
 8001730:	40023800 	.word	0x40023800
 8001734:	40007000 	.word	0x40007000
 8001738:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <HAL_RCC_OscConfig+0x4ec>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d028      	beq.n	800179c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001754:	429a      	cmp	r2, r3
 8001756:	d121      	bne.n	800179c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	429a      	cmp	r2, r3
 8001764:	d11a      	bne.n	800179c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800176c:	4013      	ands	r3, r2
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001772:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001774:	4293      	cmp	r3, r2
 8001776:	d111      	bne.n	800179c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	085b      	lsrs	r3, r3, #1
 8001784:	3b01      	subs	r3, #1
 8001786:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001788:	429a      	cmp	r2, r3
 800178a:	d107      	bne.n	800179c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001796:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001798:	429a      	cmp	r2, r3
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800

080017b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0cc      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c4:	4b68      	ldr	r3, [pc, #416]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d90c      	bls.n	80017ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b65      	ldr	r3, [pc, #404]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017da:	4b63      	ldr	r3, [pc, #396]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d001      	beq.n	80017ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0b8      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d020      	beq.n	800183a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001804:	4b59      	ldr	r3, [pc, #356]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a58      	ldr	r2, [pc, #352]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800180e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800181c:	4b53      	ldr	r3, [pc, #332]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	4a52      	ldr	r2, [pc, #328]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001828:	4b50      	ldr	r3, [pc, #320]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	494d      	ldr	r1, [pc, #308]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	4313      	orrs	r3, r2
 8001838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d044      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184e:	4b47      	ldr	r3, [pc, #284]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d119      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e07f      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d003      	beq.n	800186e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186a:	2b03      	cmp	r3, #3
 800186c:	d107      	bne.n	800187e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186e:	4b3f      	ldr	r3, [pc, #252]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d109      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e06f      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187e:	4b3b      	ldr	r3, [pc, #236]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e067      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188e:	4b37      	ldr	r3, [pc, #220]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f023 0203 	bic.w	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4934      	ldr	r1, [pc, #208]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	4313      	orrs	r3, r2
 800189e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a0:	f7ff fa20 	bl	8000ce4 <HAL_GetTick>
 80018a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	e00a      	b.n	80018be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a8:	f7ff fa1c 	bl	8000ce4 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e04f      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018be:	4b2b      	ldr	r3, [pc, #172]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 020c 	and.w	r2, r3, #12
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d1eb      	bne.n	80018a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d0:	4b25      	ldr	r3, [pc, #148]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 030f 	and.w	r3, r3, #15
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d20c      	bcs.n	80018f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b22      	ldr	r3, [pc, #136]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	4b20      	ldr	r3, [pc, #128]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e032      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d008      	beq.n	8001916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4916      	ldr	r1, [pc, #88]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d009      	beq.n	8001936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001922:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	490e      	ldr	r1, [pc, #56]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001936:	f000 f821 	bl	800197c <HAL_RCC_GetSysClockFreq>
 800193a:	4602      	mov	r2, r0
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	490a      	ldr	r1, [pc, #40]	; (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 8001948:	5ccb      	ldrb	r3, [r1, r3]
 800194a:	fa22 f303 	lsr.w	r3, r2, r3
 800194e:	4a09      	ldr	r2, [pc, #36]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f980 	bl	8000c5c <HAL_InitTick>

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023c00 	.word	0x40023c00
 800196c:	40023800 	.word	0x40023800
 8001970:	08003b90 	.word	0x08003b90
 8001974:	20000000 	.word	0x20000000
 8001978:	20000004 	.word	0x20000004

0800197c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800197c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001980:	b090      	sub	sp, #64	; 0x40
 8001982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	637b      	str	r3, [r7, #52]	; 0x34
 8001988:	2300      	movs	r3, #0
 800198a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800198c:	2300      	movs	r3, #0
 800198e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001994:	4b59      	ldr	r3, [pc, #356]	; (8001afc <HAL_RCC_GetSysClockFreq+0x180>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b08      	cmp	r3, #8
 800199e:	d00d      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0x40>
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	f200 80a1 	bhi.w	8001ae8 <HAL_RCC_GetSysClockFreq+0x16c>
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x34>
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d003      	beq.n	80019b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80019ae:	e09b      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b0:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x184>)
 80019b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80019b4:	e09b      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019b6:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x188>)
 80019b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019ba:	e098      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019bc:	4b4f      	ldr	r3, [pc, #316]	; (8001afc <HAL_RCC_GetSysClockFreq+0x180>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019c6:	4b4d      	ldr	r3, [pc, #308]	; (8001afc <HAL_RCC_GetSysClockFreq+0x180>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d028      	beq.n	8001a24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d2:	4b4a      	ldr	r3, [pc, #296]	; (8001afc <HAL_RCC_GetSysClockFreq+0x180>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	099b      	lsrs	r3, r3, #6
 80019d8:	2200      	movs	r2, #0
 80019da:	623b      	str	r3, [r7, #32]
 80019dc:	627a      	str	r2, [r7, #36]	; 0x24
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019e4:	2100      	movs	r1, #0
 80019e6:	4b47      	ldr	r3, [pc, #284]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x188>)
 80019e8:	fb03 f201 	mul.w	r2, r3, r1
 80019ec:	2300      	movs	r3, #0
 80019ee:	fb00 f303 	mul.w	r3, r0, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	4a43      	ldr	r2, [pc, #268]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x188>)
 80019f6:	fba0 1202 	umull	r1, r2, r0, r2
 80019fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019fc:	460a      	mov	r2, r1
 80019fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a02:	4413      	add	r3, r2
 8001a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a08:	2200      	movs	r2, #0
 8001a0a:	61bb      	str	r3, [r7, #24]
 8001a0c:	61fa      	str	r2, [r7, #28]
 8001a0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a16:	f7fe fc43 	bl	80002a0 <__aeabi_uldivmod>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4613      	mov	r3, r2
 8001a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a22:	e053      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a24:	4b35      	ldr	r3, [pc, #212]	; (8001afc <HAL_RCC_GetSysClockFreq+0x180>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	099b      	lsrs	r3, r3, #6
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	617a      	str	r2, [r7, #20]
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a36:	f04f 0b00 	mov.w	fp, #0
 8001a3a:	4652      	mov	r2, sl
 8001a3c:	465b      	mov	r3, fp
 8001a3e:	f04f 0000 	mov.w	r0, #0
 8001a42:	f04f 0100 	mov.w	r1, #0
 8001a46:	0159      	lsls	r1, r3, #5
 8001a48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a4c:	0150      	lsls	r0, r2, #5
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	ebb2 080a 	subs.w	r8, r2, sl
 8001a56:	eb63 090b 	sbc.w	r9, r3, fp
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a6e:	ebb2 0408 	subs.w	r4, r2, r8
 8001a72:	eb63 0509 	sbc.w	r5, r3, r9
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	00eb      	lsls	r3, r5, #3
 8001a80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a84:	00e2      	lsls	r2, r4, #3
 8001a86:	4614      	mov	r4, r2
 8001a88:	461d      	mov	r5, r3
 8001a8a:	eb14 030a 	adds.w	r3, r4, sl
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	eb45 030b 	adc.w	r3, r5, fp
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	028b      	lsls	r3, r1, #10
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aac:	4621      	mov	r1, r4
 8001aae:	028a      	lsls	r2, r1, #10
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	60fa      	str	r2, [r7, #12]
 8001abc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ac0:	f7fe fbee 	bl	80002a0 <__aeabi_uldivmod>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4613      	mov	r3, r2
 8001aca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_RCC_GetSysClockFreq+0x180>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	0c1b      	lsrs	r3, r3, #16
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001adc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ae6:	e002      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x184>)
 8001aea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3740      	adds	r7, #64	; 0x40
 8001af4:	46bd      	mov	sp, r7
 8001af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	00f42400 	.word	0x00f42400
 8001b04:	017d7840 	.word	0x017d7840

08001b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000000 	.word	0x20000000

08001b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b24:	f7ff fff0 	bl	8001b08 <HAL_RCC_GetHCLKFreq>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	0a9b      	lsrs	r3, r3, #10
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	4903      	ldr	r1, [pc, #12]	; (8001b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b36:	5ccb      	ldrb	r3, [r1, r3]
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40023800 	.word	0x40023800
 8001b44:	08003ba0 	.word	0x08003ba0

08001b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b4c:	f7ff ffdc 	bl	8001b08 <HAL_RCC_GetHCLKFreq>
 8001b50:	4602      	mov	r2, r0
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	0b5b      	lsrs	r3, r3, #13
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	4903      	ldr	r1, [pc, #12]	; (8001b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b5e:	5ccb      	ldrb	r3, [r1, r3]
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	08003ba0 	.word	0x08003ba0

08001b70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10b      	bne.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d105      	bne.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d075      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ba4:	4b91      	ldr	r3, [pc, #580]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001baa:	f7ff f89b 	bl	8000ce4 <HAL_GetTick>
 8001bae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001bb2:	f7ff f897 	bl	8000ce4 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e189      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bc4:	4b8a      	ldr	r3, [pc, #552]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f0      	bne.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d009      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	019a      	lsls	r2, r3, #6
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	071b      	lsls	r3, r3, #28
 8001be8:	4981      	ldr	r1, [pc, #516]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01f      	beq.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001bfc:	4b7c      	ldr	r3, [pc, #496]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c02:	0f1b      	lsrs	r3, r3, #28
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	019a      	lsls	r2, r3, #6
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	061b      	lsls	r3, r3, #24
 8001c16:	431a      	orrs	r2, r3
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	071b      	lsls	r3, r3, #28
 8001c1c:	4974      	ldr	r1, [pc, #464]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001c24:	4b72      	ldr	r3, [pc, #456]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c2a:	f023 021f 	bic.w	r2, r3, #31
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	496e      	ldr	r1, [pc, #440]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00d      	beq.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	019a      	lsls	r2, r3, #6
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	061b      	lsls	r3, r3, #24
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	071b      	lsls	r3, r3, #28
 8001c5c:	4964      	ldr	r1, [pc, #400]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001c64:	4b61      	ldr	r3, [pc, #388]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c6a:	f7ff f83b 	bl	8000ce4 <HAL_GetTick>
 8001c6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c70:	e008      	b.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c72:	f7ff f837 	bl	8000ce4 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e129      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c84:	4b5a      	ldr	r3, [pc, #360]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d105      	bne.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d079      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001ca8:	4b52      	ldr	r3, [pc, #328]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cae:	f7ff f819 	bl	8000ce4 <HAL_GetTick>
 8001cb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001cb6:	f7ff f815 	bl	8000ce4 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e107      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001cc8:	4b49      	ldr	r3, [pc, #292]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cd4:	d0ef      	beq.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d020      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001ce2:	4b43      	ldr	r3, [pc, #268]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce8:	0f1b      	lsrs	r3, r3, #28
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	019a      	lsls	r2, r3, #6
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	061b      	lsls	r3, r3, #24
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	071b      	lsls	r3, r3, #28
 8001d02:	493b      	ldr	r1, [pc, #236]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001d0a:	4b39      	ldr	r3, [pc, #228]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d10:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	021b      	lsls	r3, r3, #8
 8001d1c:	4934      	ldr	r1, [pc, #208]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01e      	beq.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001d30:	4b2f      	ldr	r3, [pc, #188]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d36:	0e1b      	lsrs	r3, r3, #24
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	019a      	lsls	r2, r3, #6
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	061b      	lsls	r3, r3, #24
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	071b      	lsls	r3, r3, #28
 8001d50:	4927      	ldr	r1, [pc, #156]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001d58:	4b25      	ldr	r3, [pc, #148]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	4922      	ldr	r1, [pc, #136]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001d6e:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d74:	f7fe ffb6 	bl	8000ce4 <HAL_GetTick>
 8001d78:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001d7c:	f7fe ffb2 	bl	8000ce4 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e0a4      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d8e:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d9a:	d1ef      	bne.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0320 	and.w	r3, r3, #32
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 808b 	beq.w	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	4a0f      	ldr	r2, [pc, #60]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dd2:	f7fe ff87 	bl	8000ce4 <HAL_GetTick>
 8001dd6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001dd8:	e010      	b.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001dda:	f7fe ff83 	bl	8000ce4 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d909      	bls.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e075      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8001dec:	42470068 	.word	0x42470068
 8001df0:	40023800 	.word	0x40023800
 8001df4:	42470070 	.word	0x42470070
 8001df8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001dfc:	4b38      	ldr	r3, [pc, #224]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0e8      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e08:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e10:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d02f      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d028      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e26:	4b2f      	ldr	r3, [pc, #188]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e2e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e30:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e36:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001e3c:	4a29      	ldr	r2, [pc, #164]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e42:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d114      	bne.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001e4e:	f7fe ff49 	bl	8000ce4 <HAL_GetTick>
 8001e52:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e54:	e00a      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7fe ff45 	bl	8000ce4 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e035      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0ee      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e84:	d10d      	bne.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e92:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e9a:	4912      	ldr	r1, [pc, #72]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	608b      	str	r3, [r1, #8]
 8001ea0:	e005      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001ea8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001eac:	6093      	str	r3, [r2, #8]
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001eb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eba:	490a      	ldr	r1, [pc, #40]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d004      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8001ed4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	42470e40 	.word	0x42470e40
 8001eec:	424711e0 	.word	0x424711e0

08001ef0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e066      	b.n	8001fd4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	7f5b      	ldrb	r3, [r3, #29]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d105      	bne.n	8001f1c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe fcae 	bl	8000878 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	22ca      	movs	r2, #202	; 0xca
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2253      	movs	r2, #83	; 0x53
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 fa45 	bl	80023c2 <RTC_EnterInitMode>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d12c      	bne.n	8001f9c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f54:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6899      	ldr	r1, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	68d2      	ldr	r2, [r2, #12]
 8001f7c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6919      	ldr	r1, [r3, #16]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	041a      	lsls	r2, r3, #16
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 fa4c 	bl	8002430 <RTC_ExitInitMode>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d113      	bne.n	8001fca <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699a      	ldr	r2, [r3, #24]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	22ff      	movs	r2, #255	; 0xff
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	7f1b      	ldrb	r3, [r3, #28]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RTC_SetTime+0x1c>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e087      	b.n	8002108 <HAL_RTC_SetTime+0x12c>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2202      	movs	r2, #2
 8002002:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d126      	bne.n	8002058 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002014:	2b00      	cmp	r3, #0
 8002016:	d102      	bne.n	800201e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2200      	movs	r2, #0
 800201c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f000 fa29 	bl	800247a <RTC_ByteToBcd2>
 8002028:	4603      	mov	r3, r0
 800202a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	785b      	ldrb	r3, [r3, #1]
 8002030:	4618      	mov	r0, r3
 8002032:	f000 fa22 	bl	800247a <RTC_ByteToBcd2>
 8002036:	4603      	mov	r3, r0
 8002038:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800203a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	789b      	ldrb	r3, [r3, #2]
 8002040:	4618      	mov	r0, r3
 8002042:	f000 fa1a 	bl	800247a <RTC_ByteToBcd2>
 8002046:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002048:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	78db      	ldrb	r3, [r3, #3]
 8002050:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002052:	4313      	orrs	r3, r2
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	e018      	b.n	800208a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2200      	movs	r2, #0
 800206a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	785b      	ldrb	r3, [r3, #1]
 8002076:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002078:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800207e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	78db      	ldrb	r3, [r3, #3]
 8002084:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002086:	4313      	orrs	r3, r2
 8002088:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	22ca      	movs	r2, #202	; 0xca
 8002090:	625a      	str	r2, [r3, #36]	; 0x24
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2253      	movs	r2, #83	; 0x53
 8002098:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 f991 	bl	80023c2 <RTC_EnterInitMode>
 80020a0:	4603      	mov	r3, r0
 80020a2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80020a4:	7cfb      	ldrb	r3, [r7, #19]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d120      	bne.n	80020ec <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80020b4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80020b8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020c8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6899      	ldr	r1, [r3, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	431a      	orrs	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 f9a4 	bl	8002430 <RTC_ExitInitMode>
 80020e8:	4603      	mov	r3, r0
 80020ea:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80020ec:	7cfb      	ldrb	r3, [r7, #19]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d102      	bne.n	80020f8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2201      	movs	r2, #1
 80020f6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	22ff      	movs	r2, #255	; 0xff
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	771a      	strb	r2, [r3, #28]

  return status;
 8002106:	7cfb      	ldrb	r3, [r7, #19]
}
 8002108:	4618      	mov	r0, r3
 800210a:	371c      	adds	r7, #28
 800210c:	46bd      	mov	sp, r7
 800210e:	bd90      	pop	{r4, r7, pc}

08002110 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002142:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002146:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	0c1b      	lsrs	r3, r3, #16
 800214c:	b2db      	uxtb	r3, r3
 800214e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002152:	b2da      	uxtb	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	b2db      	uxtb	r3, r3
 800215e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002162:	b2da      	uxtb	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002170:	b2da      	uxtb	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	0d9b      	lsrs	r3, r3, #22
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	b2da      	uxtb	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d11a      	bne.n	80021c2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f000 f98f 	bl	80024b4 <RTC_Bcd2ToByte>
 8002196:	4603      	mov	r3, r0
 8002198:	461a      	mov	r2, r3
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	785b      	ldrb	r3, [r3, #1]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f986 	bl	80024b4 <RTC_Bcd2ToByte>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461a      	mov	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	789b      	ldrb	r3, [r3, #2]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 f97d 	bl	80024b4 <RTC_Bcd2ToByte>
 80021ba:	4603      	mov	r3, r0
 80021bc:	461a      	mov	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	7f1b      	ldrb	r3, [r3, #28]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_RTC_SetDate+0x1c>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e071      	b.n	80022cc <HAL_RTC_SetDate+0x100>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2201      	movs	r2, #1
 80021ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2202      	movs	r2, #2
 80021f2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10e      	bne.n	8002218 <HAL_RTC_SetDate+0x4c>
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	785b      	ldrb	r3, [r3, #1]
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	2b00      	cmp	r3, #0
 8002204:	d008      	beq.n	8002218 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	785b      	ldrb	r3, [r3, #1]
 800220a:	f023 0310 	bic.w	r3, r3, #16
 800220e:	b2db      	uxtb	r3, r3
 8002210:	330a      	adds	r3, #10
 8002212:	b2da      	uxtb	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d11c      	bne.n	8002258 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	78db      	ldrb	r3, [r3, #3]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f929 	bl	800247a <RTC_ByteToBcd2>
 8002228:	4603      	mov	r3, r0
 800222a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	785b      	ldrb	r3, [r3, #1]
 8002230:	4618      	mov	r0, r3
 8002232:	f000 f922 	bl	800247a <RTC_ByteToBcd2>
 8002236:	4603      	mov	r3, r0
 8002238:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800223a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	789b      	ldrb	r3, [r3, #2]
 8002240:	4618      	mov	r0, r3
 8002242:	f000 f91a 	bl	800247a <RTC_ByteToBcd2>
 8002246:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002248:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002252:	4313      	orrs	r3, r2
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	e00e      	b.n	8002276 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	78db      	ldrb	r3, [r3, #3]
 800225c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	785b      	ldrb	r3, [r3, #1]
 8002262:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002264:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800226a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002272:	4313      	orrs	r3, r2
 8002274:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	22ca      	movs	r2, #202	; 0xca
 800227c:	625a      	str	r2, [r3, #36]	; 0x24
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2253      	movs	r2, #83	; 0x53
 8002284:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f89b 	bl	80023c2 <RTC_EnterInitMode>
 800228c:	4603      	mov	r3, r0
 800228e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10c      	bne.n	80022b0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80022a4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f8c2 	bl	8002430 <RTC_ExitInitMode>
 80022ac:	4603      	mov	r3, r0
 80022ae:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80022b0:	7cfb      	ldrb	r3, [r7, #19]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d102      	bne.n	80022bc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	22ff      	movs	r2, #255	; 0xff
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	771a      	strb	r2, [r3, #28]

  return status;
 80022ca:	7cfb      	ldrb	r3, [r7, #19]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd90      	pop	{r4, r7, pc}

080022d4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80022f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	0c1b      	lsrs	r3, r3, #16
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	b2db      	uxtb	r3, r3
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	b2da      	uxtb	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002316:	b2da      	uxtb	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	0b5b      	lsrs	r3, r3, #13
 8002320:	b2db      	uxtb	r3, r3
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	b2da      	uxtb	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d11a      	bne.n	8002368 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	78db      	ldrb	r3, [r3, #3]
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f8bc 	bl	80024b4 <RTC_Bcd2ToByte>
 800233c:	4603      	mov	r3, r0
 800233e:	461a      	mov	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	785b      	ldrb	r3, [r3, #1]
 8002348:	4618      	mov	r0, r3
 800234a:	f000 f8b3 	bl	80024b4 <RTC_Bcd2ToByte>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	789b      	ldrb	r3, [r3, #2]
 800235a:	4618      	mov	r0, r3
 800235c:	f000 f8aa 	bl	80024b4 <RTC_Bcd2ToByte>
 8002360:	4603      	mov	r3, r0
 8002362:	461a      	mov	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800238c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800238e:	f7fe fca9 	bl	8000ce4 <HAL_GetTick>
 8002392:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002394:	e009      	b.n	80023aa <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002396:	f7fe fca5 	bl	8000ce4 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023a4:	d901      	bls.n	80023aa <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e007      	b.n	80023ba <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0320 	and.w	r3, r3, #32
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0ee      	beq.n	8002396 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d122      	bne.n	8002426 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023ee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023f0:	f7fe fc78 	bl	8000ce4 <HAL_GetTick>
 80023f4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80023f6:	e00c      	b.n	8002412 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80023f8:	f7fe fc74 	bl	8000ce4 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002406:	d904      	bls.n	8002412 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2204      	movs	r2, #4
 800240c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241c:	2b00      	cmp	r3, #0
 800241e:	d102      	bne.n	8002426 <RTC_EnterInitMode+0x64>
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d1e8      	bne.n	80023f8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002426:	7bfb      	ldrb	r3, [r7, #15]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800244a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10a      	bne.n	8002470 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ff89 	bl	8002372 <HAL_RTC_WaitForSynchro>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d004      	beq.n	8002470 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2204      	movs	r2, #4
 800246a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002470:	7bfb      	ldrb	r3, [r7, #15]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800247a:	b480      	push	{r7}
 800247c:	b085      	sub	sp, #20
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8002488:	e005      	b.n	8002496 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	3301      	adds	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	3b0a      	subs	r3, #10
 8002494:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	2b09      	cmp	r3, #9
 800249a:	d8f6      	bhi.n	800248a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	b2db      	uxtb	r3, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	0092      	lsls	r2, r2, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	4413      	add	r3, r2
 80024de:	b2db      	uxtb	r3, r3
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e041      	b.n	8002582 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7fe fac2 	bl	8000a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3304      	adds	r3, #4
 8002528:	4619      	mov	r1, r3
 800252a:	4610      	mov	r0, r2
 800252c:	f000 f8f4 	bl	8002718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_TIM_ConfigClockSource+0x1c>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e0b4      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x186>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2202      	movs	r2, #2
 80025b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025c4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025cc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025de:	d03e      	beq.n	800265e <HAL_TIM_ConfigClockSource+0xd4>
 80025e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025e4:	f200 8087 	bhi.w	80026f6 <HAL_TIM_ConfigClockSource+0x16c>
 80025e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ec:	f000 8086 	beq.w	80026fc <HAL_TIM_ConfigClockSource+0x172>
 80025f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f4:	d87f      	bhi.n	80026f6 <HAL_TIM_ConfigClockSource+0x16c>
 80025f6:	2b70      	cmp	r3, #112	; 0x70
 80025f8:	d01a      	beq.n	8002630 <HAL_TIM_ConfigClockSource+0xa6>
 80025fa:	2b70      	cmp	r3, #112	; 0x70
 80025fc:	d87b      	bhi.n	80026f6 <HAL_TIM_ConfigClockSource+0x16c>
 80025fe:	2b60      	cmp	r3, #96	; 0x60
 8002600:	d050      	beq.n	80026a4 <HAL_TIM_ConfigClockSource+0x11a>
 8002602:	2b60      	cmp	r3, #96	; 0x60
 8002604:	d877      	bhi.n	80026f6 <HAL_TIM_ConfigClockSource+0x16c>
 8002606:	2b50      	cmp	r3, #80	; 0x50
 8002608:	d03c      	beq.n	8002684 <HAL_TIM_ConfigClockSource+0xfa>
 800260a:	2b50      	cmp	r3, #80	; 0x50
 800260c:	d873      	bhi.n	80026f6 <HAL_TIM_ConfigClockSource+0x16c>
 800260e:	2b40      	cmp	r3, #64	; 0x40
 8002610:	d058      	beq.n	80026c4 <HAL_TIM_ConfigClockSource+0x13a>
 8002612:	2b40      	cmp	r3, #64	; 0x40
 8002614:	d86f      	bhi.n	80026f6 <HAL_TIM_ConfigClockSource+0x16c>
 8002616:	2b30      	cmp	r3, #48	; 0x30
 8002618:	d064      	beq.n	80026e4 <HAL_TIM_ConfigClockSource+0x15a>
 800261a:	2b30      	cmp	r3, #48	; 0x30
 800261c:	d86b      	bhi.n	80026f6 <HAL_TIM_ConfigClockSource+0x16c>
 800261e:	2b20      	cmp	r3, #32
 8002620:	d060      	beq.n	80026e4 <HAL_TIM_ConfigClockSource+0x15a>
 8002622:	2b20      	cmp	r3, #32
 8002624:	d867      	bhi.n	80026f6 <HAL_TIM_ConfigClockSource+0x16c>
 8002626:	2b00      	cmp	r3, #0
 8002628:	d05c      	beq.n	80026e4 <HAL_TIM_ConfigClockSource+0x15a>
 800262a:	2b10      	cmp	r3, #16
 800262c:	d05a      	beq.n	80026e4 <HAL_TIM_ConfigClockSource+0x15a>
 800262e:	e062      	b.n	80026f6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	6899      	ldr	r1, [r3, #8]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f000 f984 	bl	800294c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002652:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	609a      	str	r2, [r3, #8]
      break;
 800265c:	e04f      	b.n	80026fe <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6899      	ldr	r1, [r3, #8]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f000 f96d 	bl	800294c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002680:	609a      	str	r2, [r3, #8]
      break;
 8002682:	e03c      	b.n	80026fe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	6859      	ldr	r1, [r3, #4]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	461a      	mov	r2, r3
 8002692:	f000 f8e1 	bl	8002858 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2150      	movs	r1, #80	; 0x50
 800269c:	4618      	mov	r0, r3
 800269e:	f000 f93a 	bl	8002916 <TIM_ITRx_SetConfig>
      break;
 80026a2:	e02c      	b.n	80026fe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	461a      	mov	r2, r3
 80026b2:	f000 f900 	bl	80028b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2160      	movs	r1, #96	; 0x60
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 f92a 	bl	8002916 <TIM_ITRx_SetConfig>
      break;
 80026c2:	e01c      	b.n	80026fe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	461a      	mov	r2, r3
 80026d2:	f000 f8c1 	bl	8002858 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2140      	movs	r1, #64	; 0x40
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 f91a 	bl	8002916 <TIM_ITRx_SetConfig>
      break;
 80026e2:	e00c      	b.n	80026fe <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4619      	mov	r1, r3
 80026ee:	4610      	mov	r0, r2
 80026f0:	f000 f911 	bl	8002916 <TIM_ITRx_SetConfig>
      break;
 80026f4:	e003      	b.n	80026fe <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
      break;
 80026fa:	e000      	b.n	80026fe <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800270e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a40      	ldr	r2, [pc, #256]	; (800282c <TIM_Base_SetConfig+0x114>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d013      	beq.n	8002758 <TIM_Base_SetConfig+0x40>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002736:	d00f      	beq.n	8002758 <TIM_Base_SetConfig+0x40>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a3d      	ldr	r2, [pc, #244]	; (8002830 <TIM_Base_SetConfig+0x118>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d00b      	beq.n	8002758 <TIM_Base_SetConfig+0x40>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a3c      	ldr	r2, [pc, #240]	; (8002834 <TIM_Base_SetConfig+0x11c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d007      	beq.n	8002758 <TIM_Base_SetConfig+0x40>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a3b      	ldr	r2, [pc, #236]	; (8002838 <TIM_Base_SetConfig+0x120>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d003      	beq.n	8002758 <TIM_Base_SetConfig+0x40>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a3a      	ldr	r2, [pc, #232]	; (800283c <TIM_Base_SetConfig+0x124>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d108      	bne.n	800276a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a2f      	ldr	r2, [pc, #188]	; (800282c <TIM_Base_SetConfig+0x114>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d02b      	beq.n	80027ca <TIM_Base_SetConfig+0xb2>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002778:	d027      	beq.n	80027ca <TIM_Base_SetConfig+0xb2>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a2c      	ldr	r2, [pc, #176]	; (8002830 <TIM_Base_SetConfig+0x118>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d023      	beq.n	80027ca <TIM_Base_SetConfig+0xb2>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a2b      	ldr	r2, [pc, #172]	; (8002834 <TIM_Base_SetConfig+0x11c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d01f      	beq.n	80027ca <TIM_Base_SetConfig+0xb2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a2a      	ldr	r2, [pc, #168]	; (8002838 <TIM_Base_SetConfig+0x120>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d01b      	beq.n	80027ca <TIM_Base_SetConfig+0xb2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a29      	ldr	r2, [pc, #164]	; (800283c <TIM_Base_SetConfig+0x124>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d017      	beq.n	80027ca <TIM_Base_SetConfig+0xb2>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a28      	ldr	r2, [pc, #160]	; (8002840 <TIM_Base_SetConfig+0x128>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d013      	beq.n	80027ca <TIM_Base_SetConfig+0xb2>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a27      	ldr	r2, [pc, #156]	; (8002844 <TIM_Base_SetConfig+0x12c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d00f      	beq.n	80027ca <TIM_Base_SetConfig+0xb2>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a26      	ldr	r2, [pc, #152]	; (8002848 <TIM_Base_SetConfig+0x130>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00b      	beq.n	80027ca <TIM_Base_SetConfig+0xb2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a25      	ldr	r2, [pc, #148]	; (800284c <TIM_Base_SetConfig+0x134>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d007      	beq.n	80027ca <TIM_Base_SetConfig+0xb2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a24      	ldr	r2, [pc, #144]	; (8002850 <TIM_Base_SetConfig+0x138>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d003      	beq.n	80027ca <TIM_Base_SetConfig+0xb2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a23      	ldr	r2, [pc, #140]	; (8002854 <TIM_Base_SetConfig+0x13c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d108      	bne.n	80027dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a0a      	ldr	r2, [pc, #40]	; (800282c <TIM_Base_SetConfig+0x114>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d003      	beq.n	8002810 <TIM_Base_SetConfig+0xf8>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a0c      	ldr	r2, [pc, #48]	; (800283c <TIM_Base_SetConfig+0x124>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d103      	bne.n	8002818 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	615a      	str	r2, [r3, #20]
}
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40010000 	.word	0x40010000
 8002830:	40000400 	.word	0x40000400
 8002834:	40000800 	.word	0x40000800
 8002838:	40000c00 	.word	0x40000c00
 800283c:	40010400 	.word	0x40010400
 8002840:	40014000 	.word	0x40014000
 8002844:	40014400 	.word	0x40014400
 8002848:	40014800 	.word	0x40014800
 800284c:	40001800 	.word	0x40001800
 8002850:	40001c00 	.word	0x40001c00
 8002854:	40002000 	.word	0x40002000

08002858 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f023 0201 	bic.w	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f023 030a 	bic.w	r3, r3, #10
 8002894:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4313      	orrs	r3, r2
 800289c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	621a      	str	r2, [r3, #32]
}
 80028aa:	bf00      	nop
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b087      	sub	sp, #28
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	f023 0210 	bic.w	r2, r3, #16
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	031b      	lsls	r3, r3, #12
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	621a      	str	r2, [r3, #32]
}
 800290a:	bf00      	nop
 800290c:	371c      	adds	r7, #28
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002916:	b480      	push	{r7}
 8002918:	b085      	sub	sp, #20
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	f043 0307 	orr.w	r3, r3, #7
 8002938:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	609a      	str	r2, [r3, #8]
}
 8002940:	bf00      	nop
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002966:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	021a      	lsls	r2, r3, #8
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	431a      	orrs	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4313      	orrs	r3, r2
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	4313      	orrs	r3, r2
 8002978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	609a      	str	r2, [r3, #8]
}
 8002980:	bf00      	nop
 8002982:	371c      	adds	r7, #28
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e05a      	b.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a21      	ldr	r2, [pc, #132]	; (8002a68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d022      	beq.n	8002a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f0:	d01d      	beq.n	8002a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a1d      	ldr	r2, [pc, #116]	; (8002a6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d018      	beq.n	8002a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a1b      	ldr	r2, [pc, #108]	; (8002a70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d013      	beq.n	8002a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1a      	ldr	r2, [pc, #104]	; (8002a74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d00e      	beq.n	8002a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a18      	ldr	r2, [pc, #96]	; (8002a78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d009      	beq.n	8002a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a17      	ldr	r2, [pc, #92]	; (8002a7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d004      	beq.n	8002a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a15      	ldr	r2, [pc, #84]	; (8002a80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d10c      	bne.n	8002a48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40010000 	.word	0x40010000
 8002a6c:	40000400 	.word	0x40000400
 8002a70:	40000800 	.word	0x40000800
 8002a74:	40000c00 	.word	0x40000c00
 8002a78:	40010400 	.word	0x40010400
 8002a7c:	40014000 	.word	0x40014000
 8002a80:	40001800 	.word	0x40001800

08002a84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e03f      	b.n	8002b16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fe f842 	bl	8000b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2224      	movs	r2, #36	; 0x24
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f929 	bl	8002d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002adc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695a      	ldr	r2, [r3, #20]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002aec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002afc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b08a      	sub	sp, #40	; 0x28
 8002b22:	af02      	add	r7, sp, #8
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d17c      	bne.n	8002c38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <HAL_UART_Transmit+0x2c>
 8002b44:	88fb      	ldrh	r3, [r7, #6]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e075      	b.n	8002c3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_UART_Transmit+0x3e>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e06e      	b.n	8002c3a <HAL_UART_Transmit+0x11c>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2221      	movs	r2, #33	; 0x21
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b72:	f7fe f8b7 	bl	8000ce4 <HAL_GetTick>
 8002b76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	88fa      	ldrh	r2, [r7, #6]
 8002b7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	88fa      	ldrh	r2, [r7, #6]
 8002b82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8c:	d108      	bne.n	8002ba0 <HAL_UART_Transmit+0x82>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d104      	bne.n	8002ba0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	e003      	b.n	8002ba8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002bb0:	e02a      	b.n	8002c08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2180      	movs	r1, #128	; 0x80
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f840 	bl	8002c42 <UART_WaitOnFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e036      	b.n	8002c3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10b      	bne.n	8002bea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002be0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	3302      	adds	r3, #2
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	e007      	b.n	8002bfa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	781a      	ldrb	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1cf      	bne.n	8002bb2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2140      	movs	r1, #64	; 0x40
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f810 	bl	8002c42 <UART_WaitOnFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e006      	b.n	8002c3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e000      	b.n	8002c3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c38:	2302      	movs	r3, #2
  }
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3720      	adds	r7, #32
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b090      	sub	sp, #64	; 0x40
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	603b      	str	r3, [r7, #0]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c52:	e050      	b.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5a:	d04c      	beq.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d007      	beq.n	8002c72 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c62:	f7fe f83f 	bl	8000ce4 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d241      	bcs.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	330c      	adds	r3, #12
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7c:	e853 3f00 	ldrex	r3, [r3]
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	330c      	adds	r3, #12
 8002c90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c92:	637a      	str	r2, [r7, #52]	; 0x34
 8002c94:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c9a:	e841 2300 	strex	r3, r2, [r1]
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1e5      	bne.n	8002c72 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3314      	adds	r3, #20
 8002cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	e853 3f00 	ldrex	r3, [r3]
 8002cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3314      	adds	r3, #20
 8002cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cc6:	623a      	str	r2, [r7, #32]
 8002cc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cca:	69f9      	ldr	r1, [r7, #28]
 8002ccc:	6a3a      	ldr	r2, [r7, #32]
 8002cce:	e841 2300 	strex	r3, r2, [r1]
 8002cd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1e5      	bne.n	8002ca6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e00f      	b.n	8002d16 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	bf0c      	ite	eq
 8002d06:	2301      	moveq	r3, #1
 8002d08:	2300      	movne	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d09f      	beq.n	8002c54 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3740      	adds	r7, #64	; 0x40
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d24:	b0c0      	sub	sp, #256	; 0x100
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d3c:	68d9      	ldr	r1, [r3, #12]
 8002d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	ea40 0301 	orr.w	r3, r0, r1
 8002d48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d78:	f021 010c 	bic.w	r1, r1, #12
 8002d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d86:	430b      	orrs	r3, r1
 8002d88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9a:	6999      	ldr	r1, [r3, #24]
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	ea40 0301 	orr.w	r3, r0, r1
 8002da6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4b8f      	ldr	r3, [pc, #572]	; (8002fec <UART_SetConfig+0x2cc>)
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d005      	beq.n	8002dc0 <UART_SetConfig+0xa0>
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	4b8d      	ldr	r3, [pc, #564]	; (8002ff0 <UART_SetConfig+0x2d0>)
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d104      	bne.n	8002dca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dc0:	f7fe fec2 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 8002dc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002dc8:	e003      	b.n	8002dd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dca:	f7fe fea9 	bl	8001b20 <HAL_RCC_GetPCLK1Freq>
 8002dce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ddc:	f040 810c 	bne.w	8002ff8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002de4:	2200      	movs	r2, #0
 8002de6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002dea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002dee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002df2:	4622      	mov	r2, r4
 8002df4:	462b      	mov	r3, r5
 8002df6:	1891      	adds	r1, r2, r2
 8002df8:	65b9      	str	r1, [r7, #88]	; 0x58
 8002dfa:	415b      	adcs	r3, r3
 8002dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e02:	4621      	mov	r1, r4
 8002e04:	eb12 0801 	adds.w	r8, r2, r1
 8002e08:	4629      	mov	r1, r5
 8002e0a:	eb43 0901 	adc.w	r9, r3, r1
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e22:	4690      	mov	r8, r2
 8002e24:	4699      	mov	r9, r3
 8002e26:	4623      	mov	r3, r4
 8002e28:	eb18 0303 	adds.w	r3, r8, r3
 8002e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e30:	462b      	mov	r3, r5
 8002e32:	eb49 0303 	adc.w	r3, r9, r3
 8002e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e4e:	460b      	mov	r3, r1
 8002e50:	18db      	adds	r3, r3, r3
 8002e52:	653b      	str	r3, [r7, #80]	; 0x50
 8002e54:	4613      	mov	r3, r2
 8002e56:	eb42 0303 	adc.w	r3, r2, r3
 8002e5a:	657b      	str	r3, [r7, #84]	; 0x54
 8002e5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e64:	f7fd fa1c 	bl	80002a0 <__aeabi_uldivmod>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4b61      	ldr	r3, [pc, #388]	; (8002ff4 <UART_SetConfig+0x2d4>)
 8002e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	011c      	lsls	r4, r3, #4
 8002e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e88:	4642      	mov	r2, r8
 8002e8a:	464b      	mov	r3, r9
 8002e8c:	1891      	adds	r1, r2, r2
 8002e8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e90:	415b      	adcs	r3, r3
 8002e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e98:	4641      	mov	r1, r8
 8002e9a:	eb12 0a01 	adds.w	sl, r2, r1
 8002e9e:	4649      	mov	r1, r9
 8002ea0:	eb43 0b01 	adc.w	fp, r3, r1
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002eb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002eb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eb8:	4692      	mov	sl, r2
 8002eba:	469b      	mov	fp, r3
 8002ebc:	4643      	mov	r3, r8
 8002ebe:	eb1a 0303 	adds.w	r3, sl, r3
 8002ec2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ec6:	464b      	mov	r3, r9
 8002ec8:	eb4b 0303 	adc.w	r3, fp, r3
 8002ecc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002edc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ee0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	18db      	adds	r3, r3, r3
 8002ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8002eea:	4613      	mov	r3, r2
 8002eec:	eb42 0303 	adc.w	r3, r2, r3
 8002ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ef6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002efa:	f7fd f9d1 	bl	80002a0 <__aeabi_uldivmod>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4611      	mov	r1, r2
 8002f04:	4b3b      	ldr	r3, [pc, #236]	; (8002ff4 <UART_SetConfig+0x2d4>)
 8002f06:	fba3 2301 	umull	r2, r3, r3, r1
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	2264      	movs	r2, #100	; 0x64
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	1acb      	subs	r3, r1, r3
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f1a:	4b36      	ldr	r3, [pc, #216]	; (8002ff4 <UART_SetConfig+0x2d4>)
 8002f1c:	fba3 2302 	umull	r2, r3, r3, r2
 8002f20:	095b      	lsrs	r3, r3, #5
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f28:	441c      	add	r4, r3
 8002f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f3c:	4642      	mov	r2, r8
 8002f3e:	464b      	mov	r3, r9
 8002f40:	1891      	adds	r1, r2, r2
 8002f42:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f44:	415b      	adcs	r3, r3
 8002f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f4c:	4641      	mov	r1, r8
 8002f4e:	1851      	adds	r1, r2, r1
 8002f50:	6339      	str	r1, [r7, #48]	; 0x30
 8002f52:	4649      	mov	r1, r9
 8002f54:	414b      	adcs	r3, r1
 8002f56:	637b      	str	r3, [r7, #52]	; 0x34
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f64:	4659      	mov	r1, fp
 8002f66:	00cb      	lsls	r3, r1, #3
 8002f68:	4651      	mov	r1, sl
 8002f6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f6e:	4651      	mov	r1, sl
 8002f70:	00ca      	lsls	r2, r1, #3
 8002f72:	4610      	mov	r0, r2
 8002f74:	4619      	mov	r1, r3
 8002f76:	4603      	mov	r3, r0
 8002f78:	4642      	mov	r2, r8
 8002f7a:	189b      	adds	r3, r3, r2
 8002f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f80:	464b      	mov	r3, r9
 8002f82:	460a      	mov	r2, r1
 8002f84:	eb42 0303 	adc.w	r3, r2, r3
 8002f88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	18db      	adds	r3, r3, r3
 8002fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	eb42 0303 	adc.w	r3, r2, r3
 8002fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002fb6:	f7fd f973 	bl	80002a0 <__aeabi_uldivmod>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <UART_SetConfig+0x2d4>)
 8002fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	2164      	movs	r1, #100	; 0x64
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	3332      	adds	r3, #50	; 0x32
 8002fd2:	4a08      	ldr	r2, [pc, #32]	; (8002ff4 <UART_SetConfig+0x2d4>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	095b      	lsrs	r3, r3, #5
 8002fda:	f003 0207 	and.w	r2, r3, #7
 8002fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4422      	add	r2, r4
 8002fe6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fe8:	e105      	b.n	80031f6 <UART_SetConfig+0x4d6>
 8002fea:	bf00      	nop
 8002fec:	40011000 	.word	0x40011000
 8002ff0:	40011400 	.word	0x40011400
 8002ff4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003002:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003006:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800300a:	4642      	mov	r2, r8
 800300c:	464b      	mov	r3, r9
 800300e:	1891      	adds	r1, r2, r2
 8003010:	6239      	str	r1, [r7, #32]
 8003012:	415b      	adcs	r3, r3
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
 8003016:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800301a:	4641      	mov	r1, r8
 800301c:	1854      	adds	r4, r2, r1
 800301e:	4649      	mov	r1, r9
 8003020:	eb43 0501 	adc.w	r5, r3, r1
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	00eb      	lsls	r3, r5, #3
 800302e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003032:	00e2      	lsls	r2, r4, #3
 8003034:	4614      	mov	r4, r2
 8003036:	461d      	mov	r5, r3
 8003038:	4643      	mov	r3, r8
 800303a:	18e3      	adds	r3, r4, r3
 800303c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003040:	464b      	mov	r3, r9
 8003042:	eb45 0303 	adc.w	r3, r5, r3
 8003046:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800304a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003056:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003066:	4629      	mov	r1, r5
 8003068:	008b      	lsls	r3, r1, #2
 800306a:	4621      	mov	r1, r4
 800306c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003070:	4621      	mov	r1, r4
 8003072:	008a      	lsls	r2, r1, #2
 8003074:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003078:	f7fd f912 	bl	80002a0 <__aeabi_uldivmod>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4b60      	ldr	r3, [pc, #384]	; (8003204 <UART_SetConfig+0x4e4>)
 8003082:	fba3 2302 	umull	r2, r3, r3, r2
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	011c      	lsls	r4, r3, #4
 800308a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800308e:	2200      	movs	r2, #0
 8003090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003094:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003098:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800309c:	4642      	mov	r2, r8
 800309e:	464b      	mov	r3, r9
 80030a0:	1891      	adds	r1, r2, r2
 80030a2:	61b9      	str	r1, [r7, #24]
 80030a4:	415b      	adcs	r3, r3
 80030a6:	61fb      	str	r3, [r7, #28]
 80030a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030ac:	4641      	mov	r1, r8
 80030ae:	1851      	adds	r1, r2, r1
 80030b0:	6139      	str	r1, [r7, #16]
 80030b2:	4649      	mov	r1, r9
 80030b4:	414b      	adcs	r3, r1
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030c4:	4659      	mov	r1, fp
 80030c6:	00cb      	lsls	r3, r1, #3
 80030c8:	4651      	mov	r1, sl
 80030ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ce:	4651      	mov	r1, sl
 80030d0:	00ca      	lsls	r2, r1, #3
 80030d2:	4610      	mov	r0, r2
 80030d4:	4619      	mov	r1, r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	4642      	mov	r2, r8
 80030da:	189b      	adds	r3, r3, r2
 80030dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030e0:	464b      	mov	r3, r9
 80030e2:	460a      	mov	r2, r1
 80030e4:	eb42 0303 	adc.w	r3, r2, r3
 80030e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80030f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003104:	4649      	mov	r1, r9
 8003106:	008b      	lsls	r3, r1, #2
 8003108:	4641      	mov	r1, r8
 800310a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800310e:	4641      	mov	r1, r8
 8003110:	008a      	lsls	r2, r1, #2
 8003112:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003116:	f7fd f8c3 	bl	80002a0 <__aeabi_uldivmod>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4b39      	ldr	r3, [pc, #228]	; (8003204 <UART_SetConfig+0x4e4>)
 8003120:	fba3 1302 	umull	r1, r3, r3, r2
 8003124:	095b      	lsrs	r3, r3, #5
 8003126:	2164      	movs	r1, #100	; 0x64
 8003128:	fb01 f303 	mul.w	r3, r1, r3
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	3332      	adds	r3, #50	; 0x32
 8003132:	4a34      	ldr	r2, [pc, #208]	; (8003204 <UART_SetConfig+0x4e4>)
 8003134:	fba2 2303 	umull	r2, r3, r2, r3
 8003138:	095b      	lsrs	r3, r3, #5
 800313a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800313e:	441c      	add	r4, r3
 8003140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003144:	2200      	movs	r2, #0
 8003146:	673b      	str	r3, [r7, #112]	; 0x70
 8003148:	677a      	str	r2, [r7, #116]	; 0x74
 800314a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800314e:	4642      	mov	r2, r8
 8003150:	464b      	mov	r3, r9
 8003152:	1891      	adds	r1, r2, r2
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	415b      	adcs	r3, r3
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800315e:	4641      	mov	r1, r8
 8003160:	1851      	adds	r1, r2, r1
 8003162:	6039      	str	r1, [r7, #0]
 8003164:	4649      	mov	r1, r9
 8003166:	414b      	adcs	r3, r1
 8003168:	607b      	str	r3, [r7, #4]
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003176:	4659      	mov	r1, fp
 8003178:	00cb      	lsls	r3, r1, #3
 800317a:	4651      	mov	r1, sl
 800317c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003180:	4651      	mov	r1, sl
 8003182:	00ca      	lsls	r2, r1, #3
 8003184:	4610      	mov	r0, r2
 8003186:	4619      	mov	r1, r3
 8003188:	4603      	mov	r3, r0
 800318a:	4642      	mov	r2, r8
 800318c:	189b      	adds	r3, r3, r2
 800318e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003190:	464b      	mov	r3, r9
 8003192:	460a      	mov	r2, r1
 8003194:	eb42 0303 	adc.w	r3, r2, r3
 8003198:	66fb      	str	r3, [r7, #108]	; 0x6c
 800319a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	663b      	str	r3, [r7, #96]	; 0x60
 80031a4:	667a      	str	r2, [r7, #100]	; 0x64
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80031b2:	4649      	mov	r1, r9
 80031b4:	008b      	lsls	r3, r1, #2
 80031b6:	4641      	mov	r1, r8
 80031b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031bc:	4641      	mov	r1, r8
 80031be:	008a      	lsls	r2, r1, #2
 80031c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031c4:	f7fd f86c 	bl	80002a0 <__aeabi_uldivmod>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4b0d      	ldr	r3, [pc, #52]	; (8003204 <UART_SetConfig+0x4e4>)
 80031ce:	fba3 1302 	umull	r1, r3, r3, r2
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	2164      	movs	r1, #100	; 0x64
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	3332      	adds	r3, #50	; 0x32
 80031e0:	4a08      	ldr	r2, [pc, #32]	; (8003204 <UART_SetConfig+0x4e4>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	f003 020f 	and.w	r2, r3, #15
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4422      	add	r2, r4
 80031f4:	609a      	str	r2, [r3, #8]
}
 80031f6:	bf00      	nop
 80031f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80031fc:	46bd      	mov	sp, r7
 80031fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003202:	bf00      	nop
 8003204:	51eb851f 	.word	0x51eb851f

08003208 <__errno>:
 8003208:	4b01      	ldr	r3, [pc, #4]	; (8003210 <__errno+0x8>)
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	2000000c 	.word	0x2000000c

08003214 <__libc_init_array>:
 8003214:	b570      	push	{r4, r5, r6, lr}
 8003216:	4d0d      	ldr	r5, [pc, #52]	; (800324c <__libc_init_array+0x38>)
 8003218:	4c0d      	ldr	r4, [pc, #52]	; (8003250 <__libc_init_array+0x3c>)
 800321a:	1b64      	subs	r4, r4, r5
 800321c:	10a4      	asrs	r4, r4, #2
 800321e:	2600      	movs	r6, #0
 8003220:	42a6      	cmp	r6, r4
 8003222:	d109      	bne.n	8003238 <__libc_init_array+0x24>
 8003224:	4d0b      	ldr	r5, [pc, #44]	; (8003254 <__libc_init_array+0x40>)
 8003226:	4c0c      	ldr	r4, [pc, #48]	; (8003258 <__libc_init_array+0x44>)
 8003228:	f000 fc8e 	bl	8003b48 <_init>
 800322c:	1b64      	subs	r4, r4, r5
 800322e:	10a4      	asrs	r4, r4, #2
 8003230:	2600      	movs	r6, #0
 8003232:	42a6      	cmp	r6, r4
 8003234:	d105      	bne.n	8003242 <__libc_init_array+0x2e>
 8003236:	bd70      	pop	{r4, r5, r6, pc}
 8003238:	f855 3b04 	ldr.w	r3, [r5], #4
 800323c:	4798      	blx	r3
 800323e:	3601      	adds	r6, #1
 8003240:	e7ee      	b.n	8003220 <__libc_init_array+0xc>
 8003242:	f855 3b04 	ldr.w	r3, [r5], #4
 8003246:	4798      	blx	r3
 8003248:	3601      	adds	r6, #1
 800324a:	e7f2      	b.n	8003232 <__libc_init_array+0x1e>
 800324c:	08003be4 	.word	0x08003be4
 8003250:	08003be4 	.word	0x08003be4
 8003254:	08003be4 	.word	0x08003be4
 8003258:	08003be8 	.word	0x08003be8

0800325c <memset>:
 800325c:	4402      	add	r2, r0
 800325e:	4603      	mov	r3, r0
 8003260:	4293      	cmp	r3, r2
 8003262:	d100      	bne.n	8003266 <memset+0xa>
 8003264:	4770      	bx	lr
 8003266:	f803 1b01 	strb.w	r1, [r3], #1
 800326a:	e7f9      	b.n	8003260 <memset+0x4>

0800326c <siprintf>:
 800326c:	b40e      	push	{r1, r2, r3}
 800326e:	b500      	push	{lr}
 8003270:	b09c      	sub	sp, #112	; 0x70
 8003272:	ab1d      	add	r3, sp, #116	; 0x74
 8003274:	9002      	str	r0, [sp, #8]
 8003276:	9006      	str	r0, [sp, #24]
 8003278:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800327c:	4809      	ldr	r0, [pc, #36]	; (80032a4 <siprintf+0x38>)
 800327e:	9107      	str	r1, [sp, #28]
 8003280:	9104      	str	r1, [sp, #16]
 8003282:	4909      	ldr	r1, [pc, #36]	; (80032a8 <siprintf+0x3c>)
 8003284:	f853 2b04 	ldr.w	r2, [r3], #4
 8003288:	9105      	str	r1, [sp, #20]
 800328a:	6800      	ldr	r0, [r0, #0]
 800328c:	9301      	str	r3, [sp, #4]
 800328e:	a902      	add	r1, sp, #8
 8003290:	f000 f868 	bl	8003364 <_svfiprintf_r>
 8003294:	9b02      	ldr	r3, [sp, #8]
 8003296:	2200      	movs	r2, #0
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	b01c      	add	sp, #112	; 0x70
 800329c:	f85d eb04 	ldr.w	lr, [sp], #4
 80032a0:	b003      	add	sp, #12
 80032a2:	4770      	bx	lr
 80032a4:	2000000c 	.word	0x2000000c
 80032a8:	ffff0208 	.word	0xffff0208

080032ac <__ssputs_r>:
 80032ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032b0:	688e      	ldr	r6, [r1, #8]
 80032b2:	429e      	cmp	r6, r3
 80032b4:	4682      	mov	sl, r0
 80032b6:	460c      	mov	r4, r1
 80032b8:	4690      	mov	r8, r2
 80032ba:	461f      	mov	r7, r3
 80032bc:	d838      	bhi.n	8003330 <__ssputs_r+0x84>
 80032be:	898a      	ldrh	r2, [r1, #12]
 80032c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032c4:	d032      	beq.n	800332c <__ssputs_r+0x80>
 80032c6:	6825      	ldr	r5, [r4, #0]
 80032c8:	6909      	ldr	r1, [r1, #16]
 80032ca:	eba5 0901 	sub.w	r9, r5, r1
 80032ce:	6965      	ldr	r5, [r4, #20]
 80032d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032d8:	3301      	adds	r3, #1
 80032da:	444b      	add	r3, r9
 80032dc:	106d      	asrs	r5, r5, #1
 80032de:	429d      	cmp	r5, r3
 80032e0:	bf38      	it	cc
 80032e2:	461d      	movcc	r5, r3
 80032e4:	0553      	lsls	r3, r2, #21
 80032e6:	d531      	bpl.n	800334c <__ssputs_r+0xa0>
 80032e8:	4629      	mov	r1, r5
 80032ea:	f000 fb63 	bl	80039b4 <_malloc_r>
 80032ee:	4606      	mov	r6, r0
 80032f0:	b950      	cbnz	r0, 8003308 <__ssputs_r+0x5c>
 80032f2:	230c      	movs	r3, #12
 80032f4:	f8ca 3000 	str.w	r3, [sl]
 80032f8:	89a3      	ldrh	r3, [r4, #12]
 80032fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032fe:	81a3      	strh	r3, [r4, #12]
 8003300:	f04f 30ff 	mov.w	r0, #4294967295
 8003304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003308:	6921      	ldr	r1, [r4, #16]
 800330a:	464a      	mov	r2, r9
 800330c:	f000 fabe 	bl	800388c <memcpy>
 8003310:	89a3      	ldrh	r3, [r4, #12]
 8003312:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800331a:	81a3      	strh	r3, [r4, #12]
 800331c:	6126      	str	r6, [r4, #16]
 800331e:	6165      	str	r5, [r4, #20]
 8003320:	444e      	add	r6, r9
 8003322:	eba5 0509 	sub.w	r5, r5, r9
 8003326:	6026      	str	r6, [r4, #0]
 8003328:	60a5      	str	r5, [r4, #8]
 800332a:	463e      	mov	r6, r7
 800332c:	42be      	cmp	r6, r7
 800332e:	d900      	bls.n	8003332 <__ssputs_r+0x86>
 8003330:	463e      	mov	r6, r7
 8003332:	6820      	ldr	r0, [r4, #0]
 8003334:	4632      	mov	r2, r6
 8003336:	4641      	mov	r1, r8
 8003338:	f000 fab6 	bl	80038a8 <memmove>
 800333c:	68a3      	ldr	r3, [r4, #8]
 800333e:	1b9b      	subs	r3, r3, r6
 8003340:	60a3      	str	r3, [r4, #8]
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	4433      	add	r3, r6
 8003346:	6023      	str	r3, [r4, #0]
 8003348:	2000      	movs	r0, #0
 800334a:	e7db      	b.n	8003304 <__ssputs_r+0x58>
 800334c:	462a      	mov	r2, r5
 800334e:	f000 fba5 	bl	8003a9c <_realloc_r>
 8003352:	4606      	mov	r6, r0
 8003354:	2800      	cmp	r0, #0
 8003356:	d1e1      	bne.n	800331c <__ssputs_r+0x70>
 8003358:	6921      	ldr	r1, [r4, #16]
 800335a:	4650      	mov	r0, sl
 800335c:	f000 fabe 	bl	80038dc <_free_r>
 8003360:	e7c7      	b.n	80032f2 <__ssputs_r+0x46>
	...

08003364 <_svfiprintf_r>:
 8003364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003368:	4698      	mov	r8, r3
 800336a:	898b      	ldrh	r3, [r1, #12]
 800336c:	061b      	lsls	r3, r3, #24
 800336e:	b09d      	sub	sp, #116	; 0x74
 8003370:	4607      	mov	r7, r0
 8003372:	460d      	mov	r5, r1
 8003374:	4614      	mov	r4, r2
 8003376:	d50e      	bpl.n	8003396 <_svfiprintf_r+0x32>
 8003378:	690b      	ldr	r3, [r1, #16]
 800337a:	b963      	cbnz	r3, 8003396 <_svfiprintf_r+0x32>
 800337c:	2140      	movs	r1, #64	; 0x40
 800337e:	f000 fb19 	bl	80039b4 <_malloc_r>
 8003382:	6028      	str	r0, [r5, #0]
 8003384:	6128      	str	r0, [r5, #16]
 8003386:	b920      	cbnz	r0, 8003392 <_svfiprintf_r+0x2e>
 8003388:	230c      	movs	r3, #12
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	f04f 30ff 	mov.w	r0, #4294967295
 8003390:	e0d1      	b.n	8003536 <_svfiprintf_r+0x1d2>
 8003392:	2340      	movs	r3, #64	; 0x40
 8003394:	616b      	str	r3, [r5, #20]
 8003396:	2300      	movs	r3, #0
 8003398:	9309      	str	r3, [sp, #36]	; 0x24
 800339a:	2320      	movs	r3, #32
 800339c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80033a4:	2330      	movs	r3, #48	; 0x30
 80033a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003550 <_svfiprintf_r+0x1ec>
 80033aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033ae:	f04f 0901 	mov.w	r9, #1
 80033b2:	4623      	mov	r3, r4
 80033b4:	469a      	mov	sl, r3
 80033b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033ba:	b10a      	cbz	r2, 80033c0 <_svfiprintf_r+0x5c>
 80033bc:	2a25      	cmp	r2, #37	; 0x25
 80033be:	d1f9      	bne.n	80033b4 <_svfiprintf_r+0x50>
 80033c0:	ebba 0b04 	subs.w	fp, sl, r4
 80033c4:	d00b      	beq.n	80033de <_svfiprintf_r+0x7a>
 80033c6:	465b      	mov	r3, fp
 80033c8:	4622      	mov	r2, r4
 80033ca:	4629      	mov	r1, r5
 80033cc:	4638      	mov	r0, r7
 80033ce:	f7ff ff6d 	bl	80032ac <__ssputs_r>
 80033d2:	3001      	adds	r0, #1
 80033d4:	f000 80aa 	beq.w	800352c <_svfiprintf_r+0x1c8>
 80033d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033da:	445a      	add	r2, fp
 80033dc:	9209      	str	r2, [sp, #36]	; 0x24
 80033de:	f89a 3000 	ldrb.w	r3, [sl]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 80a2 	beq.w	800352c <_svfiprintf_r+0x1c8>
 80033e8:	2300      	movs	r3, #0
 80033ea:	f04f 32ff 	mov.w	r2, #4294967295
 80033ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033f2:	f10a 0a01 	add.w	sl, sl, #1
 80033f6:	9304      	str	r3, [sp, #16]
 80033f8:	9307      	str	r3, [sp, #28]
 80033fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033fe:	931a      	str	r3, [sp, #104]	; 0x68
 8003400:	4654      	mov	r4, sl
 8003402:	2205      	movs	r2, #5
 8003404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003408:	4851      	ldr	r0, [pc, #324]	; (8003550 <_svfiprintf_r+0x1ec>)
 800340a:	f7fc fef9 	bl	8000200 <memchr>
 800340e:	9a04      	ldr	r2, [sp, #16]
 8003410:	b9d8      	cbnz	r0, 800344a <_svfiprintf_r+0xe6>
 8003412:	06d0      	lsls	r0, r2, #27
 8003414:	bf44      	itt	mi
 8003416:	2320      	movmi	r3, #32
 8003418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800341c:	0711      	lsls	r1, r2, #28
 800341e:	bf44      	itt	mi
 8003420:	232b      	movmi	r3, #43	; 0x2b
 8003422:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003426:	f89a 3000 	ldrb.w	r3, [sl]
 800342a:	2b2a      	cmp	r3, #42	; 0x2a
 800342c:	d015      	beq.n	800345a <_svfiprintf_r+0xf6>
 800342e:	9a07      	ldr	r2, [sp, #28]
 8003430:	4654      	mov	r4, sl
 8003432:	2000      	movs	r0, #0
 8003434:	f04f 0c0a 	mov.w	ip, #10
 8003438:	4621      	mov	r1, r4
 800343a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800343e:	3b30      	subs	r3, #48	; 0x30
 8003440:	2b09      	cmp	r3, #9
 8003442:	d94e      	bls.n	80034e2 <_svfiprintf_r+0x17e>
 8003444:	b1b0      	cbz	r0, 8003474 <_svfiprintf_r+0x110>
 8003446:	9207      	str	r2, [sp, #28]
 8003448:	e014      	b.n	8003474 <_svfiprintf_r+0x110>
 800344a:	eba0 0308 	sub.w	r3, r0, r8
 800344e:	fa09 f303 	lsl.w	r3, r9, r3
 8003452:	4313      	orrs	r3, r2
 8003454:	9304      	str	r3, [sp, #16]
 8003456:	46a2      	mov	sl, r4
 8003458:	e7d2      	b.n	8003400 <_svfiprintf_r+0x9c>
 800345a:	9b03      	ldr	r3, [sp, #12]
 800345c:	1d19      	adds	r1, r3, #4
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	9103      	str	r1, [sp, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	bfbb      	ittet	lt
 8003466:	425b      	neglt	r3, r3
 8003468:	f042 0202 	orrlt.w	r2, r2, #2
 800346c:	9307      	strge	r3, [sp, #28]
 800346e:	9307      	strlt	r3, [sp, #28]
 8003470:	bfb8      	it	lt
 8003472:	9204      	strlt	r2, [sp, #16]
 8003474:	7823      	ldrb	r3, [r4, #0]
 8003476:	2b2e      	cmp	r3, #46	; 0x2e
 8003478:	d10c      	bne.n	8003494 <_svfiprintf_r+0x130>
 800347a:	7863      	ldrb	r3, [r4, #1]
 800347c:	2b2a      	cmp	r3, #42	; 0x2a
 800347e:	d135      	bne.n	80034ec <_svfiprintf_r+0x188>
 8003480:	9b03      	ldr	r3, [sp, #12]
 8003482:	1d1a      	adds	r2, r3, #4
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	9203      	str	r2, [sp, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	bfb8      	it	lt
 800348c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003490:	3402      	adds	r4, #2
 8003492:	9305      	str	r3, [sp, #20]
 8003494:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003560 <_svfiprintf_r+0x1fc>
 8003498:	7821      	ldrb	r1, [r4, #0]
 800349a:	2203      	movs	r2, #3
 800349c:	4650      	mov	r0, sl
 800349e:	f7fc feaf 	bl	8000200 <memchr>
 80034a2:	b140      	cbz	r0, 80034b6 <_svfiprintf_r+0x152>
 80034a4:	2340      	movs	r3, #64	; 0x40
 80034a6:	eba0 000a 	sub.w	r0, r0, sl
 80034aa:	fa03 f000 	lsl.w	r0, r3, r0
 80034ae:	9b04      	ldr	r3, [sp, #16]
 80034b0:	4303      	orrs	r3, r0
 80034b2:	3401      	adds	r4, #1
 80034b4:	9304      	str	r3, [sp, #16]
 80034b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034ba:	4826      	ldr	r0, [pc, #152]	; (8003554 <_svfiprintf_r+0x1f0>)
 80034bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034c0:	2206      	movs	r2, #6
 80034c2:	f7fc fe9d 	bl	8000200 <memchr>
 80034c6:	2800      	cmp	r0, #0
 80034c8:	d038      	beq.n	800353c <_svfiprintf_r+0x1d8>
 80034ca:	4b23      	ldr	r3, [pc, #140]	; (8003558 <_svfiprintf_r+0x1f4>)
 80034cc:	bb1b      	cbnz	r3, 8003516 <_svfiprintf_r+0x1b2>
 80034ce:	9b03      	ldr	r3, [sp, #12]
 80034d0:	3307      	adds	r3, #7
 80034d2:	f023 0307 	bic.w	r3, r3, #7
 80034d6:	3308      	adds	r3, #8
 80034d8:	9303      	str	r3, [sp, #12]
 80034da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034dc:	4433      	add	r3, r6
 80034de:	9309      	str	r3, [sp, #36]	; 0x24
 80034e0:	e767      	b.n	80033b2 <_svfiprintf_r+0x4e>
 80034e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80034e6:	460c      	mov	r4, r1
 80034e8:	2001      	movs	r0, #1
 80034ea:	e7a5      	b.n	8003438 <_svfiprintf_r+0xd4>
 80034ec:	2300      	movs	r3, #0
 80034ee:	3401      	adds	r4, #1
 80034f0:	9305      	str	r3, [sp, #20]
 80034f2:	4619      	mov	r1, r3
 80034f4:	f04f 0c0a 	mov.w	ip, #10
 80034f8:	4620      	mov	r0, r4
 80034fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034fe:	3a30      	subs	r2, #48	; 0x30
 8003500:	2a09      	cmp	r2, #9
 8003502:	d903      	bls.n	800350c <_svfiprintf_r+0x1a8>
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0c5      	beq.n	8003494 <_svfiprintf_r+0x130>
 8003508:	9105      	str	r1, [sp, #20]
 800350a:	e7c3      	b.n	8003494 <_svfiprintf_r+0x130>
 800350c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003510:	4604      	mov	r4, r0
 8003512:	2301      	movs	r3, #1
 8003514:	e7f0      	b.n	80034f8 <_svfiprintf_r+0x194>
 8003516:	ab03      	add	r3, sp, #12
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	462a      	mov	r2, r5
 800351c:	4b0f      	ldr	r3, [pc, #60]	; (800355c <_svfiprintf_r+0x1f8>)
 800351e:	a904      	add	r1, sp, #16
 8003520:	4638      	mov	r0, r7
 8003522:	f3af 8000 	nop.w
 8003526:	1c42      	adds	r2, r0, #1
 8003528:	4606      	mov	r6, r0
 800352a:	d1d6      	bne.n	80034da <_svfiprintf_r+0x176>
 800352c:	89ab      	ldrh	r3, [r5, #12]
 800352e:	065b      	lsls	r3, r3, #25
 8003530:	f53f af2c 	bmi.w	800338c <_svfiprintf_r+0x28>
 8003534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003536:	b01d      	add	sp, #116	; 0x74
 8003538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800353c:	ab03      	add	r3, sp, #12
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	462a      	mov	r2, r5
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <_svfiprintf_r+0x1f8>)
 8003544:	a904      	add	r1, sp, #16
 8003546:	4638      	mov	r0, r7
 8003548:	f000 f87a 	bl	8003640 <_printf_i>
 800354c:	e7eb      	b.n	8003526 <_svfiprintf_r+0x1c2>
 800354e:	bf00      	nop
 8003550:	08003ba8 	.word	0x08003ba8
 8003554:	08003bb2 	.word	0x08003bb2
 8003558:	00000000 	.word	0x00000000
 800355c:	080032ad 	.word	0x080032ad
 8003560:	08003bae 	.word	0x08003bae

08003564 <_printf_common>:
 8003564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003568:	4616      	mov	r6, r2
 800356a:	4699      	mov	r9, r3
 800356c:	688a      	ldr	r2, [r1, #8]
 800356e:	690b      	ldr	r3, [r1, #16]
 8003570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003574:	4293      	cmp	r3, r2
 8003576:	bfb8      	it	lt
 8003578:	4613      	movlt	r3, r2
 800357a:	6033      	str	r3, [r6, #0]
 800357c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003580:	4607      	mov	r7, r0
 8003582:	460c      	mov	r4, r1
 8003584:	b10a      	cbz	r2, 800358a <_printf_common+0x26>
 8003586:	3301      	adds	r3, #1
 8003588:	6033      	str	r3, [r6, #0]
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	0699      	lsls	r1, r3, #26
 800358e:	bf42      	ittt	mi
 8003590:	6833      	ldrmi	r3, [r6, #0]
 8003592:	3302      	addmi	r3, #2
 8003594:	6033      	strmi	r3, [r6, #0]
 8003596:	6825      	ldr	r5, [r4, #0]
 8003598:	f015 0506 	ands.w	r5, r5, #6
 800359c:	d106      	bne.n	80035ac <_printf_common+0x48>
 800359e:	f104 0a19 	add.w	sl, r4, #25
 80035a2:	68e3      	ldr	r3, [r4, #12]
 80035a4:	6832      	ldr	r2, [r6, #0]
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	42ab      	cmp	r3, r5
 80035aa:	dc26      	bgt.n	80035fa <_printf_common+0x96>
 80035ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035b0:	1e13      	subs	r3, r2, #0
 80035b2:	6822      	ldr	r2, [r4, #0]
 80035b4:	bf18      	it	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	0692      	lsls	r2, r2, #26
 80035ba:	d42b      	bmi.n	8003614 <_printf_common+0xb0>
 80035bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035c0:	4649      	mov	r1, r9
 80035c2:	4638      	mov	r0, r7
 80035c4:	47c0      	blx	r8
 80035c6:	3001      	adds	r0, #1
 80035c8:	d01e      	beq.n	8003608 <_printf_common+0xa4>
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	68e5      	ldr	r5, [r4, #12]
 80035ce:	6832      	ldr	r2, [r6, #0]
 80035d0:	f003 0306 	and.w	r3, r3, #6
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	bf08      	it	eq
 80035d8:	1aad      	subeq	r5, r5, r2
 80035da:	68a3      	ldr	r3, [r4, #8]
 80035dc:	6922      	ldr	r2, [r4, #16]
 80035de:	bf0c      	ite	eq
 80035e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035e4:	2500      	movne	r5, #0
 80035e6:	4293      	cmp	r3, r2
 80035e8:	bfc4      	itt	gt
 80035ea:	1a9b      	subgt	r3, r3, r2
 80035ec:	18ed      	addgt	r5, r5, r3
 80035ee:	2600      	movs	r6, #0
 80035f0:	341a      	adds	r4, #26
 80035f2:	42b5      	cmp	r5, r6
 80035f4:	d11a      	bne.n	800362c <_printf_common+0xc8>
 80035f6:	2000      	movs	r0, #0
 80035f8:	e008      	b.n	800360c <_printf_common+0xa8>
 80035fa:	2301      	movs	r3, #1
 80035fc:	4652      	mov	r2, sl
 80035fe:	4649      	mov	r1, r9
 8003600:	4638      	mov	r0, r7
 8003602:	47c0      	blx	r8
 8003604:	3001      	adds	r0, #1
 8003606:	d103      	bne.n	8003610 <_printf_common+0xac>
 8003608:	f04f 30ff 	mov.w	r0, #4294967295
 800360c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003610:	3501      	adds	r5, #1
 8003612:	e7c6      	b.n	80035a2 <_printf_common+0x3e>
 8003614:	18e1      	adds	r1, r4, r3
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	2030      	movs	r0, #48	; 0x30
 800361a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800361e:	4422      	add	r2, r4
 8003620:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003624:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003628:	3302      	adds	r3, #2
 800362a:	e7c7      	b.n	80035bc <_printf_common+0x58>
 800362c:	2301      	movs	r3, #1
 800362e:	4622      	mov	r2, r4
 8003630:	4649      	mov	r1, r9
 8003632:	4638      	mov	r0, r7
 8003634:	47c0      	blx	r8
 8003636:	3001      	adds	r0, #1
 8003638:	d0e6      	beq.n	8003608 <_printf_common+0xa4>
 800363a:	3601      	adds	r6, #1
 800363c:	e7d9      	b.n	80035f2 <_printf_common+0x8e>
	...

08003640 <_printf_i>:
 8003640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003644:	7e0f      	ldrb	r7, [r1, #24]
 8003646:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003648:	2f78      	cmp	r7, #120	; 0x78
 800364a:	4691      	mov	r9, r2
 800364c:	4680      	mov	r8, r0
 800364e:	460c      	mov	r4, r1
 8003650:	469a      	mov	sl, r3
 8003652:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003656:	d807      	bhi.n	8003668 <_printf_i+0x28>
 8003658:	2f62      	cmp	r7, #98	; 0x62
 800365a:	d80a      	bhi.n	8003672 <_printf_i+0x32>
 800365c:	2f00      	cmp	r7, #0
 800365e:	f000 80d8 	beq.w	8003812 <_printf_i+0x1d2>
 8003662:	2f58      	cmp	r7, #88	; 0x58
 8003664:	f000 80a3 	beq.w	80037ae <_printf_i+0x16e>
 8003668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800366c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003670:	e03a      	b.n	80036e8 <_printf_i+0xa8>
 8003672:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003676:	2b15      	cmp	r3, #21
 8003678:	d8f6      	bhi.n	8003668 <_printf_i+0x28>
 800367a:	a101      	add	r1, pc, #4	; (adr r1, 8003680 <_printf_i+0x40>)
 800367c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003680:	080036d9 	.word	0x080036d9
 8003684:	080036ed 	.word	0x080036ed
 8003688:	08003669 	.word	0x08003669
 800368c:	08003669 	.word	0x08003669
 8003690:	08003669 	.word	0x08003669
 8003694:	08003669 	.word	0x08003669
 8003698:	080036ed 	.word	0x080036ed
 800369c:	08003669 	.word	0x08003669
 80036a0:	08003669 	.word	0x08003669
 80036a4:	08003669 	.word	0x08003669
 80036a8:	08003669 	.word	0x08003669
 80036ac:	080037f9 	.word	0x080037f9
 80036b0:	0800371d 	.word	0x0800371d
 80036b4:	080037db 	.word	0x080037db
 80036b8:	08003669 	.word	0x08003669
 80036bc:	08003669 	.word	0x08003669
 80036c0:	0800381b 	.word	0x0800381b
 80036c4:	08003669 	.word	0x08003669
 80036c8:	0800371d 	.word	0x0800371d
 80036cc:	08003669 	.word	0x08003669
 80036d0:	08003669 	.word	0x08003669
 80036d4:	080037e3 	.word	0x080037e3
 80036d8:	682b      	ldr	r3, [r5, #0]
 80036da:	1d1a      	adds	r2, r3, #4
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	602a      	str	r2, [r5, #0]
 80036e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0a3      	b.n	8003834 <_printf_i+0x1f4>
 80036ec:	6820      	ldr	r0, [r4, #0]
 80036ee:	6829      	ldr	r1, [r5, #0]
 80036f0:	0606      	lsls	r6, r0, #24
 80036f2:	f101 0304 	add.w	r3, r1, #4
 80036f6:	d50a      	bpl.n	800370e <_printf_i+0xce>
 80036f8:	680e      	ldr	r6, [r1, #0]
 80036fa:	602b      	str	r3, [r5, #0]
 80036fc:	2e00      	cmp	r6, #0
 80036fe:	da03      	bge.n	8003708 <_printf_i+0xc8>
 8003700:	232d      	movs	r3, #45	; 0x2d
 8003702:	4276      	negs	r6, r6
 8003704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003708:	485e      	ldr	r0, [pc, #376]	; (8003884 <_printf_i+0x244>)
 800370a:	230a      	movs	r3, #10
 800370c:	e019      	b.n	8003742 <_printf_i+0x102>
 800370e:	680e      	ldr	r6, [r1, #0]
 8003710:	602b      	str	r3, [r5, #0]
 8003712:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003716:	bf18      	it	ne
 8003718:	b236      	sxthne	r6, r6
 800371a:	e7ef      	b.n	80036fc <_printf_i+0xbc>
 800371c:	682b      	ldr	r3, [r5, #0]
 800371e:	6820      	ldr	r0, [r4, #0]
 8003720:	1d19      	adds	r1, r3, #4
 8003722:	6029      	str	r1, [r5, #0]
 8003724:	0601      	lsls	r1, r0, #24
 8003726:	d501      	bpl.n	800372c <_printf_i+0xec>
 8003728:	681e      	ldr	r6, [r3, #0]
 800372a:	e002      	b.n	8003732 <_printf_i+0xf2>
 800372c:	0646      	lsls	r6, r0, #25
 800372e:	d5fb      	bpl.n	8003728 <_printf_i+0xe8>
 8003730:	881e      	ldrh	r6, [r3, #0]
 8003732:	4854      	ldr	r0, [pc, #336]	; (8003884 <_printf_i+0x244>)
 8003734:	2f6f      	cmp	r7, #111	; 0x6f
 8003736:	bf0c      	ite	eq
 8003738:	2308      	moveq	r3, #8
 800373a:	230a      	movne	r3, #10
 800373c:	2100      	movs	r1, #0
 800373e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003742:	6865      	ldr	r5, [r4, #4]
 8003744:	60a5      	str	r5, [r4, #8]
 8003746:	2d00      	cmp	r5, #0
 8003748:	bfa2      	ittt	ge
 800374a:	6821      	ldrge	r1, [r4, #0]
 800374c:	f021 0104 	bicge.w	r1, r1, #4
 8003750:	6021      	strge	r1, [r4, #0]
 8003752:	b90e      	cbnz	r6, 8003758 <_printf_i+0x118>
 8003754:	2d00      	cmp	r5, #0
 8003756:	d04d      	beq.n	80037f4 <_printf_i+0x1b4>
 8003758:	4615      	mov	r5, r2
 800375a:	fbb6 f1f3 	udiv	r1, r6, r3
 800375e:	fb03 6711 	mls	r7, r3, r1, r6
 8003762:	5dc7      	ldrb	r7, [r0, r7]
 8003764:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003768:	4637      	mov	r7, r6
 800376a:	42bb      	cmp	r3, r7
 800376c:	460e      	mov	r6, r1
 800376e:	d9f4      	bls.n	800375a <_printf_i+0x11a>
 8003770:	2b08      	cmp	r3, #8
 8003772:	d10b      	bne.n	800378c <_printf_i+0x14c>
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	07de      	lsls	r6, r3, #31
 8003778:	d508      	bpl.n	800378c <_printf_i+0x14c>
 800377a:	6923      	ldr	r3, [r4, #16]
 800377c:	6861      	ldr	r1, [r4, #4]
 800377e:	4299      	cmp	r1, r3
 8003780:	bfde      	ittt	le
 8003782:	2330      	movle	r3, #48	; 0x30
 8003784:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003788:	f105 35ff 	addle.w	r5, r5, #4294967295
 800378c:	1b52      	subs	r2, r2, r5
 800378e:	6122      	str	r2, [r4, #16]
 8003790:	f8cd a000 	str.w	sl, [sp]
 8003794:	464b      	mov	r3, r9
 8003796:	aa03      	add	r2, sp, #12
 8003798:	4621      	mov	r1, r4
 800379a:	4640      	mov	r0, r8
 800379c:	f7ff fee2 	bl	8003564 <_printf_common>
 80037a0:	3001      	adds	r0, #1
 80037a2:	d14c      	bne.n	800383e <_printf_i+0x1fe>
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295
 80037a8:	b004      	add	sp, #16
 80037aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ae:	4835      	ldr	r0, [pc, #212]	; (8003884 <_printf_i+0x244>)
 80037b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80037b4:	6829      	ldr	r1, [r5, #0]
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80037bc:	6029      	str	r1, [r5, #0]
 80037be:	061d      	lsls	r5, r3, #24
 80037c0:	d514      	bpl.n	80037ec <_printf_i+0x1ac>
 80037c2:	07df      	lsls	r7, r3, #31
 80037c4:	bf44      	itt	mi
 80037c6:	f043 0320 	orrmi.w	r3, r3, #32
 80037ca:	6023      	strmi	r3, [r4, #0]
 80037cc:	b91e      	cbnz	r6, 80037d6 <_printf_i+0x196>
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	f023 0320 	bic.w	r3, r3, #32
 80037d4:	6023      	str	r3, [r4, #0]
 80037d6:	2310      	movs	r3, #16
 80037d8:	e7b0      	b.n	800373c <_printf_i+0xfc>
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	f043 0320 	orr.w	r3, r3, #32
 80037e0:	6023      	str	r3, [r4, #0]
 80037e2:	2378      	movs	r3, #120	; 0x78
 80037e4:	4828      	ldr	r0, [pc, #160]	; (8003888 <_printf_i+0x248>)
 80037e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037ea:	e7e3      	b.n	80037b4 <_printf_i+0x174>
 80037ec:	0659      	lsls	r1, r3, #25
 80037ee:	bf48      	it	mi
 80037f0:	b2b6      	uxthmi	r6, r6
 80037f2:	e7e6      	b.n	80037c2 <_printf_i+0x182>
 80037f4:	4615      	mov	r5, r2
 80037f6:	e7bb      	b.n	8003770 <_printf_i+0x130>
 80037f8:	682b      	ldr	r3, [r5, #0]
 80037fa:	6826      	ldr	r6, [r4, #0]
 80037fc:	6961      	ldr	r1, [r4, #20]
 80037fe:	1d18      	adds	r0, r3, #4
 8003800:	6028      	str	r0, [r5, #0]
 8003802:	0635      	lsls	r5, r6, #24
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	d501      	bpl.n	800380c <_printf_i+0x1cc>
 8003808:	6019      	str	r1, [r3, #0]
 800380a:	e002      	b.n	8003812 <_printf_i+0x1d2>
 800380c:	0670      	lsls	r0, r6, #25
 800380e:	d5fb      	bpl.n	8003808 <_printf_i+0x1c8>
 8003810:	8019      	strh	r1, [r3, #0]
 8003812:	2300      	movs	r3, #0
 8003814:	6123      	str	r3, [r4, #16]
 8003816:	4615      	mov	r5, r2
 8003818:	e7ba      	b.n	8003790 <_printf_i+0x150>
 800381a:	682b      	ldr	r3, [r5, #0]
 800381c:	1d1a      	adds	r2, r3, #4
 800381e:	602a      	str	r2, [r5, #0]
 8003820:	681d      	ldr	r5, [r3, #0]
 8003822:	6862      	ldr	r2, [r4, #4]
 8003824:	2100      	movs	r1, #0
 8003826:	4628      	mov	r0, r5
 8003828:	f7fc fcea 	bl	8000200 <memchr>
 800382c:	b108      	cbz	r0, 8003832 <_printf_i+0x1f2>
 800382e:	1b40      	subs	r0, r0, r5
 8003830:	6060      	str	r0, [r4, #4]
 8003832:	6863      	ldr	r3, [r4, #4]
 8003834:	6123      	str	r3, [r4, #16]
 8003836:	2300      	movs	r3, #0
 8003838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800383c:	e7a8      	b.n	8003790 <_printf_i+0x150>
 800383e:	6923      	ldr	r3, [r4, #16]
 8003840:	462a      	mov	r2, r5
 8003842:	4649      	mov	r1, r9
 8003844:	4640      	mov	r0, r8
 8003846:	47d0      	blx	sl
 8003848:	3001      	adds	r0, #1
 800384a:	d0ab      	beq.n	80037a4 <_printf_i+0x164>
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	079b      	lsls	r3, r3, #30
 8003850:	d413      	bmi.n	800387a <_printf_i+0x23a>
 8003852:	68e0      	ldr	r0, [r4, #12]
 8003854:	9b03      	ldr	r3, [sp, #12]
 8003856:	4298      	cmp	r0, r3
 8003858:	bfb8      	it	lt
 800385a:	4618      	movlt	r0, r3
 800385c:	e7a4      	b.n	80037a8 <_printf_i+0x168>
 800385e:	2301      	movs	r3, #1
 8003860:	4632      	mov	r2, r6
 8003862:	4649      	mov	r1, r9
 8003864:	4640      	mov	r0, r8
 8003866:	47d0      	blx	sl
 8003868:	3001      	adds	r0, #1
 800386a:	d09b      	beq.n	80037a4 <_printf_i+0x164>
 800386c:	3501      	adds	r5, #1
 800386e:	68e3      	ldr	r3, [r4, #12]
 8003870:	9903      	ldr	r1, [sp, #12]
 8003872:	1a5b      	subs	r3, r3, r1
 8003874:	42ab      	cmp	r3, r5
 8003876:	dcf2      	bgt.n	800385e <_printf_i+0x21e>
 8003878:	e7eb      	b.n	8003852 <_printf_i+0x212>
 800387a:	2500      	movs	r5, #0
 800387c:	f104 0619 	add.w	r6, r4, #25
 8003880:	e7f5      	b.n	800386e <_printf_i+0x22e>
 8003882:	bf00      	nop
 8003884:	08003bb9 	.word	0x08003bb9
 8003888:	08003bca 	.word	0x08003bca

0800388c <memcpy>:
 800388c:	440a      	add	r2, r1
 800388e:	4291      	cmp	r1, r2
 8003890:	f100 33ff 	add.w	r3, r0, #4294967295
 8003894:	d100      	bne.n	8003898 <memcpy+0xc>
 8003896:	4770      	bx	lr
 8003898:	b510      	push	{r4, lr}
 800389a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800389e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038a2:	4291      	cmp	r1, r2
 80038a4:	d1f9      	bne.n	800389a <memcpy+0xe>
 80038a6:	bd10      	pop	{r4, pc}

080038a8 <memmove>:
 80038a8:	4288      	cmp	r0, r1
 80038aa:	b510      	push	{r4, lr}
 80038ac:	eb01 0402 	add.w	r4, r1, r2
 80038b0:	d902      	bls.n	80038b8 <memmove+0x10>
 80038b2:	4284      	cmp	r4, r0
 80038b4:	4623      	mov	r3, r4
 80038b6:	d807      	bhi.n	80038c8 <memmove+0x20>
 80038b8:	1e43      	subs	r3, r0, #1
 80038ba:	42a1      	cmp	r1, r4
 80038bc:	d008      	beq.n	80038d0 <memmove+0x28>
 80038be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038c6:	e7f8      	b.n	80038ba <memmove+0x12>
 80038c8:	4402      	add	r2, r0
 80038ca:	4601      	mov	r1, r0
 80038cc:	428a      	cmp	r2, r1
 80038ce:	d100      	bne.n	80038d2 <memmove+0x2a>
 80038d0:	bd10      	pop	{r4, pc}
 80038d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038da:	e7f7      	b.n	80038cc <memmove+0x24>

080038dc <_free_r>:
 80038dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038de:	2900      	cmp	r1, #0
 80038e0:	d044      	beq.n	800396c <_free_r+0x90>
 80038e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038e6:	9001      	str	r0, [sp, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f1a1 0404 	sub.w	r4, r1, #4
 80038ee:	bfb8      	it	lt
 80038f0:	18e4      	addlt	r4, r4, r3
 80038f2:	f000 f913 	bl	8003b1c <__malloc_lock>
 80038f6:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <_free_r+0x94>)
 80038f8:	9801      	ldr	r0, [sp, #4]
 80038fa:	6813      	ldr	r3, [r2, #0]
 80038fc:	b933      	cbnz	r3, 800390c <_free_r+0x30>
 80038fe:	6063      	str	r3, [r4, #4]
 8003900:	6014      	str	r4, [r2, #0]
 8003902:	b003      	add	sp, #12
 8003904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003908:	f000 b90e 	b.w	8003b28 <__malloc_unlock>
 800390c:	42a3      	cmp	r3, r4
 800390e:	d908      	bls.n	8003922 <_free_r+0x46>
 8003910:	6825      	ldr	r5, [r4, #0]
 8003912:	1961      	adds	r1, r4, r5
 8003914:	428b      	cmp	r3, r1
 8003916:	bf01      	itttt	eq
 8003918:	6819      	ldreq	r1, [r3, #0]
 800391a:	685b      	ldreq	r3, [r3, #4]
 800391c:	1949      	addeq	r1, r1, r5
 800391e:	6021      	streq	r1, [r4, #0]
 8003920:	e7ed      	b.n	80038fe <_free_r+0x22>
 8003922:	461a      	mov	r2, r3
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	b10b      	cbz	r3, 800392c <_free_r+0x50>
 8003928:	42a3      	cmp	r3, r4
 800392a:	d9fa      	bls.n	8003922 <_free_r+0x46>
 800392c:	6811      	ldr	r1, [r2, #0]
 800392e:	1855      	adds	r5, r2, r1
 8003930:	42a5      	cmp	r5, r4
 8003932:	d10b      	bne.n	800394c <_free_r+0x70>
 8003934:	6824      	ldr	r4, [r4, #0]
 8003936:	4421      	add	r1, r4
 8003938:	1854      	adds	r4, r2, r1
 800393a:	42a3      	cmp	r3, r4
 800393c:	6011      	str	r1, [r2, #0]
 800393e:	d1e0      	bne.n	8003902 <_free_r+0x26>
 8003940:	681c      	ldr	r4, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	6053      	str	r3, [r2, #4]
 8003946:	4421      	add	r1, r4
 8003948:	6011      	str	r1, [r2, #0]
 800394a:	e7da      	b.n	8003902 <_free_r+0x26>
 800394c:	d902      	bls.n	8003954 <_free_r+0x78>
 800394e:	230c      	movs	r3, #12
 8003950:	6003      	str	r3, [r0, #0]
 8003952:	e7d6      	b.n	8003902 <_free_r+0x26>
 8003954:	6825      	ldr	r5, [r4, #0]
 8003956:	1961      	adds	r1, r4, r5
 8003958:	428b      	cmp	r3, r1
 800395a:	bf04      	itt	eq
 800395c:	6819      	ldreq	r1, [r3, #0]
 800395e:	685b      	ldreq	r3, [r3, #4]
 8003960:	6063      	str	r3, [r4, #4]
 8003962:	bf04      	itt	eq
 8003964:	1949      	addeq	r1, r1, r5
 8003966:	6021      	streq	r1, [r4, #0]
 8003968:	6054      	str	r4, [r2, #4]
 800396a:	e7ca      	b.n	8003902 <_free_r+0x26>
 800396c:	b003      	add	sp, #12
 800396e:	bd30      	pop	{r4, r5, pc}
 8003970:	20000158 	.word	0x20000158

08003974 <sbrk_aligned>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	4e0e      	ldr	r6, [pc, #56]	; (80039b0 <sbrk_aligned+0x3c>)
 8003978:	460c      	mov	r4, r1
 800397a:	6831      	ldr	r1, [r6, #0]
 800397c:	4605      	mov	r5, r0
 800397e:	b911      	cbnz	r1, 8003986 <sbrk_aligned+0x12>
 8003980:	f000 f8bc 	bl	8003afc <_sbrk_r>
 8003984:	6030      	str	r0, [r6, #0]
 8003986:	4621      	mov	r1, r4
 8003988:	4628      	mov	r0, r5
 800398a:	f000 f8b7 	bl	8003afc <_sbrk_r>
 800398e:	1c43      	adds	r3, r0, #1
 8003990:	d00a      	beq.n	80039a8 <sbrk_aligned+0x34>
 8003992:	1cc4      	adds	r4, r0, #3
 8003994:	f024 0403 	bic.w	r4, r4, #3
 8003998:	42a0      	cmp	r0, r4
 800399a:	d007      	beq.n	80039ac <sbrk_aligned+0x38>
 800399c:	1a21      	subs	r1, r4, r0
 800399e:	4628      	mov	r0, r5
 80039a0:	f000 f8ac 	bl	8003afc <_sbrk_r>
 80039a4:	3001      	adds	r0, #1
 80039a6:	d101      	bne.n	80039ac <sbrk_aligned+0x38>
 80039a8:	f04f 34ff 	mov.w	r4, #4294967295
 80039ac:	4620      	mov	r0, r4
 80039ae:	bd70      	pop	{r4, r5, r6, pc}
 80039b0:	2000015c 	.word	0x2000015c

080039b4 <_malloc_r>:
 80039b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b8:	1ccd      	adds	r5, r1, #3
 80039ba:	f025 0503 	bic.w	r5, r5, #3
 80039be:	3508      	adds	r5, #8
 80039c0:	2d0c      	cmp	r5, #12
 80039c2:	bf38      	it	cc
 80039c4:	250c      	movcc	r5, #12
 80039c6:	2d00      	cmp	r5, #0
 80039c8:	4607      	mov	r7, r0
 80039ca:	db01      	blt.n	80039d0 <_malloc_r+0x1c>
 80039cc:	42a9      	cmp	r1, r5
 80039ce:	d905      	bls.n	80039dc <_malloc_r+0x28>
 80039d0:	230c      	movs	r3, #12
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	2600      	movs	r6, #0
 80039d6:	4630      	mov	r0, r6
 80039d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039dc:	4e2e      	ldr	r6, [pc, #184]	; (8003a98 <_malloc_r+0xe4>)
 80039de:	f000 f89d 	bl	8003b1c <__malloc_lock>
 80039e2:	6833      	ldr	r3, [r6, #0]
 80039e4:	461c      	mov	r4, r3
 80039e6:	bb34      	cbnz	r4, 8003a36 <_malloc_r+0x82>
 80039e8:	4629      	mov	r1, r5
 80039ea:	4638      	mov	r0, r7
 80039ec:	f7ff ffc2 	bl	8003974 <sbrk_aligned>
 80039f0:	1c43      	adds	r3, r0, #1
 80039f2:	4604      	mov	r4, r0
 80039f4:	d14d      	bne.n	8003a92 <_malloc_r+0xde>
 80039f6:	6834      	ldr	r4, [r6, #0]
 80039f8:	4626      	mov	r6, r4
 80039fa:	2e00      	cmp	r6, #0
 80039fc:	d140      	bne.n	8003a80 <_malloc_r+0xcc>
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	4631      	mov	r1, r6
 8003a02:	4638      	mov	r0, r7
 8003a04:	eb04 0803 	add.w	r8, r4, r3
 8003a08:	f000 f878 	bl	8003afc <_sbrk_r>
 8003a0c:	4580      	cmp	r8, r0
 8003a0e:	d13a      	bne.n	8003a86 <_malloc_r+0xd2>
 8003a10:	6821      	ldr	r1, [r4, #0]
 8003a12:	3503      	adds	r5, #3
 8003a14:	1a6d      	subs	r5, r5, r1
 8003a16:	f025 0503 	bic.w	r5, r5, #3
 8003a1a:	3508      	adds	r5, #8
 8003a1c:	2d0c      	cmp	r5, #12
 8003a1e:	bf38      	it	cc
 8003a20:	250c      	movcc	r5, #12
 8003a22:	4629      	mov	r1, r5
 8003a24:	4638      	mov	r0, r7
 8003a26:	f7ff ffa5 	bl	8003974 <sbrk_aligned>
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	d02b      	beq.n	8003a86 <_malloc_r+0xd2>
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	442b      	add	r3, r5
 8003a32:	6023      	str	r3, [r4, #0]
 8003a34:	e00e      	b.n	8003a54 <_malloc_r+0xa0>
 8003a36:	6822      	ldr	r2, [r4, #0]
 8003a38:	1b52      	subs	r2, r2, r5
 8003a3a:	d41e      	bmi.n	8003a7a <_malloc_r+0xc6>
 8003a3c:	2a0b      	cmp	r2, #11
 8003a3e:	d916      	bls.n	8003a6e <_malloc_r+0xba>
 8003a40:	1961      	adds	r1, r4, r5
 8003a42:	42a3      	cmp	r3, r4
 8003a44:	6025      	str	r5, [r4, #0]
 8003a46:	bf18      	it	ne
 8003a48:	6059      	strne	r1, [r3, #4]
 8003a4a:	6863      	ldr	r3, [r4, #4]
 8003a4c:	bf08      	it	eq
 8003a4e:	6031      	streq	r1, [r6, #0]
 8003a50:	5162      	str	r2, [r4, r5]
 8003a52:	604b      	str	r3, [r1, #4]
 8003a54:	4638      	mov	r0, r7
 8003a56:	f104 060b 	add.w	r6, r4, #11
 8003a5a:	f000 f865 	bl	8003b28 <__malloc_unlock>
 8003a5e:	f026 0607 	bic.w	r6, r6, #7
 8003a62:	1d23      	adds	r3, r4, #4
 8003a64:	1af2      	subs	r2, r6, r3
 8003a66:	d0b6      	beq.n	80039d6 <_malloc_r+0x22>
 8003a68:	1b9b      	subs	r3, r3, r6
 8003a6a:	50a3      	str	r3, [r4, r2]
 8003a6c:	e7b3      	b.n	80039d6 <_malloc_r+0x22>
 8003a6e:	6862      	ldr	r2, [r4, #4]
 8003a70:	42a3      	cmp	r3, r4
 8003a72:	bf0c      	ite	eq
 8003a74:	6032      	streq	r2, [r6, #0]
 8003a76:	605a      	strne	r2, [r3, #4]
 8003a78:	e7ec      	b.n	8003a54 <_malloc_r+0xa0>
 8003a7a:	4623      	mov	r3, r4
 8003a7c:	6864      	ldr	r4, [r4, #4]
 8003a7e:	e7b2      	b.n	80039e6 <_malloc_r+0x32>
 8003a80:	4634      	mov	r4, r6
 8003a82:	6876      	ldr	r6, [r6, #4]
 8003a84:	e7b9      	b.n	80039fa <_malloc_r+0x46>
 8003a86:	230c      	movs	r3, #12
 8003a88:	603b      	str	r3, [r7, #0]
 8003a8a:	4638      	mov	r0, r7
 8003a8c:	f000 f84c 	bl	8003b28 <__malloc_unlock>
 8003a90:	e7a1      	b.n	80039d6 <_malloc_r+0x22>
 8003a92:	6025      	str	r5, [r4, #0]
 8003a94:	e7de      	b.n	8003a54 <_malloc_r+0xa0>
 8003a96:	bf00      	nop
 8003a98:	20000158 	.word	0x20000158

08003a9c <_realloc_r>:
 8003a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa0:	4680      	mov	r8, r0
 8003aa2:	4614      	mov	r4, r2
 8003aa4:	460e      	mov	r6, r1
 8003aa6:	b921      	cbnz	r1, 8003ab2 <_realloc_r+0x16>
 8003aa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aac:	4611      	mov	r1, r2
 8003aae:	f7ff bf81 	b.w	80039b4 <_malloc_r>
 8003ab2:	b92a      	cbnz	r2, 8003ac0 <_realloc_r+0x24>
 8003ab4:	f7ff ff12 	bl	80038dc <_free_r>
 8003ab8:	4625      	mov	r5, r4
 8003aba:	4628      	mov	r0, r5
 8003abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ac0:	f000 f838 	bl	8003b34 <_malloc_usable_size_r>
 8003ac4:	4284      	cmp	r4, r0
 8003ac6:	4607      	mov	r7, r0
 8003ac8:	d802      	bhi.n	8003ad0 <_realloc_r+0x34>
 8003aca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ace:	d812      	bhi.n	8003af6 <_realloc_r+0x5a>
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	4640      	mov	r0, r8
 8003ad4:	f7ff ff6e 	bl	80039b4 <_malloc_r>
 8003ad8:	4605      	mov	r5, r0
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d0ed      	beq.n	8003aba <_realloc_r+0x1e>
 8003ade:	42bc      	cmp	r4, r7
 8003ae0:	4622      	mov	r2, r4
 8003ae2:	4631      	mov	r1, r6
 8003ae4:	bf28      	it	cs
 8003ae6:	463a      	movcs	r2, r7
 8003ae8:	f7ff fed0 	bl	800388c <memcpy>
 8003aec:	4631      	mov	r1, r6
 8003aee:	4640      	mov	r0, r8
 8003af0:	f7ff fef4 	bl	80038dc <_free_r>
 8003af4:	e7e1      	b.n	8003aba <_realloc_r+0x1e>
 8003af6:	4635      	mov	r5, r6
 8003af8:	e7df      	b.n	8003aba <_realloc_r+0x1e>
	...

08003afc <_sbrk_r>:
 8003afc:	b538      	push	{r3, r4, r5, lr}
 8003afe:	4d06      	ldr	r5, [pc, #24]	; (8003b18 <_sbrk_r+0x1c>)
 8003b00:	2300      	movs	r3, #0
 8003b02:	4604      	mov	r4, r0
 8003b04:	4608      	mov	r0, r1
 8003b06:	602b      	str	r3, [r5, #0]
 8003b08:	f7fc ff32 	bl	8000970 <_sbrk>
 8003b0c:	1c43      	adds	r3, r0, #1
 8003b0e:	d102      	bne.n	8003b16 <_sbrk_r+0x1a>
 8003b10:	682b      	ldr	r3, [r5, #0]
 8003b12:	b103      	cbz	r3, 8003b16 <_sbrk_r+0x1a>
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	bd38      	pop	{r3, r4, r5, pc}
 8003b18:	20000160 	.word	0x20000160

08003b1c <__malloc_lock>:
 8003b1c:	4801      	ldr	r0, [pc, #4]	; (8003b24 <__malloc_lock+0x8>)
 8003b1e:	f000 b811 	b.w	8003b44 <__retarget_lock_acquire_recursive>
 8003b22:	bf00      	nop
 8003b24:	20000164 	.word	0x20000164

08003b28 <__malloc_unlock>:
 8003b28:	4801      	ldr	r0, [pc, #4]	; (8003b30 <__malloc_unlock+0x8>)
 8003b2a:	f000 b80c 	b.w	8003b46 <__retarget_lock_release_recursive>
 8003b2e:	bf00      	nop
 8003b30:	20000164 	.word	0x20000164

08003b34 <_malloc_usable_size_r>:
 8003b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b38:	1f18      	subs	r0, r3, #4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	bfbc      	itt	lt
 8003b3e:	580b      	ldrlt	r3, [r1, r0]
 8003b40:	18c0      	addlt	r0, r0, r3
 8003b42:	4770      	bx	lr

08003b44 <__retarget_lock_acquire_recursive>:
 8003b44:	4770      	bx	lr

08003b46 <__retarget_lock_release_recursive>:
 8003b46:	4770      	bx	lr

08003b48 <_init>:
 8003b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4a:	bf00      	nop
 8003b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4e:	bc08      	pop	{r3}
 8003b50:	469e      	mov	lr, r3
 8003b52:	4770      	bx	lr

08003b54 <_fini>:
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	bf00      	nop
 8003b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5a:	bc08      	pop	{r3}
 8003b5c:	469e      	mov	lr, r3
 8003b5e:	4770      	bx	lr
