
2022_06_12_ic2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e0c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004fbc  08004fbc  00014fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005030  08005030  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005030  08005030  00015030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005038  08005038  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005038  08005038  00015038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800503c  0800503c  0001503c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000017c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ec  200001ec  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014fb5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ff3  00000000  00000000  00035055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  00038048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001108  00000000  00000000  000392a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000273ef  00000000  00000000  0003a3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e70  00000000  00000000  00061797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef417  00000000  00000000  0007a607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00169a1e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005030  00000000  00000000  00169a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004fa4 	.word	0x08004fa4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004fa4 	.word	0x08004fa4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	463b      	mov	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b6:	4b21      	ldr	r3, [pc, #132]	; (800063c <MX_ADC1_Init+0x98>)
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_ADC1_Init+0x98>)
 80005be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <MX_ADC1_Init+0x98>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_ADC1_Init+0x98>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_ADC1_Init+0x98>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_ADC1_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <MX_ADC1_Init+0x98>)
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <MX_ADC1_Init+0xa0>)
 80005e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_ADC1_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_ADC1_Init+0x98>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_ADC1_Init+0x98>)
 8000600:	2201      	movs	r2, #1
 8000602:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <MX_ADC1_Init+0x98>)
 8000606:	f000 fcd1 	bl	8000fac <HAL_ADC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000610:	f000 fa30 	bl	8000a74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000614:	2303      	movs	r3, #3
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_ADC1_Init+0x98>)
 8000626:	f000 fd05 	bl	8001034 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000630:	f000 fa20 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	2000008c 	.word	0x2000008c
 8000640:	40012000 	.word	0x40012000
 8000644:	0f000001 	.word	0x0f000001

08000648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <HAL_ADC_MspInit+0x7c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d127      	bne.n	80006ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6453      	str	r3, [r2, #68]	; 0x44
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006a2:	2308      	movs	r3, #8
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <HAL_ADC_MspInit+0x84>)
 80006b6:	f001 f88f 	bl	80017d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000

080006d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <MX_GPIO_Init+0x84>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a1d      	ldr	r2, [pc, #116]	; (8000754 <MX_GPIO_Init+0x84>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <MX_GPIO_Init+0x84>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_GPIO_Init+0x84>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a16      	ldr	r2, [pc, #88]	; (8000754 <MX_GPIO_Init+0x84>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_GPIO_Init+0x84>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MX_GPIO_Init+0x84>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <MX_GPIO_Init+0x84>)
 8000718:	f043 0308 	orr.w	r3, r3, #8
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <MX_GPIO_Init+0x84>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0308 	and.w	r3, r3, #8
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_GPIO_Init+0x84>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a08      	ldr	r2, [pc, #32]	; (8000754 <MX_GPIO_Init+0x84>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_GPIO_Init+0x84>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]

}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800

08000758 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_I2C1_Init+0x74>)
 800075e:	4a1c      	ldr	r2, [pc, #112]	; (80007d0 <MX_I2C1_Init+0x78>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_I2C1_Init+0x74>)
 8000764:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <MX_I2C1_Init+0x7c>)
 8000766:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_I2C1_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_I2C1_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_I2C1_Init+0x74>)
 8000776:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800077a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077c:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_I2C1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_I2C1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000788:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_I2C1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_I2C1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <MX_I2C1_Init+0x74>)
 8000796:	f001 f9cb 	bl	8001b30 <HAL_I2C_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007a0:	f000 f968 	bl	8000a74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007a4:	2100      	movs	r1, #0
 80007a6:	4809      	ldr	r0, [pc, #36]	; (80007cc <MX_I2C1_Init+0x74>)
 80007a8:	f001 fc8b 	bl	80020c2 <HAL_I2CEx_ConfigAnalogFilter>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007b2:	f000 f95f 	bl	8000a74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007b6:	2100      	movs	r1, #0
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_I2C1_Init+0x74>)
 80007ba:	f001 fcbe 	bl	800213a <HAL_I2CEx_ConfigDigitalFilter>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80007c4:	f000 f956 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200000d4 	.word	0x200000d4
 80007d0:	40005400 	.word	0x40005400
 80007d4:	000186a0 	.word	0x000186a0

080007d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a19      	ldr	r2, [pc, #100]	; (800085c <HAL_I2C_MspInit+0x84>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d12c      	bne.n	8000854 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <HAL_I2C_MspInit+0x88>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a17      	ldr	r2, [pc, #92]	; (8000860 <HAL_I2C_MspInit+0x88>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <HAL_I2C_MspInit+0x88>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000816:	f44f 7340 	mov.w	r3, #768	; 0x300
 800081a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800081c:	2312      	movs	r3, #18
 800081e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000820:	2301      	movs	r3, #1
 8000822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000828:	2304      	movs	r3, #4
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	480c      	ldr	r0, [pc, #48]	; (8000864 <HAL_I2C_MspInit+0x8c>)
 8000834:	f000 ffd0 	bl	80017d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_I2C_MspInit+0x88>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a07      	ldr	r2, [pc, #28]	; (8000860 <HAL_I2C_MspInit+0x88>)
 8000842:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_I2C_MspInit+0x88>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	; 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40005400 	.word	0x40005400
 8000860:	40023800 	.word	0x40023800
 8000864:	40020400 	.word	0x40020400

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086c:	f000 fb08 	bl	8000e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000870:	f000 f816 	bl	80008a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000874:	f7ff ff2c 	bl	80006d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000878:	f7ff ff6e 	bl	8000758 <MX_I2C1_Init>
  MX_RTC_Init();
 800087c:	f000 f900 	bl	8000a80 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000880:	f000 fa62 	bl	8000d48 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000884:	f7ff fe8e 	bl	80005a4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000888:	f000 f9ee 	bl	8000c68 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800088c:	f000 f87a 	bl	8000984 <MX_NVIC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	   I2C_Scan();
 8000890:	f000 f884 	bl	800099c <I2C_Scan>
	   HAL_Delay(5000);
 8000894:	f241 3088 	movw	r0, #5000	; 0x1388
 8000898:	f000 fb64 	bl	8000f64 <HAL_Delay>
	   I2C_Scan();
 800089c:	e7f8      	b.n	8000890 <main+0x28>
	...

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b094      	sub	sp, #80	; 0x50
 80008a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a6:	f107 0320 	add.w	r3, r7, #32
 80008aa:	2230      	movs	r2, #48	; 0x30
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f003 feee 	bl	8004690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	4b2c      	ldr	r3, [pc, #176]	; (800097c <SystemClock_Config+0xdc>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	4a2b      	ldr	r2, [pc, #172]	; (800097c <SystemClock_Config+0xdc>)
 80008ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d2:	6413      	str	r3, [r2, #64]	; 0x40
 80008d4:	4b29      	ldr	r3, [pc, #164]	; (800097c <SystemClock_Config+0xdc>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e0:	2300      	movs	r3, #0
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	4b26      	ldr	r3, [pc, #152]	; (8000980 <SystemClock_Config+0xe0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a25      	ldr	r2, [pc, #148]	; (8000980 <SystemClock_Config+0xe0>)
 80008ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	4b23      	ldr	r3, [pc, #140]	; (8000980 <SystemClock_Config+0xe0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80008fc:	2306      	movs	r3, #6
 80008fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000900:	2301      	movs	r3, #1
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000904:	2301      	movs	r3, #1
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000908:	2310      	movs	r3, #16
 800090a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090c:	2302      	movs	r3, #2
 800090e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000910:	2300      	movs	r3, #0
 8000912:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000914:	2308      	movs	r3, #8
 8000916:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000918:	23b4      	movs	r3, #180	; 0xb4
 800091a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800091c:	2302      	movs	r3, #2
 800091e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000920:	2304      	movs	r3, #4
 8000922:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000924:	f107 0320 	add.w	r3, r7, #32
 8000928:	4618      	mov	r0, r3
 800092a:	f001 fc95 	bl	8002258 <HAL_RCC_OscConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000934:	f000 f89e 	bl	8000a74 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000938:	f001 fc3e 	bl	80021b8 <HAL_PWREx_EnableOverDrive>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000942:	f000 f897 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000946:	230f      	movs	r3, #15
 8000948:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094a:	2302      	movs	r3, #2
 800094c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000952:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000956:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	2105      	movs	r1, #5
 8000964:	4618      	mov	r0, r3
 8000966:	f001 feef 	bl	8002748 <HAL_RCC_ClockConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000970:	f000 f880 	bl	8000a74 <Error_Handler>
  }
}
 8000974:	bf00      	nop
 8000976:	3750      	adds	r7, #80	; 0x50
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800
 8000980:	40007000 	.word	0x40007000

08000984 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	2027      	movs	r0, #39	; 0x27
 800098e:	f000 fe5a 	bl	8001646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000992:	2027      	movs	r0, #39	; 0x27
 8000994:	f000 fe73 	bl	800167e <HAL_NVIC_EnableIRQ>
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}

0800099c <I2C_Scan>:

/* USER CODE BEGIN 4 */
void I2C_Scan(){
 800099c:	b5b0      	push	{r4, r5, r7, lr}
 800099e:	b098      	sub	sp, #96	; 0x60
 80009a0:	af00      	add	r7, sp, #0
	  char info[] = "Scanning I2C bus...\r\n";
 80009a2:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <I2C_Scan+0xc0>)
 80009a4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80009a8:	461d      	mov	r5, r3
 80009aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009b2:	6020      	str	r0, [r4, #0]
 80009b4:	3404      	adds	r4, #4
 80009b6:	8021      	strh	r1, [r4, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80009b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fc17 	bl	80001f0 <strlen>
 80009c2:	4603      	mov	r3, r0
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295
 80009ce:	4824      	ldr	r0, [pc, #144]	; (8000a60 <I2C_Scan+0xc4>)
 80009d0:	f002 fe6d 	bl	80036ae <HAL_UART_Transmit>

	  HAL_StatusTypeDef res;
for(uint16_t i = 0; i < 128; i++) {
 80009d4:	2300      	movs	r3, #0
 80009d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80009da:	e02f      	b.n	8000a3c <I2C_Scan+0xa0>
    res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80009dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	b299      	uxth	r1, r3
 80009e4:	230a      	movs	r3, #10
 80009e6:	2201      	movs	r2, #1
 80009e8:	481e      	ldr	r0, [pc, #120]	; (8000a64 <I2C_Scan+0xc8>)
 80009ea:	f001 f9e5 	bl	8001db8 <HAL_I2C_IsDeviceReady>
 80009ee:	4603      	mov	r3, r0
 80009f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    if(res == HAL_OK) {
 80009f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d113      	bne.n	8000a24 <I2C_Scan+0x88>
        char msg[64];
        snprintf(msg, sizeof(msg), "0x%02X", i);
 80009fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000a00:	1d38      	adds	r0, r7, #4
 8000a02:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <I2C_Scan+0xcc>)
 8000a04:	2140      	movs	r1, #64	; 0x40
 8000a06:	f003 fe4b 	bl	80046a0 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fbef 	bl	80001f0 <strlen>
 8000a12:	4603      	mov	r3, r0
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	1d39      	adds	r1, r7, #4
 8000a18:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1c:	4810      	ldr	r0, [pc, #64]	; (8000a60 <I2C_Scan+0xc4>)
 8000a1e:	f002 fe46 	bl	80036ae <HAL_UART_Transmit>
 8000a22:	e006      	b.n	8000a32 <I2C_Scan+0x96>
    } else {
        HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
 8000a28:	2201      	movs	r2, #1
 8000a2a:	4910      	ldr	r1, [pc, #64]	; (8000a6c <I2C_Scan+0xd0>)
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <I2C_Scan+0xc4>)
 8000a2e:	f002 fe3e 	bl	80036ae <HAL_UART_Transmit>
for(uint16_t i = 0; i < 128; i++) {
 8000a32:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000a36:	3301      	adds	r3, #1
 8000a38:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000a3c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000a40:	2b7f      	cmp	r3, #127	; 0x7f
 8000a42:	d9cb      	bls.n	80009dc <I2C_Scan+0x40>
    }
}
HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000a44:	f04f 33ff 	mov.w	r3, #4294967295
 8000a48:	2202      	movs	r2, #2
 8000a4a:	4909      	ldr	r1, [pc, #36]	; (8000a70 <I2C_Scan+0xd4>)
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <I2C_Scan+0xc4>)
 8000a4e:	f002 fe2e 	bl	80036ae <HAL_UART_Transmit>
}
 8000a52:	bf00      	nop
 8000a54:	3760      	adds	r7, #96	; 0x60
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bdb0      	pop	{r4, r5, r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	08004fcc 	.word	0x08004fcc
 8000a60:	20000194 	.word	0x20000194
 8000a64:	200000d4 	.word	0x200000d4
 8000a68:	08004fbc 	.word	0x08004fbc
 8000a6c:	08004fc4 	.word	0x08004fc4
 8000a70:	08004fc8 	.word	0x08004fc8

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <Error_Handler+0x8>
	...

08000a80 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_RTC_Init+0x44>)
 8000a86:	4a10      	ldr	r2, [pc, #64]	; (8000ac8 <MX_RTC_Init+0x48>)
 8000a88:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_RTC_Init+0x44>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_RTC_Init+0x44>)
 8000a92:	227f      	movs	r2, #127	; 0x7f
 8000a94:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_RTC_Init+0x44>)
 8000a98:	22ff      	movs	r2, #255	; 0xff
 8000a9a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_RTC_Init+0x44>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_RTC_Init+0x44>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_RTC_Init+0x44>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_RTC_Init+0x44>)
 8000ab0:	f002 f9ea 	bl	8002e88 <HAL_RTC_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000aba:	f7ff ffdb 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000128 	.word	0x20000128
 8000ac8:	40002800 	.word	0x40002800

08000acc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08e      	sub	sp, #56	; 0x38
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad4:	f107 0308 	add.w	r3, r7, #8
 8000ad8:	2230      	movs	r2, #48	; 0x30
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f003 fdd7 	bl	8004690 <memset>
  if(rtcHandle->Instance==RTC)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a0c      	ldr	r2, [pc, #48]	; (8000b18 <HAL_RTC_MspInit+0x4c>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d111      	bne.n	8000b10 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000aec:	2320      	movs	r3, #32
 8000aee:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000af0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000af4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 f804 	bl	8002b08 <HAL_RCCEx_PeriphCLKConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000b06:	f7ff ffb5 	bl	8000a74 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b0a:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <HAL_RTC_MspInit+0x50>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b10:	bf00      	nop
 8000b12:	3738      	adds	r7, #56	; 0x38
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40002800 	.word	0x40002800
 8000b1c:	42470e3c 	.word	0x42470e3c

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	4a0f      	ldr	r2, [pc, #60]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b34:	6453      	str	r3, [r2, #68]	; 0x44
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler+0x4>

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f000 f9b2 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <USART3_IRQHandler+0x10>)
 8000bca:	f002 fe03 	bl	80037d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000194 	.word	0x20000194

08000bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be0:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <_sbrk+0x5c>)
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <_sbrk+0x60>)
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <_sbrk+0x64>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <_sbrk+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d207      	bcs.n	8000c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c08:	f003 fd18 	bl	800463c <__errno>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	220c      	movs	r2, #12
 8000c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	e009      	b.n	8000c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <_sbrk+0x64>)
 8000c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20030000 	.word	0x20030000
 8000c38:	00000400 	.word	0x00000400
 8000c3c:	20000148 	.word	0x20000148
 8000c40:	200001f0 	.word	0x200001f0

08000c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_TIM3_Init+0x94>)
 8000c86:	4a1e      	ldr	r2, [pc, #120]	; (8000d00 <MX_TIM3_Init+0x98>)
 8000c88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_TIM3_Init+0x94>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_TIM3_Init+0x94>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_TIM3_Init+0x94>)
 8000c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_TIM3_Init+0x94>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_TIM3_Init+0x94>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000caa:	4814      	ldr	r0, [pc, #80]	; (8000cfc <MX_TIM3_Init+0x94>)
 8000cac:	f002 f9e6 	bl	800307c <HAL_TIM_Base_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000cb6:	f7ff fedd 	bl	8000a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cc0:	f107 0308 	add.w	r3, r7, #8
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_TIM3_Init+0x94>)
 8000cc8:	f002 fa27 	bl	800311a <HAL_TIM_ConfigClockSource>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000cd2:	f7ff fecf 	bl	8000a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cde:	463b      	mov	r3, r7
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4806      	ldr	r0, [pc, #24]	; (8000cfc <MX_TIM3_Init+0x94>)
 8000ce4:	f002 fc1a 	bl	800351c <HAL_TIMEx_MasterConfigSynchronization>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000cee:	f7ff fec1 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2000014c 	.word	0x2000014c
 8000d00:	40000400 	.word	0x40000400

08000d04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <HAL_TIM_Base_MspInit+0x3c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d10d      	bne.n	8000d32 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_TIM_Base_MspInit+0x40>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	4a09      	ldr	r2, [pc, #36]	; (8000d44 <HAL_TIM_Base_MspInit+0x40>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <HAL_TIM_Base_MspInit+0x40>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000d32:	bf00      	nop
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	40000400 	.word	0x40000400
 8000d44:	40023800 	.word	0x40023800

08000d48 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <MX_USART3_UART_Init+0x50>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d80:	f002 fc48 	bl	8003614 <HAL_UART_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d8a:	f7ff fe73 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000194 	.word	0x20000194
 8000d98:	40004800 	.word	0x40004800

08000d9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <HAL_UART_MspInit+0x84>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d12c      	bne.n	8000e18 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000de4:	f043 0308 	orr.w	r3, r3, #8
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0308 	and.w	r3, r3, #8
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000df6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e08:	2307      	movs	r3, #7
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4619      	mov	r1, r3
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <HAL_UART_MspInit+0x8c>)
 8000e14:	f000 fce0 	bl	80017d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e18:	bf00      	nop
 8000e1a:	3728      	adds	r7, #40	; 0x28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40004800 	.word	0x40004800
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020c00 	.word	0x40020c00

08000e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e64 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e30:	480d      	ldr	r0, [pc, #52]	; (8000e68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e32:	490e      	ldr	r1, [pc, #56]	; (8000e6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e34:	4a0e      	ldr	r2, [pc, #56]	; (8000e70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e48:	4c0b      	ldr	r4, [pc, #44]	; (8000e78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e56:	f7ff fef5 	bl	8000c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f003 fbf5 	bl	8004648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fd03 	bl	8000868 <main>
  bx  lr    
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e64:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e70:	08005040 	.word	0x08005040
  ldr r2, =_sbss
 8000e74:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e78:	200001ec 	.word	0x200001ec

08000e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <HAL_Init+0x40>)
 8000e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <HAL_Init+0x40>)
 8000e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_Init+0x40>)
 8000ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 fbc1 	bl	8001630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eae:	200f      	movs	r0, #15
 8000eb0:	f000 f808 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f7ff fe34 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023c00 	.word	0x40023c00

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x54>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x58>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fbd9 	bl	800169a <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f000 fba1 	bl	8001646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <HAL_InitTick+0x5c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008
 8000f48:	200001d8 	.word	0x200001d8

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	200001d8 	.word	0x200001d8

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff ffee 	bl	8000f4c <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_Delay+0x44>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8a:	bf00      	nop
 8000f8c:	f7ff ffde 	bl	8000f4c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008

08000fac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e033      	b.n	800102a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d109      	bne.n	8000fde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff fb3c 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f003 0310 	and.w	r3, r3, #16
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d118      	bne.n	800101c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ff2:	f023 0302 	bic.w	r3, r3, #2
 8000ff6:	f043 0202 	orr.w	r2, r3, #2
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 f94a 	bl	8001298 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f023 0303 	bic.w	r3, r3, #3
 8001012:	f043 0201 	orr.w	r2, r3, #1
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	641a      	str	r2, [r3, #64]	; 0x40
 800101a:	e001      	b.n	8001020 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001028:	7bfb      	ldrb	r3, [r7, #15]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001048:	2b01      	cmp	r3, #1
 800104a:	d101      	bne.n	8001050 <HAL_ADC_ConfigChannel+0x1c>
 800104c:	2302      	movs	r3, #2
 800104e:	e113      	b.n	8001278 <HAL_ADC_ConfigChannel+0x244>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b09      	cmp	r3, #9
 800105e:	d925      	bls.n	80010ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68d9      	ldr	r1, [r3, #12]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	b29b      	uxth	r3, r3
 800106c:	461a      	mov	r2, r3
 800106e:	4613      	mov	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4413      	add	r3, r2
 8001074:	3b1e      	subs	r3, #30
 8001076:	2207      	movs	r2, #7
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43da      	mvns	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	400a      	ands	r2, r1
 8001084:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68d9      	ldr	r1, [r3, #12]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	b29b      	uxth	r3, r3
 8001096:	4618      	mov	r0, r3
 8001098:	4603      	mov	r3, r0
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4403      	add	r3, r0
 800109e:	3b1e      	subs	r3, #30
 80010a0:	409a      	lsls	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	430a      	orrs	r2, r1
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	e022      	b.n	80010f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6919      	ldr	r1, [r3, #16]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	461a      	mov	r2, r3
 80010ba:	4613      	mov	r3, r2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4413      	add	r3, r2
 80010c0:	2207      	movs	r2, #7
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	400a      	ands	r2, r1
 80010ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6919      	ldr	r1, [r3, #16]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	4603      	mov	r3, r0
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4403      	add	r3, r0
 80010e8:	409a      	lsls	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	430a      	orrs	r2, r1
 80010f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d824      	bhi.n	8001144 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	3b05      	subs	r3, #5
 800110c:	221f      	movs	r2, #31
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	400a      	ands	r2, r1
 800111a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	b29b      	uxth	r3, r3
 8001128:	4618      	mov	r0, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	3b05      	subs	r3, #5
 8001136:	fa00 f203 	lsl.w	r2, r0, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	430a      	orrs	r2, r1
 8001140:	635a      	str	r2, [r3, #52]	; 0x34
 8001142:	e04c      	b.n	80011de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b0c      	cmp	r3, #12
 800114a:	d824      	bhi.n	8001196 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	3b23      	subs	r3, #35	; 0x23
 800115e:	221f      	movs	r2, #31
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43da      	mvns	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	400a      	ands	r2, r1
 800116c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	b29b      	uxth	r3, r3
 800117a:	4618      	mov	r0, r3
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	3b23      	subs	r3, #35	; 0x23
 8001188:	fa00 f203 	lsl.w	r2, r0, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	430a      	orrs	r2, r1
 8001192:	631a      	str	r2, [r3, #48]	; 0x30
 8001194:	e023      	b.n	80011de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	3b41      	subs	r3, #65	; 0x41
 80011a8:	221f      	movs	r2, #31
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	400a      	ands	r2, r1
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	4618      	mov	r0, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	3b41      	subs	r3, #65	; 0x41
 80011d2:	fa00 f203 	lsl.w	r2, r0, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	430a      	orrs	r2, r1
 80011dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011de:	4b29      	ldr	r3, [pc, #164]	; (8001284 <HAL_ADC_ConfigChannel+0x250>)
 80011e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a28      	ldr	r2, [pc, #160]	; (8001288 <HAL_ADC_ConfigChannel+0x254>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d10f      	bne.n	800120c <HAL_ADC_ConfigChannel+0x1d8>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b12      	cmp	r3, #18
 80011f2:	d10b      	bne.n	800120c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <HAL_ADC_ConfigChannel+0x254>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d12b      	bne.n	800126e <HAL_ADC_ConfigChannel+0x23a>
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a1c      	ldr	r2, [pc, #112]	; (800128c <HAL_ADC_ConfigChannel+0x258>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d003      	beq.n	8001228 <HAL_ADC_ConfigChannel+0x1f4>
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b11      	cmp	r3, #17
 8001226:	d122      	bne.n	800126e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a11      	ldr	r2, [pc, #68]	; (800128c <HAL_ADC_ConfigChannel+0x258>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d111      	bne.n	800126e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <HAL_ADC_ConfigChannel+0x25c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a11      	ldr	r2, [pc, #68]	; (8001294 <HAL_ADC_ConfigChannel+0x260>)
 8001250:	fba2 2303 	umull	r2, r3, r2, r3
 8001254:	0c9a      	lsrs	r2, r3, #18
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001260:	e002      	b.n	8001268 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	3b01      	subs	r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f9      	bne.n	8001262 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	40012300 	.word	0x40012300
 8001288:	40012000 	.word	0x40012000
 800128c:	10000012 	.word	0x10000012
 8001290:	20000000 	.word	0x20000000
 8001294:	431bde83 	.word	0x431bde83

08001298 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012a0:	4b79      	ldr	r3, [pc, #484]	; (8001488 <ADC_Init+0x1f0>)
 80012a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	431a      	orrs	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6859      	ldr	r1, [r3, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	021a      	lsls	r2, r3, #8
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80012f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6859      	ldr	r1, [r3, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001312:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6899      	ldr	r1, [r3, #8]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132a:	4a58      	ldr	r2, [pc, #352]	; (800148c <ADC_Init+0x1f4>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d022      	beq.n	8001376 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800133e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6899      	ldr	r1, [r3, #8]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001360:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6899      	ldr	r1, [r3, #8]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	e00f      	b.n	8001396 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001384:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001394:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0202 	bic.w	r2, r2, #2
 80013a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6899      	ldr	r1, [r3, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7e1b      	ldrb	r3, [r3, #24]
 80013b0:	005a      	lsls	r2, r3, #1
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d01b      	beq.n	80013fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80013e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6859      	ldr	r1, [r3, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	3b01      	subs	r3, #1
 80013f0:	035a      	lsls	r2, r3, #13
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	e007      	b.n	800140c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800140a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800141a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	3b01      	subs	r3, #1
 8001428:	051a      	lsls	r2, r3, #20
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001440:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6899      	ldr	r1, [r3, #8]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800144e:	025a      	lsls	r2, r3, #9
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001466:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6899      	ldr	r1, [r3, #8]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	029a      	lsls	r2, r3, #10
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	609a      	str	r2, [r3, #8]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	40012300 	.word	0x40012300
 800148c:	0f000001 	.word	0x0f000001

08001490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <__NVIC_SetPriorityGrouping+0x44>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ac:	4013      	ands	r3, r2
 80014ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c2:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	60d3      	str	r3, [r2, #12]
}
 80014c8:	bf00      	nop
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <__NVIC_GetPriorityGrouping+0x18>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	f003 0307 	and.w	r3, r3, #7
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	2b00      	cmp	r3, #0
 8001504:	db0b      	blt.n	800151e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	f003 021f 	and.w	r2, r3, #31
 800150c:	4907      	ldr	r1, [pc, #28]	; (800152c <__NVIC_EnableIRQ+0x38>)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	095b      	lsrs	r3, r3, #5
 8001514:	2001      	movs	r0, #1
 8001516:	fa00 f202 	lsl.w	r2, r0, r2
 800151a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000e100 	.word	0xe000e100

08001530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	2b00      	cmp	r3, #0
 8001542:	db0a      	blt.n	800155a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	b2da      	uxtb	r2, r3
 8001548:	490c      	ldr	r1, [pc, #48]	; (800157c <__NVIC_SetPriority+0x4c>)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	0112      	lsls	r2, r2, #4
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	440b      	add	r3, r1
 8001554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001558:	e00a      	b.n	8001570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4908      	ldr	r1, [pc, #32]	; (8001580 <__NVIC_SetPriority+0x50>)
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	3b04      	subs	r3, #4
 8001568:	0112      	lsls	r2, r2, #4
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	440b      	add	r3, r1
 800156e:	761a      	strb	r2, [r3, #24]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000e100 	.word	0xe000e100
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f1c3 0307 	rsb	r3, r3, #7
 800159e:	2b04      	cmp	r3, #4
 80015a0:	bf28      	it	cs
 80015a2:	2304      	movcs	r3, #4
 80015a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3304      	adds	r3, #4
 80015aa:	2b06      	cmp	r3, #6
 80015ac:	d902      	bls.n	80015b4 <NVIC_EncodePriority+0x30>
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3b03      	subs	r3, #3
 80015b2:	e000      	b.n	80015b6 <NVIC_EncodePriority+0x32>
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43da      	mvns	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	401a      	ands	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015cc:	f04f 31ff 	mov.w	r1, #4294967295
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	43d9      	mvns	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	4313      	orrs	r3, r2
         );
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3724      	adds	r7, #36	; 0x24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015fc:	d301      	bcc.n	8001602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015fe:	2301      	movs	r3, #1
 8001600:	e00f      	b.n	8001622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <SysTick_Config+0x40>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160a:	210f      	movs	r1, #15
 800160c:	f04f 30ff 	mov.w	r0, #4294967295
 8001610:	f7ff ff8e 	bl	8001530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <SysTick_Config+0x40>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <SysTick_Config+0x40>)
 800161c:	2207      	movs	r2, #7
 800161e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	e000e010 	.word	0xe000e010

08001630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ff29 	bl	8001490 <__NVIC_SetPriorityGrouping>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001646:	b580      	push	{r7, lr}
 8001648:	b086      	sub	sp, #24
 800164a:	af00      	add	r7, sp, #0
 800164c:	4603      	mov	r3, r0
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001658:	f7ff ff3e 	bl	80014d8 <__NVIC_GetPriorityGrouping>
 800165c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	6978      	ldr	r0, [r7, #20]
 8001664:	f7ff ff8e 	bl	8001584 <NVIC_EncodePriority>
 8001668:	4602      	mov	r2, r0
 800166a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166e:	4611      	mov	r1, r2
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff5d 	bl	8001530 <__NVIC_SetPriority>
}
 8001676:	bf00      	nop
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff31 	bl	80014f4 <__NVIC_EnableIRQ>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff ffa2 	bl	80015ec <SysTick_Config>
 80016a8:	4603      	mov	r3, r0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016c0:	f7ff fc44 	bl	8000f4c <HAL_GetTick>
 80016c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d008      	beq.n	80016e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2280      	movs	r2, #128	; 0x80
 80016d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e052      	b.n	800178a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0216 	bic.w	r2, r2, #22
 80016f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001702:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	2b00      	cmp	r3, #0
 800170a:	d103      	bne.n	8001714 <HAL_DMA_Abort+0x62>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001710:	2b00      	cmp	r3, #0
 8001712:	d007      	beq.n	8001724 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0208 	bic.w	r2, r2, #8
 8001722:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001734:	e013      	b.n	800175e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001736:	f7ff fc09 	bl	8000f4c <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b05      	cmp	r3, #5
 8001742:	d90c      	bls.n	800175e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2220      	movs	r2, #32
 8001748:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2203      	movs	r2, #3
 800174e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e015      	b.n	800178a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1e4      	bne.n	8001736 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001770:	223f      	movs	r2, #63	; 0x3f
 8001772:	409a      	lsls	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d004      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e00c      	b.n	80017ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2205      	movs	r2, #5
 80017b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0201 	bic.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	e177      	b.n	8001ae4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f4:	2201      	movs	r2, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	429a      	cmp	r2, r3
 800180e:	f040 8166 	bne.w	8001ade <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b01      	cmp	r3, #1
 800181c:	d005      	beq.n	800182a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001826:	2b02      	cmp	r3, #2
 8001828:	d130      	bne.n	800188c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001860:	2201      	movs	r2, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 0201 	and.w	r2, r3, #1
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b03      	cmp	r3, #3
 8001896:	d017      	beq.n	80018c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2203      	movs	r2, #3
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d123      	bne.n	800191c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	08da      	lsrs	r2, r3, #3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3208      	adds	r2, #8
 80018dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	220f      	movs	r2, #15
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	691a      	ldr	r2, [r3, #16]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	08da      	lsrs	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3208      	adds	r2, #8
 8001916:	69b9      	ldr	r1, [r7, #24]
 8001918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0203 	and.w	r2, r3, #3
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80c0 	beq.w	8001ade <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b66      	ldr	r3, [pc, #408]	; (8001afc <HAL_GPIO_Init+0x324>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a65      	ldr	r2, [pc, #404]	; (8001afc <HAL_GPIO_Init+0x324>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b63      	ldr	r3, [pc, #396]	; (8001afc <HAL_GPIO_Init+0x324>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800197a:	4a61      	ldr	r2, [pc, #388]	; (8001b00 <HAL_GPIO_Init+0x328>)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	220f      	movs	r2, #15
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a58      	ldr	r2, [pc, #352]	; (8001b04 <HAL_GPIO_Init+0x32c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d037      	beq.n	8001a16 <HAL_GPIO_Init+0x23e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a57      	ldr	r2, [pc, #348]	; (8001b08 <HAL_GPIO_Init+0x330>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d031      	beq.n	8001a12 <HAL_GPIO_Init+0x23a>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a56      	ldr	r2, [pc, #344]	; (8001b0c <HAL_GPIO_Init+0x334>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d02b      	beq.n	8001a0e <HAL_GPIO_Init+0x236>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a55      	ldr	r2, [pc, #340]	; (8001b10 <HAL_GPIO_Init+0x338>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d025      	beq.n	8001a0a <HAL_GPIO_Init+0x232>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a54      	ldr	r2, [pc, #336]	; (8001b14 <HAL_GPIO_Init+0x33c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d01f      	beq.n	8001a06 <HAL_GPIO_Init+0x22e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a53      	ldr	r2, [pc, #332]	; (8001b18 <HAL_GPIO_Init+0x340>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d019      	beq.n	8001a02 <HAL_GPIO_Init+0x22a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a52      	ldr	r2, [pc, #328]	; (8001b1c <HAL_GPIO_Init+0x344>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d013      	beq.n	80019fe <HAL_GPIO_Init+0x226>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a51      	ldr	r2, [pc, #324]	; (8001b20 <HAL_GPIO_Init+0x348>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00d      	beq.n	80019fa <HAL_GPIO_Init+0x222>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a50      	ldr	r2, [pc, #320]	; (8001b24 <HAL_GPIO_Init+0x34c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d007      	beq.n	80019f6 <HAL_GPIO_Init+0x21e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a4f      	ldr	r2, [pc, #316]	; (8001b28 <HAL_GPIO_Init+0x350>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d101      	bne.n	80019f2 <HAL_GPIO_Init+0x21a>
 80019ee:	2309      	movs	r3, #9
 80019f0:	e012      	b.n	8001a18 <HAL_GPIO_Init+0x240>
 80019f2:	230a      	movs	r3, #10
 80019f4:	e010      	b.n	8001a18 <HAL_GPIO_Init+0x240>
 80019f6:	2308      	movs	r3, #8
 80019f8:	e00e      	b.n	8001a18 <HAL_GPIO_Init+0x240>
 80019fa:	2307      	movs	r3, #7
 80019fc:	e00c      	b.n	8001a18 <HAL_GPIO_Init+0x240>
 80019fe:	2306      	movs	r3, #6
 8001a00:	e00a      	b.n	8001a18 <HAL_GPIO_Init+0x240>
 8001a02:	2305      	movs	r3, #5
 8001a04:	e008      	b.n	8001a18 <HAL_GPIO_Init+0x240>
 8001a06:	2304      	movs	r3, #4
 8001a08:	e006      	b.n	8001a18 <HAL_GPIO_Init+0x240>
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e004      	b.n	8001a18 <HAL_GPIO_Init+0x240>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e002      	b.n	8001a18 <HAL_GPIO_Init+0x240>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <HAL_GPIO_Init+0x240>
 8001a16:	2300      	movs	r3, #0
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	f002 0203 	and.w	r2, r2, #3
 8001a1e:	0092      	lsls	r2, r2, #2
 8001a20:	4093      	lsls	r3, r2
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a28:	4935      	ldr	r1, [pc, #212]	; (8001b00 <HAL_GPIO_Init+0x328>)
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	089b      	lsrs	r3, r3, #2
 8001a2e:	3302      	adds	r3, #2
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a36:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <HAL_GPIO_Init+0x354>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a5a:	4a34      	ldr	r2, [pc, #208]	; (8001b2c <HAL_GPIO_Init+0x354>)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a60:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <HAL_GPIO_Init+0x354>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a84:	4a29      	ldr	r2, [pc, #164]	; (8001b2c <HAL_GPIO_Init+0x354>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a8a:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <HAL_GPIO_Init+0x354>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aae:	4a1f      	ldr	r2, [pc, #124]	; (8001b2c <HAL_GPIO_Init+0x354>)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <HAL_GPIO_Init+0x354>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad8:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <HAL_GPIO_Init+0x354>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	61fb      	str	r3, [r7, #28]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	2b0f      	cmp	r3, #15
 8001ae8:	f67f ae84 	bls.w	80017f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3724      	adds	r7, #36	; 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40013800 	.word	0x40013800
 8001b04:	40020000 	.word	0x40020000
 8001b08:	40020400 	.word	0x40020400
 8001b0c:	40020800 	.word	0x40020800
 8001b10:	40020c00 	.word	0x40020c00
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40021400 	.word	0x40021400
 8001b1c:	40021800 	.word	0x40021800
 8001b20:	40021c00 	.word	0x40021c00
 8001b24:	40022000 	.word	0x40022000
 8001b28:	40022400 	.word	0x40022400
 8001b2c:	40013c00 	.word	0x40013c00

08001b30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e12b      	b.n	8001d9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7fe fe3e 	bl	80007d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2224      	movs	r2, #36	; 0x24
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0201 	bic.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b94:	f000 ff90 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 8001b98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4a81      	ldr	r2, [pc, #516]	; (8001da4 <HAL_I2C_Init+0x274>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d807      	bhi.n	8001bb4 <HAL_I2C_Init+0x84>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4a80      	ldr	r2, [pc, #512]	; (8001da8 <HAL_I2C_Init+0x278>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	bf94      	ite	ls
 8001bac:	2301      	movls	r3, #1
 8001bae:	2300      	movhi	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	e006      	b.n	8001bc2 <HAL_I2C_Init+0x92>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4a7d      	ldr	r2, [pc, #500]	; (8001dac <HAL_I2C_Init+0x27c>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	bf94      	ite	ls
 8001bbc:	2301      	movls	r3, #1
 8001bbe:	2300      	movhi	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e0e7      	b.n	8001d9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4a78      	ldr	r2, [pc, #480]	; (8001db0 <HAL_I2C_Init+0x280>)
 8001bce:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd2:	0c9b      	lsrs	r3, r3, #18
 8001bd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	4a6a      	ldr	r2, [pc, #424]	; (8001da4 <HAL_I2C_Init+0x274>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d802      	bhi.n	8001c04 <HAL_I2C_Init+0xd4>
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	3301      	adds	r3, #1
 8001c02:	e009      	b.n	8001c18 <HAL_I2C_Init+0xe8>
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c0a:	fb02 f303 	mul.w	r3, r2, r3
 8001c0e:	4a69      	ldr	r2, [pc, #420]	; (8001db4 <HAL_I2C_Init+0x284>)
 8001c10:	fba2 2303 	umull	r2, r3, r2, r3
 8001c14:	099b      	lsrs	r3, r3, #6
 8001c16:	3301      	adds	r3, #1
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	430b      	orrs	r3, r1
 8001c1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	495c      	ldr	r1, [pc, #368]	; (8001da4 <HAL_I2C_Init+0x274>)
 8001c34:	428b      	cmp	r3, r1
 8001c36:	d819      	bhi.n	8001c6c <HAL_I2C_Init+0x13c>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1e59      	subs	r1, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c46:	1c59      	adds	r1, r3, #1
 8001c48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c4c:	400b      	ands	r3, r1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00a      	beq.n	8001c68 <HAL_I2C_Init+0x138>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1e59      	subs	r1, r3, #1
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c60:	3301      	adds	r3, #1
 8001c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c66:	e051      	b.n	8001d0c <HAL_I2C_Init+0x1dc>
 8001c68:	2304      	movs	r3, #4
 8001c6a:	e04f      	b.n	8001d0c <HAL_I2C_Init+0x1dc>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d111      	bne.n	8001c98 <HAL_I2C_Init+0x168>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	1e58      	subs	r0, r3, #1
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6859      	ldr	r1, [r3, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	440b      	add	r3, r1
 8001c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c86:	3301      	adds	r3, #1
 8001c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf0c      	ite	eq
 8001c90:	2301      	moveq	r3, #1
 8001c92:	2300      	movne	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	e012      	b.n	8001cbe <HAL_I2C_Init+0x18e>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1e58      	subs	r0, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6859      	ldr	r1, [r3, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	0099      	lsls	r1, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf0c      	ite	eq
 8001cb8:	2301      	moveq	r3, #1
 8001cba:	2300      	movne	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_I2C_Init+0x196>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e022      	b.n	8001d0c <HAL_I2C_Init+0x1dc>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10e      	bne.n	8001cec <HAL_I2C_Init+0x1bc>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	1e58      	subs	r0, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6859      	ldr	r1, [r3, #4]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	440b      	add	r3, r1
 8001cdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cea:	e00f      	b.n	8001d0c <HAL_I2C_Init+0x1dc>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1e58      	subs	r0, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	0099      	lsls	r1, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d02:	3301      	adds	r3, #1
 8001d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	6809      	ldr	r1, [r1, #0]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69da      	ldr	r2, [r3, #28]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6911      	ldr	r1, [r2, #16]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68d2      	ldr	r2, [r2, #12]
 8001d46:	4311      	orrs	r1, r2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2220      	movs	r2, #32
 8001d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	000186a0 	.word	0x000186a0
 8001da8:	001e847f 	.word	0x001e847f
 8001dac:	003d08ff 	.word	0x003d08ff
 8001db0:	431bde83 	.word	0x431bde83
 8001db4:	10624dd3 	.word	0x10624dd3

08001db8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001dc8:	f7ff f8c0 	bl	8000f4c <HAL_GetTick>
 8001dcc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b20      	cmp	r3, #32
 8001ddc:	f040 8111 	bne.w	8002002 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	2319      	movs	r3, #25
 8001de6:	2201      	movs	r2, #1
 8001de8:	4988      	ldr	r1, [pc, #544]	; (800200c <HAL_I2C_IsDeviceReady+0x254>)
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 f912 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001df6:	2302      	movs	r3, #2
 8001df8:	e104      	b.n	8002004 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_I2C_IsDeviceReady+0x50>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e0fd      	b.n	8002004 <HAL_I2C_IsDeviceReady+0x24c>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d007      	beq.n	8001e2e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f042 0201 	orr.w	r2, r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2224      	movs	r2, #36	; 0x24
 8001e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4a70      	ldr	r2, [pc, #448]	; (8002010 <HAL_I2C_IsDeviceReady+0x258>)
 8001e50:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e60:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 f8d0 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00d      	beq.n	8001e96 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e88:	d103      	bne.n	8001e92 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e0b6      	b.n	8002004 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e96:	897b      	ldrh	r3, [r7, #10]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ea4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001ea6:	f7ff f851 	bl	8000f4c <HAL_GetTick>
 8001eaa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	bf0c      	ite	eq
 8001eba:	2301      	moveq	r3, #1
 8001ebc:	2300      	movne	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed0:	bf0c      	ite	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	2300      	movne	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001eda:	e025      	b.n	8001f28 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001edc:	f7ff f836 	bl	8000f4c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d302      	bcc.n	8001ef2 <HAL_I2C_IsDeviceReady+0x13a>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d103      	bne.n	8001efa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	22a0      	movs	r2, #160	; 0xa0
 8001ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f1e:	bf0c      	ite	eq
 8001f20:	2301      	moveq	r3, #1
 8001f22:	2300      	movne	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2ba0      	cmp	r3, #160	; 0xa0
 8001f32:	d005      	beq.n	8001f40 <HAL_I2C_IsDeviceReady+0x188>
 8001f34:	7dfb      	ldrb	r3, [r7, #23]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d102      	bne.n	8001f40 <HAL_I2C_IsDeviceReady+0x188>
 8001f3a:	7dbb      	ldrb	r3, [r7, #22]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0cd      	beq.n	8001edc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d129      	bne.n	8001faa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f64:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	2319      	movs	r3, #25
 8001f82:	2201      	movs	r2, #1
 8001f84:	4921      	ldr	r1, [pc, #132]	; (800200c <HAL_I2C_IsDeviceReady+0x254>)
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 f844 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e036      	b.n	8002004 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e02c      	b.n	8002004 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fc2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2319      	movs	r3, #25
 8001fca:	2201      	movs	r2, #1
 8001fcc:	490f      	ldr	r1, [pc, #60]	; (800200c <HAL_I2C_IsDeviceReady+0x254>)
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 f820 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e012      	b.n	8002004 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	f4ff af32 	bcc.w	8001e52 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002002:	2302      	movs	r3, #2
  }
}
 8002004:	4618      	mov	r0, r3
 8002006:	3720      	adds	r7, #32
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	00100002 	.word	0x00100002
 8002010:	ffff0000 	.word	0xffff0000

08002014 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	4613      	mov	r3, r2
 8002022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002024:	e025      	b.n	8002072 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202c:	d021      	beq.n	8002072 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800202e:	f7fe ff8d 	bl	8000f4c <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d302      	bcc.n	8002044 <I2C_WaitOnFlagUntilTimeout+0x30>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d116      	bne.n	8002072 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2220      	movs	r2, #32
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f043 0220 	orr.w	r2, r3, #32
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e023      	b.n	80020ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	0c1b      	lsrs	r3, r3, #16
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b01      	cmp	r3, #1
 800207a:	d10d      	bne.n	8002098 <I2C_WaitOnFlagUntilTimeout+0x84>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	43da      	mvns	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	4013      	ands	r3, r2
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	bf0c      	ite	eq
 800208e:	2301      	moveq	r3, #1
 8002090:	2300      	movne	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	e00c      	b.n	80020b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	43da      	mvns	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	4013      	ands	r3, r2
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf0c      	ite	eq
 80020aa:	2301      	moveq	r3, #1
 80020ac:	2300      	movne	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d0b6      	beq.n	8002026 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b20      	cmp	r3, #32
 80020d6:	d129      	bne.n	800212c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2224      	movs	r2, #36	; 0x24
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0201 	bic.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0210 	bic.w	r2, r2, #16
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	e000      	b.n	800212e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800212c:	2302      	movs	r3, #2
  }
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800213a:	b480      	push	{r7}
 800213c:	b085      	sub	sp, #20
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b20      	cmp	r3, #32
 8002152:	d12a      	bne.n	80021aa <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2224      	movs	r2, #36	; 0x24
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002174:	89fb      	ldrh	r3, [r7, #14]
 8002176:	f023 030f 	bic.w	r3, r3, #15
 800217a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	b29a      	uxth	r2, r3
 8002180:	89fb      	ldrh	r3, [r7, #14]
 8002182:	4313      	orrs	r3, r2
 8002184:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	89fa      	ldrh	r2, [r7, #14]
 800218c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0201 	orr.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2220      	movs	r2, #32
 80021a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e000      	b.n	80021ac <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80021aa:	2302      	movs	r3, #2
  }
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	603b      	str	r3, [r7, #0]
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <HAL_PWREx_EnableOverDrive+0x90>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	4a1f      	ldr	r2, [pc, #124]	; (8002248 <HAL_PWREx_EnableOverDrive+0x90>)
 80021cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d0:	6413      	str	r3, [r2, #64]	; 0x40
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <HAL_PWREx_EnableOverDrive+0x90>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021de:	4b1b      	ldr	r3, [pc, #108]	; (800224c <HAL_PWREx_EnableOverDrive+0x94>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021e4:	f7fe feb2 	bl	8000f4c <HAL_GetTick>
 80021e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021ea:	e009      	b.n	8002200 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021ec:	f7fe feae 	bl	8000f4c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021fa:	d901      	bls.n	8002200 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e01f      	b.n	8002240 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002200:	4b13      	ldr	r3, [pc, #76]	; (8002250 <HAL_PWREx_EnableOverDrive+0x98>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800220c:	d1ee      	bne.n	80021ec <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002210:	2201      	movs	r2, #1
 8002212:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002214:	f7fe fe9a 	bl	8000f4c <HAL_GetTick>
 8002218:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800221a:	e009      	b.n	8002230 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800221c:	f7fe fe96 	bl	8000f4c <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800222a:	d901      	bls.n	8002230 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e007      	b.n	8002240 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <HAL_PWREx_EnableOverDrive+0x98>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002238:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800223c:	d1ee      	bne.n	800221c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40023800 	.word	0x40023800
 800224c:	420e0040 	.word	0x420e0040
 8002250:	40007000 	.word	0x40007000
 8002254:	420e0044 	.word	0x420e0044

08002258 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e267      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d075      	beq.n	8002362 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002276:	4b88      	ldr	r3, [pc, #544]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b04      	cmp	r3, #4
 8002280:	d00c      	beq.n	800229c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002282:	4b85      	ldr	r3, [pc, #532]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800228a:	2b08      	cmp	r3, #8
 800228c:	d112      	bne.n	80022b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800228e:	4b82      	ldr	r3, [pc, #520]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800229a:	d10b      	bne.n	80022b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229c:	4b7e      	ldr	r3, [pc, #504]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d05b      	beq.n	8002360 <HAL_RCC_OscConfig+0x108>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d157      	bne.n	8002360 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e242      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022bc:	d106      	bne.n	80022cc <HAL_RCC_OscConfig+0x74>
 80022be:	4b76      	ldr	r3, [pc, #472]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a75      	ldr	r2, [pc, #468]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80022c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e01d      	b.n	8002308 <HAL_RCC_OscConfig+0xb0>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x98>
 80022d6:	4b70      	ldr	r3, [pc, #448]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a6f      	ldr	r2, [pc, #444]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80022dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b6d      	ldr	r3, [pc, #436]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a6c      	ldr	r2, [pc, #432]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e00b      	b.n	8002308 <HAL_RCC_OscConfig+0xb0>
 80022f0:	4b69      	ldr	r3, [pc, #420]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a68      	ldr	r2, [pc, #416]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80022f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b66      	ldr	r3, [pc, #408]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a65      	ldr	r2, [pc, #404]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 8002302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d013      	beq.n	8002338 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7fe fe1c 	bl	8000f4c <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002318:	f7fe fe18 	bl	8000f4c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e207      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	4b5b      	ldr	r3, [pc, #364]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0xc0>
 8002336:	e014      	b.n	8002362 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7fe fe08 	bl	8000f4c <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002340:	f7fe fe04 	bl	8000f4c <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	; 0x64
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e1f3      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002352:	4b51      	ldr	r3, [pc, #324]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0xe8>
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d063      	beq.n	8002436 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800236e:	4b4a      	ldr	r3, [pc, #296]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800237a:	4b47      	ldr	r3, [pc, #284]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002382:	2b08      	cmp	r3, #8
 8002384:	d11c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002386:	4b44      	ldr	r3, [pc, #272]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d116      	bne.n	80023c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002392:	4b41      	ldr	r3, [pc, #260]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_RCC_OscConfig+0x152>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d001      	beq.n	80023aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e1c7      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023aa:	4b3b      	ldr	r3, [pc, #236]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4937      	ldr	r1, [pc, #220]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023be:	e03a      	b.n	8002436 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d020      	beq.n	800240a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c8:	4b34      	ldr	r3, [pc, #208]	; (800249c <HAL_RCC_OscConfig+0x244>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ce:	f7fe fdbd 	bl	8000f4c <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d6:	f7fe fdb9 	bl	8000f4c <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e1a8      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e8:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f4:	4b28      	ldr	r3, [pc, #160]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4925      	ldr	r1, [pc, #148]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 8002404:	4313      	orrs	r3, r2
 8002406:	600b      	str	r3, [r1, #0]
 8002408:	e015      	b.n	8002436 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240a:	4b24      	ldr	r3, [pc, #144]	; (800249c <HAL_RCC_OscConfig+0x244>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7fe fd9c 	bl	8000f4c <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002418:	f7fe fd98 	bl	8000f4c <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e187      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242a:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d036      	beq.n	80024b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d016      	beq.n	8002478 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <HAL_RCC_OscConfig+0x248>)
 800244c:	2201      	movs	r2, #1
 800244e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002450:	f7fe fd7c 	bl	8000f4c <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002458:	f7fe fd78 	bl	8000f4c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e167      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246a:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_RCC_OscConfig+0x240>)
 800246c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x200>
 8002476:	e01b      	b.n	80024b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_RCC_OscConfig+0x248>)
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247e:	f7fe fd65 	bl	8000f4c <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002484:	e00e      	b.n	80024a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002486:	f7fe fd61 	bl	8000f4c <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d907      	bls.n	80024a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e150      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
 8002498:	40023800 	.word	0x40023800
 800249c:	42470000 	.word	0x42470000
 80024a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a4:	4b88      	ldr	r3, [pc, #544]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 80024a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1ea      	bne.n	8002486 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 8097 	beq.w	80025ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024be:	2300      	movs	r3, #0
 80024c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c2:	4b81      	ldr	r3, [pc, #516]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10f      	bne.n	80024ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	4b7d      	ldr	r3, [pc, #500]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4a7c      	ldr	r2, [pc, #496]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024dc:	6413      	str	r3, [r2, #64]	; 0x40
 80024de:	4b7a      	ldr	r3, [pc, #488]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ea:	2301      	movs	r3, #1
 80024ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ee:	4b77      	ldr	r3, [pc, #476]	; (80026cc <HAL_RCC_OscConfig+0x474>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d118      	bne.n	800252c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024fa:	4b74      	ldr	r3, [pc, #464]	; (80026cc <HAL_RCC_OscConfig+0x474>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a73      	ldr	r2, [pc, #460]	; (80026cc <HAL_RCC_OscConfig+0x474>)
 8002500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002506:	f7fe fd21 	bl	8000f4c <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250e:	f7fe fd1d 	bl	8000f4c <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e10c      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002520:	4b6a      	ldr	r3, [pc, #424]	; (80026cc <HAL_RCC_OscConfig+0x474>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d106      	bne.n	8002542 <HAL_RCC_OscConfig+0x2ea>
 8002534:	4b64      	ldr	r3, [pc, #400]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002538:	4a63      	ldr	r2, [pc, #396]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6713      	str	r3, [r2, #112]	; 0x70
 8002540:	e01c      	b.n	800257c <HAL_RCC_OscConfig+0x324>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b05      	cmp	r3, #5
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0x30c>
 800254a:	4b5f      	ldr	r3, [pc, #380]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	4a5e      	ldr	r2, [pc, #376]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002550:	f043 0304 	orr.w	r3, r3, #4
 8002554:	6713      	str	r3, [r2, #112]	; 0x70
 8002556:	4b5c      	ldr	r3, [pc, #368]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255a:	4a5b      	ldr	r2, [pc, #364]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6713      	str	r3, [r2, #112]	; 0x70
 8002562:	e00b      	b.n	800257c <HAL_RCC_OscConfig+0x324>
 8002564:	4b58      	ldr	r3, [pc, #352]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002568:	4a57      	ldr	r2, [pc, #348]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 800256a:	f023 0301 	bic.w	r3, r3, #1
 800256e:	6713      	str	r3, [r2, #112]	; 0x70
 8002570:	4b55      	ldr	r3, [pc, #340]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002574:	4a54      	ldr	r2, [pc, #336]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002576:	f023 0304 	bic.w	r3, r3, #4
 800257a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d015      	beq.n	80025b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002584:	f7fe fce2 	bl	8000f4c <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800258c:	f7fe fcde 	bl	8000f4c <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	; 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e0cb      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a2:	4b49      	ldr	r3, [pc, #292]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0ee      	beq.n	800258c <HAL_RCC_OscConfig+0x334>
 80025ae:	e014      	b.n	80025da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b0:	f7fe fccc 	bl	8000f4c <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b6:	e00a      	b.n	80025ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b8:	f7fe fcc8 	bl	8000f4c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e0b5      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ce:	4b3e      	ldr	r3, [pc, #248]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 80025d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1ee      	bne.n	80025b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025da:	7dfb      	ldrb	r3, [r7, #23]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d105      	bne.n	80025ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e0:	4b39      	ldr	r3, [pc, #228]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	4a38      	ldr	r2, [pc, #224]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 80025e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80a1 	beq.w	8002738 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025f6:	4b34      	ldr	r3, [pc, #208]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d05c      	beq.n	80026bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d141      	bne.n	800268e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260a:	4b31      	ldr	r3, [pc, #196]	; (80026d0 <HAL_RCC_OscConfig+0x478>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002610:	f7fe fc9c 	bl	8000f4c <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002618:	f7fe fc98 	bl	8000f4c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e087      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262a:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69da      	ldr	r2, [r3, #28]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	019b      	lsls	r3, r3, #6
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	085b      	lsrs	r3, r3, #1
 800264e:	3b01      	subs	r3, #1
 8002650:	041b      	lsls	r3, r3, #16
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002658:	061b      	lsls	r3, r3, #24
 800265a:	491b      	ldr	r1, [pc, #108]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <HAL_RCC_OscConfig+0x478>)
 8002662:	2201      	movs	r2, #1
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7fe fc71 	bl	8000f4c <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266e:	f7fe fc6d 	bl	8000f4c <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e05c      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002680:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x416>
 800268c:	e054      	b.n	8002738 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <HAL_RCC_OscConfig+0x478>)
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7fe fc5a 	bl	8000f4c <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800269c:	f7fe fc56 	bl	8000f4c <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e045      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_RCC_OscConfig+0x470>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x444>
 80026ba:	e03d      	b.n	8002738 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d107      	bne.n	80026d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e038      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40007000 	.word	0x40007000
 80026d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026d4:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <HAL_RCC_OscConfig+0x4ec>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d028      	beq.n	8002734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d121      	bne.n	8002734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d11a      	bne.n	8002734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002704:	4013      	ands	r3, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800270a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800270c:	4293      	cmp	r3, r2
 800270e:	d111      	bne.n	8002734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	085b      	lsrs	r3, r3, #1
 800271c:	3b01      	subs	r3, #1
 800271e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002720:	429a      	cmp	r2, r3
 8002722:	d107      	bne.n	8002734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800

08002748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0cc      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800275c:	4b68      	ldr	r3, [pc, #416]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d90c      	bls.n	8002784 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276a:	4b65      	ldr	r3, [pc, #404]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b63      	ldr	r3, [pc, #396]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0b8      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d020      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800279c:	4b59      	ldr	r3, [pc, #356]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4a58      	ldr	r2, [pc, #352]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b4:	4b53      	ldr	r3, [pc, #332]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4a52      	ldr	r2, [pc, #328]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c0:	4b50      	ldr	r3, [pc, #320]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	494d      	ldr	r1, [pc, #308]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d044      	beq.n	8002868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	4b47      	ldr	r3, [pc, #284]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d119      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e07f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d003      	beq.n	8002806 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002802:	2b03      	cmp	r3, #3
 8002804:	d107      	bne.n	8002816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002806:	4b3f      	ldr	r3, [pc, #252]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e06f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002816:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e067      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002826:	4b37      	ldr	r3, [pc, #220]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f023 0203 	bic.w	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4934      	ldr	r1, [pc, #208]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	4313      	orrs	r3, r2
 8002836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002838:	f7fe fb88 	bl	8000f4c <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283e:	e00a      	b.n	8002856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002840:	f7fe fb84 	bl	8000f4c <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	; 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e04f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002856:	4b2b      	ldr	r3, [pc, #172]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 020c 	and.w	r2, r3, #12
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	429a      	cmp	r2, r3
 8002866:	d1eb      	bne.n	8002840 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002868:	4b25      	ldr	r3, [pc, #148]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d20c      	bcs.n	8002890 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b22      	ldr	r3, [pc, #136]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b20      	ldr	r3, [pc, #128]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e032      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800289c:	4b19      	ldr	r3, [pc, #100]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4916      	ldr	r1, [pc, #88]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d009      	beq.n	80028ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	490e      	ldr	r1, [pc, #56]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ce:	f000 f821 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 80028d2:	4602      	mov	r2, r0
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	490a      	ldr	r1, [pc, #40]	; (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 80028e0:	5ccb      	ldrb	r3, [r1, r3]
 80028e2:	fa22 f303 	lsr.w	r3, r2, r3
 80028e6:	4a09      	ldr	r2, [pc, #36]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_RCC_ClockConfig+0x1c8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fae8 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023c00 	.word	0x40023c00
 8002904:	40023800 	.word	0x40023800
 8002908:	08004fe4 	.word	0x08004fe4
 800290c:	20000000 	.word	0x20000000
 8002910:	20000004 	.word	0x20000004

08002914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002918:	b090      	sub	sp, #64	; 0x40
 800291a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	637b      	str	r3, [r7, #52]	; 0x34
 8002920:	2300      	movs	r3, #0
 8002922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002924:	2300      	movs	r3, #0
 8002926:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800292c:	4b59      	ldr	r3, [pc, #356]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 030c 	and.w	r3, r3, #12
 8002934:	2b08      	cmp	r3, #8
 8002936:	d00d      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x40>
 8002938:	2b08      	cmp	r3, #8
 800293a:	f200 80a1 	bhi.w	8002a80 <HAL_RCC_GetSysClockFreq+0x16c>
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x34>
 8002942:	2b04      	cmp	r3, #4
 8002944:	d003      	beq.n	800294e <HAL_RCC_GetSysClockFreq+0x3a>
 8002946:	e09b      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002948:	4b53      	ldr	r3, [pc, #332]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x184>)
 800294a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800294c:	e09b      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800294e:	4b53      	ldr	r3, [pc, #332]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002950:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002952:	e098      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002954:	4b4f      	ldr	r3, [pc, #316]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800295c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800295e:	4b4d      	ldr	r3, [pc, #308]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d028      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800296a:	4b4a      	ldr	r3, [pc, #296]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	099b      	lsrs	r3, r3, #6
 8002970:	2200      	movs	r2, #0
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	627a      	str	r2, [r7, #36]	; 0x24
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800297c:	2100      	movs	r1, #0
 800297e:	4b47      	ldr	r3, [pc, #284]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002980:	fb03 f201 	mul.w	r2, r3, r1
 8002984:	2300      	movs	r3, #0
 8002986:	fb00 f303 	mul.w	r3, r0, r3
 800298a:	4413      	add	r3, r2
 800298c:	4a43      	ldr	r2, [pc, #268]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x188>)
 800298e:	fba0 1202 	umull	r1, r2, r0, r2
 8002992:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002994:	460a      	mov	r2, r1
 8002996:	62ba      	str	r2, [r7, #40]	; 0x28
 8002998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800299a:	4413      	add	r3, r2
 800299c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800299e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a0:	2200      	movs	r2, #0
 80029a2:	61bb      	str	r3, [r7, #24]
 80029a4:	61fa      	str	r2, [r7, #28]
 80029a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029ae:	f7fd fc77 	bl	80002a0 <__aeabi_uldivmod>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4613      	mov	r3, r2
 80029b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ba:	e053      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029bc:	4b35      	ldr	r3, [pc, #212]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	099b      	lsrs	r3, r3, #6
 80029c2:	2200      	movs	r2, #0
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	617a      	str	r2, [r7, #20]
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029ce:	f04f 0b00 	mov.w	fp, #0
 80029d2:	4652      	mov	r2, sl
 80029d4:	465b      	mov	r3, fp
 80029d6:	f04f 0000 	mov.w	r0, #0
 80029da:	f04f 0100 	mov.w	r1, #0
 80029de:	0159      	lsls	r1, r3, #5
 80029e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029e4:	0150      	lsls	r0, r2, #5
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	ebb2 080a 	subs.w	r8, r2, sl
 80029ee:	eb63 090b 	sbc.w	r9, r3, fp
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a06:	ebb2 0408 	subs.w	r4, r2, r8
 8002a0a:	eb63 0509 	sbc.w	r5, r3, r9
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	00eb      	lsls	r3, r5, #3
 8002a18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a1c:	00e2      	lsls	r2, r4, #3
 8002a1e:	4614      	mov	r4, r2
 8002a20:	461d      	mov	r5, r3
 8002a22:	eb14 030a 	adds.w	r3, r4, sl
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	eb45 030b 	adc.w	r3, r5, fp
 8002a2c:	607b      	str	r3, [r7, #4]
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	028b      	lsls	r3, r1, #10
 8002a3e:	4621      	mov	r1, r4
 8002a40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a44:	4621      	mov	r1, r4
 8002a46:	028a      	lsls	r2, r1, #10
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4e:	2200      	movs	r2, #0
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	60fa      	str	r2, [r7, #12]
 8002a54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a58:	f7fd fc22 	bl	80002a0 <__aeabi_uldivmod>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4613      	mov	r3, r2
 8002a62:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	0c1b      	lsrs	r3, r3, #16
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	3301      	adds	r3, #1
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002a74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a7e:	e002      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3740      	adds	r7, #64	; 0x40
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800
 8002a98:	00f42400 	.word	0x00f42400
 8002a9c:	017d7840 	.word	0x017d7840

08002aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000000 	.word	0x20000000

08002ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002abc:	f7ff fff0 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	0a9b      	lsrs	r3, r3, #10
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4903      	ldr	r1, [pc, #12]	; (8002adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	08004ff4 	.word	0x08004ff4

08002ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ae4:	f7ff ffdc 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	0b5b      	lsrs	r3, r3, #13
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	4903      	ldr	r1, [pc, #12]	; (8002b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002af6:	5ccb      	ldrb	r3, [r1, r3]
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40023800 	.word	0x40023800
 8002b04:	08004ff4 	.word	0x08004ff4

08002b08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10b      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d105      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d075      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b3c:	4b91      	ldr	r3, [pc, #580]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b42:	f7fe fa03 	bl	8000f4c <HAL_GetTick>
 8002b46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b4a:	f7fe f9ff 	bl	8000f4c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e189      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b5c:	4b8a      	ldr	r3, [pc, #552]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f0      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d009      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	019a      	lsls	r2, r3, #6
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	071b      	lsls	r3, r3, #28
 8002b80:	4981      	ldr	r1, [pc, #516]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01f      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b94:	4b7c      	ldr	r3, [pc, #496]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b9a:	0f1b      	lsrs	r3, r3, #28
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	019a      	lsls	r2, r3, #6
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	061b      	lsls	r3, r3, #24
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	071b      	lsls	r3, r3, #28
 8002bb4:	4974      	ldr	r1, [pc, #464]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bbc:	4b72      	ldr	r3, [pc, #456]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bc2:	f023 021f 	bic.w	r2, r3, #31
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	496e      	ldr	r1, [pc, #440]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00d      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	019a      	lsls	r2, r3, #6
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	061b      	lsls	r3, r3, #24
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	071b      	lsls	r3, r3, #28
 8002bf4:	4964      	ldr	r1, [pc, #400]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bfc:	4b61      	ldr	r3, [pc, #388]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c02:	f7fe f9a3 	bl	8000f4c <HAL_GetTick>
 8002c06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c08:	e008      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c0a:	f7fe f99f 	bl	8000f4c <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e129      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c1c:	4b5a      	ldr	r3, [pc, #360]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d105      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d079      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c40:	4b52      	ldr	r3, [pc, #328]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c46:	f7fe f981 	bl	8000f4c <HAL_GetTick>
 8002c4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c4e:	f7fe f97d 	bl	8000f4c <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e107      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c60:	4b49      	ldr	r3, [pc, #292]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c6c:	d0ef      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d020      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c7a:	4b43      	ldr	r3, [pc, #268]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c80:	0f1b      	lsrs	r3, r3, #28
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	019a      	lsls	r2, r3, #6
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	061b      	lsls	r3, r3, #24
 8002c94:	431a      	orrs	r2, r3
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	071b      	lsls	r3, r3, #28
 8002c9a:	493b      	ldr	r1, [pc, #236]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ca2:	4b39      	ldr	r3, [pc, #228]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ca8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	021b      	lsls	r3, r3, #8
 8002cb4:	4934      	ldr	r1, [pc, #208]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d01e      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cc8:	4b2f      	ldr	r3, [pc, #188]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	0e1b      	lsrs	r3, r3, #24
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	019a      	lsls	r2, r3, #6
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	061b      	lsls	r3, r3, #24
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	071b      	lsls	r3, r3, #28
 8002ce8:	4927      	ldr	r1, [pc, #156]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002cf0:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cf6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	4922      	ldr	r1, [pc, #136]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d06:	4b21      	ldr	r3, [pc, #132]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d0c:	f7fe f91e 	bl	8000f4c <HAL_GetTick>
 8002d10:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002d14:	f7fe f91a 	bl	8000f4c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e0a4      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d26:	4b18      	ldr	r3, [pc, #96]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d32:	d1ef      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 808b 	beq.w	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	4a0f      	ldr	r2, [pc, #60]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d50:	6413      	str	r3, [r2, #64]	; 0x40
 8002d52:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d5e:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a0b      	ldr	r2, [pc, #44]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d68:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d6a:	f7fe f8ef 	bl	8000f4c <HAL_GetTick>
 8002d6e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d70:	e010      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d72:	f7fe f8eb 	bl	8000f4c <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d909      	bls.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e075      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002d84:	42470068 	.word	0x42470068
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	42470070 	.word	0x42470070
 8002d90:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d94:	4b38      	ldr	r3, [pc, #224]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0e8      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002da0:	4b36      	ldr	r3, [pc, #216]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d02f      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d028      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dbe:	4b2f      	ldr	r3, [pc, #188]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dc8:	4b2d      	ldr	r3, [pc, #180]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dce:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002dd4:	4a29      	ldr	r2, [pc, #164]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002dda:	4b28      	ldr	r3, [pc, #160]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d114      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002de6:	f7fe f8b1 	bl	8000f4c <HAL_GetTick>
 8002dea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dec:	e00a      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dee:	f7fe f8ad 	bl	8000f4c <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e035      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e04:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0ee      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e1c:	d10d      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002e1e:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e32:	4912      	ldr	r1, [pc, #72]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	608b      	str	r3, [r1, #8]
 8002e38:	e005      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	4a0f      	ldr	r2, [pc, #60]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002e40:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e44:	6093      	str	r3, [r2, #8]
 8002e46:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002e48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e52:	490a      	ldr	r1, [pc, #40]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d004      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8002e6c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40007000 	.word	0x40007000
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	42470e40 	.word	0x42470e40
 8002e84:	424711e0 	.word	0x424711e0

08002e88 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e066      	b.n	8002f6c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	7f5b      	ldrb	r3, [r3, #29]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d105      	bne.n	8002eb4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fd fe0c 	bl	8000acc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	22ca      	movs	r2, #202	; 0xca
 8002ec0:	625a      	str	r2, [r3, #36]	; 0x24
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2253      	movs	r2, #83	; 0x53
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f87a 	bl	8002fc4 <RTC_EnterInitMode>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d12c      	bne.n	8002f34 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eec:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6899      	ldr	r1, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	68d2      	ldr	r2, [r2, #12]
 8002f14:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6919      	ldr	r1, [r3, #16]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	041a      	lsls	r2, r3, #16
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f881 	bl	8003032 <RTC_ExitInitMode>
 8002f30:	4603      	mov	r3, r0
 8002f32:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d113      	bne.n	8002f62 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699a      	ldr	r2, [r3, #24]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	22ff      	movs	r2, #255	; 0xff
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f8e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f90:	f7fd ffdc 	bl	8000f4c <HAL_GetTick>
 8002f94:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f96:	e009      	b.n	8002fac <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f98:	f7fd ffd8 	bl	8000f4c <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fa6:	d901      	bls.n	8002fac <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e007      	b.n	8002fbc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0ee      	beq.n	8002f98 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d122      	bne.n	8003028 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ff0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ff2:	f7fd ffab 	bl	8000f4c <HAL_GetTick>
 8002ff6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002ff8:	e00c      	b.n	8003014 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ffa:	f7fd ffa7 	bl	8000f4c <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003008:	d904      	bls.n	8003014 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2204      	movs	r2, #4
 800300e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d102      	bne.n	8003028 <RTC_EnterInitMode+0x64>
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d1e8      	bne.n	8002ffa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003028:	7bfb      	ldrb	r3, [r7, #15]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800304c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10a      	bne.n	8003072 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff ff89 	bl	8002f74 <HAL_RTC_WaitForSynchro>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d004      	beq.n	8003072 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2204      	movs	r2, #4
 800306c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003072:	7bfb      	ldrb	r3, [r7, #15]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e041      	b.n	8003112 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fd fe2e 	bl	8000d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3304      	adds	r3, #4
 80030b8:	4619      	mov	r1, r3
 80030ba:	4610      	mov	r0, r2
 80030bc:	f000 f8f4 	bl	80032a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_TIM_ConfigClockSource+0x1c>
 8003132:	2302      	movs	r3, #2
 8003134:	e0b4      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x186>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2202      	movs	r2, #2
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003154:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800315c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800316e:	d03e      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0xd4>
 8003170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003174:	f200 8087 	bhi.w	8003286 <HAL_TIM_ConfigClockSource+0x16c>
 8003178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800317c:	f000 8086 	beq.w	800328c <HAL_TIM_ConfigClockSource+0x172>
 8003180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003184:	d87f      	bhi.n	8003286 <HAL_TIM_ConfigClockSource+0x16c>
 8003186:	2b70      	cmp	r3, #112	; 0x70
 8003188:	d01a      	beq.n	80031c0 <HAL_TIM_ConfigClockSource+0xa6>
 800318a:	2b70      	cmp	r3, #112	; 0x70
 800318c:	d87b      	bhi.n	8003286 <HAL_TIM_ConfigClockSource+0x16c>
 800318e:	2b60      	cmp	r3, #96	; 0x60
 8003190:	d050      	beq.n	8003234 <HAL_TIM_ConfigClockSource+0x11a>
 8003192:	2b60      	cmp	r3, #96	; 0x60
 8003194:	d877      	bhi.n	8003286 <HAL_TIM_ConfigClockSource+0x16c>
 8003196:	2b50      	cmp	r3, #80	; 0x50
 8003198:	d03c      	beq.n	8003214 <HAL_TIM_ConfigClockSource+0xfa>
 800319a:	2b50      	cmp	r3, #80	; 0x50
 800319c:	d873      	bhi.n	8003286 <HAL_TIM_ConfigClockSource+0x16c>
 800319e:	2b40      	cmp	r3, #64	; 0x40
 80031a0:	d058      	beq.n	8003254 <HAL_TIM_ConfigClockSource+0x13a>
 80031a2:	2b40      	cmp	r3, #64	; 0x40
 80031a4:	d86f      	bhi.n	8003286 <HAL_TIM_ConfigClockSource+0x16c>
 80031a6:	2b30      	cmp	r3, #48	; 0x30
 80031a8:	d064      	beq.n	8003274 <HAL_TIM_ConfigClockSource+0x15a>
 80031aa:	2b30      	cmp	r3, #48	; 0x30
 80031ac:	d86b      	bhi.n	8003286 <HAL_TIM_ConfigClockSource+0x16c>
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	d060      	beq.n	8003274 <HAL_TIM_ConfigClockSource+0x15a>
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	d867      	bhi.n	8003286 <HAL_TIM_ConfigClockSource+0x16c>
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d05c      	beq.n	8003274 <HAL_TIM_ConfigClockSource+0x15a>
 80031ba:	2b10      	cmp	r3, #16
 80031bc:	d05a      	beq.n	8003274 <HAL_TIM_ConfigClockSource+0x15a>
 80031be:	e062      	b.n	8003286 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	6899      	ldr	r1, [r3, #8]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f000 f984 	bl	80034dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031e2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	609a      	str	r2, [r3, #8]
      break;
 80031ec:	e04f      	b.n	800328e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	6899      	ldr	r1, [r3, #8]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f000 f96d 	bl	80034dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003210:	609a      	str	r2, [r3, #8]
      break;
 8003212:	e03c      	b.n	800328e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	461a      	mov	r2, r3
 8003222:	f000 f8e1 	bl	80033e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2150      	movs	r1, #80	; 0x50
 800322c:	4618      	mov	r0, r3
 800322e:	f000 f93a 	bl	80034a6 <TIM_ITRx_SetConfig>
      break;
 8003232:	e02c      	b.n	800328e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	6859      	ldr	r1, [r3, #4]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	461a      	mov	r2, r3
 8003242:	f000 f900 	bl	8003446 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2160      	movs	r1, #96	; 0x60
 800324c:	4618      	mov	r0, r3
 800324e:	f000 f92a 	bl	80034a6 <TIM_ITRx_SetConfig>
      break;
 8003252:	e01c      	b.n	800328e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	461a      	mov	r2, r3
 8003262:	f000 f8c1 	bl	80033e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2140      	movs	r1, #64	; 0x40
 800326c:	4618      	mov	r0, r3
 800326e:	f000 f91a 	bl	80034a6 <TIM_ITRx_SetConfig>
      break;
 8003272:	e00c      	b.n	800328e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4619      	mov	r1, r3
 800327e:	4610      	mov	r0, r2
 8003280:	f000 f911 	bl	80034a6 <TIM_ITRx_SetConfig>
      break;
 8003284:	e003      	b.n	800328e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	73fb      	strb	r3, [r7, #15]
      break;
 800328a:	e000      	b.n	800328e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800328c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800329e:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a40      	ldr	r2, [pc, #256]	; (80033bc <TIM_Base_SetConfig+0x114>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d013      	beq.n	80032e8 <TIM_Base_SetConfig+0x40>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c6:	d00f      	beq.n	80032e8 <TIM_Base_SetConfig+0x40>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a3d      	ldr	r2, [pc, #244]	; (80033c0 <TIM_Base_SetConfig+0x118>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d00b      	beq.n	80032e8 <TIM_Base_SetConfig+0x40>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a3c      	ldr	r2, [pc, #240]	; (80033c4 <TIM_Base_SetConfig+0x11c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d007      	beq.n	80032e8 <TIM_Base_SetConfig+0x40>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a3b      	ldr	r2, [pc, #236]	; (80033c8 <TIM_Base_SetConfig+0x120>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d003      	beq.n	80032e8 <TIM_Base_SetConfig+0x40>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a3a      	ldr	r2, [pc, #232]	; (80033cc <TIM_Base_SetConfig+0x124>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d108      	bne.n	80032fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a2f      	ldr	r2, [pc, #188]	; (80033bc <TIM_Base_SetConfig+0x114>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d02b      	beq.n	800335a <TIM_Base_SetConfig+0xb2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003308:	d027      	beq.n	800335a <TIM_Base_SetConfig+0xb2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a2c      	ldr	r2, [pc, #176]	; (80033c0 <TIM_Base_SetConfig+0x118>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d023      	beq.n	800335a <TIM_Base_SetConfig+0xb2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a2b      	ldr	r2, [pc, #172]	; (80033c4 <TIM_Base_SetConfig+0x11c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d01f      	beq.n	800335a <TIM_Base_SetConfig+0xb2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a2a      	ldr	r2, [pc, #168]	; (80033c8 <TIM_Base_SetConfig+0x120>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d01b      	beq.n	800335a <TIM_Base_SetConfig+0xb2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a29      	ldr	r2, [pc, #164]	; (80033cc <TIM_Base_SetConfig+0x124>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d017      	beq.n	800335a <TIM_Base_SetConfig+0xb2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a28      	ldr	r2, [pc, #160]	; (80033d0 <TIM_Base_SetConfig+0x128>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <TIM_Base_SetConfig+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a27      	ldr	r2, [pc, #156]	; (80033d4 <TIM_Base_SetConfig+0x12c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00f      	beq.n	800335a <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a26      	ldr	r2, [pc, #152]	; (80033d8 <TIM_Base_SetConfig+0x130>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00b      	beq.n	800335a <TIM_Base_SetConfig+0xb2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a25      	ldr	r2, [pc, #148]	; (80033dc <TIM_Base_SetConfig+0x134>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d007      	beq.n	800335a <TIM_Base_SetConfig+0xb2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a24      	ldr	r2, [pc, #144]	; (80033e0 <TIM_Base_SetConfig+0x138>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d003      	beq.n	800335a <TIM_Base_SetConfig+0xb2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a23      	ldr	r2, [pc, #140]	; (80033e4 <TIM_Base_SetConfig+0x13c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d108      	bne.n	800336c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <TIM_Base_SetConfig+0x114>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d003      	beq.n	80033a0 <TIM_Base_SetConfig+0xf8>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a0c      	ldr	r2, [pc, #48]	; (80033cc <TIM_Base_SetConfig+0x124>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d103      	bne.n	80033a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	691a      	ldr	r2, [r3, #16]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	615a      	str	r2, [r3, #20]
}
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40010000 	.word	0x40010000
 80033c0:	40000400 	.word	0x40000400
 80033c4:	40000800 	.word	0x40000800
 80033c8:	40000c00 	.word	0x40000c00
 80033cc:	40010400 	.word	0x40010400
 80033d0:	40014000 	.word	0x40014000
 80033d4:	40014400 	.word	0x40014400
 80033d8:	40014800 	.word	0x40014800
 80033dc:	40001800 	.word	0x40001800
 80033e0:	40001c00 	.word	0x40001c00
 80033e4:	40002000 	.word	0x40002000

080033e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	f023 0201 	bic.w	r2, r3, #1
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f023 030a 	bic.w	r3, r3, #10
 8003424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4313      	orrs	r3, r2
 800342c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	621a      	str	r2, [r3, #32]
}
 800343a:	bf00      	nop
 800343c:	371c      	adds	r7, #28
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003446:	b480      	push	{r7}
 8003448:	b087      	sub	sp, #28
 800344a:	af00      	add	r7, sp, #0
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	f023 0210 	bic.w	r2, r3, #16
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003470:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	031b      	lsls	r3, r3, #12
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003482:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	621a      	str	r2, [r3, #32]
}
 800349a:	bf00      	nop
 800349c:	371c      	adds	r7, #28
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b085      	sub	sp, #20
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f043 0307 	orr.w	r3, r3, #7
 80034c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	609a      	str	r2, [r3, #8]
}
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	021a      	lsls	r2, r3, #8
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	431a      	orrs	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4313      	orrs	r3, r2
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	609a      	str	r2, [r3, #8]
}
 8003510:	bf00      	nop
 8003512:	371c      	adds	r7, #28
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003530:	2302      	movs	r3, #2
 8003532:	e05a      	b.n	80035ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a21      	ldr	r2, [pc, #132]	; (80035f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d022      	beq.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003580:	d01d      	beq.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1d      	ldr	r2, [pc, #116]	; (80035fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d018      	beq.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a1b      	ldr	r2, [pc, #108]	; (8003600 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d013      	beq.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1a      	ldr	r2, [pc, #104]	; (8003604 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00e      	beq.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a18      	ldr	r2, [pc, #96]	; (8003608 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d009      	beq.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a17      	ldr	r2, [pc, #92]	; (800360c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d004      	beq.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a15      	ldr	r2, [pc, #84]	; (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d10c      	bne.n	80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40010000 	.word	0x40010000
 80035fc:	40000400 	.word	0x40000400
 8003600:	40000800 	.word	0x40000800
 8003604:	40000c00 	.word	0x40000c00
 8003608:	40010400 	.word	0x40010400
 800360c:	40014000 	.word	0x40014000
 8003610:	40001800 	.word	0x40001800

08003614 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e03f      	b.n	80036a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fd fbae 	bl	8000d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2224      	movs	r2, #36	; 0x24
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003656:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fd7b 	bl	8004154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800366c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800367c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800368c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b08a      	sub	sp, #40	; 0x28
 80036b2:	af02      	add	r7, sp, #8
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	603b      	str	r3, [r7, #0]
 80036ba:	4613      	mov	r3, r2
 80036bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	d17c      	bne.n	80037c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <HAL_UART_Transmit+0x2c>
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e075      	b.n	80037ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_UART_Transmit+0x3e>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e06e      	b.n	80037ca <HAL_UART_Transmit+0x11c>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2221      	movs	r2, #33	; 0x21
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003702:	f7fd fc23 	bl	8000f4c <HAL_GetTick>
 8003706:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	88fa      	ldrh	r2, [r7, #6]
 800370c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	88fa      	ldrh	r2, [r7, #6]
 8003712:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371c:	d108      	bne.n	8003730 <HAL_UART_Transmit+0x82>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d104      	bne.n	8003730 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	e003      	b.n	8003738 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003734:	2300      	movs	r3, #0
 8003736:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003740:	e02a      	b.n	8003798 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2200      	movs	r2, #0
 800374a:	2180      	movs	r1, #128	; 0x80
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 faf9 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e036      	b.n	80037ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10b      	bne.n	800377a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003770:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	3302      	adds	r3, #2
 8003776:	61bb      	str	r3, [r7, #24]
 8003778:	e007      	b.n	800378a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	781a      	ldrb	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	3301      	adds	r3, #1
 8003788:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1cf      	bne.n	8003742 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2200      	movs	r2, #0
 80037aa:	2140      	movs	r1, #64	; 0x40
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 fac9 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e006      	b.n	80037ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	e000      	b.n	80037ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037c8:	2302      	movs	r3, #2
  }
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3720      	adds	r7, #32
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b0ba      	sub	sp, #232	; 0xe8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003800:	2300      	movs	r3, #0
 8003802:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003812:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10f      	bne.n	800383a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800381a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <HAL_UART_IRQHandler+0x66>
 8003826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fbd3 	bl	8003fde <UART_Receive_IT>
      return;
 8003838:	e256      	b.n	8003ce8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800383a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80de 	beq.w	8003a00 <HAL_UART_IRQHandler+0x22c>
 8003844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d106      	bne.n	800385e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003854:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80d1 	beq.w	8003a00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800385e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00b      	beq.n	8003882 <HAL_UART_IRQHandler+0xae>
 800386a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800386e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f043 0201 	orr.w	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00b      	beq.n	80038a6 <HAL_UART_IRQHandler+0xd2>
 800388e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d005      	beq.n	80038a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	f043 0202 	orr.w	r2, r3, #2
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <HAL_UART_IRQHandler+0xf6>
 80038b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d005      	beq.n	80038ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f043 0204 	orr.w	r2, r3, #4
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d011      	beq.n	80038fa <HAL_UART_IRQHandler+0x126>
 80038d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d105      	bne.n	80038ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d005      	beq.n	80038fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f043 0208 	orr.w	r2, r3, #8
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 81ed 	beq.w	8003cde <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003908:	f003 0320 	and.w	r3, r3, #32
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_UART_IRQHandler+0x14e>
 8003910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fb5e 	bl	8003fde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392c:	2b40      	cmp	r3, #64	; 0x40
 800392e:	bf0c      	ite	eq
 8003930:	2301      	moveq	r3, #1
 8003932:	2300      	movne	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d103      	bne.n	800394e <HAL_UART_IRQHandler+0x17a>
 8003946:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800394a:	2b00      	cmp	r3, #0
 800394c:	d04f      	beq.n	80039ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fa66 	bl	8003e20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395e:	2b40      	cmp	r3, #64	; 0x40
 8003960:	d141      	bne.n	80039e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3314      	adds	r3, #20
 8003968:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003978:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800397c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003980:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3314      	adds	r3, #20
 800398a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800398e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003992:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003996:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800399a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800399e:	e841 2300 	strex	r3, r2, [r1]
 80039a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1d9      	bne.n	8003962 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d013      	beq.n	80039de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	4a7d      	ldr	r2, [pc, #500]	; (8003bb0 <HAL_UART_IRQHandler+0x3dc>)
 80039bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fd fee5 	bl	8001792 <HAL_DMA_Abort_IT>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d016      	beq.n	80039fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039d8:	4610      	mov	r0, r2
 80039da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039dc:	e00e      	b.n	80039fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f99a 	bl	8003d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e4:	e00a      	b.n	80039fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f996 	bl	8003d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ec:	e006      	b.n	80039fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f992 	bl	8003d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80039fa:	e170      	b.n	8003cde <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039fc:	bf00      	nop
    return;
 80039fe:	e16e      	b.n	8003cde <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	f040 814a 	bne.w	8003c9e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 8143 	beq.w	8003c9e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a1c:	f003 0310 	and.w	r3, r3, #16
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 813c 	beq.w	8003c9e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a26:	2300      	movs	r3, #0
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a46:	2b40      	cmp	r3, #64	; 0x40
 8003a48:	f040 80b4 	bne.w	8003bb4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8140 	beq.w	8003ce2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	f080 8139 	bcs.w	8003ce2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a76:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a82:	f000 8088 	beq.w	8003b96 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	330c      	adds	r3, #12
 8003a8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	330c      	adds	r3, #12
 8003aae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ab2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ab6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003abe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1d9      	bne.n	8003a86 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3314      	adds	r3, #20
 8003ad8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003adc:	e853 3f00 	ldrex	r3, [r3]
 8003ae0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ae2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
 8003ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3314      	adds	r3, #20
 8003af2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003af6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003afa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003afe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e1      	bne.n	8003ad2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	3314      	adds	r3, #20
 8003b14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3314      	adds	r3, #20
 8003b2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1e3      	bne.n	8003b0e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	330c      	adds	r3, #12
 8003b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b5e:	e853 3f00 	ldrex	r3, [r3]
 8003b62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b66:	f023 0310 	bic.w	r3, r3, #16
 8003b6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	330c      	adds	r3, #12
 8003b74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b78:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b7a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b80:	e841 2300 	strex	r3, r2, [r1]
 8003b84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1e3      	bne.n	8003b54 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fd fd8e 	bl	80016b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f8c0 	bl	8003d2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bac:	e099      	b.n	8003ce2 <HAL_UART_IRQHandler+0x50e>
 8003bae:	bf00      	nop
 8003bb0:	08003ee7 	.word	0x08003ee7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 808b 	beq.w	8003ce6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003bd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8086 	beq.w	8003ce6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	330c      	adds	r3, #12
 8003be0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be4:	e853 3f00 	ldrex	r3, [r3]
 8003be8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bf0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	330c      	adds	r3, #12
 8003bfa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003bfe:	647a      	str	r2, [r7, #68]	; 0x44
 8003c00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c06:	e841 2300 	strex	r3, r2, [r1]
 8003c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1e3      	bne.n	8003bda <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3314      	adds	r3, #20
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	e853 3f00 	ldrex	r3, [r3]
 8003c20:	623b      	str	r3, [r7, #32]
   return(result);
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	f023 0301 	bic.w	r3, r3, #1
 8003c28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3314      	adds	r3, #20
 8003c32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c36:	633a      	str	r2, [r7, #48]	; 0x30
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c3e:	e841 2300 	strex	r3, r2, [r1]
 8003c42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1e3      	bne.n	8003c12 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	330c      	adds	r3, #12
 8003c5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	e853 3f00 	ldrex	r3, [r3]
 8003c66:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 0310 	bic.w	r3, r3, #16
 8003c6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	330c      	adds	r3, #12
 8003c78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c7c:	61fa      	str	r2, [r7, #28]
 8003c7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c80:	69b9      	ldr	r1, [r7, #24]
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	e841 2300 	strex	r3, r2, [r1]
 8003c88:	617b      	str	r3, [r7, #20]
   return(result);
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e3      	bne.n	8003c58 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c94:	4619      	mov	r1, r3
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f848 	bl	8003d2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c9c:	e023      	b.n	8003ce6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d009      	beq.n	8003cbe <HAL_UART_IRQHandler+0x4ea>
 8003caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f929 	bl	8003f0e <UART_Transmit_IT>
    return;
 8003cbc:	e014      	b.n	8003ce8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00e      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x514>
 8003cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d008      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f969 	bl	8003fae <UART_EndTransmit_IT>
    return;
 8003cdc:	e004      	b.n	8003ce8 <HAL_UART_IRQHandler+0x514>
    return;
 8003cde:	bf00      	nop
 8003ce0:	e002      	b.n	8003ce8 <HAL_UART_IRQHandler+0x514>
      return;
 8003ce2:	bf00      	nop
 8003ce4:	e000      	b.n	8003ce8 <HAL_UART_IRQHandler+0x514>
      return;
 8003ce6:	bf00      	nop
  }
}
 8003ce8:	37e8      	adds	r7, #232	; 0xe8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop

08003cf0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b090      	sub	sp, #64	; 0x40
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	4613      	mov	r3, r2
 8003d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d54:	e050      	b.n	8003df8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5c:	d04c      	beq.n	8003df8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d007      	beq.n	8003d74 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d64:	f7fd f8f2 	bl	8000f4c <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d241      	bcs.n	8003df8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	330c      	adds	r3, #12
 8003d92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d94:	637a      	str	r2, [r7, #52]	; 0x34
 8003d96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e5      	bne.n	8003d74 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3314      	adds	r3, #20
 8003dae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	613b      	str	r3, [r7, #16]
   return(result);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3314      	adds	r3, #20
 8003dc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dc8:	623a      	str	r2, [r7, #32]
 8003dca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	69f9      	ldr	r1, [r7, #28]
 8003dce:	6a3a      	ldr	r2, [r7, #32]
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e5      	bne.n	8003da8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e00f      	b.n	8003e18 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	4013      	ands	r3, r2
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	bf0c      	ite	eq
 8003e08:	2301      	moveq	r3, #1
 8003e0a:	2300      	movne	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	461a      	mov	r2, r3
 8003e10:	79fb      	ldrb	r3, [r7, #7]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d09f      	beq.n	8003d56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3740      	adds	r7, #64	; 0x40
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b095      	sub	sp, #84	; 0x54
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	330c      	adds	r3, #12
 8003e2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	330c      	adds	r3, #12
 8003e46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e48:	643a      	str	r2, [r7, #64]	; 0x40
 8003e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e5      	bne.n	8003e28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3314      	adds	r3, #20
 8003e62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3314      	adds	r3, #20
 8003e7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e84:	e841 2300 	strex	r3, r2, [r1]
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e5      	bne.n	8003e5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d119      	bne.n	8003ecc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	330c      	adds	r3, #12
 8003e9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f023 0310 	bic.w	r3, r3, #16
 8003eae:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eb8:	61ba      	str	r2, [r7, #24]
 8003eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebc:	6979      	ldr	r1, [r7, #20]
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	e841 2300 	strex	r3, r2, [r1]
 8003ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1e5      	bne.n	8003e98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003eda:	bf00      	nop
 8003edc:	3754      	adds	r7, #84	; 0x54
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f7ff ff09 	bl	8003d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f06:	bf00      	nop
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b085      	sub	sp, #20
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b21      	cmp	r3, #33	; 0x21
 8003f20:	d13e      	bne.n	8003fa0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2a:	d114      	bne.n	8003f56 <UART_Transmit_IT+0x48>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d110      	bne.n	8003f56 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	1c9a      	adds	r2, r3, #2
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	621a      	str	r2, [r3, #32]
 8003f54:	e008      	b.n	8003f68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	1c59      	adds	r1, r3, #1
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6211      	str	r1, [r2, #32]
 8003f60:	781a      	ldrb	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	4619      	mov	r1, r3
 8003f76:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10f      	bne.n	8003f9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	e000      	b.n	8003fa2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fa0:	2302      	movs	r3, #2
  }
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff fe8e 	bl	8003cf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b08c      	sub	sp, #48	; 0x30
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b22      	cmp	r3, #34	; 0x22
 8003ff0:	f040 80ab 	bne.w	800414a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffc:	d117      	bne.n	800402e <UART_Receive_IT+0x50>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d113      	bne.n	800402e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004006:	2300      	movs	r3, #0
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	b29b      	uxth	r3, r3
 8004018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800401c:	b29a      	uxth	r2, r3
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	1c9a      	adds	r2, r3, #2
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	629a      	str	r2, [r3, #40]	; 0x28
 800402c:	e026      	b.n	800407c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004034:	2300      	movs	r3, #0
 8004036:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004040:	d007      	beq.n	8004052 <UART_Receive_IT+0x74>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10a      	bne.n	8004060 <UART_Receive_IT+0x82>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	b2da      	uxtb	r2, r3
 800405a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405c:	701a      	strb	r2, [r3, #0]
 800405e:	e008      	b.n	8004072 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800406c:	b2da      	uxtb	r2, r3
 800406e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004070:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004080:	b29b      	uxth	r3, r3
 8004082:	3b01      	subs	r3, #1
 8004084:	b29b      	uxth	r3, r3
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4619      	mov	r1, r3
 800408a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800408c:	2b00      	cmp	r3, #0
 800408e:	d15a      	bne.n	8004146 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0220 	bic.w	r2, r2, #32
 800409e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695a      	ldr	r2, [r3, #20]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d135      	bne.n	800413c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	330c      	adds	r3, #12
 80040dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	613b      	str	r3, [r7, #16]
   return(result);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f023 0310 	bic.w	r3, r3, #16
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	330c      	adds	r3, #12
 80040f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f6:	623a      	str	r2, [r7, #32]
 80040f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	69f9      	ldr	r1, [r7, #28]
 80040fc:	6a3a      	ldr	r2, [r7, #32]
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	61bb      	str	r3, [r7, #24]
   return(result);
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1e5      	bne.n	80040d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0310 	and.w	r3, r3, #16
 8004114:	2b10      	cmp	r3, #16
 8004116:	d10a      	bne.n	800412e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004118:	2300      	movs	r3, #0
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004132:	4619      	mov	r1, r3
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff fdf9 	bl	8003d2c <HAL_UARTEx_RxEventCallback>
 800413a:	e002      	b.n	8004142 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7ff fde1 	bl	8003d04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	e002      	b.n	800414c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	e000      	b.n	800414c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800414a:	2302      	movs	r3, #2
  }
}
 800414c:	4618      	mov	r0, r3
 800414e:	3730      	adds	r7, #48	; 0x30
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004158:	b0c0      	sub	sp, #256	; 0x100
 800415a:	af00      	add	r7, sp, #0
 800415c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800416c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004170:	68d9      	ldr	r1, [r3, #12]
 8004172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	ea40 0301 	orr.w	r3, r0, r1
 800417c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800417e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	431a      	orrs	r2, r3
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	431a      	orrs	r2, r3
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041ac:	f021 010c 	bic.w	r1, r1, #12
 80041b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041ba:	430b      	orrs	r3, r1
 80041bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ce:	6999      	ldr	r1, [r3, #24]
 80041d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	ea40 0301 	orr.w	r3, r0, r1
 80041da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4b8f      	ldr	r3, [pc, #572]	; (8004420 <UART_SetConfig+0x2cc>)
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d005      	beq.n	80041f4 <UART_SetConfig+0xa0>
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	4b8d      	ldr	r3, [pc, #564]	; (8004424 <UART_SetConfig+0x2d0>)
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d104      	bne.n	80041fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041f4:	f7fe fc74 	bl	8002ae0 <HAL_RCC_GetPCLK2Freq>
 80041f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041fc:	e003      	b.n	8004206 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041fe:	f7fe fc5b 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 8004202:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004210:	f040 810c 	bne.w	800442c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004218:	2200      	movs	r2, #0
 800421a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800421e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004222:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004226:	4622      	mov	r2, r4
 8004228:	462b      	mov	r3, r5
 800422a:	1891      	adds	r1, r2, r2
 800422c:	65b9      	str	r1, [r7, #88]	; 0x58
 800422e:	415b      	adcs	r3, r3
 8004230:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004232:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004236:	4621      	mov	r1, r4
 8004238:	eb12 0801 	adds.w	r8, r2, r1
 800423c:	4629      	mov	r1, r5
 800423e:	eb43 0901 	adc.w	r9, r3, r1
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800424e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004252:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004256:	4690      	mov	r8, r2
 8004258:	4699      	mov	r9, r3
 800425a:	4623      	mov	r3, r4
 800425c:	eb18 0303 	adds.w	r3, r8, r3
 8004260:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004264:	462b      	mov	r3, r5
 8004266:	eb49 0303 	adc.w	r3, r9, r3
 800426a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800426e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800427a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800427e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004282:	460b      	mov	r3, r1
 8004284:	18db      	adds	r3, r3, r3
 8004286:	653b      	str	r3, [r7, #80]	; 0x50
 8004288:	4613      	mov	r3, r2
 800428a:	eb42 0303 	adc.w	r3, r2, r3
 800428e:	657b      	str	r3, [r7, #84]	; 0x54
 8004290:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004294:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004298:	f7fc f802 	bl	80002a0 <__aeabi_uldivmod>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4b61      	ldr	r3, [pc, #388]	; (8004428 <UART_SetConfig+0x2d4>)
 80042a2:	fba3 2302 	umull	r2, r3, r3, r2
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	011c      	lsls	r4, r3, #4
 80042aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042bc:	4642      	mov	r2, r8
 80042be:	464b      	mov	r3, r9
 80042c0:	1891      	adds	r1, r2, r2
 80042c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80042c4:	415b      	adcs	r3, r3
 80042c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042cc:	4641      	mov	r1, r8
 80042ce:	eb12 0a01 	adds.w	sl, r2, r1
 80042d2:	4649      	mov	r1, r9
 80042d4:	eb43 0b01 	adc.w	fp, r3, r1
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	f04f 0300 	mov.w	r3, #0
 80042e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042ec:	4692      	mov	sl, r2
 80042ee:	469b      	mov	fp, r3
 80042f0:	4643      	mov	r3, r8
 80042f2:	eb1a 0303 	adds.w	r3, sl, r3
 80042f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042fa:	464b      	mov	r3, r9
 80042fc:	eb4b 0303 	adc.w	r3, fp, r3
 8004300:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004310:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004314:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004318:	460b      	mov	r3, r1
 800431a:	18db      	adds	r3, r3, r3
 800431c:	643b      	str	r3, [r7, #64]	; 0x40
 800431e:	4613      	mov	r3, r2
 8004320:	eb42 0303 	adc.w	r3, r2, r3
 8004324:	647b      	str	r3, [r7, #68]	; 0x44
 8004326:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800432a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800432e:	f7fb ffb7 	bl	80002a0 <__aeabi_uldivmod>
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4611      	mov	r1, r2
 8004338:	4b3b      	ldr	r3, [pc, #236]	; (8004428 <UART_SetConfig+0x2d4>)
 800433a:	fba3 2301 	umull	r2, r3, r3, r1
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	2264      	movs	r2, #100	; 0x64
 8004342:	fb02 f303 	mul.w	r3, r2, r3
 8004346:	1acb      	subs	r3, r1, r3
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800434e:	4b36      	ldr	r3, [pc, #216]	; (8004428 <UART_SetConfig+0x2d4>)
 8004350:	fba3 2302 	umull	r2, r3, r3, r2
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800435c:	441c      	add	r4, r3
 800435e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004362:	2200      	movs	r2, #0
 8004364:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004368:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800436c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004370:	4642      	mov	r2, r8
 8004372:	464b      	mov	r3, r9
 8004374:	1891      	adds	r1, r2, r2
 8004376:	63b9      	str	r1, [r7, #56]	; 0x38
 8004378:	415b      	adcs	r3, r3
 800437a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800437c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004380:	4641      	mov	r1, r8
 8004382:	1851      	adds	r1, r2, r1
 8004384:	6339      	str	r1, [r7, #48]	; 0x30
 8004386:	4649      	mov	r1, r9
 8004388:	414b      	adcs	r3, r1
 800438a:	637b      	str	r3, [r7, #52]	; 0x34
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004398:	4659      	mov	r1, fp
 800439a:	00cb      	lsls	r3, r1, #3
 800439c:	4651      	mov	r1, sl
 800439e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043a2:	4651      	mov	r1, sl
 80043a4:	00ca      	lsls	r2, r1, #3
 80043a6:	4610      	mov	r0, r2
 80043a8:	4619      	mov	r1, r3
 80043aa:	4603      	mov	r3, r0
 80043ac:	4642      	mov	r2, r8
 80043ae:	189b      	adds	r3, r3, r2
 80043b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043b4:	464b      	mov	r3, r9
 80043b6:	460a      	mov	r2, r1
 80043b8:	eb42 0303 	adc.w	r3, r2, r3
 80043bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043d4:	460b      	mov	r3, r1
 80043d6:	18db      	adds	r3, r3, r3
 80043d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80043da:	4613      	mov	r3, r2
 80043dc:	eb42 0303 	adc.w	r3, r2, r3
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043ea:	f7fb ff59 	bl	80002a0 <__aeabi_uldivmod>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4b0d      	ldr	r3, [pc, #52]	; (8004428 <UART_SetConfig+0x2d4>)
 80043f4:	fba3 1302 	umull	r1, r3, r3, r2
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	2164      	movs	r1, #100	; 0x64
 80043fc:	fb01 f303 	mul.w	r3, r1, r3
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	3332      	adds	r3, #50	; 0x32
 8004406:	4a08      	ldr	r2, [pc, #32]	; (8004428 <UART_SetConfig+0x2d4>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	f003 0207 	and.w	r2, r3, #7
 8004412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4422      	add	r2, r4
 800441a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800441c:	e105      	b.n	800462a <UART_SetConfig+0x4d6>
 800441e:	bf00      	nop
 8004420:	40011000 	.word	0x40011000
 8004424:	40011400 	.word	0x40011400
 8004428:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800442c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004430:	2200      	movs	r2, #0
 8004432:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004436:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800443a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800443e:	4642      	mov	r2, r8
 8004440:	464b      	mov	r3, r9
 8004442:	1891      	adds	r1, r2, r2
 8004444:	6239      	str	r1, [r7, #32]
 8004446:	415b      	adcs	r3, r3
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
 800444a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800444e:	4641      	mov	r1, r8
 8004450:	1854      	adds	r4, r2, r1
 8004452:	4649      	mov	r1, r9
 8004454:	eb43 0501 	adc.w	r5, r3, r1
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	00eb      	lsls	r3, r5, #3
 8004462:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004466:	00e2      	lsls	r2, r4, #3
 8004468:	4614      	mov	r4, r2
 800446a:	461d      	mov	r5, r3
 800446c:	4643      	mov	r3, r8
 800446e:	18e3      	adds	r3, r4, r3
 8004470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004474:	464b      	mov	r3, r9
 8004476:	eb45 0303 	adc.w	r3, r5, r3
 800447a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800448a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800449a:	4629      	mov	r1, r5
 800449c:	008b      	lsls	r3, r1, #2
 800449e:	4621      	mov	r1, r4
 80044a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044a4:	4621      	mov	r1, r4
 80044a6:	008a      	lsls	r2, r1, #2
 80044a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044ac:	f7fb fef8 	bl	80002a0 <__aeabi_uldivmod>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4b60      	ldr	r3, [pc, #384]	; (8004638 <UART_SetConfig+0x4e4>)
 80044b6:	fba3 2302 	umull	r2, r3, r3, r2
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	011c      	lsls	r4, r3, #4
 80044be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044d0:	4642      	mov	r2, r8
 80044d2:	464b      	mov	r3, r9
 80044d4:	1891      	adds	r1, r2, r2
 80044d6:	61b9      	str	r1, [r7, #24]
 80044d8:	415b      	adcs	r3, r3
 80044da:	61fb      	str	r3, [r7, #28]
 80044dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044e0:	4641      	mov	r1, r8
 80044e2:	1851      	adds	r1, r2, r1
 80044e4:	6139      	str	r1, [r7, #16]
 80044e6:	4649      	mov	r1, r9
 80044e8:	414b      	adcs	r3, r1
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044f8:	4659      	mov	r1, fp
 80044fa:	00cb      	lsls	r3, r1, #3
 80044fc:	4651      	mov	r1, sl
 80044fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004502:	4651      	mov	r1, sl
 8004504:	00ca      	lsls	r2, r1, #3
 8004506:	4610      	mov	r0, r2
 8004508:	4619      	mov	r1, r3
 800450a:	4603      	mov	r3, r0
 800450c:	4642      	mov	r2, r8
 800450e:	189b      	adds	r3, r3, r2
 8004510:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004514:	464b      	mov	r3, r9
 8004516:	460a      	mov	r2, r1
 8004518:	eb42 0303 	adc.w	r3, r2, r3
 800451c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	67bb      	str	r3, [r7, #120]	; 0x78
 800452a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004538:	4649      	mov	r1, r9
 800453a:	008b      	lsls	r3, r1, #2
 800453c:	4641      	mov	r1, r8
 800453e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004542:	4641      	mov	r1, r8
 8004544:	008a      	lsls	r2, r1, #2
 8004546:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800454a:	f7fb fea9 	bl	80002a0 <__aeabi_uldivmod>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4b39      	ldr	r3, [pc, #228]	; (8004638 <UART_SetConfig+0x4e4>)
 8004554:	fba3 1302 	umull	r1, r3, r3, r2
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	2164      	movs	r1, #100	; 0x64
 800455c:	fb01 f303 	mul.w	r3, r1, r3
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	3332      	adds	r3, #50	; 0x32
 8004566:	4a34      	ldr	r2, [pc, #208]	; (8004638 <UART_SetConfig+0x4e4>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004572:	441c      	add	r4, r3
 8004574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004578:	2200      	movs	r2, #0
 800457a:	673b      	str	r3, [r7, #112]	; 0x70
 800457c:	677a      	str	r2, [r7, #116]	; 0x74
 800457e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004582:	4642      	mov	r2, r8
 8004584:	464b      	mov	r3, r9
 8004586:	1891      	adds	r1, r2, r2
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	415b      	adcs	r3, r3
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004592:	4641      	mov	r1, r8
 8004594:	1851      	adds	r1, r2, r1
 8004596:	6039      	str	r1, [r7, #0]
 8004598:	4649      	mov	r1, r9
 800459a:	414b      	adcs	r3, r1
 800459c:	607b      	str	r3, [r7, #4]
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045aa:	4659      	mov	r1, fp
 80045ac:	00cb      	lsls	r3, r1, #3
 80045ae:	4651      	mov	r1, sl
 80045b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045b4:	4651      	mov	r1, sl
 80045b6:	00ca      	lsls	r2, r1, #3
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	4603      	mov	r3, r0
 80045be:	4642      	mov	r2, r8
 80045c0:	189b      	adds	r3, r3, r2
 80045c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80045c4:	464b      	mov	r3, r9
 80045c6:	460a      	mov	r2, r1
 80045c8:	eb42 0303 	adc.w	r3, r2, r3
 80045cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	663b      	str	r3, [r7, #96]	; 0x60
 80045d8:	667a      	str	r2, [r7, #100]	; 0x64
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045e6:	4649      	mov	r1, r9
 80045e8:	008b      	lsls	r3, r1, #2
 80045ea:	4641      	mov	r1, r8
 80045ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045f0:	4641      	mov	r1, r8
 80045f2:	008a      	lsls	r2, r1, #2
 80045f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045f8:	f7fb fe52 	bl	80002a0 <__aeabi_uldivmod>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4b0d      	ldr	r3, [pc, #52]	; (8004638 <UART_SetConfig+0x4e4>)
 8004602:	fba3 1302 	umull	r1, r3, r3, r2
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	2164      	movs	r1, #100	; 0x64
 800460a:	fb01 f303 	mul.w	r3, r1, r3
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	3332      	adds	r3, #50	; 0x32
 8004614:	4a08      	ldr	r2, [pc, #32]	; (8004638 <UART_SetConfig+0x4e4>)
 8004616:	fba2 2303 	umull	r2, r3, r2, r3
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	f003 020f 	and.w	r2, r3, #15
 8004620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4422      	add	r2, r4
 8004628:	609a      	str	r2, [r3, #8]
}
 800462a:	bf00      	nop
 800462c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004630:	46bd      	mov	sp, r7
 8004632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004636:	bf00      	nop
 8004638:	51eb851f 	.word	0x51eb851f

0800463c <__errno>:
 800463c:	4b01      	ldr	r3, [pc, #4]	; (8004644 <__errno+0x8>)
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	2000000c 	.word	0x2000000c

08004648 <__libc_init_array>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	4d0d      	ldr	r5, [pc, #52]	; (8004680 <__libc_init_array+0x38>)
 800464c:	4c0d      	ldr	r4, [pc, #52]	; (8004684 <__libc_init_array+0x3c>)
 800464e:	1b64      	subs	r4, r4, r5
 8004650:	10a4      	asrs	r4, r4, #2
 8004652:	2600      	movs	r6, #0
 8004654:	42a6      	cmp	r6, r4
 8004656:	d109      	bne.n	800466c <__libc_init_array+0x24>
 8004658:	4d0b      	ldr	r5, [pc, #44]	; (8004688 <__libc_init_array+0x40>)
 800465a:	4c0c      	ldr	r4, [pc, #48]	; (800468c <__libc_init_array+0x44>)
 800465c:	f000 fca2 	bl	8004fa4 <_init>
 8004660:	1b64      	subs	r4, r4, r5
 8004662:	10a4      	asrs	r4, r4, #2
 8004664:	2600      	movs	r6, #0
 8004666:	42a6      	cmp	r6, r4
 8004668:	d105      	bne.n	8004676 <__libc_init_array+0x2e>
 800466a:	bd70      	pop	{r4, r5, r6, pc}
 800466c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004670:	4798      	blx	r3
 8004672:	3601      	adds	r6, #1
 8004674:	e7ee      	b.n	8004654 <__libc_init_array+0xc>
 8004676:	f855 3b04 	ldr.w	r3, [r5], #4
 800467a:	4798      	blx	r3
 800467c:	3601      	adds	r6, #1
 800467e:	e7f2      	b.n	8004666 <__libc_init_array+0x1e>
 8004680:	08005038 	.word	0x08005038
 8004684:	08005038 	.word	0x08005038
 8004688:	08005038 	.word	0x08005038
 800468c:	0800503c 	.word	0x0800503c

08004690 <memset>:
 8004690:	4402      	add	r2, r0
 8004692:	4603      	mov	r3, r0
 8004694:	4293      	cmp	r3, r2
 8004696:	d100      	bne.n	800469a <memset+0xa>
 8004698:	4770      	bx	lr
 800469a:	f803 1b01 	strb.w	r1, [r3], #1
 800469e:	e7f9      	b.n	8004694 <memset+0x4>

080046a0 <sniprintf>:
 80046a0:	b40c      	push	{r2, r3}
 80046a2:	b530      	push	{r4, r5, lr}
 80046a4:	4b17      	ldr	r3, [pc, #92]	; (8004704 <sniprintf+0x64>)
 80046a6:	1e0c      	subs	r4, r1, #0
 80046a8:	681d      	ldr	r5, [r3, #0]
 80046aa:	b09d      	sub	sp, #116	; 0x74
 80046ac:	da08      	bge.n	80046c0 <sniprintf+0x20>
 80046ae:	238b      	movs	r3, #139	; 0x8b
 80046b0:	602b      	str	r3, [r5, #0]
 80046b2:	f04f 30ff 	mov.w	r0, #4294967295
 80046b6:	b01d      	add	sp, #116	; 0x74
 80046b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046bc:	b002      	add	sp, #8
 80046be:	4770      	bx	lr
 80046c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80046c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80046c8:	bf14      	ite	ne
 80046ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 80046ce:	4623      	moveq	r3, r4
 80046d0:	9304      	str	r3, [sp, #16]
 80046d2:	9307      	str	r3, [sp, #28]
 80046d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046d8:	9002      	str	r0, [sp, #8]
 80046da:	9006      	str	r0, [sp, #24]
 80046dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80046e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80046e2:	ab21      	add	r3, sp, #132	; 0x84
 80046e4:	a902      	add	r1, sp, #8
 80046e6:	4628      	mov	r0, r5
 80046e8:	9301      	str	r3, [sp, #4]
 80046ea:	f000 f869 	bl	80047c0 <_svfiprintf_r>
 80046ee:	1c43      	adds	r3, r0, #1
 80046f0:	bfbc      	itt	lt
 80046f2:	238b      	movlt	r3, #139	; 0x8b
 80046f4:	602b      	strlt	r3, [r5, #0]
 80046f6:	2c00      	cmp	r4, #0
 80046f8:	d0dd      	beq.n	80046b6 <sniprintf+0x16>
 80046fa:	9b02      	ldr	r3, [sp, #8]
 80046fc:	2200      	movs	r2, #0
 80046fe:	701a      	strb	r2, [r3, #0]
 8004700:	e7d9      	b.n	80046b6 <sniprintf+0x16>
 8004702:	bf00      	nop
 8004704:	2000000c 	.word	0x2000000c

08004708 <__ssputs_r>:
 8004708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800470c:	688e      	ldr	r6, [r1, #8]
 800470e:	429e      	cmp	r6, r3
 8004710:	4682      	mov	sl, r0
 8004712:	460c      	mov	r4, r1
 8004714:	4690      	mov	r8, r2
 8004716:	461f      	mov	r7, r3
 8004718:	d838      	bhi.n	800478c <__ssputs_r+0x84>
 800471a:	898a      	ldrh	r2, [r1, #12]
 800471c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004720:	d032      	beq.n	8004788 <__ssputs_r+0x80>
 8004722:	6825      	ldr	r5, [r4, #0]
 8004724:	6909      	ldr	r1, [r1, #16]
 8004726:	eba5 0901 	sub.w	r9, r5, r1
 800472a:	6965      	ldr	r5, [r4, #20]
 800472c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004730:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004734:	3301      	adds	r3, #1
 8004736:	444b      	add	r3, r9
 8004738:	106d      	asrs	r5, r5, #1
 800473a:	429d      	cmp	r5, r3
 800473c:	bf38      	it	cc
 800473e:	461d      	movcc	r5, r3
 8004740:	0553      	lsls	r3, r2, #21
 8004742:	d531      	bpl.n	80047a8 <__ssputs_r+0xa0>
 8004744:	4629      	mov	r1, r5
 8004746:	f000 fb63 	bl	8004e10 <_malloc_r>
 800474a:	4606      	mov	r6, r0
 800474c:	b950      	cbnz	r0, 8004764 <__ssputs_r+0x5c>
 800474e:	230c      	movs	r3, #12
 8004750:	f8ca 3000 	str.w	r3, [sl]
 8004754:	89a3      	ldrh	r3, [r4, #12]
 8004756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800475a:	81a3      	strh	r3, [r4, #12]
 800475c:	f04f 30ff 	mov.w	r0, #4294967295
 8004760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004764:	6921      	ldr	r1, [r4, #16]
 8004766:	464a      	mov	r2, r9
 8004768:	f000 fabe 	bl	8004ce8 <memcpy>
 800476c:	89a3      	ldrh	r3, [r4, #12]
 800476e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004776:	81a3      	strh	r3, [r4, #12]
 8004778:	6126      	str	r6, [r4, #16]
 800477a:	6165      	str	r5, [r4, #20]
 800477c:	444e      	add	r6, r9
 800477e:	eba5 0509 	sub.w	r5, r5, r9
 8004782:	6026      	str	r6, [r4, #0]
 8004784:	60a5      	str	r5, [r4, #8]
 8004786:	463e      	mov	r6, r7
 8004788:	42be      	cmp	r6, r7
 800478a:	d900      	bls.n	800478e <__ssputs_r+0x86>
 800478c:	463e      	mov	r6, r7
 800478e:	6820      	ldr	r0, [r4, #0]
 8004790:	4632      	mov	r2, r6
 8004792:	4641      	mov	r1, r8
 8004794:	f000 fab6 	bl	8004d04 <memmove>
 8004798:	68a3      	ldr	r3, [r4, #8]
 800479a:	1b9b      	subs	r3, r3, r6
 800479c:	60a3      	str	r3, [r4, #8]
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	4433      	add	r3, r6
 80047a2:	6023      	str	r3, [r4, #0]
 80047a4:	2000      	movs	r0, #0
 80047a6:	e7db      	b.n	8004760 <__ssputs_r+0x58>
 80047a8:	462a      	mov	r2, r5
 80047aa:	f000 fba5 	bl	8004ef8 <_realloc_r>
 80047ae:	4606      	mov	r6, r0
 80047b0:	2800      	cmp	r0, #0
 80047b2:	d1e1      	bne.n	8004778 <__ssputs_r+0x70>
 80047b4:	6921      	ldr	r1, [r4, #16]
 80047b6:	4650      	mov	r0, sl
 80047b8:	f000 fabe 	bl	8004d38 <_free_r>
 80047bc:	e7c7      	b.n	800474e <__ssputs_r+0x46>
	...

080047c0 <_svfiprintf_r>:
 80047c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c4:	4698      	mov	r8, r3
 80047c6:	898b      	ldrh	r3, [r1, #12]
 80047c8:	061b      	lsls	r3, r3, #24
 80047ca:	b09d      	sub	sp, #116	; 0x74
 80047cc:	4607      	mov	r7, r0
 80047ce:	460d      	mov	r5, r1
 80047d0:	4614      	mov	r4, r2
 80047d2:	d50e      	bpl.n	80047f2 <_svfiprintf_r+0x32>
 80047d4:	690b      	ldr	r3, [r1, #16]
 80047d6:	b963      	cbnz	r3, 80047f2 <_svfiprintf_r+0x32>
 80047d8:	2140      	movs	r1, #64	; 0x40
 80047da:	f000 fb19 	bl	8004e10 <_malloc_r>
 80047de:	6028      	str	r0, [r5, #0]
 80047e0:	6128      	str	r0, [r5, #16]
 80047e2:	b920      	cbnz	r0, 80047ee <_svfiprintf_r+0x2e>
 80047e4:	230c      	movs	r3, #12
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ec:	e0d1      	b.n	8004992 <_svfiprintf_r+0x1d2>
 80047ee:	2340      	movs	r3, #64	; 0x40
 80047f0:	616b      	str	r3, [r5, #20]
 80047f2:	2300      	movs	r3, #0
 80047f4:	9309      	str	r3, [sp, #36]	; 0x24
 80047f6:	2320      	movs	r3, #32
 80047f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004800:	2330      	movs	r3, #48	; 0x30
 8004802:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80049ac <_svfiprintf_r+0x1ec>
 8004806:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800480a:	f04f 0901 	mov.w	r9, #1
 800480e:	4623      	mov	r3, r4
 8004810:	469a      	mov	sl, r3
 8004812:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004816:	b10a      	cbz	r2, 800481c <_svfiprintf_r+0x5c>
 8004818:	2a25      	cmp	r2, #37	; 0x25
 800481a:	d1f9      	bne.n	8004810 <_svfiprintf_r+0x50>
 800481c:	ebba 0b04 	subs.w	fp, sl, r4
 8004820:	d00b      	beq.n	800483a <_svfiprintf_r+0x7a>
 8004822:	465b      	mov	r3, fp
 8004824:	4622      	mov	r2, r4
 8004826:	4629      	mov	r1, r5
 8004828:	4638      	mov	r0, r7
 800482a:	f7ff ff6d 	bl	8004708 <__ssputs_r>
 800482e:	3001      	adds	r0, #1
 8004830:	f000 80aa 	beq.w	8004988 <_svfiprintf_r+0x1c8>
 8004834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004836:	445a      	add	r2, fp
 8004838:	9209      	str	r2, [sp, #36]	; 0x24
 800483a:	f89a 3000 	ldrb.w	r3, [sl]
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 80a2 	beq.w	8004988 <_svfiprintf_r+0x1c8>
 8004844:	2300      	movs	r3, #0
 8004846:	f04f 32ff 	mov.w	r2, #4294967295
 800484a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800484e:	f10a 0a01 	add.w	sl, sl, #1
 8004852:	9304      	str	r3, [sp, #16]
 8004854:	9307      	str	r3, [sp, #28]
 8004856:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800485a:	931a      	str	r3, [sp, #104]	; 0x68
 800485c:	4654      	mov	r4, sl
 800485e:	2205      	movs	r2, #5
 8004860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004864:	4851      	ldr	r0, [pc, #324]	; (80049ac <_svfiprintf_r+0x1ec>)
 8004866:	f7fb fccb 	bl	8000200 <memchr>
 800486a:	9a04      	ldr	r2, [sp, #16]
 800486c:	b9d8      	cbnz	r0, 80048a6 <_svfiprintf_r+0xe6>
 800486e:	06d0      	lsls	r0, r2, #27
 8004870:	bf44      	itt	mi
 8004872:	2320      	movmi	r3, #32
 8004874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004878:	0711      	lsls	r1, r2, #28
 800487a:	bf44      	itt	mi
 800487c:	232b      	movmi	r3, #43	; 0x2b
 800487e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004882:	f89a 3000 	ldrb.w	r3, [sl]
 8004886:	2b2a      	cmp	r3, #42	; 0x2a
 8004888:	d015      	beq.n	80048b6 <_svfiprintf_r+0xf6>
 800488a:	9a07      	ldr	r2, [sp, #28]
 800488c:	4654      	mov	r4, sl
 800488e:	2000      	movs	r0, #0
 8004890:	f04f 0c0a 	mov.w	ip, #10
 8004894:	4621      	mov	r1, r4
 8004896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800489a:	3b30      	subs	r3, #48	; 0x30
 800489c:	2b09      	cmp	r3, #9
 800489e:	d94e      	bls.n	800493e <_svfiprintf_r+0x17e>
 80048a0:	b1b0      	cbz	r0, 80048d0 <_svfiprintf_r+0x110>
 80048a2:	9207      	str	r2, [sp, #28]
 80048a4:	e014      	b.n	80048d0 <_svfiprintf_r+0x110>
 80048a6:	eba0 0308 	sub.w	r3, r0, r8
 80048aa:	fa09 f303 	lsl.w	r3, r9, r3
 80048ae:	4313      	orrs	r3, r2
 80048b0:	9304      	str	r3, [sp, #16]
 80048b2:	46a2      	mov	sl, r4
 80048b4:	e7d2      	b.n	800485c <_svfiprintf_r+0x9c>
 80048b6:	9b03      	ldr	r3, [sp, #12]
 80048b8:	1d19      	adds	r1, r3, #4
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	9103      	str	r1, [sp, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bfbb      	ittet	lt
 80048c2:	425b      	neglt	r3, r3
 80048c4:	f042 0202 	orrlt.w	r2, r2, #2
 80048c8:	9307      	strge	r3, [sp, #28]
 80048ca:	9307      	strlt	r3, [sp, #28]
 80048cc:	bfb8      	it	lt
 80048ce:	9204      	strlt	r2, [sp, #16]
 80048d0:	7823      	ldrb	r3, [r4, #0]
 80048d2:	2b2e      	cmp	r3, #46	; 0x2e
 80048d4:	d10c      	bne.n	80048f0 <_svfiprintf_r+0x130>
 80048d6:	7863      	ldrb	r3, [r4, #1]
 80048d8:	2b2a      	cmp	r3, #42	; 0x2a
 80048da:	d135      	bne.n	8004948 <_svfiprintf_r+0x188>
 80048dc:	9b03      	ldr	r3, [sp, #12]
 80048de:	1d1a      	adds	r2, r3, #4
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	9203      	str	r2, [sp, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	bfb8      	it	lt
 80048e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80048ec:	3402      	adds	r4, #2
 80048ee:	9305      	str	r3, [sp, #20]
 80048f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80049bc <_svfiprintf_r+0x1fc>
 80048f4:	7821      	ldrb	r1, [r4, #0]
 80048f6:	2203      	movs	r2, #3
 80048f8:	4650      	mov	r0, sl
 80048fa:	f7fb fc81 	bl	8000200 <memchr>
 80048fe:	b140      	cbz	r0, 8004912 <_svfiprintf_r+0x152>
 8004900:	2340      	movs	r3, #64	; 0x40
 8004902:	eba0 000a 	sub.w	r0, r0, sl
 8004906:	fa03 f000 	lsl.w	r0, r3, r0
 800490a:	9b04      	ldr	r3, [sp, #16]
 800490c:	4303      	orrs	r3, r0
 800490e:	3401      	adds	r4, #1
 8004910:	9304      	str	r3, [sp, #16]
 8004912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004916:	4826      	ldr	r0, [pc, #152]	; (80049b0 <_svfiprintf_r+0x1f0>)
 8004918:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800491c:	2206      	movs	r2, #6
 800491e:	f7fb fc6f 	bl	8000200 <memchr>
 8004922:	2800      	cmp	r0, #0
 8004924:	d038      	beq.n	8004998 <_svfiprintf_r+0x1d8>
 8004926:	4b23      	ldr	r3, [pc, #140]	; (80049b4 <_svfiprintf_r+0x1f4>)
 8004928:	bb1b      	cbnz	r3, 8004972 <_svfiprintf_r+0x1b2>
 800492a:	9b03      	ldr	r3, [sp, #12]
 800492c:	3307      	adds	r3, #7
 800492e:	f023 0307 	bic.w	r3, r3, #7
 8004932:	3308      	adds	r3, #8
 8004934:	9303      	str	r3, [sp, #12]
 8004936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004938:	4433      	add	r3, r6
 800493a:	9309      	str	r3, [sp, #36]	; 0x24
 800493c:	e767      	b.n	800480e <_svfiprintf_r+0x4e>
 800493e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004942:	460c      	mov	r4, r1
 8004944:	2001      	movs	r0, #1
 8004946:	e7a5      	b.n	8004894 <_svfiprintf_r+0xd4>
 8004948:	2300      	movs	r3, #0
 800494a:	3401      	adds	r4, #1
 800494c:	9305      	str	r3, [sp, #20]
 800494e:	4619      	mov	r1, r3
 8004950:	f04f 0c0a 	mov.w	ip, #10
 8004954:	4620      	mov	r0, r4
 8004956:	f810 2b01 	ldrb.w	r2, [r0], #1
 800495a:	3a30      	subs	r2, #48	; 0x30
 800495c:	2a09      	cmp	r2, #9
 800495e:	d903      	bls.n	8004968 <_svfiprintf_r+0x1a8>
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0c5      	beq.n	80048f0 <_svfiprintf_r+0x130>
 8004964:	9105      	str	r1, [sp, #20]
 8004966:	e7c3      	b.n	80048f0 <_svfiprintf_r+0x130>
 8004968:	fb0c 2101 	mla	r1, ip, r1, r2
 800496c:	4604      	mov	r4, r0
 800496e:	2301      	movs	r3, #1
 8004970:	e7f0      	b.n	8004954 <_svfiprintf_r+0x194>
 8004972:	ab03      	add	r3, sp, #12
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	462a      	mov	r2, r5
 8004978:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <_svfiprintf_r+0x1f8>)
 800497a:	a904      	add	r1, sp, #16
 800497c:	4638      	mov	r0, r7
 800497e:	f3af 8000 	nop.w
 8004982:	1c42      	adds	r2, r0, #1
 8004984:	4606      	mov	r6, r0
 8004986:	d1d6      	bne.n	8004936 <_svfiprintf_r+0x176>
 8004988:	89ab      	ldrh	r3, [r5, #12]
 800498a:	065b      	lsls	r3, r3, #25
 800498c:	f53f af2c 	bmi.w	80047e8 <_svfiprintf_r+0x28>
 8004990:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004992:	b01d      	add	sp, #116	; 0x74
 8004994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004998:	ab03      	add	r3, sp, #12
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	462a      	mov	r2, r5
 800499e:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <_svfiprintf_r+0x1f8>)
 80049a0:	a904      	add	r1, sp, #16
 80049a2:	4638      	mov	r0, r7
 80049a4:	f000 f87a 	bl	8004a9c <_printf_i>
 80049a8:	e7eb      	b.n	8004982 <_svfiprintf_r+0x1c2>
 80049aa:	bf00      	nop
 80049ac:	08004ffc 	.word	0x08004ffc
 80049b0:	08005006 	.word	0x08005006
 80049b4:	00000000 	.word	0x00000000
 80049b8:	08004709 	.word	0x08004709
 80049bc:	08005002 	.word	0x08005002

080049c0 <_printf_common>:
 80049c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049c4:	4616      	mov	r6, r2
 80049c6:	4699      	mov	r9, r3
 80049c8:	688a      	ldr	r2, [r1, #8]
 80049ca:	690b      	ldr	r3, [r1, #16]
 80049cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049d0:	4293      	cmp	r3, r2
 80049d2:	bfb8      	it	lt
 80049d4:	4613      	movlt	r3, r2
 80049d6:	6033      	str	r3, [r6, #0]
 80049d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049dc:	4607      	mov	r7, r0
 80049de:	460c      	mov	r4, r1
 80049e0:	b10a      	cbz	r2, 80049e6 <_printf_common+0x26>
 80049e2:	3301      	adds	r3, #1
 80049e4:	6033      	str	r3, [r6, #0]
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	0699      	lsls	r1, r3, #26
 80049ea:	bf42      	ittt	mi
 80049ec:	6833      	ldrmi	r3, [r6, #0]
 80049ee:	3302      	addmi	r3, #2
 80049f0:	6033      	strmi	r3, [r6, #0]
 80049f2:	6825      	ldr	r5, [r4, #0]
 80049f4:	f015 0506 	ands.w	r5, r5, #6
 80049f8:	d106      	bne.n	8004a08 <_printf_common+0x48>
 80049fa:	f104 0a19 	add.w	sl, r4, #25
 80049fe:	68e3      	ldr	r3, [r4, #12]
 8004a00:	6832      	ldr	r2, [r6, #0]
 8004a02:	1a9b      	subs	r3, r3, r2
 8004a04:	42ab      	cmp	r3, r5
 8004a06:	dc26      	bgt.n	8004a56 <_printf_common+0x96>
 8004a08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a0c:	1e13      	subs	r3, r2, #0
 8004a0e:	6822      	ldr	r2, [r4, #0]
 8004a10:	bf18      	it	ne
 8004a12:	2301      	movne	r3, #1
 8004a14:	0692      	lsls	r2, r2, #26
 8004a16:	d42b      	bmi.n	8004a70 <_printf_common+0xb0>
 8004a18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a1c:	4649      	mov	r1, r9
 8004a1e:	4638      	mov	r0, r7
 8004a20:	47c0      	blx	r8
 8004a22:	3001      	adds	r0, #1
 8004a24:	d01e      	beq.n	8004a64 <_printf_common+0xa4>
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	68e5      	ldr	r5, [r4, #12]
 8004a2a:	6832      	ldr	r2, [r6, #0]
 8004a2c:	f003 0306 	and.w	r3, r3, #6
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	bf08      	it	eq
 8004a34:	1aad      	subeq	r5, r5, r2
 8004a36:	68a3      	ldr	r3, [r4, #8]
 8004a38:	6922      	ldr	r2, [r4, #16]
 8004a3a:	bf0c      	ite	eq
 8004a3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a40:	2500      	movne	r5, #0
 8004a42:	4293      	cmp	r3, r2
 8004a44:	bfc4      	itt	gt
 8004a46:	1a9b      	subgt	r3, r3, r2
 8004a48:	18ed      	addgt	r5, r5, r3
 8004a4a:	2600      	movs	r6, #0
 8004a4c:	341a      	adds	r4, #26
 8004a4e:	42b5      	cmp	r5, r6
 8004a50:	d11a      	bne.n	8004a88 <_printf_common+0xc8>
 8004a52:	2000      	movs	r0, #0
 8004a54:	e008      	b.n	8004a68 <_printf_common+0xa8>
 8004a56:	2301      	movs	r3, #1
 8004a58:	4652      	mov	r2, sl
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	4638      	mov	r0, r7
 8004a5e:	47c0      	blx	r8
 8004a60:	3001      	adds	r0, #1
 8004a62:	d103      	bne.n	8004a6c <_printf_common+0xac>
 8004a64:	f04f 30ff 	mov.w	r0, #4294967295
 8004a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a6c:	3501      	adds	r5, #1
 8004a6e:	e7c6      	b.n	80049fe <_printf_common+0x3e>
 8004a70:	18e1      	adds	r1, r4, r3
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	2030      	movs	r0, #48	; 0x30
 8004a76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a7a:	4422      	add	r2, r4
 8004a7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a84:	3302      	adds	r3, #2
 8004a86:	e7c7      	b.n	8004a18 <_printf_common+0x58>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	4622      	mov	r2, r4
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	4638      	mov	r0, r7
 8004a90:	47c0      	blx	r8
 8004a92:	3001      	adds	r0, #1
 8004a94:	d0e6      	beq.n	8004a64 <_printf_common+0xa4>
 8004a96:	3601      	adds	r6, #1
 8004a98:	e7d9      	b.n	8004a4e <_printf_common+0x8e>
	...

08004a9c <_printf_i>:
 8004a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa0:	7e0f      	ldrb	r7, [r1, #24]
 8004aa2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004aa4:	2f78      	cmp	r7, #120	; 0x78
 8004aa6:	4691      	mov	r9, r2
 8004aa8:	4680      	mov	r8, r0
 8004aaa:	460c      	mov	r4, r1
 8004aac:	469a      	mov	sl, r3
 8004aae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ab2:	d807      	bhi.n	8004ac4 <_printf_i+0x28>
 8004ab4:	2f62      	cmp	r7, #98	; 0x62
 8004ab6:	d80a      	bhi.n	8004ace <_printf_i+0x32>
 8004ab8:	2f00      	cmp	r7, #0
 8004aba:	f000 80d8 	beq.w	8004c6e <_printf_i+0x1d2>
 8004abe:	2f58      	cmp	r7, #88	; 0x58
 8004ac0:	f000 80a3 	beq.w	8004c0a <_printf_i+0x16e>
 8004ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ac8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004acc:	e03a      	b.n	8004b44 <_printf_i+0xa8>
 8004ace:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ad2:	2b15      	cmp	r3, #21
 8004ad4:	d8f6      	bhi.n	8004ac4 <_printf_i+0x28>
 8004ad6:	a101      	add	r1, pc, #4	; (adr r1, 8004adc <_printf_i+0x40>)
 8004ad8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004adc:	08004b35 	.word	0x08004b35
 8004ae0:	08004b49 	.word	0x08004b49
 8004ae4:	08004ac5 	.word	0x08004ac5
 8004ae8:	08004ac5 	.word	0x08004ac5
 8004aec:	08004ac5 	.word	0x08004ac5
 8004af0:	08004ac5 	.word	0x08004ac5
 8004af4:	08004b49 	.word	0x08004b49
 8004af8:	08004ac5 	.word	0x08004ac5
 8004afc:	08004ac5 	.word	0x08004ac5
 8004b00:	08004ac5 	.word	0x08004ac5
 8004b04:	08004ac5 	.word	0x08004ac5
 8004b08:	08004c55 	.word	0x08004c55
 8004b0c:	08004b79 	.word	0x08004b79
 8004b10:	08004c37 	.word	0x08004c37
 8004b14:	08004ac5 	.word	0x08004ac5
 8004b18:	08004ac5 	.word	0x08004ac5
 8004b1c:	08004c77 	.word	0x08004c77
 8004b20:	08004ac5 	.word	0x08004ac5
 8004b24:	08004b79 	.word	0x08004b79
 8004b28:	08004ac5 	.word	0x08004ac5
 8004b2c:	08004ac5 	.word	0x08004ac5
 8004b30:	08004c3f 	.word	0x08004c3f
 8004b34:	682b      	ldr	r3, [r5, #0]
 8004b36:	1d1a      	adds	r2, r3, #4
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	602a      	str	r2, [r5, #0]
 8004b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0a3      	b.n	8004c90 <_printf_i+0x1f4>
 8004b48:	6820      	ldr	r0, [r4, #0]
 8004b4a:	6829      	ldr	r1, [r5, #0]
 8004b4c:	0606      	lsls	r6, r0, #24
 8004b4e:	f101 0304 	add.w	r3, r1, #4
 8004b52:	d50a      	bpl.n	8004b6a <_printf_i+0xce>
 8004b54:	680e      	ldr	r6, [r1, #0]
 8004b56:	602b      	str	r3, [r5, #0]
 8004b58:	2e00      	cmp	r6, #0
 8004b5a:	da03      	bge.n	8004b64 <_printf_i+0xc8>
 8004b5c:	232d      	movs	r3, #45	; 0x2d
 8004b5e:	4276      	negs	r6, r6
 8004b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b64:	485e      	ldr	r0, [pc, #376]	; (8004ce0 <_printf_i+0x244>)
 8004b66:	230a      	movs	r3, #10
 8004b68:	e019      	b.n	8004b9e <_printf_i+0x102>
 8004b6a:	680e      	ldr	r6, [r1, #0]
 8004b6c:	602b      	str	r3, [r5, #0]
 8004b6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b72:	bf18      	it	ne
 8004b74:	b236      	sxthne	r6, r6
 8004b76:	e7ef      	b.n	8004b58 <_printf_i+0xbc>
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	6820      	ldr	r0, [r4, #0]
 8004b7c:	1d19      	adds	r1, r3, #4
 8004b7e:	6029      	str	r1, [r5, #0]
 8004b80:	0601      	lsls	r1, r0, #24
 8004b82:	d501      	bpl.n	8004b88 <_printf_i+0xec>
 8004b84:	681e      	ldr	r6, [r3, #0]
 8004b86:	e002      	b.n	8004b8e <_printf_i+0xf2>
 8004b88:	0646      	lsls	r6, r0, #25
 8004b8a:	d5fb      	bpl.n	8004b84 <_printf_i+0xe8>
 8004b8c:	881e      	ldrh	r6, [r3, #0]
 8004b8e:	4854      	ldr	r0, [pc, #336]	; (8004ce0 <_printf_i+0x244>)
 8004b90:	2f6f      	cmp	r7, #111	; 0x6f
 8004b92:	bf0c      	ite	eq
 8004b94:	2308      	moveq	r3, #8
 8004b96:	230a      	movne	r3, #10
 8004b98:	2100      	movs	r1, #0
 8004b9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b9e:	6865      	ldr	r5, [r4, #4]
 8004ba0:	60a5      	str	r5, [r4, #8]
 8004ba2:	2d00      	cmp	r5, #0
 8004ba4:	bfa2      	ittt	ge
 8004ba6:	6821      	ldrge	r1, [r4, #0]
 8004ba8:	f021 0104 	bicge.w	r1, r1, #4
 8004bac:	6021      	strge	r1, [r4, #0]
 8004bae:	b90e      	cbnz	r6, 8004bb4 <_printf_i+0x118>
 8004bb0:	2d00      	cmp	r5, #0
 8004bb2:	d04d      	beq.n	8004c50 <_printf_i+0x1b4>
 8004bb4:	4615      	mov	r5, r2
 8004bb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bba:	fb03 6711 	mls	r7, r3, r1, r6
 8004bbe:	5dc7      	ldrb	r7, [r0, r7]
 8004bc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004bc4:	4637      	mov	r7, r6
 8004bc6:	42bb      	cmp	r3, r7
 8004bc8:	460e      	mov	r6, r1
 8004bca:	d9f4      	bls.n	8004bb6 <_printf_i+0x11a>
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d10b      	bne.n	8004be8 <_printf_i+0x14c>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	07de      	lsls	r6, r3, #31
 8004bd4:	d508      	bpl.n	8004be8 <_printf_i+0x14c>
 8004bd6:	6923      	ldr	r3, [r4, #16]
 8004bd8:	6861      	ldr	r1, [r4, #4]
 8004bda:	4299      	cmp	r1, r3
 8004bdc:	bfde      	ittt	le
 8004bde:	2330      	movle	r3, #48	; 0x30
 8004be0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004be4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004be8:	1b52      	subs	r2, r2, r5
 8004bea:	6122      	str	r2, [r4, #16]
 8004bec:	f8cd a000 	str.w	sl, [sp]
 8004bf0:	464b      	mov	r3, r9
 8004bf2:	aa03      	add	r2, sp, #12
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	4640      	mov	r0, r8
 8004bf8:	f7ff fee2 	bl	80049c0 <_printf_common>
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	d14c      	bne.n	8004c9a <_printf_i+0x1fe>
 8004c00:	f04f 30ff 	mov.w	r0, #4294967295
 8004c04:	b004      	add	sp, #16
 8004c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c0a:	4835      	ldr	r0, [pc, #212]	; (8004ce0 <_printf_i+0x244>)
 8004c0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c10:	6829      	ldr	r1, [r5, #0]
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c18:	6029      	str	r1, [r5, #0]
 8004c1a:	061d      	lsls	r5, r3, #24
 8004c1c:	d514      	bpl.n	8004c48 <_printf_i+0x1ac>
 8004c1e:	07df      	lsls	r7, r3, #31
 8004c20:	bf44      	itt	mi
 8004c22:	f043 0320 	orrmi.w	r3, r3, #32
 8004c26:	6023      	strmi	r3, [r4, #0]
 8004c28:	b91e      	cbnz	r6, 8004c32 <_printf_i+0x196>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	f023 0320 	bic.w	r3, r3, #32
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	2310      	movs	r3, #16
 8004c34:	e7b0      	b.n	8004b98 <_printf_i+0xfc>
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	f043 0320 	orr.w	r3, r3, #32
 8004c3c:	6023      	str	r3, [r4, #0]
 8004c3e:	2378      	movs	r3, #120	; 0x78
 8004c40:	4828      	ldr	r0, [pc, #160]	; (8004ce4 <_printf_i+0x248>)
 8004c42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c46:	e7e3      	b.n	8004c10 <_printf_i+0x174>
 8004c48:	0659      	lsls	r1, r3, #25
 8004c4a:	bf48      	it	mi
 8004c4c:	b2b6      	uxthmi	r6, r6
 8004c4e:	e7e6      	b.n	8004c1e <_printf_i+0x182>
 8004c50:	4615      	mov	r5, r2
 8004c52:	e7bb      	b.n	8004bcc <_printf_i+0x130>
 8004c54:	682b      	ldr	r3, [r5, #0]
 8004c56:	6826      	ldr	r6, [r4, #0]
 8004c58:	6961      	ldr	r1, [r4, #20]
 8004c5a:	1d18      	adds	r0, r3, #4
 8004c5c:	6028      	str	r0, [r5, #0]
 8004c5e:	0635      	lsls	r5, r6, #24
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	d501      	bpl.n	8004c68 <_printf_i+0x1cc>
 8004c64:	6019      	str	r1, [r3, #0]
 8004c66:	e002      	b.n	8004c6e <_printf_i+0x1d2>
 8004c68:	0670      	lsls	r0, r6, #25
 8004c6a:	d5fb      	bpl.n	8004c64 <_printf_i+0x1c8>
 8004c6c:	8019      	strh	r1, [r3, #0]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	6123      	str	r3, [r4, #16]
 8004c72:	4615      	mov	r5, r2
 8004c74:	e7ba      	b.n	8004bec <_printf_i+0x150>
 8004c76:	682b      	ldr	r3, [r5, #0]
 8004c78:	1d1a      	adds	r2, r3, #4
 8004c7a:	602a      	str	r2, [r5, #0]
 8004c7c:	681d      	ldr	r5, [r3, #0]
 8004c7e:	6862      	ldr	r2, [r4, #4]
 8004c80:	2100      	movs	r1, #0
 8004c82:	4628      	mov	r0, r5
 8004c84:	f7fb fabc 	bl	8000200 <memchr>
 8004c88:	b108      	cbz	r0, 8004c8e <_printf_i+0x1f2>
 8004c8a:	1b40      	subs	r0, r0, r5
 8004c8c:	6060      	str	r0, [r4, #4]
 8004c8e:	6863      	ldr	r3, [r4, #4]
 8004c90:	6123      	str	r3, [r4, #16]
 8004c92:	2300      	movs	r3, #0
 8004c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c98:	e7a8      	b.n	8004bec <_printf_i+0x150>
 8004c9a:	6923      	ldr	r3, [r4, #16]
 8004c9c:	462a      	mov	r2, r5
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	4640      	mov	r0, r8
 8004ca2:	47d0      	blx	sl
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	d0ab      	beq.n	8004c00 <_printf_i+0x164>
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	079b      	lsls	r3, r3, #30
 8004cac:	d413      	bmi.n	8004cd6 <_printf_i+0x23a>
 8004cae:	68e0      	ldr	r0, [r4, #12]
 8004cb0:	9b03      	ldr	r3, [sp, #12]
 8004cb2:	4298      	cmp	r0, r3
 8004cb4:	bfb8      	it	lt
 8004cb6:	4618      	movlt	r0, r3
 8004cb8:	e7a4      	b.n	8004c04 <_printf_i+0x168>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	4632      	mov	r2, r6
 8004cbe:	4649      	mov	r1, r9
 8004cc0:	4640      	mov	r0, r8
 8004cc2:	47d0      	blx	sl
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	d09b      	beq.n	8004c00 <_printf_i+0x164>
 8004cc8:	3501      	adds	r5, #1
 8004cca:	68e3      	ldr	r3, [r4, #12]
 8004ccc:	9903      	ldr	r1, [sp, #12]
 8004cce:	1a5b      	subs	r3, r3, r1
 8004cd0:	42ab      	cmp	r3, r5
 8004cd2:	dcf2      	bgt.n	8004cba <_printf_i+0x21e>
 8004cd4:	e7eb      	b.n	8004cae <_printf_i+0x212>
 8004cd6:	2500      	movs	r5, #0
 8004cd8:	f104 0619 	add.w	r6, r4, #25
 8004cdc:	e7f5      	b.n	8004cca <_printf_i+0x22e>
 8004cde:	bf00      	nop
 8004ce0:	0800500d 	.word	0x0800500d
 8004ce4:	0800501e 	.word	0x0800501e

08004ce8 <memcpy>:
 8004ce8:	440a      	add	r2, r1
 8004cea:	4291      	cmp	r1, r2
 8004cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cf0:	d100      	bne.n	8004cf4 <memcpy+0xc>
 8004cf2:	4770      	bx	lr
 8004cf4:	b510      	push	{r4, lr}
 8004cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cfe:	4291      	cmp	r1, r2
 8004d00:	d1f9      	bne.n	8004cf6 <memcpy+0xe>
 8004d02:	bd10      	pop	{r4, pc}

08004d04 <memmove>:
 8004d04:	4288      	cmp	r0, r1
 8004d06:	b510      	push	{r4, lr}
 8004d08:	eb01 0402 	add.w	r4, r1, r2
 8004d0c:	d902      	bls.n	8004d14 <memmove+0x10>
 8004d0e:	4284      	cmp	r4, r0
 8004d10:	4623      	mov	r3, r4
 8004d12:	d807      	bhi.n	8004d24 <memmove+0x20>
 8004d14:	1e43      	subs	r3, r0, #1
 8004d16:	42a1      	cmp	r1, r4
 8004d18:	d008      	beq.n	8004d2c <memmove+0x28>
 8004d1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d22:	e7f8      	b.n	8004d16 <memmove+0x12>
 8004d24:	4402      	add	r2, r0
 8004d26:	4601      	mov	r1, r0
 8004d28:	428a      	cmp	r2, r1
 8004d2a:	d100      	bne.n	8004d2e <memmove+0x2a>
 8004d2c:	bd10      	pop	{r4, pc}
 8004d2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d36:	e7f7      	b.n	8004d28 <memmove+0x24>

08004d38 <_free_r>:
 8004d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d3a:	2900      	cmp	r1, #0
 8004d3c:	d044      	beq.n	8004dc8 <_free_r+0x90>
 8004d3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d42:	9001      	str	r0, [sp, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f1a1 0404 	sub.w	r4, r1, #4
 8004d4a:	bfb8      	it	lt
 8004d4c:	18e4      	addlt	r4, r4, r3
 8004d4e:	f000 f913 	bl	8004f78 <__malloc_lock>
 8004d52:	4a1e      	ldr	r2, [pc, #120]	; (8004dcc <_free_r+0x94>)
 8004d54:	9801      	ldr	r0, [sp, #4]
 8004d56:	6813      	ldr	r3, [r2, #0]
 8004d58:	b933      	cbnz	r3, 8004d68 <_free_r+0x30>
 8004d5a:	6063      	str	r3, [r4, #4]
 8004d5c:	6014      	str	r4, [r2, #0]
 8004d5e:	b003      	add	sp, #12
 8004d60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d64:	f000 b90e 	b.w	8004f84 <__malloc_unlock>
 8004d68:	42a3      	cmp	r3, r4
 8004d6a:	d908      	bls.n	8004d7e <_free_r+0x46>
 8004d6c:	6825      	ldr	r5, [r4, #0]
 8004d6e:	1961      	adds	r1, r4, r5
 8004d70:	428b      	cmp	r3, r1
 8004d72:	bf01      	itttt	eq
 8004d74:	6819      	ldreq	r1, [r3, #0]
 8004d76:	685b      	ldreq	r3, [r3, #4]
 8004d78:	1949      	addeq	r1, r1, r5
 8004d7a:	6021      	streq	r1, [r4, #0]
 8004d7c:	e7ed      	b.n	8004d5a <_free_r+0x22>
 8004d7e:	461a      	mov	r2, r3
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	b10b      	cbz	r3, 8004d88 <_free_r+0x50>
 8004d84:	42a3      	cmp	r3, r4
 8004d86:	d9fa      	bls.n	8004d7e <_free_r+0x46>
 8004d88:	6811      	ldr	r1, [r2, #0]
 8004d8a:	1855      	adds	r5, r2, r1
 8004d8c:	42a5      	cmp	r5, r4
 8004d8e:	d10b      	bne.n	8004da8 <_free_r+0x70>
 8004d90:	6824      	ldr	r4, [r4, #0]
 8004d92:	4421      	add	r1, r4
 8004d94:	1854      	adds	r4, r2, r1
 8004d96:	42a3      	cmp	r3, r4
 8004d98:	6011      	str	r1, [r2, #0]
 8004d9a:	d1e0      	bne.n	8004d5e <_free_r+0x26>
 8004d9c:	681c      	ldr	r4, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	6053      	str	r3, [r2, #4]
 8004da2:	4421      	add	r1, r4
 8004da4:	6011      	str	r1, [r2, #0]
 8004da6:	e7da      	b.n	8004d5e <_free_r+0x26>
 8004da8:	d902      	bls.n	8004db0 <_free_r+0x78>
 8004daa:	230c      	movs	r3, #12
 8004dac:	6003      	str	r3, [r0, #0]
 8004dae:	e7d6      	b.n	8004d5e <_free_r+0x26>
 8004db0:	6825      	ldr	r5, [r4, #0]
 8004db2:	1961      	adds	r1, r4, r5
 8004db4:	428b      	cmp	r3, r1
 8004db6:	bf04      	itt	eq
 8004db8:	6819      	ldreq	r1, [r3, #0]
 8004dba:	685b      	ldreq	r3, [r3, #4]
 8004dbc:	6063      	str	r3, [r4, #4]
 8004dbe:	bf04      	itt	eq
 8004dc0:	1949      	addeq	r1, r1, r5
 8004dc2:	6021      	streq	r1, [r4, #0]
 8004dc4:	6054      	str	r4, [r2, #4]
 8004dc6:	e7ca      	b.n	8004d5e <_free_r+0x26>
 8004dc8:	b003      	add	sp, #12
 8004dca:	bd30      	pop	{r4, r5, pc}
 8004dcc:	200001dc 	.word	0x200001dc

08004dd0 <sbrk_aligned>:
 8004dd0:	b570      	push	{r4, r5, r6, lr}
 8004dd2:	4e0e      	ldr	r6, [pc, #56]	; (8004e0c <sbrk_aligned+0x3c>)
 8004dd4:	460c      	mov	r4, r1
 8004dd6:	6831      	ldr	r1, [r6, #0]
 8004dd8:	4605      	mov	r5, r0
 8004dda:	b911      	cbnz	r1, 8004de2 <sbrk_aligned+0x12>
 8004ddc:	f000 f8bc 	bl	8004f58 <_sbrk_r>
 8004de0:	6030      	str	r0, [r6, #0]
 8004de2:	4621      	mov	r1, r4
 8004de4:	4628      	mov	r0, r5
 8004de6:	f000 f8b7 	bl	8004f58 <_sbrk_r>
 8004dea:	1c43      	adds	r3, r0, #1
 8004dec:	d00a      	beq.n	8004e04 <sbrk_aligned+0x34>
 8004dee:	1cc4      	adds	r4, r0, #3
 8004df0:	f024 0403 	bic.w	r4, r4, #3
 8004df4:	42a0      	cmp	r0, r4
 8004df6:	d007      	beq.n	8004e08 <sbrk_aligned+0x38>
 8004df8:	1a21      	subs	r1, r4, r0
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	f000 f8ac 	bl	8004f58 <_sbrk_r>
 8004e00:	3001      	adds	r0, #1
 8004e02:	d101      	bne.n	8004e08 <sbrk_aligned+0x38>
 8004e04:	f04f 34ff 	mov.w	r4, #4294967295
 8004e08:	4620      	mov	r0, r4
 8004e0a:	bd70      	pop	{r4, r5, r6, pc}
 8004e0c:	200001e0 	.word	0x200001e0

08004e10 <_malloc_r>:
 8004e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e14:	1ccd      	adds	r5, r1, #3
 8004e16:	f025 0503 	bic.w	r5, r5, #3
 8004e1a:	3508      	adds	r5, #8
 8004e1c:	2d0c      	cmp	r5, #12
 8004e1e:	bf38      	it	cc
 8004e20:	250c      	movcc	r5, #12
 8004e22:	2d00      	cmp	r5, #0
 8004e24:	4607      	mov	r7, r0
 8004e26:	db01      	blt.n	8004e2c <_malloc_r+0x1c>
 8004e28:	42a9      	cmp	r1, r5
 8004e2a:	d905      	bls.n	8004e38 <_malloc_r+0x28>
 8004e2c:	230c      	movs	r3, #12
 8004e2e:	603b      	str	r3, [r7, #0]
 8004e30:	2600      	movs	r6, #0
 8004e32:	4630      	mov	r0, r6
 8004e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e38:	4e2e      	ldr	r6, [pc, #184]	; (8004ef4 <_malloc_r+0xe4>)
 8004e3a:	f000 f89d 	bl	8004f78 <__malloc_lock>
 8004e3e:	6833      	ldr	r3, [r6, #0]
 8004e40:	461c      	mov	r4, r3
 8004e42:	bb34      	cbnz	r4, 8004e92 <_malloc_r+0x82>
 8004e44:	4629      	mov	r1, r5
 8004e46:	4638      	mov	r0, r7
 8004e48:	f7ff ffc2 	bl	8004dd0 <sbrk_aligned>
 8004e4c:	1c43      	adds	r3, r0, #1
 8004e4e:	4604      	mov	r4, r0
 8004e50:	d14d      	bne.n	8004eee <_malloc_r+0xde>
 8004e52:	6834      	ldr	r4, [r6, #0]
 8004e54:	4626      	mov	r6, r4
 8004e56:	2e00      	cmp	r6, #0
 8004e58:	d140      	bne.n	8004edc <_malloc_r+0xcc>
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	4631      	mov	r1, r6
 8004e5e:	4638      	mov	r0, r7
 8004e60:	eb04 0803 	add.w	r8, r4, r3
 8004e64:	f000 f878 	bl	8004f58 <_sbrk_r>
 8004e68:	4580      	cmp	r8, r0
 8004e6a:	d13a      	bne.n	8004ee2 <_malloc_r+0xd2>
 8004e6c:	6821      	ldr	r1, [r4, #0]
 8004e6e:	3503      	adds	r5, #3
 8004e70:	1a6d      	subs	r5, r5, r1
 8004e72:	f025 0503 	bic.w	r5, r5, #3
 8004e76:	3508      	adds	r5, #8
 8004e78:	2d0c      	cmp	r5, #12
 8004e7a:	bf38      	it	cc
 8004e7c:	250c      	movcc	r5, #12
 8004e7e:	4629      	mov	r1, r5
 8004e80:	4638      	mov	r0, r7
 8004e82:	f7ff ffa5 	bl	8004dd0 <sbrk_aligned>
 8004e86:	3001      	adds	r0, #1
 8004e88:	d02b      	beq.n	8004ee2 <_malloc_r+0xd2>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	442b      	add	r3, r5
 8004e8e:	6023      	str	r3, [r4, #0]
 8004e90:	e00e      	b.n	8004eb0 <_malloc_r+0xa0>
 8004e92:	6822      	ldr	r2, [r4, #0]
 8004e94:	1b52      	subs	r2, r2, r5
 8004e96:	d41e      	bmi.n	8004ed6 <_malloc_r+0xc6>
 8004e98:	2a0b      	cmp	r2, #11
 8004e9a:	d916      	bls.n	8004eca <_malloc_r+0xba>
 8004e9c:	1961      	adds	r1, r4, r5
 8004e9e:	42a3      	cmp	r3, r4
 8004ea0:	6025      	str	r5, [r4, #0]
 8004ea2:	bf18      	it	ne
 8004ea4:	6059      	strne	r1, [r3, #4]
 8004ea6:	6863      	ldr	r3, [r4, #4]
 8004ea8:	bf08      	it	eq
 8004eaa:	6031      	streq	r1, [r6, #0]
 8004eac:	5162      	str	r2, [r4, r5]
 8004eae:	604b      	str	r3, [r1, #4]
 8004eb0:	4638      	mov	r0, r7
 8004eb2:	f104 060b 	add.w	r6, r4, #11
 8004eb6:	f000 f865 	bl	8004f84 <__malloc_unlock>
 8004eba:	f026 0607 	bic.w	r6, r6, #7
 8004ebe:	1d23      	adds	r3, r4, #4
 8004ec0:	1af2      	subs	r2, r6, r3
 8004ec2:	d0b6      	beq.n	8004e32 <_malloc_r+0x22>
 8004ec4:	1b9b      	subs	r3, r3, r6
 8004ec6:	50a3      	str	r3, [r4, r2]
 8004ec8:	e7b3      	b.n	8004e32 <_malloc_r+0x22>
 8004eca:	6862      	ldr	r2, [r4, #4]
 8004ecc:	42a3      	cmp	r3, r4
 8004ece:	bf0c      	ite	eq
 8004ed0:	6032      	streq	r2, [r6, #0]
 8004ed2:	605a      	strne	r2, [r3, #4]
 8004ed4:	e7ec      	b.n	8004eb0 <_malloc_r+0xa0>
 8004ed6:	4623      	mov	r3, r4
 8004ed8:	6864      	ldr	r4, [r4, #4]
 8004eda:	e7b2      	b.n	8004e42 <_malloc_r+0x32>
 8004edc:	4634      	mov	r4, r6
 8004ede:	6876      	ldr	r6, [r6, #4]
 8004ee0:	e7b9      	b.n	8004e56 <_malloc_r+0x46>
 8004ee2:	230c      	movs	r3, #12
 8004ee4:	603b      	str	r3, [r7, #0]
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	f000 f84c 	bl	8004f84 <__malloc_unlock>
 8004eec:	e7a1      	b.n	8004e32 <_malloc_r+0x22>
 8004eee:	6025      	str	r5, [r4, #0]
 8004ef0:	e7de      	b.n	8004eb0 <_malloc_r+0xa0>
 8004ef2:	bf00      	nop
 8004ef4:	200001dc 	.word	0x200001dc

08004ef8 <_realloc_r>:
 8004ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004efc:	4680      	mov	r8, r0
 8004efe:	4614      	mov	r4, r2
 8004f00:	460e      	mov	r6, r1
 8004f02:	b921      	cbnz	r1, 8004f0e <_realloc_r+0x16>
 8004f04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f08:	4611      	mov	r1, r2
 8004f0a:	f7ff bf81 	b.w	8004e10 <_malloc_r>
 8004f0e:	b92a      	cbnz	r2, 8004f1c <_realloc_r+0x24>
 8004f10:	f7ff ff12 	bl	8004d38 <_free_r>
 8004f14:	4625      	mov	r5, r4
 8004f16:	4628      	mov	r0, r5
 8004f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f1c:	f000 f838 	bl	8004f90 <_malloc_usable_size_r>
 8004f20:	4284      	cmp	r4, r0
 8004f22:	4607      	mov	r7, r0
 8004f24:	d802      	bhi.n	8004f2c <_realloc_r+0x34>
 8004f26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f2a:	d812      	bhi.n	8004f52 <_realloc_r+0x5a>
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	4640      	mov	r0, r8
 8004f30:	f7ff ff6e 	bl	8004e10 <_malloc_r>
 8004f34:	4605      	mov	r5, r0
 8004f36:	2800      	cmp	r0, #0
 8004f38:	d0ed      	beq.n	8004f16 <_realloc_r+0x1e>
 8004f3a:	42bc      	cmp	r4, r7
 8004f3c:	4622      	mov	r2, r4
 8004f3e:	4631      	mov	r1, r6
 8004f40:	bf28      	it	cs
 8004f42:	463a      	movcs	r2, r7
 8004f44:	f7ff fed0 	bl	8004ce8 <memcpy>
 8004f48:	4631      	mov	r1, r6
 8004f4a:	4640      	mov	r0, r8
 8004f4c:	f7ff fef4 	bl	8004d38 <_free_r>
 8004f50:	e7e1      	b.n	8004f16 <_realloc_r+0x1e>
 8004f52:	4635      	mov	r5, r6
 8004f54:	e7df      	b.n	8004f16 <_realloc_r+0x1e>
	...

08004f58 <_sbrk_r>:
 8004f58:	b538      	push	{r3, r4, r5, lr}
 8004f5a:	4d06      	ldr	r5, [pc, #24]	; (8004f74 <_sbrk_r+0x1c>)
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	4604      	mov	r4, r0
 8004f60:	4608      	mov	r0, r1
 8004f62:	602b      	str	r3, [r5, #0]
 8004f64:	f7fb fe38 	bl	8000bd8 <_sbrk>
 8004f68:	1c43      	adds	r3, r0, #1
 8004f6a:	d102      	bne.n	8004f72 <_sbrk_r+0x1a>
 8004f6c:	682b      	ldr	r3, [r5, #0]
 8004f6e:	b103      	cbz	r3, 8004f72 <_sbrk_r+0x1a>
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	bd38      	pop	{r3, r4, r5, pc}
 8004f74:	200001e4 	.word	0x200001e4

08004f78 <__malloc_lock>:
 8004f78:	4801      	ldr	r0, [pc, #4]	; (8004f80 <__malloc_lock+0x8>)
 8004f7a:	f000 b811 	b.w	8004fa0 <__retarget_lock_acquire_recursive>
 8004f7e:	bf00      	nop
 8004f80:	200001e8 	.word	0x200001e8

08004f84 <__malloc_unlock>:
 8004f84:	4801      	ldr	r0, [pc, #4]	; (8004f8c <__malloc_unlock+0x8>)
 8004f86:	f000 b80c 	b.w	8004fa2 <__retarget_lock_release_recursive>
 8004f8a:	bf00      	nop
 8004f8c:	200001e8 	.word	0x200001e8

08004f90 <_malloc_usable_size_r>:
 8004f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f94:	1f18      	subs	r0, r3, #4
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	bfbc      	itt	lt
 8004f9a:	580b      	ldrlt	r3, [r1, r0]
 8004f9c:	18c0      	addlt	r0, r0, r3
 8004f9e:	4770      	bx	lr

08004fa0 <__retarget_lock_acquire_recursive>:
 8004fa0:	4770      	bx	lr

08004fa2 <__retarget_lock_release_recursive>:
 8004fa2:	4770      	bx	lr

08004fa4 <_init>:
 8004fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa6:	bf00      	nop
 8004fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004faa:	bc08      	pop	{r3}
 8004fac:	469e      	mov	lr, r3
 8004fae:	4770      	bx	lr

08004fb0 <_fini>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	bf00      	nop
 8004fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb6:	bc08      	pop	{r3}
 8004fb8:	469e      	mov	lr, r3
 8004fba:	4770      	bx	lr
